
WIFI-SOCKET-HOST-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bc80  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040bc80  0040bc80  0001bc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008bc  20400000  0040bc88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000d44  204008bc  0040c544  000208bc  2**2
                  ALLOC
  4 .stack        00002000  20401600  0040d288  000208bc  2**0
                  ALLOC
  5 .heap         00000200  20403600  0040f288  000208bc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000208bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001bb23  00000000  00000000  00020943  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e5b  00000000  00000000  0003c466  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d9e4  00000000  00000000  000402c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001060  00000000  00000000  0004dca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001078  00000000  00000000  0004ed05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024393  00000000  00000000  0004fd7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000152ad  00000000  00000000  00074110  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00091a9f  00000000  00000000  000893bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003aec  00000000  00000000  0011ae5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403600 	.word	0x20403600
  400004:	00403719 	.word	0x00403719
  400008:	00403715 	.word	0x00403715
  40000c:	00403715 	.word	0x00403715
  400010:	00403715 	.word	0x00403715
  400014:	00403715 	.word	0x00403715
  400018:	00403715 	.word	0x00403715
	...
  40002c:	00403715 	.word	0x00403715
  400030:	00403715 	.word	0x00403715
  400034:	00000000 	.word	0x00000000
  400038:	00403715 	.word	0x00403715
  40003c:	00403715 	.word	0x00403715
  400040:	00403715 	.word	0x00403715
  400044:	00403715 	.word	0x00403715
  400048:	00403715 	.word	0x00403715
  40004c:	00403715 	.word	0x00403715
  400050:	00403715 	.word	0x00403715
  400054:	00403715 	.word	0x00403715
  400058:	00403715 	.word	0x00403715
  40005c:	00403715 	.word	0x00403715
  400060:	00403715 	.word	0x00403715
  400064:	00000000 	.word	0x00000000
  400068:	00403205 	.word	0x00403205
  40006c:	00403219 	.word	0x00403219
  400070:	0040322d 	.word	0x0040322d
  400074:	00403715 	.word	0x00403715
  400078:	00403715 	.word	0x00403715
  40007c:	00403715 	.word	0x00403715
  400080:	00403241 	.word	0x00403241
  400084:	00403255 	.word	0x00403255
  400088:	00403715 	.word	0x00403715
  40008c:	00403715 	.word	0x00403715
  400090:	00403715 	.word	0x00403715
  400094:	00403715 	.word	0x00403715
  400098:	00403715 	.word	0x00403715
  40009c:	00403715 	.word	0x00403715
  4000a0:	00403715 	.word	0x00403715
  4000a4:	00403715 	.word	0x00403715
  4000a8:	00403715 	.word	0x00403715
  4000ac:	00403715 	.word	0x00403715
  4000b0:	00403715 	.word	0x00403715
  4000b4:	00403715 	.word	0x00403715
  4000b8:	00403715 	.word	0x00403715
  4000bc:	00403715 	.word	0x00403715
  4000c0:	00403715 	.word	0x00403715
  4000c4:	00403715 	.word	0x00403715
  4000c8:	00403715 	.word	0x00403715
  4000cc:	00403715 	.word	0x00403715
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00403715 	.word	0x00403715
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00403715 	.word	0x00403715
  4000e0:	00403715 	.word	0x00403715
  4000e4:	00403715 	.word	0x00403715
  4000e8:	00403715 	.word	0x00403715
  4000ec:	00403715 	.word	0x00403715
  4000f0:	00403715 	.word	0x00403715
  4000f4:	00403715 	.word	0x00403715
  4000f8:	00403715 	.word	0x00403715
  4000fc:	00403715 	.word	0x00403715
  400100:	00403715 	.word	0x00403715
  400104:	00403715 	.word	0x00403715
  400108:	00403715 	.word	0x00403715
  40010c:	00403715 	.word	0x00403715
  400110:	00403715 	.word	0x00403715
	...
  400120:	00403715 	.word	0x00403715
  400124:	00403715 	.word	0x00403715
  400128:	00403715 	.word	0x00403715
  40012c:	00403715 	.word	0x00403715
  400130:	00403715 	.word	0x00403715
  400134:	00000000 	.word	0x00000000
  400138:	00403715 	.word	0x00403715
  40013c:	00403715 	.word	0x00403715

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008bc 	.word	0x204008bc
  40015c:	00000000 	.word	0x00000000
  400160:	0040bc88 	.word	0x0040bc88

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	204008c0 	.word	0x204008c0
  400190:	0040bc88 	.word	0x0040bc88
  400194:	0040bc88 	.word	0x0040bc88
  400198:	00000000 	.word	0x00000000

0040019c <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  40019c:	2810      	cmp	r0, #16
  40019e:	d108      	bne.n	4001b2 <chip_isr+0x16>
  4001a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4001a4:	d105      	bne.n	4001b2 <chip_isr+0x16>
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  4001a6:	b508      	push	{r3, lr}
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
		if (gpfIsr) {
  4001a8:	4b02      	ldr	r3, [pc, #8]	; (4001b4 <chip_isr+0x18>)
  4001aa:	681b      	ldr	r3, [r3, #0]
  4001ac:	b103      	cbz	r3, 4001b0 <chip_isr+0x14>
			gpfIsr();
  4001ae:	4798      	blx	r3
  4001b0:	bd08      	pop	{r3, pc}
  4001b2:	4770      	bx	lr
  4001b4:	204008d8 	.word	0x204008d8

004001b8 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4001b8:	b140      	cbz	r0, 4001cc <nm_bsp_sleep+0x14>
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  4001ba:	b570      	push	{r4, r5, r6, lr}
  4001bc:	4604      	mov	r4, r0
	while(u32TimeMsec--) {
		delay_ms(4);
  4001be:	4e04      	ldr	r6, [pc, #16]	; (4001d0 <nm_bsp_sleep+0x18>)
  4001c0:	4d04      	ldr	r5, [pc, #16]	; (4001d4 <nm_bsp_sleep+0x1c>)
  4001c2:	4630      	mov	r0, r6
  4001c4:	47a8      	blx	r5
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4001c6:	3c01      	subs	r4, #1
  4001c8:	d1fb      	bne.n	4001c2 <nm_bsp_sleep+0xa>
  4001ca:	bd70      	pop	{r4, r5, r6, pc}
  4001cc:	4770      	bx	lr
  4001ce:	bf00      	nop
  4001d0:	00031635 	.word	0x00031635
  4001d4:	20400001 	.word	0x20400001

004001d8 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset WINC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  4001d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4001dc:	4f09      	ldr	r7, [pc, #36]	; (400204 <nm_bsp_reset+0x2c>)
  4001de:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4001e2:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4001e6:	4d08      	ldr	r5, [pc, #32]	; (400208 <nm_bsp_reset+0x30>)
  4001e8:	2608      	movs	r6, #8
  4001ea:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
	nm_bsp_sleep(100);
  4001ec:	2064      	movs	r0, #100	; 0x64
  4001ee:	4c07      	ldr	r4, [pc, #28]	; (40020c <nm_bsp_reset+0x34>)
  4001f0:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001f2:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  4001f6:	2064      	movs	r0, #100	; 0x64
  4001f8:	47a0      	blx	r4
  4001fa:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  4001fc:	2064      	movs	r0, #100	; 0x64
  4001fe:	47a0      	blx	r4
  400200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400204:	400e1200 	.word	0x400e1200
  400208:	400e1000 	.word	0x400e1000
  40020c:	004001b9 	.word	0x004001b9

00400210 <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  400210:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  400212:	2200      	movs	r2, #0
  400214:	4b14      	ldr	r3, [pc, #80]	; (400268 <nm_bsp_init+0x58>)
  400216:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400218:	200a      	movs	r0, #10
  40021a:	4c14      	ldr	r4, [pc, #80]	; (40026c <nm_bsp_init+0x5c>)
  40021c:	47a0      	blx	r4
  40021e:	200b      	movs	r0, #11
  400220:	47a0      	blx	r4
  400222:	200c      	movs	r0, #12
  400224:	47a0      	blx	r4
  400226:	2010      	movs	r0, #16
  400228:	47a0      	blx	r4
  40022a:	2011      	movs	r0, #17
  40022c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40022e:	4b10      	ldr	r3, [pc, #64]	; (400270 <nm_bsp_init+0x60>)
  400230:	2208      	movs	r2, #8
  400232:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400234:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400238:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40023a:	4a0e      	ldr	r2, [pc, #56]	; (400274 <nm_bsp_init+0x64>)
  40023c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400240:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400242:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400246:	6311      	str	r1, [r2, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400248:	2204      	movs	r2, #4
  40024a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40024c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400250:	631a      	str	r2, [r3, #48]	; 0x30

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  400252:	4b09      	ldr	r3, [pc, #36]	; (400278 <nm_bsp_init+0x68>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	f013 0f01 	tst.w	r3, #1
  40025a:	d001      	beq.n	400260 <nm_bsp_init+0x50>
  40025c:	4b06      	ldr	r3, [pc, #24]	; (400278 <nm_bsp_init+0x68>)
  40025e:	681b      	ldr	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  400260:	4b06      	ldr	r3, [pc, #24]	; (40027c <nm_bsp_init+0x6c>)
  400262:	4798      	blx	r3

	return 0;
}
  400264:	2000      	movs	r0, #0
  400266:	bd10      	pop	{r4, pc}
  400268:	204008d8 	.word	0x204008d8
  40026c:	00403415 	.word	0x00403415
  400270:	400e1000 	.word	0x400e1000
  400274:	400e1200 	.word	0x400e1200
  400278:	e000e010 	.word	0xe000e010
  40027c:	004001d9 	.word	0x004001d9

00400280 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  400280:	b530      	push	{r4, r5, lr}
  400282:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  400284:	4b14      	ldr	r3, [pc, #80]	; (4002d8 <nm_bsp_register_isr+0x58>)
  400286:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  400288:	2010      	movs	r0, #16
  40028a:	4b14      	ldr	r3, [pc, #80]	; (4002dc <nm_bsp_register_isr+0x5c>)
  40028c:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  40028e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400292:	207c      	movs	r0, #124	; 0x7c
  400294:	4b12      	ldr	r3, [pc, #72]	; (4002e0 <nm_bsp_register_isr+0x60>)
  400296:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  400298:	4c12      	ldr	r4, [pc, #72]	; (4002e4 <nm_bsp_register_isr+0x64>)
  40029a:	2201      	movs	r2, #1
  40029c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002a0:	4620      	mov	r0, r4
  4002a2:	4b11      	ldr	r3, [pc, #68]	; (4002e8 <nm_bsp_register_isr+0x68>)
  4002a4:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  4002a6:	4b11      	ldr	r3, [pc, #68]	; (4002ec <nm_bsp_register_isr+0x6c>)
  4002a8:	9300      	str	r3, [sp, #0]
  4002aa:	2351      	movs	r3, #81	; 0x51
  4002ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002b0:	2110      	movs	r1, #16
  4002b2:	4620      	mov	r0, r4
  4002b4:	4d0e      	ldr	r5, [pc, #56]	; (4002f0 <nm_bsp_register_isr+0x70>)
  4002b6:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4002b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002bc:	4620      	mov	r0, r4
  4002be:	4b0d      	ldr	r3, [pc, #52]	; (4002f4 <nm_bsp_register_isr+0x74>)
  4002c0:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4002c6:	4b0c      	ldr	r3, [pc, #48]	; (4002f8 <nm_bsp_register_isr+0x78>)
  4002c8:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  4002ca:	2200      	movs	r2, #0
  4002cc:	2110      	movs	r1, #16
  4002ce:	4620      	mov	r0, r4
  4002d0:	4b0a      	ldr	r3, [pc, #40]	; (4002fc <nm_bsp_register_isr+0x7c>)
  4002d2:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  4002d4:	b003      	add	sp, #12
  4002d6:	bd30      	pop	{r4, r5, pc}
  4002d8:	204008d8 	.word	0x204008d8
  4002dc:	00403415 	.word	0x00403415
  4002e0:	00403015 	.word	0x00403015
  4002e4:	400e1400 	.word	0x400e1400
  4002e8:	00402ec9 	.word	0x00402ec9
  4002ec:	0040019d 	.word	0x0040019d
  4002f0:	00403199 	.word	0x00403199
  4002f4:	00403005 	.word	0x00403005
  4002f8:	e000e100 	.word	0xe000e100
  4002fc:	00403269 	.word	0x00403269

00400300 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  400300:	b508      	push	{r3, lr}
	if (u8Enable) {
  400302:	b128      	cbz	r0, 400310 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400304:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400308:	4804      	ldr	r0, [pc, #16]	; (40031c <nm_bsp_interrupt_ctrl+0x1c>)
  40030a:	4b05      	ldr	r3, [pc, #20]	; (400320 <nm_bsp_interrupt_ctrl+0x20>)
  40030c:	4798      	blx	r3
  40030e:	bd08      	pop	{r3, pc}
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400310:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400314:	4801      	ldr	r0, [pc, #4]	; (40031c <nm_bsp_interrupt_ctrl+0x1c>)
  400316:	4b03      	ldr	r3, [pc, #12]	; (400324 <nm_bsp_interrupt_ctrl+0x24>)
  400318:	4798      	blx	r3
  40031a:	bd08      	pop	{r3, pc}
  40031c:	400e1400 	.word	0x400e1400
  400320:	00403005 	.word	0x00403005
  400324:	00403009 	.word	0x00403009

00400328 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  400328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40032a:	4c39      	ldr	r4, [pc, #228]	; (400410 <nm_bus_init+0xe8>)
  40032c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400330:	6621      	str	r1, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400332:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400336:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400338:	6261      	str	r1, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40033a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40033e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400340:	430b      	orrs	r3, r1
  400342:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400344:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400346:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40034a:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40034c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400350:	6622      	str	r2, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400352:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400356:	6562      	str	r2, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400358:	6262      	str	r2, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40035a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40035e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400360:	4313      	orrs	r3, r2
  400362:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400364:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40036a:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40036c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  400370:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400372:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400376:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400378:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40037a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40037e:	6f20      	ldr	r0, [r4, #112]	; 0x70
  400380:	4318      	orrs	r0, r3
  400382:	6720      	str	r0, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400384:	6f60      	ldr	r0, [r4, #116]	; 0x74
  400386:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40038a:	6760      	str	r0, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40038c:	6061      	str	r1, [r4, #4]
  40038e:	6062      	str	r2, [r4, #4]
  400390:	6063      	str	r3, [r4, #4]
  400392:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  400396:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  400398:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  40039a:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  40039c:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  40039e:	4d1d      	ldr	r5, [pc, #116]	; (400414 <nm_bus_init+0xec>)
  4003a0:	4628      	mov	r0, r5
  4003a2:	4b1d      	ldr	r3, [pc, #116]	; (400418 <nm_bus_init+0xf0>)
  4003a4:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4003a6:	2302      	movs	r3, #2
  4003a8:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4003aa:	2380      	movs	r3, #128	; 0x80
  4003ac:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4003ae:	686b      	ldr	r3, [r5, #4]
  4003b0:	f043 0301 	orr.w	r3, r3, #1
  4003b4:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4003b6:	686b      	ldr	r3, [r5, #4]
  4003b8:	f043 0310 	orr.w	r3, r3, #16
  4003bc:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  4003be:	2101      	movs	r1, #1
  4003c0:	4628      	mov	r0, r5
  4003c2:	4b16      	ldr	r3, [pc, #88]	; (40041c <nm_bus_init+0xf4>)
  4003c4:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  4003c6:	2200      	movs	r2, #0
  4003c8:	2101      	movs	r1, #1
  4003ca:	4628      	mov	r0, r5
  4003cc:	4b14      	ldr	r3, [pc, #80]	; (400420 <nm_bus_init+0xf8>)
  4003ce:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  4003d0:	2201      	movs	r2, #1
  4003d2:	4611      	mov	r1, r2
  4003d4:	4628      	mov	r0, r5
  4003d6:	4b13      	ldr	r3, [pc, #76]	; (400424 <nm_bus_init+0xfc>)
  4003d8:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  4003da:	2200      	movs	r2, #0
  4003dc:	2101      	movs	r1, #1
  4003de:	4628      	mov	r0, r5
  4003e0:	4b11      	ldr	r3, [pc, #68]	; (400428 <nm_bus_init+0x100>)
  4003e2:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  4003e4:	4911      	ldr	r1, [pc, #68]	; (40042c <nm_bus_init+0x104>)
  4003e6:	4812      	ldr	r0, [pc, #72]	; (400430 <nm_bus_init+0x108>)
  4003e8:	4b12      	ldr	r3, [pc, #72]	; (400434 <nm_bus_init+0x10c>)
  4003ea:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
	spi_set_clock_polarity(CONF_WINC_SPI,
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  4003ec:	b2c2      	uxtb	r2, r0
  4003ee:	2101      	movs	r1, #1
  4003f0:	4628      	mov	r0, r5
  4003f2:	4b11      	ldr	r3, [pc, #68]	; (400438 <nm_bus_init+0x110>)
  4003f4:	4798      	blx	r3
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  4003f6:	2300      	movs	r3, #0
  4003f8:	461a      	mov	r2, r3
  4003fa:	2101      	movs	r1, #1
  4003fc:	4628      	mov	r0, r5
  4003fe:	4f0f      	ldr	r7, [pc, #60]	; (40043c <nm_bus_init+0x114>)
  400400:	47b8      	blx	r7
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400402:	2301      	movs	r3, #1
  400404:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  400406:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  400408:	4b0d      	ldr	r3, [pc, #52]	; (400440 <nm_bus_init+0x118>)
  40040a:	4798      	blx	r3
#endif
	return result;
}
  40040c:	2000      	movs	r0, #0
  40040e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400410:	400e1400 	.word	0x400e1400
  400414:	40008000 	.word	0x40008000
  400418:	00403469 	.word	0x00403469
  40041c:	00403495 	.word	0x00403495
  400420:	00403519 	.word	0x00403519
  400424:	00403539 	.word	0x00403539
  400428:	00403559 	.word	0x00403559
  40042c:	11e1a300 	.word	0x11e1a300
  400430:	02dc6c00 	.word	0x02dc6c00
  400434:	0040356d 	.word	0x0040356d
  400438:	00403585 	.word	0x00403585
  40043c:	004035b1 	.word	0x004035b1
  400440:	004001d9 	.word	0x004001d9

00400444 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  400444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400448:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  40044a:	2803      	cmp	r0, #3
  40044c:	d141      	bne.n	4004d2 <nm_bus_ioctl+0x8e>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  40044e:	680e      	ldr	r6, [r1, #0]
  400450:	684d      	ldr	r5, [r1, #4]
  400452:	890c      	ldrh	r4, [r1, #8]
	uint16 cpu16Sz		= u16Sz;
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
  400454:	2300      	movs	r3, #0
  400456:	f88d 3004 	strb.w	r3, [sp, #4]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
  40045a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t uc_pcs;

	if (!pu8Mosi) {
  40045e:	b136      	cbz	r6, 40046e <nm_bus_ioctl+0x2a>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
  400460:	2d00      	cmp	r5, #0
  400462:	d133      	bne.n	4004cc <nm_bus_ioctl+0x88>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
  400464:	f04f 0801 	mov.w	r8, #1
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  400468:	4699      	mov	r9, r3
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
  40046a:	ad01      	add	r5, sp, #4
  40046c:	e004      	b.n	400478 <nm_bus_ioctl+0x34>
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40046e:	f04f 0800 	mov.w	r8, #0
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
  400472:	f04f 0901 	mov.w	r9, #1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
  400476:	ae01      	add	r6, sp, #4
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
  400478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40047c:	4b1c      	ldr	r3, [pc, #112]	; (4004f0 <nm_bus_ioctl+0xac>)
  40047e:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  400480:	b1f4      	cbz	r4, 4004c0 <nm_bus_ioctl+0x7c>
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  400482:	4f1c      	ldr	r7, [pc, #112]	; (4004f4 <nm_bus_ioctl+0xb0>)
  400484:	f8df b084 	ldr.w	fp, [pc, #132]	; 40050c <nm_bus_ioctl+0xc8>
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400488:	f8df a084 	ldr.w	sl, [pc, #132]	; 400510 <nm_bus_ioctl+0xcc>
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40048c:	2300      	movs	r3, #0
  40048e:	461a      	mov	r2, r3
  400490:	7831      	ldrb	r1, [r6, #0]
  400492:	4638      	mov	r0, r7
  400494:	47d8      	blx	fp
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400496:	f10d 0205 	add.w	r2, sp, #5
  40049a:	f10d 0106 	add.w	r1, sp, #6
  40049e:	4638      	mov	r0, r7
  4004a0:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  4004a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4004a6:	702b      	strb	r3, [r5, #0]

		u16Sz--;
  4004a8:	3c01      	subs	r4, #1
  4004aa:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  4004ac:	f1b8 0f00 	cmp.w	r8, #0
  4004b0:	d100      	bne.n	4004b4 <nm_bus_ioctl+0x70>
			pu8Miso++;
  4004b2:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  4004b4:	f1b9 0f00 	cmp.w	r9, #0
  4004b8:	d100      	bne.n	4004bc <nm_bus_ioctl+0x78>
			pu8Mosi++;
  4004ba:	3601      	adds	r6, #1
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
  4004bc:	2c00      	cmp	r4, #0
  4004be:	d1e5      	bne.n	40048c <nm_bus_ioctl+0x48>
		if (!u8SkipMiso)
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}
	SPI_DEASSERT_CS();
  4004c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4004c4:	4b0a      	ldr	r3, [pc, #40]	; (4004f0 <nm_bus_ioctl+0xac>)
  4004c6:	631a      	str	r2, [r3, #48]	; 0x30
	printf(" / MISO: 0x");
	for(i = 0; i<cpu16Sz; i++)
		printf("%x", *(cppu8Miso+i) );
	printf(" / Size %d \n", cpu16Sz);
*/
	return M2M_SUCCESS;
  4004c8:	2000      	movs	r0, #0
  4004ca:	e00e      	b.n	4004ea <nm_bus_ioctl+0xa6>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
  4004cc:	f06f 0005 	mvn.w	r0, #5
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
  4004d0:	e00b      	b.n	4004ea <nm_bus_ioctl+0xa6>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("Invalid IOCTL command!\n");
  4004d2:	f240 121f 	movw	r2, #287	; 0x11f
  4004d6:	4908      	ldr	r1, [pc, #32]	; (4004f8 <nm_bus_ioctl+0xb4>)
  4004d8:	4808      	ldr	r0, [pc, #32]	; (4004fc <nm_bus_ioctl+0xb8>)
  4004da:	4c09      	ldr	r4, [pc, #36]	; (400500 <nm_bus_ioctl+0xbc>)
  4004dc:	47a0      	blx	r4
  4004de:	4809      	ldr	r0, [pc, #36]	; (400504 <nm_bus_ioctl+0xc0>)
  4004e0:	47a0      	blx	r4
  4004e2:	4809      	ldr	r0, [pc, #36]	; (400508 <nm_bus_ioctl+0xc4>)
  4004e4:	47a0      	blx	r4
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
  4004e6:	f04f 30ff 	mov.w	r0, #4294967295
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4004ea:	b003      	add	sp, #12
  4004ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4004f0:	400e1400 	.word	0x400e1400
  4004f4:	40008000 	.word	0x40008000
  4004f8:	0040a9bc 	.word	0x0040a9bc
  4004fc:	0040a98c 	.word	0x0040a98c
  400500:	00403f99 	.word	0x00403f99
  400504:	0040a9a0 	.word	0x0040a9a0
  400508:	0040a9b8 	.word	0x0040a9b8
  40050c:	004034e1 	.word	0x004034e1
  400510:	004034ad 	.word	0x004034ad

00400514 <nm_bus_deinit>:
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400514:	2202      	movs	r2, #2
  400516:	4b0e      	ldr	r3, [pc, #56]	; (400550 <nm_bus_deinit+0x3c>)
  400518:	601a      	str	r2, [r3, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40051a:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  40051e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400522:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400526:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400528:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40052c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400530:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400532:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400536:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40053a:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40053c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400544:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400546:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  40054a:	2000      	movs	r0, #0
  40054c:	4770      	bx	lr
  40054e:	bf00      	nop
  400550:	40008000 	.word	0x40008000

00400554 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  400554:	b13a      	cbz	r2, 400566 <m2m_memcpy+0x12>
  400556:	3901      	subs	r1, #1
  400558:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  40055a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40055e:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  400562:	4290      	cmp	r0, r2
  400564:	d1f9      	bne.n	40055a <m2m_memcpy+0x6>
  400566:	4770      	bx	lr

00400568 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  400568:	b122      	cbz	r2, 400574 <m2m_memset+0xc>
  40056a:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  40056c:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  400570:	4290      	cmp	r0, r2
  400572:	d1fb      	bne.n	40056c <m2m_memset+0x4>
  400574:	4770      	bx	lr
  400576:	bf00      	nop

00400578 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
  400578:	4603      	mov	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
  40057a:	7802      	ldrb	r2, [r0, #0]
  40057c:	b13a      	cbz	r2, 40058e <m2m_strlen+0x16>
  40057e:	2000      	movs	r0, #0
	{
		u16StrLen ++;
  400580:	3001      	adds	r0, #1
  400582:	b280      	uxth	r0, r0
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  400584:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  400588:	2a00      	cmp	r2, #0
  40058a:	d1f9      	bne.n	400580 <m2m_strlen+0x8>
  40058c:	4770      	bx	lr
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
  40058e:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
  400590:	4770      	bx	lr
  400592:	bf00      	nop

00400594 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  400594:	4a02      	ldr	r2, [pc, #8]	; (4005a0 <isr+0xc>)
  400596:	7813      	ldrb	r3, [r2, #0]
  400598:	3301      	adds	r3, #1
  40059a:	b2db      	uxtb	r3, r3
  40059c:	7013      	strb	r3, [r2, #0]
  40059e:	4770      	bx	lr
  4005a0:	204008e4 	.word	0x204008e4

004005a4 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4005a4:	4770      	bx	lr
  4005a6:	bf00      	nop

004005a8 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
  4005a8:	b500      	push	{lr}
  4005aa:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  4005ac:	2001      	movs	r0, #1
  4005ae:	4b0b      	ldr	r3, [pc, #44]	; (4005dc <hif_set_rx_done+0x34>)
  4005b0:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4005b2:	a901      	add	r1, sp, #4
  4005b4:	f241 0070 	movw	r0, #4208	; 0x1070
  4005b8:	4b09      	ldr	r3, [pc, #36]	; (4005e0 <hif_set_rx_done+0x38>)
  4005ba:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4005bc:	4603      	mov	r3, r0
  4005be:	b940      	cbnz	r0, 4005d2 <hif_set_rx_done+0x2a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  4005c0:	9901      	ldr	r1, [sp, #4]
  4005c2:	f041 0102 	orr.w	r1, r1, #2
  4005c6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4005c8:	f241 0070 	movw	r0, #4208	; 0x1070
  4005cc:	4b05      	ldr	r3, [pc, #20]	; (4005e4 <hif_set_rx_done+0x3c>)
  4005ce:	4798      	blx	r3
  4005d0:	4603      	mov	r3, r0
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;

}
  4005d2:	4618      	mov	r0, r3
  4005d4:	b003      	add	sp, #12
  4005d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4005da:	bf00      	nop
  4005dc:	00400301 	.word	0x00400301
  4005e0:	00401871 	.word	0x00401871
  4005e4:	0040187d 	.word	0x0040187d

004005e8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4005e8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4005ea:	4b11      	ldr	r3, [pc, #68]	; (400630 <hif_chip_wake+0x48>)
  4005ec:	781b      	ldrb	r3, [r3, #0]
  4005ee:	f013 0fff 	tst.w	r3, #255	; 0xff
  4005f2:	d115      	bne.n	400620 <hif_chip_wake+0x38>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4005f4:	4b0f      	ldr	r3, [pc, #60]	; (400634 <hif_chip_wake+0x4c>)
  4005f6:	781b      	ldrb	r3, [r3, #0]
  4005f8:	b2db      	uxtb	r3, r3
  4005fa:	2b03      	cmp	r3, #3
  4005fc:	d004      	beq.n	400608 <hif_chip_wake+0x20>
  4005fe:	4b0d      	ldr	r3, [pc, #52]	; (400634 <hif_chip_wake+0x4c>)
  400600:	781b      	ldrb	r3, [r3, #0]
  400602:	b2db      	uxtb	r3, r3
  400604:	2b04      	cmp	r3, #4
  400606:	d10b      	bne.n	400620 <hif_chip_wake+0x38>
		{
			ret = nm_clkless_wake();
  400608:	4b0b      	ldr	r3, [pc, #44]	; (400638 <hif_chip_wake+0x50>)
  40060a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40060c:	4603      	mov	r3, r0
  40060e:	b968      	cbnz	r0, 40062c <hif_chip_wake+0x44>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  400610:	f245 6178 	movw	r1, #22136	; 0x5678
  400614:	f241 0074 	movw	r0, #4212	; 0x1074
  400618:	4b08      	ldr	r3, [pc, #32]	; (40063c <hif_chip_wake+0x54>)
  40061a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40061c:	4603      	mov	r3, r0
  40061e:	b928      	cbnz	r0, 40062c <hif_chip_wake+0x44>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  400620:	4a03      	ldr	r2, [pc, #12]	; (400630 <hif_chip_wake+0x48>)
  400622:	7813      	ldrb	r3, [r2, #0]
  400624:	3301      	adds	r3, #1
  400626:	b2db      	uxtb	r3, r3
  400628:	7013      	strb	r3, [r2, #0]
  40062a:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  40062c:	4618      	mov	r0, r3
  40062e:	bd08      	pop	{r3, pc}
  400630:	20400900 	.word	0x20400900
  400634:	204008f0 	.word	0x204008f0
  400638:	004013e1 	.word	0x004013e1
  40063c:	0040187d 	.word	0x0040187d

00400640 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  400640:	b500      	push	{lr}
  400642:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  400644:	4b1d      	ldr	r3, [pc, #116]	; (4006bc <hif_chip_sleep+0x7c>)
  400646:	781b      	ldrb	r3, [r3, #0]
  400648:	f013 0fff 	tst.w	r3, #255	; 0xff
  40064c:	d004      	beq.n	400658 <hif_chip_sleep+0x18>
	{
		gu8ChipSleep--;
  40064e:	4a1b      	ldr	r2, [pc, #108]	; (4006bc <hif_chip_sleep+0x7c>)
  400650:	7813      	ldrb	r3, [r2, #0]
  400652:	3b01      	subs	r3, #1
  400654:	b2db      	uxtb	r3, r3
  400656:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  400658:	4b18      	ldr	r3, [pc, #96]	; (4006bc <hif_chip_sleep+0x7c>)
  40065a:	781b      	ldrb	r3, [r3, #0]
  40065c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400660:	d125      	bne.n	4006ae <hif_chip_sleep+0x6e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400662:	4b17      	ldr	r3, [pc, #92]	; (4006c0 <hif_chip_sleep+0x80>)
  400664:	781b      	ldrb	r3, [r3, #0]
  400666:	b2db      	uxtb	r3, r3
  400668:	2b03      	cmp	r3, #3
  40066a:	d004      	beq.n	400676 <hif_chip_sleep+0x36>
  40066c:	4b14      	ldr	r3, [pc, #80]	; (4006c0 <hif_chip_sleep+0x80>)
  40066e:	781b      	ldrb	r3, [r3, #0]
  400670:	b2db      	uxtb	r3, r3
  400672:	2b04      	cmp	r3, #4
  400674:	d11d      	bne.n	4006b2 <hif_chip_sleep+0x72>
		{
			uint32 reg = 0;
  400676:	2300      	movs	r3, #0
  400678:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  40067a:	f244 3121 	movw	r1, #17185	; 0x4321
  40067e:	f241 0074 	movw	r0, #4212	; 0x1074
  400682:	4b10      	ldr	r3, [pc, #64]	; (4006c4 <hif_chip_sleep+0x84>)
  400684:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400686:	4603      	mov	r3, r0
  400688:	b9a0      	cbnz	r0, 4006b4 <hif_chip_sleep+0x74>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  40068a:	a901      	add	r1, sp, #4
  40068c:	2001      	movs	r0, #1
  40068e:	4b0e      	ldr	r3, [pc, #56]	; (4006c8 <hif_chip_sleep+0x88>)
  400690:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400692:	4603      	mov	r3, r0
  400694:	b970      	cbnz	r0, 4006b4 <hif_chip_sleep+0x74>
			if(reg&0x2)
  400696:	9901      	ldr	r1, [sp, #4]
  400698:	f011 0f02 	tst.w	r1, #2
  40069c:	d00a      	beq.n	4006b4 <hif_chip_sleep+0x74>
			{
				reg &=~(1 << 1);
  40069e:	f021 0102 	bic.w	r1, r1, #2
  4006a2:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  4006a4:	2001      	movs	r0, #1
  4006a6:	4b07      	ldr	r3, [pc, #28]	; (4006c4 <hif_chip_sleep+0x84>)
  4006a8:	4798      	blx	r3
  4006aa:	4603      	mov	r3, r0
  4006ac:	e002      	b.n	4006b4 <hif_chip_sleep+0x74>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
  4006ae:	2300      	movs	r3, #0
  4006b0:	e000      	b.n	4006b4 <hif_chip_sleep+0x74>
  4006b2:	2300      	movs	r3, #0
		{
		}
	}
ERR1:
	return ret;
}
  4006b4:	4618      	mov	r0, r3
  4006b6:	b003      	add	sp, #12
  4006b8:	f85d fb04 	ldr.w	pc, [sp], #4
  4006bc:	20400900 	.word	0x20400900
  4006c0:	204008f0 	.word	0x204008f0
  4006c4:	0040187d 	.word	0x0040187d
  4006c8:	00401871 	.word	0x00401871

004006cc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4006cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006d0:	b087      	sub	sp, #28
  4006d2:	4680      	mov	r8, r0
  4006d4:	460f      	mov	r7, r1
  4006d6:	4692      	mov	sl, r2
  4006d8:	4699      	mov	r9, r3
  4006da:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4006dc:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4006e0:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4006e4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4006e8:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4006ec:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4006f0:	2308      	movs	r3, #8
  4006f2:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4006f6:	b144      	cbz	r4, 40070a <hif_send+0x3e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4006f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4006fc:	fa16 f383 	uxtah	r3, r6, r3
  400700:	442b      	add	r3, r5
  400702:	b29b      	uxth	r3, r3
  400704:	f8ad 3016 	strh.w	r3, [sp, #22]
  400708:	e006      	b.n	400718 <hif_send+0x4c>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  40070a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40070e:	fa19 f383 	uxtah	r3, r9, r3
  400712:	b29b      	uxth	r3, r3
  400714:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	ret = hif_chip_wake();
  400718:	4b57      	ldr	r3, [pc, #348]	; (400878 <hif_send+0x1ac>)
  40071a:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  40071c:	4683      	mov	fp, r0
  40071e:	2800      	cmp	r0, #0
  400720:	f040 8095 	bne.w	40084e <hif_send+0x182>
	{
		volatile uint32 reg, dma_addr = 0;
  400724:	2300      	movs	r3, #0
  400726:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  400728:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  40072c:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  40072e:	9b02      	ldr	r3, [sp, #8]
  400730:	ea48 0303 	orr.w	r3, r8, r3
  400734:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  400736:	9b02      	ldr	r3, [sp, #8]
  400738:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  40073c:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  40073e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400742:	9b02      	ldr	r3, [sp, #8]
  400744:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400748:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  40074a:	9902      	ldr	r1, [sp, #8]
  40074c:	f241 008c 	movw	r0, #4236	; 0x108c
  400750:	4b4a      	ldr	r3, [pc, #296]	; (40087c <hif_send+0x1b0>)
  400752:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400754:	4683      	mov	fp, r0
  400756:	2800      	cmp	r0, #0
  400758:	f040 808a 	bne.w	400870 <hif_send+0x1a4>


		reg = 0;
  40075c:	2300      	movs	r3, #0
  40075e:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  400760:	9b02      	ldr	r3, [sp, #8]
  400762:	f043 0302 	orr.w	r3, r3, #2
  400766:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  400768:	9902      	ldr	r1, [sp, #8]
  40076a:	f241 0078 	movw	r0, #4216	; 0x1078
  40076e:	4b43      	ldr	r3, [pc, #268]	; (40087c <hif_send+0x1b0>)
  400770:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400772:	4683      	mov	fp, r0
  400774:	2800      	cmp	r0, #0
  400776:	d17b      	bne.n	400870 <hif_send+0x1a4>
		dma_addr = 0;
  400778:	2300      	movs	r3, #0
  40077a:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  40077c:	f8ad 3006 	strh.w	r3, [sp, #6]
  400780:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400784:	b29b      	uxth	r3, r3
  400786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40078a:	d21e      	bcs.n	4007ca <hif_send+0xfe>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  40078c:	f241 0878 	movw	r8, #4216	; 0x1078
  400790:	4f3b      	ldr	r7, [pc, #236]	; (400880 <hif_send+0x1b4>)
  400792:	a902      	add	r1, sp, #8
  400794:	4640      	mov	r0, r8
  400796:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  400798:	b9b8      	cbnz	r0, 4007ca <hif_send+0xfe>
			if (!(reg & 0x2))
  40079a:	9b02      	ldr	r3, [sp, #8]
  40079c:	f013 0f02 	tst.w	r3, #2
  4007a0:	d107      	bne.n	4007b2 <hif_send+0xe6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  4007a2:	a903      	add	r1, sp, #12
  4007a4:	4837      	ldr	r0, [pc, #220]	; (400884 <hif_send+0x1b8>)
  4007a6:	4b36      	ldr	r3, [pc, #216]	; (400880 <hif_send+0x1b4>)
  4007a8:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4007aa:	b170      	cbz	r0, 4007ca <hif_send+0xfe>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  4007ac:	2300      	movs	r3, #0
  4007ae:	9303      	str	r3, [sp, #12]
  4007b0:	e00b      	b.n	4007ca <hif_send+0xfe>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  4007b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007b6:	3301      	adds	r3, #1
  4007b8:	b29b      	uxth	r3, r3
  4007ba:	f8ad 3006 	strh.w	r3, [sp, #6]
  4007be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007c2:	b29b      	uxth	r3, r3
  4007c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4007c8:	d3e3      	bcc.n	400792 <hif_send+0xc6>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  4007ca:	9b03      	ldr	r3, [sp, #12]
  4007cc:	2b00      	cmp	r3, #0
  4007ce:	d04d      	beq.n	40086c <hif_send+0x1a0>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  4007d0:	9b03      	ldr	r3, [sp, #12]
  4007d2:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  4007d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4007d8:	b29b      	uxth	r3, r3
  4007da:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  4007de:	9804      	ldr	r0, [sp, #16]
  4007e0:	2208      	movs	r2, #8
  4007e2:	a905      	add	r1, sp, #20
  4007e4:	4b28      	ldr	r3, [pc, #160]	; (400888 <hif_send+0x1bc>)
  4007e6:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4007e8:	4683      	mov	fp, r0
  4007ea:	2800      	cmp	r0, #0
  4007ec:	d140      	bne.n	400870 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4007ee:	9b04      	ldr	r3, [sp, #16]
  4007f0:	3308      	adds	r3, #8
  4007f2:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4007f4:	f1ba 0f00 	cmp.w	sl, #0
  4007f8:	d00a      	beq.n	400810 <hif_send+0x144>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4007fa:	9804      	ldr	r0, [sp, #16]
  4007fc:	464a      	mov	r2, r9
  4007fe:	4651      	mov	r1, sl
  400800:	4b21      	ldr	r3, [pc, #132]	; (400888 <hif_send+0x1bc>)
  400802:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400804:	4683      	mov	fp, r0
  400806:	2800      	cmp	r0, #0
  400808:	d132      	bne.n	400870 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  40080a:	9b04      	ldr	r3, [sp, #16]
  40080c:	444b      	add	r3, r9
  40080e:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  400810:	b174      	cbz	r4, 400830 <hif_send+0x164>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  400812:	9b04      	ldr	r3, [sp, #16]
  400814:	ebc9 0505 	rsb	r5, r9, r5
  400818:	441d      	add	r5, r3
  40081a:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  40081c:	9804      	ldr	r0, [sp, #16]
  40081e:	4632      	mov	r2, r6
  400820:	4621      	mov	r1, r4
  400822:	4b19      	ldr	r3, [pc, #100]	; (400888 <hif_send+0x1bc>)
  400824:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400826:	4683      	mov	fp, r0
  400828:	bb10      	cbnz	r0, 400870 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  40082a:	9b04      	ldr	r3, [sp, #16]
  40082c:	441e      	add	r6, r3
  40082e:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  400830:	9b03      	ldr	r3, [sp, #12]
  400832:	009b      	lsls	r3, r3, #2
  400834:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  400836:	9b02      	ldr	r3, [sp, #8]
  400838:	f043 0302 	orr.w	r3, r3, #2
  40083c:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  40083e:	9902      	ldr	r1, [sp, #8]
  400840:	f241 006c 	movw	r0, #4204	; 0x106c
  400844:	4b0d      	ldr	r3, [pc, #52]	; (40087c <hif_send+0x1b0>)
  400846:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  400848:	4683      	mov	fp, r0
  40084a:	b988      	cbnz	r0, 400870 <hif_send+0x1a4>
  40084c:	e00a      	b.n	400864 <hif_send+0x198>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  40084e:	f240 129f 	movw	r2, #415	; 0x19f
  400852:	490e      	ldr	r1, [pc, #56]	; (40088c <hif_send+0x1c0>)
  400854:	480e      	ldr	r0, [pc, #56]	; (400890 <hif_send+0x1c4>)
  400856:	4c0f      	ldr	r4, [pc, #60]	; (400894 <hif_send+0x1c8>)
  400858:	47a0      	blx	r4
  40085a:	480f      	ldr	r0, [pc, #60]	; (400898 <hif_send+0x1cc>)
  40085c:	47a0      	blx	r4
  40085e:	480f      	ldr	r0, [pc, #60]	; (40089c <hif_send+0x1d0>)
  400860:	47a0      	blx	r4
		goto ERR1;
  400862:	e005      	b.n	400870 <hif_send+0x1a4>
	}
	ret = hif_chip_sleep();
  400864:	4b0e      	ldr	r3, [pc, #56]	; (4008a0 <hif_send+0x1d4>)
  400866:	4798      	blx	r3
  400868:	4683      	mov	fp, r0
  40086a:	e001      	b.n	400870 <hif_send+0x1a4>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  40086c:	f06f 0b02 	mvn.w	fp, #2
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
  400870:	4658      	mov	r0, fp
  400872:	b007      	add	sp, #28
  400874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400878:	004005e9 	.word	0x004005e9
  40087c:	0040187d 	.word	0x0040187d
  400880:	00401871 	.word	0x00401871
  400884:	00150400 	.word	0x00150400
  400888:	004018e9 	.word	0x004018e9
  40088c:	0040ac24 	.word	0x0040ac24
  400890:	0040a98c 	.word	0x0040a98c
  400894:	00403f99 	.word	0x00403f99
  400898:	0040a9e0 	.word	0x0040a9e0
  40089c:	0040a9b8 	.word	0x0040a9b8
  4008a0:	00400641 	.word	0x00400641

004008a4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  4008a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4008a8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4008aa:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 400ba8 <hif_handle_isr+0x304>
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  4008ae:	4fa3      	ldr	r7, [pc, #652]	; (400b3c <hif_handle_isr+0x298>)
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4008b0:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 400bac <hif_handle_isr+0x308>
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4008b4:	4ea2      	ldr	r6, [pc, #648]	; (400b40 <hif_handle_isr+0x29c>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4008b6:	e17b      	b.n	400bb0 <hif_handle_isr+0x30c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  4008b8:	f899 3000 	ldrb.w	r3, [r9]
  4008bc:	3b01      	subs	r3, #1
  4008be:	b2db      	uxtb	r3, r3
  4008c0:	f889 3000 	strb.w	r3, [r9]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  4008c4:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  4008c6:	4604      	mov	r4, r0
  4008c8:	2800      	cmp	r0, #0
  4008ca:	f040 811a 	bne.w	400b02 <hif_handle_isr+0x25e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  4008ce:	a903      	add	r1, sp, #12
  4008d0:	f241 0070 	movw	r0, #4208	; 0x1070
  4008d4:	4b9b      	ldr	r3, [pc, #620]	; (400b44 <hif_handle_isr+0x2a0>)
  4008d6:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  4008d8:	4604      	mov	r4, r0
  4008da:	2800      	cmp	r0, #0
  4008dc:	f040 8106 	bne.w	400aec <hif_handle_isr+0x248>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  4008e0:	9b03      	ldr	r3, [sp, #12]
  4008e2:	f013 0f01 	tst.w	r3, #1
  4008e6:	f000 80f5 	beq.w	400ad4 <hif_handle_isr+0x230>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  4008ea:	4b97      	ldr	r3, [pc, #604]	; (400b48 <hif_handle_isr+0x2a4>)
  4008ec:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  4008ee:	9903      	ldr	r1, [sp, #12]
  4008f0:	f021 0101 	bic.w	r1, r1, #1
  4008f4:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4008f6:	f241 0070 	movw	r0, #4208	; 0x1070
  4008fa:	4b94      	ldr	r3, [pc, #592]	; (400b4c <hif_handle_isr+0x2a8>)
  4008fc:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  4008fe:	4604      	mov	r4, r0
  400900:	2800      	cmp	r0, #0
  400902:	f040 810e 	bne.w	400b22 <hif_handle_isr+0x27e>
				gu8HifSizeDone = 0;
  400906:	2200      	movs	r2, #0
  400908:	4b91      	ldr	r3, [pc, #580]	; (400b50 <hif_handle_isr+0x2ac>)
  40090a:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  40090c:	9d03      	ldr	r5, [sp, #12]
  40090e:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  400912:	2d00      	cmp	r5, #0
  400914:	f000 80d1 	beq.w	400aba <hif_handle_isr+0x216>
					uint32 address = 0;
  400918:	a906      	add	r1, sp, #24
  40091a:	f841 2d04 	str.w	r2, [r1, #-4]!
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  40091e:	f241 0084 	movw	r0, #4228	; 0x1084
  400922:	4b88      	ldr	r3, [pc, #544]	; (400b44 <hif_handle_isr+0x2a0>)
  400924:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  400926:	4604      	mov	r4, r0
  400928:	b168      	cbz	r0, 400946 <hif_handle_isr+0xa2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  40092a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  40092e:	4641      	mov	r1, r8
  400930:	4630      	mov	r0, r6
  400932:	4d88      	ldr	r5, [pc, #544]	; (400b54 <hif_handle_isr+0x2b0>)
  400934:	47a8      	blx	r5
  400936:	4888      	ldr	r0, [pc, #544]	; (400b58 <hif_handle_isr+0x2b4>)
  400938:	47a8      	blx	r5
  40093a:	4888      	ldr	r0, [pc, #544]	; (400b5c <hif_handle_isr+0x2b8>)
  40093c:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  40093e:	2001      	movs	r0, #1
  400940:	4b81      	ldr	r3, [pc, #516]	; (400b48 <hif_handle_isr+0x2a4>)
  400942:	4798      	blx	r3
  400944:	e0eb      	b.n	400b1e <hif_handle_isr+0x27a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  400946:	2204      	movs	r2, #4
  400948:	a904      	add	r1, sp, #16
  40094a:	9805      	ldr	r0, [sp, #20]
  40094c:	4b84      	ldr	r3, [pc, #528]	; (400b60 <hif_handle_isr+0x2bc>)
  40094e:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  400950:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400954:	b29b      	uxth	r3, r3
  400956:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  40095a:	4604      	mov	r4, r0
  40095c:	b168      	cbz	r0, 40097a <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) address bus fail\n");
  40095e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  400962:	4641      	mov	r1, r8
  400964:	4630      	mov	r0, r6
  400966:	4d7b      	ldr	r5, [pc, #492]	; (400b54 <hif_handle_isr+0x2b0>)
  400968:	47a8      	blx	r5
  40096a:	487e      	ldr	r0, [pc, #504]	; (400b64 <hif_handle_isr+0x2c0>)
  40096c:	47a8      	blx	r5
  40096e:	487b      	ldr	r0, [pc, #492]	; (400b5c <hif_handle_isr+0x2b8>)
  400970:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  400972:	2001      	movs	r0, #1
  400974:	4b74      	ldr	r3, [pc, #464]	; (400b48 <hif_handle_isr+0x2a4>)
  400976:	4798      	blx	r3
  400978:	e0d1      	b.n	400b1e <hif_handle_isr+0x27a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
  40097a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40097e:	b29b      	uxth	r3, r3
  400980:	429d      	cmp	r5, r3
  400982:	d01e      	beq.n	4009c2 <hif_handle_isr+0x11e>
					{
						if((size - strHif.u16Length) > 4)
  400984:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400988:	b29b      	uxth	r3, r3
  40098a:	1aeb      	subs	r3, r5, r3
  40098c:	2b04      	cmp	r3, #4
  40098e:	dd18      	ble.n	4009c2 <hif_handle_isr+0x11e>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  400990:	f240 12df 	movw	r2, #479	; 0x1df
  400994:	4641      	mov	r1, r8
  400996:	4630      	mov	r0, r6
  400998:	4c6e      	ldr	r4, [pc, #440]	; (400b54 <hif_handle_isr+0x2b0>)
  40099a:	47a0      	blx	r4
  40099c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  4009a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009a4:	f89d 1011 	ldrb.w	r1, [sp, #17]
  4009a8:	9100      	str	r1, [sp, #0]
  4009aa:	b292      	uxth	r2, r2
  4009ac:	4629      	mov	r1, r5
  4009ae:	486e      	ldr	r0, [pc, #440]	; (400b68 <hif_handle_isr+0x2c4>)
  4009b0:	47a0      	blx	r4
  4009b2:	486a      	ldr	r0, [pc, #424]	; (400b5c <hif_handle_isr+0x2b8>)
  4009b4:	47a0      	blx	r4
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  4009b6:	2001      	movs	r0, #1
  4009b8:	4b63      	ldr	r3, [pc, #396]	; (400b48 <hif_handle_isr+0x2a4>)
  4009ba:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  4009bc:	f06f 0405 	mvn.w	r4, #5
  4009c0:	e0ad      	b.n	400b1e <hif_handle_isr+0x27a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  4009c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009c6:	b2db      	uxtb	r3, r3
  4009c8:	2b01      	cmp	r3, #1
  4009ca:	d10d      	bne.n	4009e8 <hif_handle_isr+0x144>
					{
						if(pfWifiCb)
  4009cc:	4b67      	ldr	r3, [pc, #412]	; (400b6c <hif_handle_isr+0x2c8>)
  4009ce:	681b      	ldr	r3, [r3, #0]
  4009d0:	2b00      	cmp	r3, #0
  4009d2:	d060      	beq.n	400a96 <hif_handle_isr+0x1f2>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009d4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009d8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4009dc:	3908      	subs	r1, #8
  4009de:	9a05      	ldr	r2, [sp, #20]
  4009e0:	3208      	adds	r2, #8
  4009e2:	b289      	uxth	r1, r1
  4009e4:	4798      	blx	r3
  4009e6:	e056      	b.n	400a96 <hif_handle_isr+0x1f2>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  4009e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009ec:	b2db      	uxtb	r3, r3
  4009ee:	2b02      	cmp	r3, #2
  4009f0:	d10d      	bne.n	400a0e <hif_handle_isr+0x16a>
					{
						if(pfIpCb)
  4009f2:	4b5f      	ldr	r3, [pc, #380]	; (400b70 <hif_handle_isr+0x2cc>)
  4009f4:	681b      	ldr	r3, [r3, #0]
  4009f6:	2b00      	cmp	r3, #0
  4009f8:	d04d      	beq.n	400a96 <hif_handle_isr+0x1f2>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009fa:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009fe:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a02:	3908      	subs	r1, #8
  400a04:	9a05      	ldr	r2, [sp, #20]
  400a06:	3208      	adds	r2, #8
  400a08:	b289      	uxth	r1, r1
  400a0a:	4798      	blx	r3
  400a0c:	e043      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  400a0e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a12:	b2db      	uxtb	r3, r3
  400a14:	2b04      	cmp	r3, #4
  400a16:	d10d      	bne.n	400a34 <hif_handle_isr+0x190>
					{
						if(pfOtaCb)
  400a18:	4b56      	ldr	r3, [pc, #344]	; (400b74 <hif_handle_isr+0x2d0>)
  400a1a:	681b      	ldr	r3, [r3, #0]
  400a1c:	2b00      	cmp	r3, #0
  400a1e:	d03a      	beq.n	400a96 <hif_handle_isr+0x1f2>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a20:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a24:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a28:	3908      	subs	r1, #8
  400a2a:	9a05      	ldr	r2, [sp, #20]
  400a2c:	3208      	adds	r2, #8
  400a2e:	b289      	uxth	r1, r1
  400a30:	4798      	blx	r3
  400a32:	e030      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  400a34:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a38:	b2db      	uxtb	r3, r3
  400a3a:	2b06      	cmp	r3, #6
  400a3c:	d10c      	bne.n	400a58 <hif_handle_isr+0x1b4>
					{
						if(pfCryptoCb)
  400a3e:	4b4e      	ldr	r3, [pc, #312]	; (400b78 <hif_handle_isr+0x2d4>)
  400a40:	681b      	ldr	r3, [r3, #0]
  400a42:	b343      	cbz	r3, 400a96 <hif_handle_isr+0x1f2>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a44:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a48:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a4c:	3908      	subs	r1, #8
  400a4e:	9a05      	ldr	r2, [sp, #20]
  400a50:	3208      	adds	r2, #8
  400a52:	b289      	uxth	r1, r1
  400a54:	4798      	blx	r3
  400a56:	e01e      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  400a58:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a5c:	b2db      	uxtb	r3, r3
  400a5e:	2b07      	cmp	r3, #7
  400a60:	d10c      	bne.n	400a7c <hif_handle_isr+0x1d8>
					{
						if(pfSigmaCb)
  400a62:	4b46      	ldr	r3, [pc, #280]	; (400b7c <hif_handle_isr+0x2d8>)
  400a64:	681b      	ldr	r3, [r3, #0]
  400a66:	b1b3      	cbz	r3, 400a96 <hif_handle_isr+0x1f2>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a68:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a6c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a70:	3908      	subs	r1, #8
  400a72:	9a05      	ldr	r2, [sp, #20]
  400a74:	3208      	adds	r2, #8
  400a76:	b289      	uxth	r1, r1
  400a78:	4798      	blx	r3
  400a7a:	e00c      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  400a7c:	f240 2202 	movw	r2, #514	; 0x202
  400a80:	4641      	mov	r1, r8
  400a82:	4630      	mov	r0, r6
  400a84:	4c33      	ldr	r4, [pc, #204]	; (400b54 <hif_handle_isr+0x2b0>)
  400a86:	47a0      	blx	r4
  400a88:	483d      	ldr	r0, [pc, #244]	; (400b80 <hif_handle_isr+0x2dc>)
  400a8a:	47a0      	blx	r4
  400a8c:	4833      	ldr	r0, [pc, #204]	; (400b5c <hif_handle_isr+0x2b8>)
  400a8e:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  400a90:	f06f 0405 	mvn.w	r4, #5
  400a94:	e043      	b.n	400b1e <hif_handle_isr+0x27a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  400a96:	4b2e      	ldr	r3, [pc, #184]	; (400b50 <hif_handle_isr+0x2ac>)
  400a98:	781b      	ldrb	r3, [r3, #0]
  400a9a:	f013 0fff 	tst.w	r3, #255	; 0xff
  400a9e:	d13b      	bne.n	400b18 <hif_handle_isr+0x274>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  400aa0:	f240 2209 	movw	r2, #521	; 0x209
  400aa4:	4641      	mov	r1, r8
  400aa6:	4630      	mov	r0, r6
  400aa8:	4c2a      	ldr	r4, [pc, #168]	; (400b54 <hif_handle_isr+0x2b0>)
  400aaa:	47a0      	blx	r4
  400aac:	4835      	ldr	r0, [pc, #212]	; (400b84 <hif_handle_isr+0x2e0>)
  400aae:	47a0      	blx	r4
  400ab0:	482a      	ldr	r0, [pc, #168]	; (400b5c <hif_handle_isr+0x2b8>)
  400ab2:	47a0      	blx	r4
						ret = hif_set_rx_done();
  400ab4:	4b34      	ldr	r3, [pc, #208]	; (400b88 <hif_handle_isr+0x2e4>)
  400ab6:	4798      	blx	r3
  400ab8:	e02e      	b.n	400b18 <hif_handle_isr+0x274>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
  400aba:	f240 2211 	movw	r2, #529	; 0x211
  400abe:	4641      	mov	r1, r8
  400ac0:	4630      	mov	r0, r6
  400ac2:	4c24      	ldr	r4, [pc, #144]	; (400b54 <hif_handle_isr+0x2b0>)
  400ac4:	47a0      	blx	r4
  400ac6:	4831      	ldr	r0, [pc, #196]	; (400b8c <hif_handle_isr+0x2e8>)
  400ac8:	47a0      	blx	r4
  400aca:	4824      	ldr	r0, [pc, #144]	; (400b5c <hif_handle_isr+0x2b8>)
  400acc:	47a0      	blx	r4
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  400ace:	f06f 0401 	mvn.w	r4, #1
  400ad2:	e026      	b.n	400b22 <hif_handle_isr+0x27e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  400ad4:	f44f 7206 	mov.w	r2, #536	; 0x218
  400ad8:	4641      	mov	r1, r8
  400ada:	4630      	mov	r0, r6
  400adc:	4c1d      	ldr	r4, [pc, #116]	; (400b54 <hif_handle_isr+0x2b0>)
  400ade:	47a0      	blx	r4
  400ae0:	9903      	ldr	r1, [sp, #12]
  400ae2:	482b      	ldr	r0, [pc, #172]	; (400b90 <hif_handle_isr+0x2ec>)
  400ae4:	47a0      	blx	r4
  400ae6:	481d      	ldr	r0, [pc, #116]	; (400b5c <hif_handle_isr+0x2b8>)
  400ae8:	47a0      	blx	r4
  400aea:	e015      	b.n	400b18 <hif_handle_isr+0x274>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  400aec:	f240 221e 	movw	r2, #542	; 0x21e
  400af0:	4641      	mov	r1, r8
  400af2:	4630      	mov	r0, r6
  400af4:	4d17      	ldr	r5, [pc, #92]	; (400b54 <hif_handle_isr+0x2b0>)
  400af6:	47a8      	blx	r5
  400af8:	4826      	ldr	r0, [pc, #152]	; (400b94 <hif_handle_isr+0x2f0>)
  400afa:	47a8      	blx	r5
  400afc:	4817      	ldr	r0, [pc, #92]	; (400b5c <hif_handle_isr+0x2b8>)
  400afe:	47a8      	blx	r5
  400b00:	e00f      	b.n	400b22 <hif_handle_isr+0x27e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  400b02:	f44f 7209 	mov.w	r2, #548	; 0x224
  400b06:	4641      	mov	r1, r8
  400b08:	4630      	mov	r0, r6
  400b0a:	4d12      	ldr	r5, [pc, #72]	; (400b54 <hif_handle_isr+0x2b0>)
  400b0c:	47a8      	blx	r5
  400b0e:	4822      	ldr	r0, [pc, #136]	; (400b98 <hif_handle_isr+0x2f4>)
  400b10:	47a8      	blx	r5
  400b12:	4812      	ldr	r0, [pc, #72]	; (400b5c <hif_handle_isr+0x2b8>)
  400b14:	47a8      	blx	r5
  400b16:	e004      	b.n	400b22 <hif_handle_isr+0x27e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
  400b18:	4b20      	ldr	r3, [pc, #128]	; (400b9c <hif_handle_isr+0x2f8>)
  400b1a:	4798      	blx	r3
  400b1c:	4604      	mov	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
  400b1e:	2c00      	cmp	r4, #0
  400b20:	d046      	beq.n	400bb0 <hif_handle_isr+0x30c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400b22:	f240 2243 	movw	r2, #579	; 0x243
  400b26:	491e      	ldr	r1, [pc, #120]	; (400ba0 <hif_handle_isr+0x2fc>)
  400b28:	4630      	mov	r0, r6
  400b2a:	4d0a      	ldr	r5, [pc, #40]	; (400b54 <hif_handle_isr+0x2b0>)
  400b2c:	47a8      	blx	r5
  400b2e:	4621      	mov	r1, r4
  400b30:	481c      	ldr	r0, [pc, #112]	; (400ba4 <hif_handle_isr+0x300>)
  400b32:	47a8      	blx	r5
  400b34:	4809      	ldr	r0, [pc, #36]	; (400b5c <hif_handle_isr+0x2b8>)
  400b36:	47a8      	blx	r5
			}
		}
  400b38:	e6c4      	b.n	4008c4 <hif_handle_isr+0x20>
  400b3a:	bf00      	nop
  400b3c:	004005e9 	.word	0x004005e9
  400b40:	0040a98c 	.word	0x0040a98c
  400b44:	00401871 	.word	0x00401871
  400b48:	00400301 	.word	0x00400301
  400b4c:	0040187d 	.word	0x0040187d
  400b50:	204008f8 	.word	0x204008f8
  400b54:	00403f99 	.word	0x00403f99
  400b58:	0040aa00 	.word	0x0040aa00
  400b5c:	0040a9b8 	.word	0x0040a9b8
  400b60:	00401889 	.word	0x00401889
  400b64:	0040aa28 	.word	0x0040aa28
  400b68:	0040aa40 	.word	0x0040aa40
  400b6c:	204008e0 	.word	0x204008e0
  400b70:	204008f4 	.word	0x204008f4
  400b74:	204008fc 	.word	0x204008fc
  400b78:	204008dc 	.word	0x204008dc
  400b7c:	204008ec 	.word	0x204008ec
  400b80:	0040aa80 	.word	0x0040aa80
  400b84:	0040aa98 	.word	0x0040aa98
  400b88:	004005a9 	.word	0x004005a9
  400b8c:	0040aabc 	.word	0x0040aabc
  400b90:	0040aad0 	.word	0x0040aad0
  400b94:	0040aaec 	.word	0x0040aaec
  400b98:	0040ab10 	.word	0x0040ab10
  400b9c:	00400641 	.word	0x00400641
  400ba0:	0040ac30 	.word	0x0040ac30
  400ba4:	0040ab30 	.word	0x0040ab30
  400ba8:	204008e4 	.word	0x204008e4
  400bac:	0040a9cc 	.word	0x0040a9cc

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  400bb0:	f899 3000 	ldrb.w	r3, [r9]
  400bb4:	f013 0fff 	tst.w	r3, #255	; 0xff
  400bb8:	f47f ae7e 	bne.w	4008b8 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
  400bbc:	2000      	movs	r0, #0
  400bbe:	b007      	add	sp, #28
  400bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00400bc4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  400bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400bc8:	b083      	sub	sp, #12
  400bca:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  400bcc:	2a00      	cmp	r2, #0
  400bce:	bf18      	it	ne
  400bd0:	2900      	cmpne	r1, #0
  400bd2:	d003      	beq.n	400bdc <hif_receive+0x18>
  400bd4:	4605      	mov	r5, r0
  400bd6:	460f      	mov	r7, r1
  400bd8:	4616      	mov	r6, r2
  400bda:	b9a0      	cbnz	r0, 400c06 <hif_receive+0x42>
	{
		if(isDone)
  400bdc:	b134      	cbz	r4, 400bec <hif_receive+0x28>
		{
			gu8HifSizeDone = 1;
  400bde:	2201      	movs	r2, #1
  400be0:	4b31      	ldr	r3, [pc, #196]	; (400ca8 <hif_receive+0xe4>)
  400be2:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  400be4:	4b31      	ldr	r3, [pc, #196]	; (400cac <hif_receive+0xe8>)
  400be6:	4798      	blx	r3
  400be8:	4603      	mov	r3, r0
  400bea:	e058      	b.n	400c9e <hif_receive+0xda>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
  400bec:	f240 2269 	movw	r2, #617	; 0x269
  400bf0:	492f      	ldr	r1, [pc, #188]	; (400cb0 <hif_receive+0xec>)
  400bf2:	4830      	ldr	r0, [pc, #192]	; (400cb4 <hif_receive+0xf0>)
  400bf4:	4c30      	ldr	r4, [pc, #192]	; (400cb8 <hif_receive+0xf4>)
  400bf6:	47a0      	blx	r4
  400bf8:	4830      	ldr	r0, [pc, #192]	; (400cbc <hif_receive+0xf8>)
  400bfa:	47a0      	blx	r4
  400bfc:	4830      	ldr	r0, [pc, #192]	; (400cc0 <hif_receive+0xfc>)
  400bfe:	47a0      	blx	r4
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  400c00:	f06f 030b 	mvn.w	r3, #11
  400c04:	e04b      	b.n	400c9e <hif_receive+0xda>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400c06:	4669      	mov	r1, sp
  400c08:	f241 0070 	movw	r0, #4208	; 0x1070
  400c0c:	4b2d      	ldr	r3, [pc, #180]	; (400cc4 <hif_receive+0x100>)
  400c0e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c10:	4603      	mov	r3, r0
  400c12:	2800      	cmp	r0, #0
  400c14:	d143      	bne.n	400c9e <hif_receive+0xda>


	size = (uint16)((reg >> 2) & 0xfff);
  400c16:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  400c1a:	a901      	add	r1, sp, #4
  400c1c:	f241 0084 	movw	r0, #4228	; 0x1084
  400c20:	4b28      	ldr	r3, [pc, #160]	; (400cc4 <hif_receive+0x100>)
  400c22:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c24:	4603      	mov	r3, r0
  400c26:	2800      	cmp	r0, #0
  400c28:	d139      	bne.n	400c9e <hif_receive+0xda>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
  400c2a:	f3c8 088b 	ubfx	r8, r8, #2, #12
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
  400c2e:	4546      	cmp	r6, r8
  400c30:	d90e      	bls.n	400c50 <hif_receive+0x8c>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  400c32:	f240 227a 	movw	r2, #634	; 0x27a
  400c36:	491e      	ldr	r1, [pc, #120]	; (400cb0 <hif_receive+0xec>)
  400c38:	481e      	ldr	r0, [pc, #120]	; (400cb4 <hif_receive+0xf0>)
  400c3a:	4c1f      	ldr	r4, [pc, #124]	; (400cb8 <hif_receive+0xf4>)
  400c3c:	47a0      	blx	r4
  400c3e:	4642      	mov	r2, r8
  400c40:	4631      	mov	r1, r6
  400c42:	4821      	ldr	r0, [pc, #132]	; (400cc8 <hif_receive+0x104>)
  400c44:	47a0      	blx	r4
  400c46:	481e      	ldr	r0, [pc, #120]	; (400cc0 <hif_receive+0xfc>)
  400c48:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
  400c4a:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
  400c4e:	e026      	b.n	400c9e <hif_receive+0xda>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  400c50:	9b01      	ldr	r3, [sp, #4]
  400c52:	429d      	cmp	r5, r3
  400c54:	d304      	bcc.n	400c60 <hif_receive+0x9c>
  400c56:	eb05 0906 	add.w	r9, r5, r6
  400c5a:	4443      	add	r3, r8
  400c5c:	4599      	cmp	r9, r3
  400c5e:	d90c      	bls.n	400c7a <hif_receive+0xb6>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  400c60:	f44f 7220 	mov.w	r2, #640	; 0x280
  400c64:	4912      	ldr	r1, [pc, #72]	; (400cb0 <hif_receive+0xec>)
  400c66:	4813      	ldr	r0, [pc, #76]	; (400cb4 <hif_receive+0xf0>)
  400c68:	4c13      	ldr	r4, [pc, #76]	; (400cb8 <hif_receive+0xf4>)
  400c6a:	47a0      	blx	r4
  400c6c:	4817      	ldr	r0, [pc, #92]	; (400ccc <hif_receive+0x108>)
  400c6e:	47a0      	blx	r4
  400c70:	4813      	ldr	r0, [pc, #76]	; (400cc0 <hif_receive+0xfc>)
  400c72:	47a0      	blx	r4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
  400c74:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
  400c78:	e011      	b.n	400c9e <hif_receive+0xda>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  400c7a:	4632      	mov	r2, r6
  400c7c:	4639      	mov	r1, r7
  400c7e:	4628      	mov	r0, r5
  400c80:	4b13      	ldr	r3, [pc, #76]	; (400cd0 <hif_receive+0x10c>)
  400c82:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c84:	4603      	mov	r3, r0
  400c86:	b950      	cbnz	r0, 400c9e <hif_receive+0xda>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  400c88:	9a01      	ldr	r2, [sp, #4]
  400c8a:	4442      	add	r2, r8
  400c8c:	454a      	cmp	r2, r9
  400c8e:	d000      	beq.n	400c92 <hif_receive+0xce>
  400c90:	b12c      	cbz	r4, 400c9e <hif_receive+0xda>
	{
		gu8HifSizeDone = 1;
  400c92:	2201      	movs	r2, #1
  400c94:	4b04      	ldr	r3, [pc, #16]	; (400ca8 <hif_receive+0xe4>)
  400c96:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  400c98:	4b04      	ldr	r3, [pc, #16]	; (400cac <hif_receive+0xe8>)
  400c9a:	4798      	blx	r3
  400c9c:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  400c9e:	4618      	mov	r0, r3
  400ca0:	b003      	add	sp, #12
  400ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400ca6:	bf00      	nop
  400ca8:	204008f8 	.word	0x204008f8
  400cac:	004005a9 	.word	0x004005a9
  400cb0:	0040a9d4 	.word	0x0040a9d4
  400cb4:	0040a98c 	.word	0x0040a98c
  400cb8:	00403f99 	.word	0x00403f99
  400cbc:	0040ab60 	.word	0x0040ab60
  400cc0:	0040a9b8 	.word	0x0040a9b8
  400cc4:	00401871 	.word	0x00401871
  400cc8:	0040ab80 	.word	0x0040ab80
  400ccc:	0040abc4 	.word	0x0040abc4
  400cd0:	00401889 	.word	0x00401889

00400cd4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  400cd4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  400cd6:	1e43      	subs	r3, r0, #1
  400cd8:	2b06      	cmp	r3, #6
  400cda:	d81d      	bhi.n	400d18 <hif_register_cb+0x44>
  400cdc:	e8df f003 	tbb	[pc, r3]
  400ce0:	0c100408 	.word	0x0c100408
  400ce4:	141c      	.short	0x141c
  400ce6:	18          	.byte	0x18
  400ce7:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  400ce8:	4b13      	ldr	r3, [pc, #76]	; (400d38 <hif_register_cb+0x64>)
  400cea:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cec:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
  400cee:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  400cf0:	4b12      	ldr	r3, [pc, #72]	; (400d3c <hif_register_cb+0x68>)
  400cf2:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cf4:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
  400cf6:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  400cf8:	4b11      	ldr	r3, [pc, #68]	; (400d40 <hif_register_cb+0x6c>)
  400cfa:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cfc:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
  400cfe:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  400d00:	4b10      	ldr	r3, [pc, #64]	; (400d44 <hif_register_cb+0x70>)
  400d02:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400d04:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
  400d06:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  400d08:	4b0f      	ldr	r3, [pc, #60]	; (400d48 <hif_register_cb+0x74>)
  400d0a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400d0c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
  400d0e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  400d10:	4b0e      	ldr	r3, [pc, #56]	; (400d4c <hif_register_cb+0x78>)
  400d12:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400d14:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
  400d16:	bd38      	pop	{r3, r4, r5, pc}
  400d18:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  400d1a:	f240 22b9 	movw	r2, #697	; 0x2b9
  400d1e:	490c      	ldr	r1, [pc, #48]	; (400d50 <hif_register_cb+0x7c>)
  400d20:	480c      	ldr	r0, [pc, #48]	; (400d54 <hif_register_cb+0x80>)
  400d22:	4d0d      	ldr	r5, [pc, #52]	; (400d58 <hif_register_cb+0x84>)
  400d24:	47a8      	blx	r5
  400d26:	4621      	mov	r1, r4
  400d28:	480c      	ldr	r0, [pc, #48]	; (400d5c <hif_register_cb+0x88>)
  400d2a:	47a8      	blx	r5
  400d2c:	480c      	ldr	r0, [pc, #48]	; (400d60 <hif_register_cb+0x8c>)
  400d2e:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  400d30:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  400d34:	bd38      	pop	{r3, r4, r5, pc}
  400d36:	bf00      	nop
  400d38:	204008f4 	.word	0x204008f4
  400d3c:	204008e0 	.word	0x204008e0
  400d40:	204008fc 	.word	0x204008fc
  400d44:	204008e8 	.word	0x204008e8
  400d48:	204008dc 	.word	0x204008dc
  400d4c:	204008ec 	.word	0x204008ec
  400d50:	0040ac14 	.word	0x0040ac14
  400d54:	0040a98c 	.word	0x0040a98c
  400d58:	00403f99 	.word	0x00403f99
  400d5c:	0040ac08 	.word	0x0040ac08
  400d60:	0040a9b8 	.word	0x0040a9b8

00400d64 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  400d64:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  400d66:	2400      	movs	r4, #0
  400d68:	4b09      	ldr	r3, [pc, #36]	; (400d90 <hif_init+0x2c>)
  400d6a:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  400d6c:	4b09      	ldr	r3, [pc, #36]	; (400d94 <hif_init+0x30>)
  400d6e:	601c      	str	r4, [r3, #0]

	gu8ChipSleep = 0;
  400d70:	4b09      	ldr	r3, [pc, #36]	; (400d98 <hif_init+0x34>)
  400d72:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  400d74:	4b09      	ldr	r3, [pc, #36]	; (400d9c <hif_init+0x38>)
  400d76:	701c      	strb	r4, [r3, #0]

	gu8Interrupt = 0;
  400d78:	4b09      	ldr	r3, [pc, #36]	; (400da0 <hif_init+0x3c>)
  400d7a:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  400d7c:	4809      	ldr	r0, [pc, #36]	; (400da4 <hif_init+0x40>)
  400d7e:	4b0a      	ldr	r3, [pc, #40]	; (400da8 <hif_init+0x44>)
  400d80:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  400d82:	490a      	ldr	r1, [pc, #40]	; (400dac <hif_init+0x48>)
  400d84:	2003      	movs	r0, #3
  400d86:	4b0a      	ldr	r3, [pc, #40]	; (400db0 <hif_init+0x4c>)
  400d88:	4798      	blx	r3

	return M2M_SUCCESS;
}
  400d8a:	4620      	mov	r0, r4
  400d8c:	bd10      	pop	{r4, pc}
  400d8e:	bf00      	nop
  400d90:	204008e0 	.word	0x204008e0
  400d94:	204008f4 	.word	0x204008f4
  400d98:	20400900 	.word	0x20400900
  400d9c:	204008f0 	.word	0x204008f0
  400da0:	204008e4 	.word	0x204008e4
  400da4:	00400595 	.word	0x00400595
  400da8:	00400281 	.word	0x00400281
  400dac:	004005a5 	.word	0x004005a5
  400db0:	00400cd5 	.word	0x00400cd5

00400db4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400db4:	b530      	push	{r4, r5, lr}
  400db6:	b09f      	sub	sp, #124	; 0x7c
  400db8:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  400dba:	282c      	cmp	r0, #44	; 0x2c
  400dbc:	d111      	bne.n	400de2 <m2m_wifi_cb+0x2e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  400dbe:	2300      	movs	r3, #0
  400dc0:	2204      	movs	r2, #4
  400dc2:	a903      	add	r1, sp, #12
  400dc4:	4628      	mov	r0, r5
  400dc6:	4c90      	ldr	r4, [pc, #576]	; (401008 <m2m_wifi_cb+0x254>)
  400dc8:	47a0      	blx	r4
  400dca:	2800      	cmp	r0, #0
  400dcc:	f040 8119 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400dd0:	4b8e      	ldr	r3, [pc, #568]	; (40100c <m2m_wifi_cb+0x258>)
  400dd2:	681b      	ldr	r3, [r3, #0]
  400dd4:	2b00      	cmp	r3, #0
  400dd6:	f000 8114 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  400dda:	a903      	add	r1, sp, #12
  400ddc:	202c      	movs	r0, #44	; 0x2c
  400dde:	4798      	blx	r3
  400de0:	e10f      	b.n	401002 <m2m_wifi_cb+0x24e>
  400de2:	4604      	mov	r4, r0
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  400de4:	281b      	cmp	r0, #27
  400de6:	d111      	bne.n	400e0c <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  400de8:	2300      	movs	r3, #0
  400dea:	2208      	movs	r2, #8
  400dec:	a903      	add	r1, sp, #12
  400dee:	4628      	mov	r0, r5
  400df0:	4c85      	ldr	r4, [pc, #532]	; (401008 <m2m_wifi_cb+0x254>)
  400df2:	47a0      	blx	r4
  400df4:	2800      	cmp	r0, #0
  400df6:	f040 8104 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400dfa:	4b84      	ldr	r3, [pc, #528]	; (40100c <m2m_wifi_cb+0x258>)
  400dfc:	681b      	ldr	r3, [r3, #0]
  400dfe:	2b00      	cmp	r3, #0
  400e00:	f000 80ff 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  400e04:	a903      	add	r1, sp, #12
  400e06:	201b      	movs	r0, #27
  400e08:	4798      	blx	r3
  400e0a:	e0fa      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  400e0c:	2806      	cmp	r0, #6
  400e0e:	d111      	bne.n	400e34 <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  400e10:	2301      	movs	r3, #1
  400e12:	2230      	movs	r2, #48	; 0x30
  400e14:	a903      	add	r1, sp, #12
  400e16:	4628      	mov	r0, r5
  400e18:	4c7b      	ldr	r4, [pc, #492]	; (401008 <m2m_wifi_cb+0x254>)
  400e1a:	47a0      	blx	r4
  400e1c:	2800      	cmp	r0, #0
  400e1e:	f040 80f0 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400e22:	4b7a      	ldr	r3, [pc, #488]	; (40100c <m2m_wifi_cb+0x258>)
  400e24:	681b      	ldr	r3, [r3, #0]
  400e26:	2b00      	cmp	r3, #0
  400e28:	f000 80eb 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  400e2c:	a903      	add	r1, sp, #12
  400e2e:	2006      	movs	r0, #6
  400e30:	4798      	blx	r3
  400e32:	e0e6      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  400e34:	280e      	cmp	r0, #14
  400e36:	f000 80e4 	beq.w	401002 <m2m_wifi_cb+0x24e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  400e3a:	2832      	cmp	r0, #50	; 0x32
  400e3c:	d111      	bne.n	400e62 <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  400e3e:	2300      	movs	r3, #0
  400e40:	2210      	movs	r2, #16
  400e42:	a903      	add	r1, sp, #12
  400e44:	4628      	mov	r0, r5
  400e46:	4c70      	ldr	r4, [pc, #448]	; (401008 <m2m_wifi_cb+0x254>)
  400e48:	47a0      	blx	r4
  400e4a:	2800      	cmp	r0, #0
  400e4c:	f040 80d9 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400e50:	4b6e      	ldr	r3, [pc, #440]	; (40100c <m2m_wifi_cb+0x258>)
  400e52:	681b      	ldr	r3, [r3, #0]
  400e54:	2b00      	cmp	r3, #0
  400e56:	f000 80d4 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  400e5a:	a903      	add	r1, sp, #12
  400e5c:	2032      	movs	r0, #50	; 0x32
  400e5e:	4798      	blx	r3
  400e60:	e0cf      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  400e62:	282f      	cmp	r0, #47	; 0x2f
  400e64:	d116      	bne.n	400e94 <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  400e66:	2264      	movs	r2, #100	; 0x64
  400e68:	2100      	movs	r1, #0
  400e6a:	a803      	add	r0, sp, #12
  400e6c:	4b68      	ldr	r3, [pc, #416]	; (401010 <m2m_wifi_cb+0x25c>)
  400e6e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  400e70:	2300      	movs	r3, #0
  400e72:	2264      	movs	r2, #100	; 0x64
  400e74:	a903      	add	r1, sp, #12
  400e76:	4628      	mov	r0, r5
  400e78:	4c63      	ldr	r4, [pc, #396]	; (401008 <m2m_wifi_cb+0x254>)
  400e7a:	47a0      	blx	r4
  400e7c:	2800      	cmp	r0, #0
  400e7e:	f040 80c0 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400e82:	4b62      	ldr	r3, [pc, #392]	; (40100c <m2m_wifi_cb+0x258>)
  400e84:	681b      	ldr	r3, [r3, #0]
  400e86:	2b00      	cmp	r3, #0
  400e88:	f000 80bb 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  400e8c:	a903      	add	r1, sp, #12
  400e8e:	202f      	movs	r0, #47	; 0x2f
  400e90:	4798      	blx	r3
  400e92:	e0b6      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  400e94:	2834      	cmp	r0, #52	; 0x34
  400e96:	d120      	bne.n	400eda <m2m_wifi_cb+0x126>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  400e98:	2300      	movs	r3, #0
  400e9a:	2204      	movs	r2, #4
  400e9c:	a903      	add	r1, sp, #12
  400e9e:	4628      	mov	r0, r5
  400ea0:	4c59      	ldr	r4, [pc, #356]	; (401008 <m2m_wifi_cb+0x254>)
  400ea2:	47a0      	blx	r4
  400ea4:	2800      	cmp	r0, #0
  400ea6:	f040 80ac 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  400eaa:	485a      	ldr	r0, [pc, #360]	; (401014 <m2m_wifi_cb+0x260>)
  400eac:	4c5a      	ldr	r4, [pc, #360]	; (401018 <m2m_wifi_cb+0x264>)
  400eae:	47a0      	blx	r4
  400eb0:	9903      	ldr	r1, [sp, #12]
  400eb2:	0e0b      	lsrs	r3, r1, #24
  400eb4:	9300      	str	r3, [sp, #0]
  400eb6:	f3c1 4307 	ubfx	r3, r1, #16, #8
  400eba:	f3c1 2207 	ubfx	r2, r1, #8, #8
  400ebe:	b2c9      	uxtb	r1, r1
  400ec0:	4856      	ldr	r0, [pc, #344]	; (40101c <m2m_wifi_cb+0x268>)
  400ec2:	47a0      	blx	r4
  400ec4:	4856      	ldr	r0, [pc, #344]	; (401020 <m2m_wifi_cb+0x26c>)
  400ec6:	47a0      	blx	r4
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  400ec8:	4b50      	ldr	r3, [pc, #320]	; (40100c <m2m_wifi_cb+0x258>)
  400eca:	681b      	ldr	r3, [r3, #0]
  400ecc:	2b00      	cmp	r3, #0
  400ece:	f000 8098 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  400ed2:	2100      	movs	r1, #0
  400ed4:	2034      	movs	r0, #52	; 0x34
  400ed6:	4798      	blx	r3
  400ed8:	e093      	b.n	401002 <m2m_wifi_cb+0x24e>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  400eda:	2811      	cmp	r0, #17
  400edc:	d116      	bne.n	400f0c <m2m_wifi_cb+0x158>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  400ede:	2300      	movs	r3, #0
  400ee0:	4a50      	ldr	r2, [pc, #320]	; (401024 <m2m_wifi_cb+0x270>)
  400ee2:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  400ee4:	2204      	movs	r2, #4
  400ee6:	a903      	add	r1, sp, #12
  400ee8:	4628      	mov	r0, r5
  400eea:	4c47      	ldr	r4, [pc, #284]	; (401008 <m2m_wifi_cb+0x254>)
  400eec:	47a0      	blx	r4
  400eee:	2800      	cmp	r0, #0
  400ef0:	f040 8087 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			gu8ChNum = strState.u8NumofCh;
  400ef4:	f89d 200c 	ldrb.w	r2, [sp, #12]
  400ef8:	4b4b      	ldr	r3, [pc, #300]	; (401028 <m2m_wifi_cb+0x274>)
  400efa:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  400efc:	4b43      	ldr	r3, [pc, #268]	; (40100c <m2m_wifi_cb+0x258>)
  400efe:	681b      	ldr	r3, [r3, #0]
  400f00:	2b00      	cmp	r3, #0
  400f02:	d07e      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  400f04:	a903      	add	r1, sp, #12
  400f06:	2011      	movs	r0, #17
  400f08:	4798      	blx	r3
  400f0a:	e07a      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  400f0c:	2813      	cmp	r0, #19
  400f0e:	d10f      	bne.n	400f30 <m2m_wifi_cb+0x17c>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  400f10:	2300      	movs	r3, #0
  400f12:	222c      	movs	r2, #44	; 0x2c
  400f14:	a903      	add	r1, sp, #12
  400f16:	4628      	mov	r0, r5
  400f18:	4c3b      	ldr	r4, [pc, #236]	; (401008 <m2m_wifi_cb+0x254>)
  400f1a:	47a0      	blx	r4
  400f1c:	2800      	cmp	r0, #0
  400f1e:	d170      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f20:	4b3a      	ldr	r3, [pc, #232]	; (40100c <m2m_wifi_cb+0x258>)
  400f22:	681b      	ldr	r3, [r3, #0]
  400f24:	2b00      	cmp	r3, #0
  400f26:	d06c      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  400f28:	a903      	add	r1, sp, #12
  400f2a:	2013      	movs	r0, #19
  400f2c:	4798      	blx	r3
  400f2e:	e068      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  400f30:	2804      	cmp	r0, #4
  400f32:	d10f      	bne.n	400f54 <m2m_wifi_cb+0x1a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  400f34:	2300      	movs	r3, #0
  400f36:	2204      	movs	r2, #4
  400f38:	a91c      	add	r1, sp, #112	; 0x70
  400f3a:	4628      	mov	r0, r5
  400f3c:	4c32      	ldr	r4, [pc, #200]	; (401008 <m2m_wifi_cb+0x254>)
  400f3e:	47a0      	blx	r4
  400f40:	2800      	cmp	r0, #0
  400f42:	d15e      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f44:	4b31      	ldr	r3, [pc, #196]	; (40100c <m2m_wifi_cb+0x258>)
  400f46:	681b      	ldr	r3, [r3, #0]
  400f48:	2b00      	cmp	r3, #0
  400f4a:	d05a      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  400f4c:	a91c      	add	r1, sp, #112	; 0x70
  400f4e:	2004      	movs	r0, #4
  400f50:	4798      	blx	r3
  400f52:	e056      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  400f54:	2865      	cmp	r0, #101	; 0x65
  400f56:	d10f      	bne.n	400f78 <m2m_wifi_cb+0x1c4>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  400f58:	2300      	movs	r3, #0
  400f5a:	2204      	movs	r2, #4
  400f5c:	a91c      	add	r1, sp, #112	; 0x70
  400f5e:	4628      	mov	r0, r5
  400f60:	4c29      	ldr	r4, [pc, #164]	; (401008 <m2m_wifi_cb+0x254>)
  400f62:	47a0      	blx	r4
  400f64:	2800      	cmp	r0, #0
  400f66:	d14c      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f68:	4b28      	ldr	r3, [pc, #160]	; (40100c <m2m_wifi_cb+0x258>)
  400f6a:	681b      	ldr	r3, [r3, #0]
  400f6c:	2b00      	cmp	r3, #0
  400f6e:	d048      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  400f70:	a91c      	add	r1, sp, #112	; 0x70
  400f72:	2065      	movs	r0, #101	; 0x65
  400f74:	4798      	blx	r3
  400f76:	e044      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  400f78:	2809      	cmp	r0, #9
  400f7a:	d10f      	bne.n	400f9c <m2m_wifi_cb+0x1e8>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  400f7c:	2301      	movs	r3, #1
  400f7e:	2264      	movs	r2, #100	; 0x64
  400f80:	a903      	add	r1, sp, #12
  400f82:	4628      	mov	r0, r5
  400f84:	4c20      	ldr	r4, [pc, #128]	; (401008 <m2m_wifi_cb+0x254>)
  400f86:	47a0      	blx	r4
  400f88:	2800      	cmp	r0, #0
  400f8a:	d13a      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400f8c:	4b1f      	ldr	r3, [pc, #124]	; (40100c <m2m_wifi_cb+0x258>)
  400f8e:	681b      	ldr	r3, [r3, #0]
  400f90:	2b00      	cmp	r3, #0
  400f92:	d036      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  400f94:	a903      	add	r1, sp, #12
  400f96:	2009      	movs	r0, #9
  400f98:	4798      	blx	r3
  400f9a:	e032      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  400f9c:	282a      	cmp	r0, #42	; 0x2a
  400f9e:	d10d      	bne.n	400fbc <m2m_wifi_cb+0x208>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  400fa0:	2301      	movs	r3, #1
  400fa2:	2204      	movs	r2, #4
  400fa4:	a903      	add	r1, sp, #12
  400fa6:	4628      	mov	r0, r5
  400fa8:	4c17      	ldr	r4, [pc, #92]	; (401008 <m2m_wifi_cb+0x254>)
  400faa:	47a0      	blx	r4
  400fac:	bb48      	cbnz	r0, 401002 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400fae:	4b17      	ldr	r3, [pc, #92]	; (40100c <m2m_wifi_cb+0x258>)
  400fb0:	681b      	ldr	r3, [r3, #0]
  400fb2:	b333      	cbz	r3, 401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  400fb4:	a903      	add	r1, sp, #12
  400fb6:	202a      	movs	r0, #42	; 0x2a
  400fb8:	4798      	blx	r3
  400fba:	e022      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  400fbc:	2820      	cmp	r0, #32
  400fbe:	d115      	bne.n	400fec <m2m_wifi_cb+0x238>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  400fc0:	2300      	movs	r3, #0
  400fc2:	2208      	movs	r2, #8
  400fc4:	a903      	add	r1, sp, #12
  400fc6:	4628      	mov	r0, r5
  400fc8:	4c0f      	ldr	r4, [pc, #60]	; (401008 <m2m_wifi_cb+0x254>)
  400fca:	47a0      	blx	r4
  400fcc:	b9c8      	cbnz	r0, 401002 <m2m_wifi_cb+0x24e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  400fce:	2301      	movs	r3, #1
  400fd0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  400fd4:	9903      	ldr	r1, [sp, #12]
  400fd6:	f105 0008 	add.w	r0, r5, #8
  400fda:	47a0      	blx	r4
  400fdc:	b988      	cbnz	r0, 401002 <m2m_wifi_cb+0x24e>
			{
				if(gpfAppWifiCb)
  400fde:	4b0b      	ldr	r3, [pc, #44]	; (40100c <m2m_wifi_cb+0x258>)
  400fe0:	681b      	ldr	r3, [r3, #0]
  400fe2:	b173      	cbz	r3, 401002 <m2m_wifi_cb+0x24e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  400fe4:	a903      	add	r1, sp, #12
  400fe6:	2020      	movs	r0, #32
  400fe8:	4798      	blx	r3
  400fea:	e00a      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  400fec:	f44f 7295 	mov.w	r2, #298	; 0x12a
  400ff0:	490e      	ldr	r1, [pc, #56]	; (40102c <m2m_wifi_cb+0x278>)
  400ff2:	480f      	ldr	r0, [pc, #60]	; (401030 <m2m_wifi_cb+0x27c>)
  400ff4:	4d08      	ldr	r5, [pc, #32]	; (401018 <m2m_wifi_cb+0x264>)
  400ff6:	47a8      	blx	r5
  400ff8:	4621      	mov	r1, r4
  400ffa:	480e      	ldr	r0, [pc, #56]	; (401034 <m2m_wifi_cb+0x280>)
  400ffc:	47a8      	blx	r5
  400ffe:	4808      	ldr	r0, [pc, #32]	; (401020 <m2m_wifi_cb+0x26c>)
  401000:	47a8      	blx	r5
	}
}
  401002:	b01f      	add	sp, #124	; 0x7c
  401004:	bd30      	pop	{r4, r5, pc}
  401006:	bf00      	nop
  401008:	00400bc5 	.word	0x00400bc5
  40100c:	20400904 	.word	0x20400904
  401010:	00400569 	.word	0x00400569
  401014:	0040ac60 	.word	0x0040ac60
  401018:	00403f99 	.word	0x00403f99
  40101c:	0040ac6c 	.word	0x0040ac6c
  401020:	0040a9b8 	.word	0x0040a9b8
  401024:	20400908 	.word	0x20400908
  401028:	20400909 	.word	0x20400909
  40102c:	0040ac54 	.word	0x0040ac54
  401030:	0040a98c 	.word	0x0040a98c
  401034:	0040ac8c 	.word	0x0040ac8c

00401038 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  401038:	b5f0      	push	{r4, r5, r6, r7, lr}
  40103a:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  40103c:	2301      	movs	r3, #1
  40103e:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  401042:	2800      	cmp	r0, #0
  401044:	d04e      	beq.n	4010e4 <m2m_wifi_init+0xac>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  401046:	6802      	ldr	r2, [r0, #0]
  401048:	4b29      	ldr	r3, [pc, #164]	; (4010f0 <m2m_wifi_init+0xb8>)
  40104a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  40104c:	2200      	movs	r2, #0
  40104e:	4b29      	ldr	r3, [pc, #164]	; (4010f4 <m2m_wifi_init+0xbc>)
  401050:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  401052:	f10d 0007 	add.w	r0, sp, #7
  401056:	4b28      	ldr	r3, [pc, #160]	; (4010f8 <m2m_wifi_init+0xc0>)
  401058:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  40105a:	4604      	mov	r4, r0
  40105c:	2800      	cmp	r0, #0
  40105e:	d143      	bne.n	4010e8 <m2m_wifi_init+0xb0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  401060:	4b26      	ldr	r3, [pc, #152]	; (4010fc <m2m_wifi_init+0xc4>)
  401062:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401064:	4604      	mov	r4, r0
  401066:	2800      	cmp	r0, #0
  401068:	d138      	bne.n	4010dc <m2m_wifi_init+0xa4>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  40106a:	4925      	ldr	r1, [pc, #148]	; (401100 <m2m_wifi_init+0xc8>)
  40106c:	2001      	movs	r0, #1
  40106e:	4b25      	ldr	r3, [pc, #148]	; (401104 <m2m_wifi_init+0xcc>)
  401070:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  401072:	a802      	add	r0, sp, #8
  401074:	4b24      	ldr	r3, [pc, #144]	; (401108 <m2m_wifi_init+0xd0>)
  401076:	4798      	blx	r3
  401078:	4604      	mov	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  40107a:	4f24      	ldr	r7, [pc, #144]	; (40110c <m2m_wifi_init+0xd4>)
  40107c:	4638      	mov	r0, r7
  40107e:	4d24      	ldr	r5, [pc, #144]	; (401110 <m2m_wifi_init+0xd8>)
  401080:	47a8      	blx	r5
  401082:	f89d 300e 	ldrb.w	r3, [sp, #14]
  401086:	f89d 200d 	ldrb.w	r2, [sp, #13]
  40108a:	f89d 100c 	ldrb.w	r1, [sp, #12]
  40108e:	4821      	ldr	r0, [pc, #132]	; (401114 <m2m_wifi_init+0xdc>)
  401090:	47a8      	blx	r5
  401092:	4e21      	ldr	r6, [pc, #132]	; (401118 <m2m_wifi_init+0xe0>)
  401094:	4630      	mov	r0, r6
  401096:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  401098:	4638      	mov	r0, r7
  40109a:	47a8      	blx	r5
  40109c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4010a0:	f89d 2010 	ldrb.w	r2, [sp, #16]
  4010a4:	f89d 100f 	ldrb.w	r1, [sp, #15]
  4010a8:	481c      	ldr	r0, [pc, #112]	; (40111c <m2m_wifi_init+0xe4>)
  4010aa:	47a8      	blx	r5
  4010ac:	4630      	mov	r0, r6
  4010ae:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  4010b0:	4638      	mov	r0, r7
  4010b2:	47a8      	blx	r5
  4010b4:	2300      	movs	r3, #0
  4010b6:	2203      	movs	r2, #3
  4010b8:	2113      	movs	r1, #19
  4010ba:	4819      	ldr	r0, [pc, #100]	; (401120 <m2m_wifi_init+0xe8>)
  4010bc:	47a8      	blx	r5
  4010be:	4630      	mov	r0, r6
  4010c0:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  4010c2:	f114 0f0d 	cmn.w	r4, #13
  4010c6:	d10f      	bne.n	4010e8 <m2m_wifi_init+0xb0>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  4010c8:	f240 12d5 	movw	r2, #469	; 0x1d5
  4010cc:	4915      	ldr	r1, [pc, #84]	; (401124 <m2m_wifi_init+0xec>)
  4010ce:	4816      	ldr	r0, [pc, #88]	; (401128 <m2m_wifi_init+0xf0>)
  4010d0:	47a8      	blx	r5
  4010d2:	4816      	ldr	r0, [pc, #88]	; (40112c <m2m_wifi_init+0xf4>)
  4010d4:	47a8      	blx	r5
  4010d6:	4630      	mov	r0, r6
  4010d8:	47a8      	blx	r5
  4010da:	e005      	b.n	4010e8 <m2m_wifi_init+0xb0>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  4010dc:	2000      	movs	r0, #0
  4010de:	4b14      	ldr	r3, [pc, #80]	; (401130 <m2m_wifi_init+0xf8>)
  4010e0:	4798      	blx	r3
  4010e2:	e001      	b.n	4010e8 <m2m_wifi_init+0xb0>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
  4010e4:	f06f 040b 	mvn.w	r4, #11

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  4010e8:	4620      	mov	r0, r4
  4010ea:	b00b      	add	sp, #44	; 0x2c
  4010ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4010ee:	bf00      	nop
  4010f0:	20400904 	.word	0x20400904
  4010f4:	20400908 	.word	0x20400908
  4010f8:	004019f5 	.word	0x004019f5
  4010fc:	00400d65 	.word	0x00400d65
  401100:	00400db5 	.word	0x00400db5
  401104:	00400cd5 	.word	0x00400cd5
  401108:	00401949 	.word	0x00401949
  40110c:	0040ac60 	.word	0x0040ac60
  401110:	00403f99 	.word	0x00403f99
  401114:	0040ad44 	.word	0x0040ad44
  401118:	0040a9b8 	.word	0x0040a9b8
  40111c:	0040ad60 	.word	0x0040ad60
  401120:	0040ad7c 	.word	0x0040ad7c
  401124:	0040af88 	.word	0x0040af88
  401128:	0040a98c 	.word	0x0040a98c
  40112c:	0040ad98 	.word	0x0040ad98
  401130:	00401abd 	.word	0x00401abd

00401134 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  401134:	b508      	push	{r3, lr}
	return hif_handle_isr();
  401136:	4b01      	ldr	r3, [pc, #4]	; (40113c <m2m_wifi_handle_events+0x8>)
  401138:	4798      	blx	r3
}
  40113a:	bd08      	pop	{r3, pc}
  40113c:	004008a5 	.word	0x004008a5

00401140 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  401140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401144:	b0a0      	sub	sp, #128	; 0x80
  401146:	4680      	mov	r8, r0
  401148:	460d      	mov	r5, r1
  40114a:	4614      	mov	r4, r2
  40114c:	461e      	mov	r6, r3
  40114e:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  401152:	2a01      	cmp	r2, #1
  401154:	d045      	beq.n	4011e2 <m2m_wifi_connect_sc+0xa2>
	{
		if(pvAuthInfo == NULL)
  401156:	b963      	cbnz	r3, 401172 <m2m_wifi_connect_sc+0x32>
		{
			M2M_ERR("Key is not valid\n");
  401158:	f240 2203 	movw	r2, #515	; 0x203
  40115c:	497a      	ldr	r1, [pc, #488]	; (401348 <m2m_wifi_connect_sc+0x208>)
  40115e:	487b      	ldr	r0, [pc, #492]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  401160:	4c7b      	ldr	r4, [pc, #492]	; (401350 <m2m_wifi_connect_sc+0x210>)
  401162:	47a0      	blx	r4
  401164:	487b      	ldr	r0, [pc, #492]	; (401354 <m2m_wifi_connect_sc+0x214>)
  401166:	47a0      	blx	r4
  401168:	487b      	ldr	r0, [pc, #492]	; (401358 <m2m_wifi_connect_sc+0x218>)
  40116a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40116c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401170:	e0e7      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  401172:	2a02      	cmp	r2, #2
  401174:	d135      	bne.n	4011e2 <m2m_wifi_connect_sc+0xa2>
  401176:	4618      	mov	r0, r3
  401178:	4b78      	ldr	r3, [pc, #480]	; (40135c <m2m_wifi_connect_sc+0x21c>)
  40117a:	4798      	blx	r3
  40117c:	2840      	cmp	r0, #64	; 0x40
  40117e:	d130      	bne.n	4011e2 <m2m_wifi_connect_sc+0xa2>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  401180:	7833      	ldrb	r3, [r6, #0]
  401182:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401186:	b2d2      	uxtb	r2, r2
  401188:	2a36      	cmp	r2, #54	; 0x36
  40118a:	d81b      	bhi.n	4011c4 <m2m_wifi_connect_sc+0x84>
  40118c:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401190:	b2d2      	uxtb	r2, r2
  401192:	2a06      	cmp	r2, #6
  401194:	d916      	bls.n	4011c4 <m2m_wifi_connect_sc+0x84>
  401196:	3b47      	subs	r3, #71	; 0x47
  401198:	b2db      	uxtb	r3, r3
  40119a:	2b19      	cmp	r3, #25
  40119c:	d912      	bls.n	4011c4 <m2m_wifi_connect_sc+0x84>
  40119e:	4631      	mov	r1, r6
  4011a0:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  4011a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4011a8:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4011ac:	b2d2      	uxtb	r2, r2
  4011ae:	2a06      	cmp	r2, #6
  4011b0:	d908      	bls.n	4011c4 <m2m_wifi_connect_sc+0x84>
  4011b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4011b6:	b2d2      	uxtb	r2, r2
  4011b8:	2a36      	cmp	r2, #54	; 0x36
  4011ba:	d803      	bhi.n	4011c4 <m2m_wifi_connect_sc+0x84>
  4011bc:	3b47      	subs	r3, #71	; 0x47
  4011be:	b2db      	uxtb	r3, r3
  4011c0:	2b19      	cmp	r3, #25
  4011c2:	d80c      	bhi.n	4011de <m2m_wifi_connect_sc+0x9e>
				{
					M2M_ERR("Invalid Key\n");
  4011c4:	f240 220f 	movw	r2, #527	; 0x20f
  4011c8:	495f      	ldr	r1, [pc, #380]	; (401348 <m2m_wifi_connect_sc+0x208>)
  4011ca:	4860      	ldr	r0, [pc, #384]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  4011cc:	4c60      	ldr	r4, [pc, #384]	; (401350 <m2m_wifi_connect_sc+0x210>)
  4011ce:	47a0      	blx	r4
  4011d0:	4863      	ldr	r0, [pc, #396]	; (401360 <m2m_wifi_connect_sc+0x220>)
  4011d2:	47a0      	blx	r4
  4011d4:	4860      	ldr	r0, [pc, #384]	; (401358 <m2m_wifi_connect_sc+0x218>)
  4011d6:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  4011d8:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  4011dc:	e0b1      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
  4011de:	4288      	cmp	r0, r1
  4011e0:	d1e0      	bne.n	4011a4 <m2m_wifi_connect_sc+0x64>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  4011e2:	1e6b      	subs	r3, r5, #1
  4011e4:	b2db      	uxtb	r3, r3
  4011e6:	2b1f      	cmp	r3, #31
  4011e8:	d90c      	bls.n	401204 <m2m_wifi_connect_sc+0xc4>
	{
		M2M_ERR("SSID LEN INVALID\n");
  4011ea:	f240 2219 	movw	r2, #537	; 0x219
  4011ee:	4956      	ldr	r1, [pc, #344]	; (401348 <m2m_wifi_connect_sc+0x208>)
  4011f0:	4856      	ldr	r0, [pc, #344]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  4011f2:	4c57      	ldr	r4, [pc, #348]	; (401350 <m2m_wifi_connect_sc+0x210>)
  4011f4:	47a0      	blx	r4
  4011f6:	485b      	ldr	r0, [pc, #364]	; (401364 <m2m_wifi_connect_sc+0x224>)
  4011f8:	47a0      	blx	r4
  4011fa:	4857      	ldr	r0, [pc, #348]	; (401358 <m2m_wifi_connect_sc+0x218>)
  4011fc:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4011fe:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  401202:	e09e      	b.n	401342 <m2m_wifi_connect_sc+0x202>
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  401204:	2fff      	cmp	r7, #255	; 0xff
  401206:	d00e      	beq.n	401226 <m2m_wifi_connect_sc+0xe6>
  401208:	2f0d      	cmp	r7, #13
  40120a:	d90c      	bls.n	401226 <m2m_wifi_connect_sc+0xe6>
		{
			M2M_ERR("CH INVALID\n");
  40120c:	f240 2222 	movw	r2, #546	; 0x222
  401210:	494d      	ldr	r1, [pc, #308]	; (401348 <m2m_wifi_connect_sc+0x208>)
  401212:	484e      	ldr	r0, [pc, #312]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  401214:	4c4e      	ldr	r4, [pc, #312]	; (401350 <m2m_wifi_connect_sc+0x210>)
  401216:	47a0      	blx	r4
  401218:	4853      	ldr	r0, [pc, #332]	; (401368 <m2m_wifi_connect_sc+0x228>)
  40121a:	47a0      	blx	r4
  40121c:	484e      	ldr	r0, [pc, #312]	; (401358 <m2m_wifi_connect_sc+0x218>)
  40121e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401220:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401224:	e08d      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  401226:	462a      	mov	r2, r5
  401228:	4641      	mov	r1, r8
  40122a:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  40122e:	4b4f      	ldr	r3, [pc, #316]	; (40136c <m2m_wifi_connect_sc+0x22c>)
  401230:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  401232:	ab20      	add	r3, sp, #128	; 0x80
  401234:	441d      	add	r5, r3
  401236:	2300      	movs	r3, #0
  401238:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  40123c:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  401240:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  401244:	3300      	adds	r3, #0
  401246:	bf18      	it	ne
  401248:	2301      	movne	r3, #1
  40124a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  40124e:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  401252:	2c03      	cmp	r4, #3
  401254:	d138      	bne.n	4012c8 <m2m_wifi_connect_sc+0x188>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  401256:	7833      	ldrb	r3, [r6, #0]
  401258:	3b01      	subs	r3, #1
  40125a:	b2db      	uxtb	r3, r3
  40125c:	f88d 3014 	strb.w	r3, [sp, #20]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  401260:	2b03      	cmp	r3, #3
  401262:	d90e      	bls.n	401282 <m2m_wifi_connect_sc+0x142>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  401264:	f240 2239 	movw	r2, #569	; 0x239
  401268:	4937      	ldr	r1, [pc, #220]	; (401348 <m2m_wifi_connect_sc+0x208>)
  40126a:	4838      	ldr	r0, [pc, #224]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  40126c:	4c38      	ldr	r4, [pc, #224]	; (401350 <m2m_wifi_connect_sc+0x210>)
  40126e:	47a0      	blx	r4
  401270:	f89d 1014 	ldrb.w	r1, [sp, #20]
  401274:	483e      	ldr	r0, [pc, #248]	; (401370 <m2m_wifi_connect_sc+0x230>)
  401276:	47a0      	blx	r4
  401278:	4837      	ldr	r0, [pc, #220]	; (401358 <m2m_wifi_connect_sc+0x218>)
  40127a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40127c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401280:	e05f      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  401282:	7872      	ldrb	r2, [r6, #1]
  401284:	1e53      	subs	r3, r2, #1
  401286:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  40128a:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  40128e:	2b0b      	cmp	r3, #11
  401290:	d00e      	beq.n	4012b0 <m2m_wifi_connect_sc+0x170>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  401292:	f44f 7210 	mov.w	r2, #576	; 0x240
  401296:	492c      	ldr	r1, [pc, #176]	; (401348 <m2m_wifi_connect_sc+0x208>)
  401298:	482c      	ldr	r0, [pc, #176]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  40129a:	4c2d      	ldr	r4, [pc, #180]	; (401350 <m2m_wifi_connect_sc+0x210>)
  40129c:	47a0      	blx	r4
  40129e:	f89d 1015 	ldrb.w	r1, [sp, #21]
  4012a2:	4834      	ldr	r0, [pc, #208]	; (401374 <m2m_wifi_connect_sc+0x234>)
  4012a4:	47a0      	blx	r4
  4012a6:	482c      	ldr	r0, [pc, #176]	; (401358 <m2m_wifi_connect_sc+0x218>)
  4012a8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4012aa:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4012ae:	e048      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  4012b0:	1cb1      	adds	r1, r6, #2
  4012b2:	f10d 0016 	add.w	r0, sp, #22
  4012b6:	4b2d      	ldr	r3, [pc, #180]	; (40136c <m2m_wifi_connect_sc+0x22c>)
  4012b8:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  4012ba:	7873      	ldrb	r3, [r6, #1]
  4012bc:	aa20      	add	r2, sp, #128	; 0x80
  4012be:	4413      	add	r3, r2
  4012c0:	2200      	movs	r2, #0
  4012c2:	f803 2c6a 	strb.w	r2, [r3, #-106]
  4012c6:	e032      	b.n	40132e <m2m_wifi_connect_sc+0x1ee>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  4012c8:	2c02      	cmp	r4, #2
  4012ca:	d119      	bne.n	401300 <m2m_wifi_connect_sc+0x1c0>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  4012cc:	4630      	mov	r0, r6
  4012ce:	4b23      	ldr	r3, [pc, #140]	; (40135c <m2m_wifi_connect_sc+0x21c>)
  4012d0:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  4012d2:	1e43      	subs	r3, r0, #1
  4012d4:	b29b      	uxth	r3, r3
  4012d6:	2b3f      	cmp	r3, #63	; 0x3f
  4012d8:	d90c      	bls.n	4012f4 <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("Incorrect PSK key length\n");
  4012da:	f240 224f 	movw	r2, #591	; 0x24f
  4012de:	491a      	ldr	r1, [pc, #104]	; (401348 <m2m_wifi_connect_sc+0x208>)
  4012e0:	481a      	ldr	r0, [pc, #104]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  4012e2:	4c1b      	ldr	r4, [pc, #108]	; (401350 <m2m_wifi_connect_sc+0x210>)
  4012e4:	47a0      	blx	r4
  4012e6:	4824      	ldr	r0, [pc, #144]	; (401378 <m2m_wifi_connect_sc+0x238>)
  4012e8:	47a0      	blx	r4
  4012ea:	481b      	ldr	r0, [pc, #108]	; (401358 <m2m_wifi_connect_sc+0x218>)
  4012ec:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4012ee:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4012f2:	e026      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  4012f4:	1c42      	adds	r2, r0, #1
  4012f6:	4631      	mov	r1, r6
  4012f8:	a805      	add	r0, sp, #20
  4012fa:	4b1c      	ldr	r3, [pc, #112]	; (40136c <m2m_wifi_connect_sc+0x22c>)
  4012fc:	4798      	blx	r3
  4012fe:	e016      	b.n	40132e <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  401300:	2c04      	cmp	r4, #4
  401302:	d105      	bne.n	401310 <m2m_wifi_connect_sc+0x1d0>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  401304:	223e      	movs	r2, #62	; 0x3e
  401306:	4631      	mov	r1, r6
  401308:	a805      	add	r0, sp, #20
  40130a:	4b18      	ldr	r3, [pc, #96]	; (40136c <m2m_wifi_connect_sc+0x22c>)
  40130c:	4798      	blx	r3
  40130e:	e00e      	b.n	40132e <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  401310:	2c01      	cmp	r4, #1
  401312:	d00c      	beq.n	40132e <m2m_wifi_connect_sc+0x1ee>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
  401314:	f240 225f 	movw	r2, #607	; 0x25f
  401318:	490b      	ldr	r1, [pc, #44]	; (401348 <m2m_wifi_connect_sc+0x208>)
  40131a:	480c      	ldr	r0, [pc, #48]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  40131c:	4c0c      	ldr	r4, [pc, #48]	; (401350 <m2m_wifi_connect_sc+0x210>)
  40131e:	47a0      	blx	r4
  401320:	4816      	ldr	r0, [pc, #88]	; (40137c <m2m_wifi_connect_sc+0x23c>)
  401322:	47a0      	blx	r4
  401324:	480c      	ldr	r0, [pc, #48]	; (401358 <m2m_wifi_connect_sc+0x218>)
  401326:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401328:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40132c:	e009      	b.n	401342 <m2m_wifi_connect_sc+0x202>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  40132e:	2300      	movs	r3, #0
  401330:	9302      	str	r3, [sp, #8]
  401332:	9301      	str	r3, [sp, #4]
  401334:	9300      	str	r3, [sp, #0]
  401336:	236c      	movs	r3, #108	; 0x6c
  401338:	aa05      	add	r2, sp, #20
  40133a:	2128      	movs	r1, #40	; 0x28
  40133c:	2001      	movs	r0, #1
  40133e:	4c10      	ldr	r4, [pc, #64]	; (401380 <m2m_wifi_connect_sc+0x240>)
  401340:	47a0      	blx	r4

ERR1:
	return ret;
}
  401342:	b020      	add	sp, #128	; 0x80
  401344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401348:	0040ac40 	.word	0x0040ac40
  40134c:	0040a98c 	.word	0x0040a98c
  401350:	00403f99 	.word	0x00403f99
  401354:	0040adb4 	.word	0x0040adb4
  401358:	0040a9b8 	.word	0x0040a9b8
  40135c:	00400579 	.word	0x00400579
  401360:	0040adc8 	.word	0x0040adc8
  401364:	0040add8 	.word	0x0040add8
  401368:	0040adec 	.word	0x0040adec
  40136c:	00400555 	.word	0x00400555
  401370:	0040adf8 	.word	0x0040adf8
  401374:	0040ae14 	.word	0x0040ae14
  401378:	0040ae30 	.word	0x0040ae30
  40137c:	0040ae4c 	.word	0x0040ae4c
  401380:	004006cd 	.word	0x004006cd

00401384 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
  401384:	b510      	push	{r4, lr}
  401386:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  401388:	2400      	movs	r4, #0
  40138a:	9401      	str	r4, [sp, #4]
  40138c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  401390:	9400      	str	r4, [sp, #0]
  401392:	4c02      	ldr	r4, [pc, #8]	; (40139c <m2m_wifi_connect+0x18>)
  401394:	47a0      	blx	r4
}
  401396:	b002      	add	sp, #8
  401398:	bd10      	pop	{r4, pc}
  40139a:	bf00      	nop
  40139c:	00401141 	.word	0x00401141

004013a0 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  4013a0:	2000      	movs	r0, #0
  4013a2:	4770      	bx	lr

004013a4 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  4013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4013a6:	b083      	sub	sp, #12
  4013a8:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4013aa:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  4013ae:	4e0a      	ldr	r6, [pc, #40]	; (4013d8 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4013b0:	4f0a      	ldr	r7, [pc, #40]	; (4013dc <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4013b2:	4621      	mov	r1, r4
  4013b4:	4628      	mov	r0, r5
  4013b6:	47b0      	blx	r6
		if(val32 != 0) {		
  4013b8:	b154      	cbz	r4, 4013d0 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  4013ba:	a902      	add	r1, sp, #8
  4013bc:	2300      	movs	r3, #0
  4013be:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4013c2:	4628      	mov	r0, r5
  4013c4:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  4013c6:	2800      	cmp	r0, #0
  4013c8:	d1f3      	bne.n	4013b2 <chip_apply_conf+0xe>
				if(reg == val32)
  4013ca:	9b01      	ldr	r3, [sp, #4]
  4013cc:	429c      	cmp	r4, r3
  4013ce:	d1f0      	bne.n	4013b2 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  4013d0:	2000      	movs	r0, #0
  4013d2:	b003      	add	sp, #12
  4013d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4013d6:	bf00      	nop
  4013d8:	0040187d 	.word	0x0040187d
  4013dc:	00401871 	.word	0x00401871

004013e0 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  4013e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013e4:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  4013e6:	2001      	movs	r0, #1
  4013e8:	4b3d      	ldr	r3, [pc, #244]	; (4014e0 <nm_clkless_wake+0x100>)
  4013ea:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  4013ec:	a901      	add	r1, sp, #4
  4013ee:	2001      	movs	r0, #1
  4013f0:	4b3c      	ldr	r3, [pc, #240]	; (4014e4 <nm_clkless_wake+0x104>)
  4013f2:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  4013f4:	4682      	mov	sl, r0
  4013f6:	b148      	cbz	r0, 40140c <nm_clkless_wake+0x2c>
		M2M_ERR("Bus error (1). Wake up failed\n");
  4013f8:	2272      	movs	r2, #114	; 0x72
  4013fa:	493b      	ldr	r1, [pc, #236]	; (4014e8 <nm_clkless_wake+0x108>)
  4013fc:	483b      	ldr	r0, [pc, #236]	; (4014ec <nm_clkless_wake+0x10c>)
  4013fe:	4c3c      	ldr	r4, [pc, #240]	; (4014f0 <nm_clkless_wake+0x110>)
  401400:	47a0      	blx	r4
  401402:	483c      	ldr	r0, [pc, #240]	; (4014f4 <nm_clkless_wake+0x114>)
  401404:	47a0      	blx	r4
  401406:	483c      	ldr	r0, [pc, #240]	; (4014f8 <nm_clkless_wake+0x118>)
  401408:	47a0      	blx	r4
		goto _WAKE_EXIT;
  40140a:	e064      	b.n	4014d6 <nm_clkless_wake+0xf6>
  40140c:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40140e:	f04f 0801 	mov.w	r8, #1
  401412:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 40150c <nm_clkless_wake+0x12c>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  401416:	4d32      	ldr	r5, [pc, #200]	; (4014e0 <nm_clkless_wake+0x100>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  401418:	4f38      	ldr	r7, [pc, #224]	; (4014fc <nm_clkless_wake+0x11c>)
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40141a:	9901      	ldr	r1, [sp, #4]
  40141c:	f041 0102 	orr.w	r1, r1, #2
  401420:	4640      	mov	r0, r8
  401422:	47c8      	blx	r9
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  401424:	4640      	mov	r0, r8
  401426:	47a8      	blx	r5
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401428:	4669      	mov	r1, sp
  40142a:	4b35      	ldr	r3, [pc, #212]	; (401500 <nm_clkless_wake+0x120>)
  40142c:	6818      	ldr	r0, [r3, #0]
  40142e:	4b2d      	ldr	r3, [pc, #180]	; (4014e4 <nm_clkless_wake+0x104>)
  401430:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  401432:	b918      	cbnz	r0, 40143c <nm_clkless_wake+0x5c>
  401434:	9b00      	ldr	r3, [sp, #0]
  401436:	b10b      	cbz	r3, 40143c <nm_clkless_wake+0x5c>
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401438:	4e31      	ldr	r6, [pc, #196]	; (401500 <nm_clkless_wake+0x120>)
  40143a:	e037      	b.n	4014ac <nm_clkless_wake+0xcc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  40143c:	4e30      	ldr	r6, [pc, #192]	; (401500 <nm_clkless_wake+0x120>)
  40143e:	230e      	movs	r3, #14
  401440:	6033      	str	r3, [r6, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  401442:	4640      	mov	r0, r8
  401444:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401446:	4669      	mov	r1, sp
  401448:	6830      	ldr	r0, [r6, #0]
  40144a:	4b26      	ldr	r3, [pc, #152]	; (4014e4 <nm_clkless_wake+0x104>)
  40144c:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40144e:	b910      	cbnz	r0, 401456 <nm_clkless_wake+0x76>
  401450:	9b00      	ldr	r3, [sp, #0]
  401452:	2b00      	cmp	r3, #0
  401454:	d1f0      	bne.n	401438 <nm_clkless_wake+0x58>
				 
				clk_status_reg_adr = 0x13;
  401456:	4e2a      	ldr	r6, [pc, #168]	; (401500 <nm_clkless_wake+0x120>)
  401458:	2313      	movs	r3, #19
  40145a:	6033      	str	r3, [r6, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  40145c:	4640      	mov	r0, r8
  40145e:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401460:	4669      	mov	r1, sp
  401462:	6830      	ldr	r0, [r6, #0]
  401464:	4b1f      	ldr	r3, [pc, #124]	; (4014e4 <nm_clkless_wake+0x104>)
  401466:	4798      	blx	r3
			
				if(ret != M2M_SUCCESS) {
  401468:	4606      	mov	r6, r0
  40146a:	2800      	cmp	r0, #0
  40146c:	d0e4      	beq.n	401438 <nm_clkless_wake+0x58>
					M2M_ERR("Bus error (2). Wake up failed\n");
  40146e:	2296      	movs	r2, #150	; 0x96
  401470:	491d      	ldr	r1, [pc, #116]	; (4014e8 <nm_clkless_wake+0x108>)
  401472:	481e      	ldr	r0, [pc, #120]	; (4014ec <nm_clkless_wake+0x10c>)
  401474:	4c1e      	ldr	r4, [pc, #120]	; (4014f0 <nm_clkless_wake+0x110>)
  401476:	47a0      	blx	r4
  401478:	4822      	ldr	r0, [pc, #136]	; (401504 <nm_clkless_wake+0x124>)
  40147a:	47a0      	blx	r4
  40147c:	481e      	ldr	r0, [pc, #120]	; (4014f8 <nm_clkless_wake+0x118>)
  40147e:	47a0      	blx	r4
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401480:	46b2      	mov	sl, r6
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
  401482:	e028      	b.n	4014d6 <nm_clkless_wake+0xf6>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  401484:	2002      	movs	r0, #2
  401486:	47a8      	blx	r5

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401488:	4669      	mov	r1, sp
  40148a:	6830      	ldr	r0, [r6, #0]
  40148c:	4b15      	ldr	r3, [pc, #84]	; (4014e4 <nm_clkless_wake+0x104>)
  40148e:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  401490:	9b00      	ldr	r3, [sp, #0]
  401492:	f013 0f04 	tst.w	r3, #4
  401496:	d109      	bne.n	4014ac <nm_clkless_wake+0xcc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  401498:	22aa      	movs	r2, #170	; 0xaa
  40149a:	4913      	ldr	r1, [pc, #76]	; (4014e8 <nm_clkless_wake+0x108>)
  40149c:	4813      	ldr	r0, [pc, #76]	; (4014ec <nm_clkless_wake+0x10c>)
  40149e:	f8df b050 	ldr.w	fp, [pc, #80]	; 4014f0 <nm_clkless_wake+0x110>
  4014a2:	47d8      	blx	fp
  4014a4:	4818      	ldr	r0, [pc, #96]	; (401508 <nm_clkless_wake+0x128>)
  4014a6:	47d8      	blx	fp
  4014a8:	4813      	ldr	r0, [pc, #76]	; (4014f8 <nm_clkless_wake+0x118>)
  4014aa:	47d8      	blx	fp
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4014ac:	9b00      	ldr	r3, [sp, #0]
  4014ae:	f013 0f04 	tst.w	r3, #4
  4014b2:	d110      	bne.n	4014d6 <nm_clkless_wake+0xf6>
  4014b4:	3401      	adds	r4, #1
  4014b6:	fba7 2304 	umull	r2, r3, r7, r4
  4014ba:	085b      	lsrs	r3, r3, #1
  4014bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4014c0:	429c      	cmp	r4, r3
  4014c2:	d0df      	beq.n	401484 <nm_clkless_wake+0xa4>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  4014c4:	9901      	ldr	r1, [sp, #4]
  4014c6:	f041 0102 	orr.w	r1, r1, #2
  4014ca:	4640      	mov	r0, r8
  4014cc:	47c8      	blx	r9
		}
	} while((clk_status_reg & 0x4) == 0);
  4014ce:	9b00      	ldr	r3, [sp, #0]
  4014d0:	f013 0f04 	tst.w	r3, #4
  4014d4:	d0a1      	beq.n	40141a <nm_clkless_wake+0x3a>

_WAKE_EXIT:
	return ret;
}
  4014d6:	4650      	mov	r0, sl
  4014d8:	b003      	add	sp, #12
  4014da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014de:	bf00      	nop
  4014e0:	004001b9 	.word	0x004001b9
  4014e4:	00401871 	.word	0x00401871
  4014e8:	0040afa4 	.word	0x0040afa4
  4014ec:	0040a98c 	.word	0x0040a98c
  4014f0:	00403f99 	.word	0x00403f99
  4014f4:	0040afb4 	.word	0x0040afb4
  4014f8:	0040a9b8 	.word	0x0040a9b8
  4014fc:	aaaaaaab 	.word	0xaaaaaaab
  401500:	20400010 	.word	0x20400010
  401504:	0040afd4 	.word	0x0040afd4
  401508:	0040aff4 	.word	0x0040aff4
  40150c:	0040187d 	.word	0x0040187d

00401510 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  401510:	b500      	push	{lr}
  401512:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  401514:	a901      	add	r1, sp, #4
  401516:	f241 4008 	movw	r0, #5128	; 0x1408
  40151a:	4b15      	ldr	r3, [pc, #84]	; (401570 <enable_interrupts+0x60>)
  40151c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40151e:	b9e0      	cbnz	r0, 40155a <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  401520:	9901      	ldr	r1, [sp, #4]
  401522:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  401526:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  401528:	f241 4008 	movw	r0, #5128	; 0x1408
  40152c:	4b11      	ldr	r3, [pc, #68]	; (401574 <enable_interrupts+0x64>)
  40152e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401530:	b9b0      	cbnz	r0, 401560 <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  401532:	a901      	add	r1, sp, #4
  401534:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  401538:	4b0d      	ldr	r3, [pc, #52]	; (401570 <enable_interrupts+0x60>)
  40153a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40153c:	b998      	cbnz	r0, 401566 <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  40153e:	9901      	ldr	r1, [sp, #4]
  401540:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  401544:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  401546:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40154a:	4b0a      	ldr	r3, [pc, #40]	; (401574 <enable_interrupts+0x64>)
  40154c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40154e:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
  401550:	bf14      	ite	ne
  401552:	f06f 0005 	mvnne.w	r0, #5
  401556:	2000      	moveq	r0, #0
  401558:	e007      	b.n	40156a <enable_interrupts+0x5a>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  40155a:	f06f 0005 	mvn.w	r0, #5
  40155e:	e004      	b.n	40156a <enable_interrupts+0x5a>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  401560:	f06f 0005 	mvn.w	r0, #5
  401564:	e001      	b.n	40156a <enable_interrupts+0x5a>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  401566:	f06f 0005 	mvn.w	r0, #5
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
  40156a:	b003      	add	sp, #12
  40156c:	f85d fb04 	ldr.w	pc, [sp], #4
  401570:	00401871 	.word	0x00401871
  401574:	0040187d 	.word	0x0040187d

00401578 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  401578:	b510      	push	{r4, lr}
  40157a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  40157c:	4b24      	ldr	r3, [pc, #144]	; (401610 <nmi_get_chipid+0x98>)
  40157e:	681c      	ldr	r4, [r3, #0]
  401580:	2c00      	cmp	r4, #0
  401582:	d140      	bne.n	401606 <nmi_get_chipid+0x8e>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  401584:	4619      	mov	r1, r3
  401586:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40158a:	4b22      	ldr	r3, [pc, #136]	; (401614 <nmi_get_chipid+0x9c>)
  40158c:	4798      	blx	r3
  40158e:	b118      	cbz	r0, 401598 <nmi_get_chipid+0x20>
			chipid = 0;
  401590:	2200      	movs	r2, #0
  401592:	4b1f      	ldr	r3, [pc, #124]	; (401610 <nmi_get_chipid+0x98>)
  401594:	601a      	str	r2, [r3, #0]
			return 0;
  401596:	e038      	b.n	40160a <nmi_get_chipid+0x92>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  401598:	a901      	add	r1, sp, #4
  40159a:	f241 30f4 	movw	r0, #5108	; 0x13f4
  40159e:	4b1d      	ldr	r3, [pc, #116]	; (401614 <nmi_get_chipid+0x9c>)
  4015a0:	4798      	blx	r3
  4015a2:	b118      	cbz	r0, 4015ac <nmi_get_chipid+0x34>
			chipid = 0;
  4015a4:	2200      	movs	r2, #0
  4015a6:	4b1a      	ldr	r3, [pc, #104]	; (401610 <nmi_get_chipid+0x98>)
  4015a8:	601a      	str	r2, [r3, #0]
			return 0;
  4015aa:	e02e      	b.n	40160a <nmi_get_chipid+0x92>
		}

		if (chipid == 0x1002a0)  {
  4015ac:	4b18      	ldr	r3, [pc, #96]	; (401610 <nmi_get_chipid+0x98>)
  4015ae:	681b      	ldr	r3, [r3, #0]
  4015b0:	4a19      	ldr	r2, [pc, #100]	; (401618 <nmi_get_chipid+0xa0>)
  4015b2:	4293      	cmp	r3, r2
  4015b4:	d106      	bne.n	4015c4 <nmi_get_chipid+0x4c>
			if (rfrevid == 0x1) { /* 1002A0 */
  4015b6:	9b01      	ldr	r3, [sp, #4]
  4015b8:	2b01      	cmp	r3, #1
  4015ba:	d01d      	beq.n	4015f8 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  4015bc:	3201      	adds	r2, #1
  4015be:	4b14      	ldr	r3, [pc, #80]	; (401610 <nmi_get_chipid+0x98>)
  4015c0:	601a      	str	r2, [r3, #0]
  4015c2:	e019      	b.n	4015f8 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
  4015c4:	4a15      	ldr	r2, [pc, #84]	; (40161c <nmi_get_chipid+0xa4>)
  4015c6:	4293      	cmp	r3, r2
  4015c8:	d109      	bne.n	4015de <nmi_get_chipid+0x66>
			if(rfrevid == 3) { /* 1002B0 */
  4015ca:	9b01      	ldr	r3, [sp, #4]
  4015cc:	2b03      	cmp	r3, #3
  4015ce:	d013      	beq.n	4015f8 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
  4015d0:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  4015d2:	bf0c      	ite	eq
  4015d4:	3201      	addeq	r2, #1
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  4015d6:	4a12      	ldrne	r2, [pc, #72]	; (401620 <nmi_get_chipid+0xa8>)
  4015d8:	4b0d      	ldr	r3, [pc, #52]	; (401610 <nmi_get_chipid+0x98>)
  4015da:	601a      	str	r2, [r3, #0]
  4015dc:	e00c      	b.n	4015f8 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1000F0) { 
  4015de:	4a11      	ldr	r2, [pc, #68]	; (401624 <nmi_get_chipid+0xac>)
  4015e0:	4293      	cmp	r3, r2
  4015e2:	d109      	bne.n	4015f8 <nmi_get_chipid+0x80>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  4015e4:	490a      	ldr	r1, [pc, #40]	; (401610 <nmi_get_chipid+0x98>)
  4015e6:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  4015ea:	4b0a      	ldr	r3, [pc, #40]	; (401614 <nmi_get_chipid+0x9c>)
  4015ec:	4798      	blx	r3
  4015ee:	b118      	cbz	r0, 4015f8 <nmi_get_chipid+0x80>
			chipid = 0;
  4015f0:	2200      	movs	r2, #0
  4015f2:	4b07      	ldr	r3, [pc, #28]	; (401610 <nmi_get_chipid+0x98>)
  4015f4:	601a      	str	r2, [r3, #0]
			return 0;
  4015f6:	e008      	b.n	40160a <nmi_get_chipid+0x92>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
  4015f8:	4a05      	ldr	r2, [pc, #20]	; (401610 <nmi_get_chipid+0x98>)
  4015fa:	6813      	ldr	r3, [r2, #0]
  4015fc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401600:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  401604:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  401606:	4b02      	ldr	r3, [pc, #8]	; (401610 <nmi_get_chipid+0x98>)
  401608:	681c      	ldr	r4, [r3, #0]
}
  40160a:	4620      	mov	r0, r4
  40160c:	b002      	add	sp, #8
  40160e:	bd10      	pop	{r4, pc}
  401610:	2040090c 	.word	0x2040090c
  401614:	00401871 	.word	0x00401871
  401618:	001002a0 	.word	0x001002a0
  40161c:	001002b0 	.word	0x001002b0
  401620:	001002b2 	.word	0x001002b2
  401624:	001000f0 	.word	0x001000f0

00401628 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  401628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40162c:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40162e:	f241 0514 	movw	r5, #4116	; 0x1014
  401632:	4c28      	ldr	r4, [pc, #160]	; (4016d4 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  401634:	4e28      	ldr	r6, [pc, #160]	; (4016d8 <wait_for_bootrom+0xb0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  401636:	4628      	mov	r0, r5
  401638:	47a0      	blx	r4
		if (reg & 0x80000000) {
  40163a:	2800      	cmp	r0, #0
  40163c:	db02      	blt.n	401644 <wait_for_bootrom+0x1c>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40163e:	2001      	movs	r0, #1
  401640:	47b0      	blx	r6
	}
  401642:	e7f8      	b.n	401636 <wait_for_bootrom+0xe>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  401644:	4825      	ldr	r0, [pc, #148]	; (4016dc <wait_for_bootrom+0xb4>)
  401646:	4b23      	ldr	r3, [pc, #140]	; (4016d4 <wait_for_bootrom+0xac>)
  401648:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  40164a:	f010 0f01 	tst.w	r0, #1
  40164e:	d110      	bne.n	401672 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  401650:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4016d8 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  401654:	4e1f      	ldr	r6, [pc, #124]	; (4016d4 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  401656:	4d22      	ldr	r5, [pc, #136]	; (4016e0 <wait_for_bootrom+0xb8>)
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  401658:	2001      	movs	r0, #1
  40165a:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  40165c:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401660:	47b0      	blx	r6
  401662:	4604      	mov	r4, r0

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  401664:	462a      	mov	r2, r5
  401666:	4601      	mov	r1, r0
  401668:	481e      	ldr	r0, [pc, #120]	; (4016e4 <wait_for_bootrom+0xbc>)
  40166a:	4b1f      	ldr	r3, [pc, #124]	; (4016e8 <wait_for_bootrom+0xc0>)
  40166c:	4798      	blx	r3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  40166e:	42ac      	cmp	r4, r5
  401670:	d1f2      	bne.n	401658 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  401672:	2f02      	cmp	r7, #2
  401674:	d10a      	bne.n	40168c <wait_for_bootrom+0x64>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  401676:	491d      	ldr	r1, [pc, #116]	; (4016ec <wait_for_bootrom+0xc4>)
  401678:	481d      	ldr	r0, [pc, #116]	; (4016f0 <wait_for_bootrom+0xc8>)
  40167a:	4c1e      	ldr	r4, [pc, #120]	; (4016f4 <wait_for_bootrom+0xcc>)
  40167c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  40167e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401682:	f241 008c 	movw	r0, #4236	; 0x108c
  401686:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  401688:	2400      	movs	r4, #0
  40168a:	e00f      	b.n	4016ac <wait_for_bootrom+0x84>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  40168c:	2f03      	cmp	r7, #3
  40168e:	d109      	bne.n	4016a4 <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  401690:	4916      	ldr	r1, [pc, #88]	; (4016ec <wait_for_bootrom+0xc4>)
  401692:	4817      	ldr	r0, [pc, #92]	; (4016f0 <wait_for_bootrom+0xc8>)
  401694:	4c17      	ldr	r4, [pc, #92]	; (4016f4 <wait_for_bootrom+0xcc>)
  401696:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  401698:	2100      	movs	r1, #0
  40169a:	f241 008c 	movw	r0, #4236	; 0x108c
  40169e:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  4016a0:	2400      	movs	r4, #0
  4016a2:	e003      	b.n	4016ac <wait_for_bootrom+0x84>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  4016a4:	2f04      	cmp	r7, #4
  4016a6:	bf14      	ite	ne
  4016a8:	2400      	movne	r4, #0
  4016aa:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  4016ac:	4b12      	ldr	r3, [pc, #72]	; (4016f8 <wait_for_bootrom+0xd0>)
  4016ae:	4798      	blx	r3
  4016b0:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4016b4:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  4016b8:	bf0c      	ite	eq
  4016ba:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  4016be:	4620      	movne	r0, r4
  4016c0:	4b0e      	ldr	r3, [pc, #56]	; (4016fc <wait_for_bootrom+0xd4>)
  4016c2:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  4016c4:	490e      	ldr	r1, [pc, #56]	; (401700 <wait_for_bootrom+0xd8>)
  4016c6:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4016ca:	4b0a      	ldr	r3, [pc, #40]	; (4016f4 <wait_for_bootrom+0xcc>)
  4016cc:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  4016ce:	2000      	movs	r0, #0
  4016d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4016d4:	00401865 	.word	0x00401865
  4016d8:	004001b9 	.word	0x004001b9
  4016dc:	000207bc 	.word	0x000207bc
  4016e0:	10add09e 	.word	0x10add09e
  4016e4:	0040b040 	.word	0x0040b040
  4016e8:	00403f99 	.word	0x00403f99
  4016ec:	3c1cd57d 	.word	0x3c1cd57d
  4016f0:	000207ac 	.word	0x000207ac
  4016f4:	0040187d 	.word	0x0040187d
  4016f8:	00401579 	.word	0x00401579
  4016fc:	004013a5 	.word	0x004013a5
  401700:	ef522f61 	.word	0xef522f61

00401704 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  401704:	b5f0      	push	{r4, r5, r6, r7, lr}
  401706:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  401708:	f241 038c 	movw	r3, #4236	; 0x108c
  40170c:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  40170e:	4b18      	ldr	r3, [pc, #96]	; (401770 <wait_for_firmware_start+0x6c>)
  401710:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  401712:	3802      	subs	r0, #2
  401714:	b2c0      	uxtb	r0, r0
  401716:	2801      	cmp	r0, #1
  401718:	d810      	bhi.n	40173c <wait_for_firmware_start+0x38>
		regAddress = NMI_REV_REG;
  40171a:	4b16      	ldr	r3, [pc, #88]	; (401774 <wait_for_firmware_start+0x70>)
  40171c:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  40171e:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  401722:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  401726:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  40172a:	9300      	str	r3, [sp, #0]
  40172c:	e006      	b.n	40173c <wait_for_firmware_start+0x38>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  40172e:	4638      	mov	r0, r7
  401730:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  401732:	9801      	ldr	r0, [sp, #4]
  401734:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  401736:	3c01      	subs	r4, #1
  401738:	d106      	bne.n	401748 <wait_for_firmware_start+0x44>
  40173a:	e013      	b.n	401764 <wait_for_firmware_start+0x60>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
  40173c:	f04f 34ff 	mov.w	r4, #4294967295
  401740:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  401742:	2702      	movs	r7, #2
  401744:	4e0c      	ldr	r6, [pc, #48]	; (401778 <wait_for_firmware_start+0x74>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  401746:	4d0d      	ldr	r5, [pc, #52]	; (40177c <wait_for_firmware_start+0x78>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  401748:	9b00      	ldr	r3, [sp, #0]
  40174a:	4298      	cmp	r0, r3
  40174c:	d1ef      	bne.n	40172e <wait_for_firmware_start+0x2a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  40174e:	9a00      	ldr	r2, [sp, #0]
  401750:	4b07      	ldr	r3, [pc, #28]	; (401770 <wait_for_firmware_start+0x6c>)
  401752:	429a      	cmp	r2, r3
  401754:	d109      	bne.n	40176a <wait_for_firmware_start+0x66>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  401756:	2100      	movs	r1, #0
  401758:	f241 008c 	movw	r0, #4236	; 0x108c
  40175c:	4b08      	ldr	r3, [pc, #32]	; (401780 <wait_for_firmware_start+0x7c>)
  40175e:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  401760:	2000      	movs	r0, #0
  401762:	e003      	b.n	40176c <wait_for_firmware_start+0x68>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  401764:	f06f 0004 	mvn.w	r0, #4
  401768:	e000      	b.n	40176c <wait_for_firmware_start+0x68>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  40176a:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  40176c:	b003      	add	sp, #12
  40176e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401770:	02532636 	.word	0x02532636
  401774:	000207ac 	.word	0x000207ac
  401778:	004001b9 	.word	0x004001b9
  40177c:	00401865 	.word	0x00401865
  401780:	0040187d 	.word	0x0040187d

00401784 <chip_deinit>:

sint8 chip_deinit(void)
{
  401784:	b5f0      	push	{r4, r5, r6, r7, lr}
  401786:	b083      	sub	sp, #12
	uint32 reg = 0;
  401788:	a902      	add	r1, sp, #8
  40178a:	2300      	movs	r3, #0
  40178c:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401790:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401794:	4b24      	ldr	r3, [pc, #144]	; (401828 <chip_deinit+0xa4>)
  401796:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  401798:	b148      	cbz	r0, 4017ae <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
  40179a:	f240 2231 	movw	r2, #561	; 0x231
  40179e:	4923      	ldr	r1, [pc, #140]	; (40182c <chip_deinit+0xa8>)
  4017a0:	4823      	ldr	r0, [pc, #140]	; (401830 <chip_deinit+0xac>)
  4017a2:	4c24      	ldr	r4, [pc, #144]	; (401834 <chip_deinit+0xb0>)
  4017a4:	47a0      	blx	r4
  4017a6:	4824      	ldr	r0, [pc, #144]	; (401838 <chip_deinit+0xb4>)
  4017a8:	47a0      	blx	r4
  4017aa:	4824      	ldr	r0, [pc, #144]	; (40183c <chip_deinit+0xb8>)
  4017ac:	47a0      	blx	r4
	}
	reg &= ~(1 << 10);
  4017ae:	9901      	ldr	r1, [sp, #4]
  4017b0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4017b4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4017b6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4017ba:	4b21      	ldr	r3, [pc, #132]	; (401840 <chip_deinit+0xbc>)
  4017bc:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  4017be:	4605      	mov	r5, r0
  4017c0:	b158      	cbz	r0, 4017da <chip_deinit+0x56>
		M2M_ERR("Error while writing reg\n");
  4017c2:	f240 2237 	movw	r2, #567	; 0x237
  4017c6:	4919      	ldr	r1, [pc, #100]	; (40182c <chip_deinit+0xa8>)
  4017c8:	4819      	ldr	r0, [pc, #100]	; (401830 <chip_deinit+0xac>)
  4017ca:	4c1a      	ldr	r4, [pc, #104]	; (401834 <chip_deinit+0xb0>)
  4017cc:	47a0      	blx	r4
  4017ce:	481d      	ldr	r0, [pc, #116]	; (401844 <chip_deinit+0xc0>)
  4017d0:	47a0      	blx	r4
  4017d2:	481a      	ldr	r0, [pc, #104]	; (40183c <chip_deinit+0xb8>)
  4017d4:	47a0      	blx	r4
		return ret;
  4017d6:	4628      	mov	r0, r5
  4017d8:	e024      	b.n	401824 <chip_deinit+0xa0>
  4017da:	240a      	movs	r4, #10
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4017dc:	4e12      	ldr	r6, [pc, #72]	; (401828 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4017de:	4f18      	ldr	r7, [pc, #96]	; (401840 <chip_deinit+0xbc>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4017e0:	a901      	add	r1, sp, #4
  4017e2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4017e6:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  4017e8:	4605      	mov	r5, r0
  4017ea:	b158      	cbz	r0, 401804 <chip_deinit+0x80>
			M2M_ERR("Error while reading reg\n");
  4017ec:	f240 223e 	movw	r2, #574	; 0x23e
  4017f0:	490e      	ldr	r1, [pc, #56]	; (40182c <chip_deinit+0xa8>)
  4017f2:	480f      	ldr	r0, [pc, #60]	; (401830 <chip_deinit+0xac>)
  4017f4:	4c0f      	ldr	r4, [pc, #60]	; (401834 <chip_deinit+0xb0>)
  4017f6:	47a0      	blx	r4
  4017f8:	4813      	ldr	r0, [pc, #76]	; (401848 <chip_deinit+0xc4>)
  4017fa:	47a0      	blx	r4
  4017fc:	480f      	ldr	r0, [pc, #60]	; (40183c <chip_deinit+0xb8>)
  4017fe:	47a0      	blx	r4
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401800:	4628      	mov	r0, r5
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
  401802:	e00f      	b.n	401824 <chip_deinit+0xa0>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  401804:	9901      	ldr	r1, [sp, #4]
  401806:	f411 6f80 	tst.w	r1, #1024	; 0x400
  40180a:	d00a      	beq.n	401822 <chip_deinit+0x9e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  40180c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401810:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401812:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401816:	47b8      	blx	r7
  401818:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  40181a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40181e:	d1df      	bne.n	4017e0 <chip_deinit+0x5c>
  401820:	e000      	b.n	401824 <chip_deinit+0xa0>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401822:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
  401824:	b003      	add	sp, #12
  401826:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401828:	00401871 	.word	0x00401871
  40182c:	0040af98 	.word	0x0040af98
  401830:	0040a98c 	.word	0x0040a98c
  401834:	00403f99 	.word	0x00403f99
  401838:	0040b050 	.word	0x0040b050
  40183c:	0040a9b8 	.word	0x0040a9b8
  401840:	0040187d 	.word	0x0040187d
  401844:	0040b06c 	.word	0x0040b06c
  401848:	0040b088 	.word	0x0040b088

0040184c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  40184c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  40184e:	4b01      	ldr	r3, [pc, #4]	; (401854 <nm_bus_iface_init+0x8>)
  401850:	4798      	blx	r3

	return ret;
}
  401852:	bd08      	pop	{r3, pc}
  401854:	00400329 	.word	0x00400329

00401858 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  401858:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  40185a:	4b01      	ldr	r3, [pc, #4]	; (401860 <nm_bus_iface_deinit+0x8>)
  40185c:	4798      	blx	r3

	return ret;
}
  40185e:	bd08      	pop	{r3, pc}
  401860:	00400515 	.word	0x00400515

00401864 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  401864:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  401866:	4b01      	ldr	r3, [pc, #4]	; (40186c <nm_read_reg+0x8>)
  401868:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  40186a:	bd08      	pop	{r3, pc}
  40186c:	004020b5 	.word	0x004020b5

00401870 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  401870:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  401872:	4b01      	ldr	r3, [pc, #4]	; (401878 <nm_read_reg_with_ret+0x8>)
  401874:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  401876:	bd08      	pop	{r3, pc}
  401878:	004020cd 	.word	0x004020cd

0040187c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  40187c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  40187e:	4b01      	ldr	r3, [pc, #4]	; (401884 <nm_write_reg+0x8>)
  401880:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  401882:	bd08      	pop	{r3, pc}
  401884:	004020e5 	.word	0x004020e5

00401888 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40188c:	4607      	mov	r7, r0
  40188e:	4689      	mov	r9, r1
  401890:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  401892:	4b13      	ldr	r3, [pc, #76]	; (4018e0 <nm_read_block+0x58>)
  401894:	f8b3 8000 	ldrh.w	r8, [r3]
  401898:	f1a8 0808 	sub.w	r8, r8, #8
  40189c:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4018a0:	4542      	cmp	r2, r8
  4018a2:	d808      	bhi.n	4018b6 <nm_read_block+0x2e>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  4018a4:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4018a6:	b2aa      	uxth	r2, r5
  4018a8:	eb09 0106 	add.w	r1, r9, r6
  4018ac:	4638      	mov	r0, r7
  4018ae:	4b0d      	ldr	r3, [pc, #52]	; (4018e4 <nm_read_block+0x5c>)
  4018b0:	4798      	blx	r3
  4018b2:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  4018b4:	e010      	b.n	4018d8 <nm_read_block+0x50>
  4018b6:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4018b8:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4018ba:	f8df a028 	ldr.w	sl, [pc, #40]	; 4018e4 <nm_read_block+0x5c>
  4018be:	4642      	mov	r2, r8
  4018c0:	eb09 0106 	add.w	r1, r9, r6
  4018c4:	4638      	mov	r0, r7
  4018c6:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4018c8:	4603      	mov	r3, r0
  4018ca:	b928      	cbnz	r0, 4018d8 <nm_read_block+0x50>
			u32Sz -= u16MaxTrxSz;
  4018cc:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4018ce:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4018d0:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4018d2:	42a5      	cmp	r5, r4
  4018d4:	d8f3      	bhi.n	4018be <nm_read_block+0x36>
  4018d6:	e7e6      	b.n	4018a6 <nm_read_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  4018d8:	4618      	mov	r0, r3
  4018da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4018de:	bf00      	nop
  4018e0:	2040000c 	.word	0x2040000c
  4018e4:	00402209 	.word	0x00402209

004018e8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4018e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4018ec:	4607      	mov	r7, r0
  4018ee:	4689      	mov	r9, r1
  4018f0:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4018f2:	4b13      	ldr	r3, [pc, #76]	; (401940 <nm_write_block+0x58>)
  4018f4:	f8b3 8000 	ldrh.w	r8, [r3]
  4018f8:	f1a8 0808 	sub.w	r8, r8, #8
  4018fc:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401900:	4542      	cmp	r2, r8
  401902:	d808      	bhi.n	401916 <nm_write_block+0x2e>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  401904:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401906:	b2aa      	uxth	r2, r5
  401908:	eb09 0106 	add.w	r1, r9, r6
  40190c:	4638      	mov	r0, r7
  40190e:	4b0d      	ldr	r3, [pc, #52]	; (401944 <nm_write_block+0x5c>)
  401910:	4798      	blx	r3
  401912:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  401914:	e010      	b.n	401938 <nm_write_block+0x50>
  401916:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401918:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  40191a:	f8df a028 	ldr.w	sl, [pc, #40]	; 401944 <nm_write_block+0x5c>
  40191e:	4642      	mov	r2, r8
  401920:	eb09 0106 	add.w	r1, r9, r6
  401924:	4638      	mov	r0, r7
  401926:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401928:	4603      	mov	r3, r0
  40192a:	b928      	cbnz	r0, 401938 <nm_write_block+0x50>
			u32Sz -= u16MaxTrxSz;
  40192c:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  40192e:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  401930:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401932:	42a5      	cmp	r5, r4
  401934:	d8f3      	bhi.n	40191e <nm_write_block+0x36>
  401936:	e7e6      	b.n	401906 <nm_write_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  401938:	4618      	mov	r0, r3
  40193a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40193e:	bf00      	nop
  401940:	2040000c 	.word	0x2040000c
  401944:	004022d5 	.word	0x004022d5

00401948 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  401948:	b530      	push	{r4, r5, lr}
  40194a:	b083      	sub	sp, #12
  40194c:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  40194e:	a902      	add	r1, sp, #8
  401950:	2300      	movs	r3, #0
  401952:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  401956:	4823      	ldr	r0, [pc, #140]	; (4019e4 <nm_get_firmware_info+0x9c>)
  401958:	4b23      	ldr	r3, [pc, #140]	; (4019e8 <nm_get_firmware_info+0xa0>)
  40195a:	4798      	blx	r3
  40195c:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  40195e:	9a01      	ldr	r2, [sp, #4]
  401960:	4b22      	ldr	r3, [pc, #136]	; (4019ec <nm_get_firmware_info+0xa4>)
  401962:	429a      	cmp	r2, r3
  401964:	d105      	bne.n	401972 <nm_get_firmware_info+0x2a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  401966:	a901      	add	r1, sp, #4
  401968:	f241 0048 	movw	r0, #4168	; 0x1048
  40196c:	4b1e      	ldr	r3, [pc, #120]	; (4019e8 <nm_get_firmware_info+0xa0>)
  40196e:	4798      	blx	r3
  401970:	4605      	mov	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  401972:	9b01      	ldr	r3, [sp, #4]
  401974:	0c1a      	lsrs	r2, r3, #16
  401976:	1211      	asrs	r1, r2, #8
  401978:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  40197a:	f3c2 1103 	ubfx	r1, r2, #4, #4
  40197e:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  401980:	f002 020f 	and.w	r2, r2, #15
  401984:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  401986:	121a      	asrs	r2, r3, #8
  401988:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  40198a:	f3c3 1203 	ubfx	r2, r3, #4, #4
  40198e:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  401990:	f003 030f 	and.w	r3, r3, #15
  401994:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  401996:	4b16      	ldr	r3, [pc, #88]	; (4019f0 <nm_get_firmware_info+0xa8>)
  401998:	4798      	blx	r3
  40199a:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  40199c:	7922      	ldrb	r2, [r4, #4]
  40199e:	79a3      	ldrb	r3, [r4, #6]
  4019a0:	f003 030f 	and.w	r3, r3, #15
  4019a4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4019a8:	7963      	ldrb	r3, [r4, #5]
  4019aa:	011b      	lsls	r3, r3, #4
  4019ac:	b2db      	uxtb	r3, r3
  4019ae:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
  4019b0:	79e1      	ldrb	r1, [r4, #7]
  4019b2:	7a62      	ldrb	r2, [r4, #9]
  4019b4:	f002 020f 	and.w	r2, r2, #15
  4019b8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  4019bc:	7a22      	ldrb	r2, [r4, #8]
  4019be:	0112      	lsls	r2, r2, #4
  4019c0:	b2d2      	uxtb	r2, r2
  4019c2:	430a      	orrs	r2, r1
  4019c4:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  4019c8:	428a      	cmp	r2, r1
  4019ca:	bf88      	it	hi
  4019cc:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  4019d0:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  4019d4:	4293      	cmp	r3, r2
	}
	return ret;
}
  4019d6:	bf8c      	ite	hi
  4019d8:	4628      	movhi	r0, r5
  4019da:	f06f 000c 	mvnls.w	r0, #12
  4019de:	b003      	add	sp, #12
  4019e0:	bd30      	pop	{r4, r5, pc}
  4019e2:	bf00      	nop
  4019e4:	000207ac 	.word	0x000207ac
  4019e8:	00401871 	.word	0x00401871
  4019ec:	d75dc1c3 	.word	0xd75dc1c3
  4019f0:	00401579 	.word	0x00401579

004019f4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  4019f4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  4019f6:	b130      	cbz	r0, 401a06 <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
  4019f8:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  4019fa:	1e63      	subs	r3, r4, #1
  4019fc:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  4019fe:	2b04      	cmp	r3, #4
  401a00:	bf28      	it	cs
  401a02:	2401      	movcs	r4, #1
  401a04:	e000      	b.n	401a08 <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  401a06:	2401      	movs	r4, #1
	}
	
	ret = nm_bus_iface_init(NULL);
  401a08:	2000      	movs	r0, #0
  401a0a:	4b1d      	ldr	r3, [pc, #116]	; (401a80 <nm_drv_init+0x8c>)
  401a0c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a0e:	4605      	mov	r5, r0
  401a10:	b150      	cbz	r0, 401a28 <nm_drv_init+0x34>
		M2M_ERR("[nmi start]: fail init bus\n");
  401a12:	f44f 7292 	mov.w	r2, #292	; 0x124
  401a16:	491b      	ldr	r1, [pc, #108]	; (401a84 <nm_drv_init+0x90>)
  401a18:	481b      	ldr	r0, [pc, #108]	; (401a88 <nm_drv_init+0x94>)
  401a1a:	4c1c      	ldr	r4, [pc, #112]	; (401a8c <nm_drv_init+0x98>)
  401a1c:	47a0      	blx	r4
  401a1e:	481c      	ldr	r0, [pc, #112]	; (401a90 <nm_drv_init+0x9c>)
  401a20:	47a0      	blx	r4
  401a22:	481c      	ldr	r0, [pc, #112]	; (401a94 <nm_drv_init+0xa0>)
  401a24:	47a0      	blx	r4
		goto ERR1;
  401a26:	e029      	b.n	401a7c <nm_drv_init+0x88>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  401a28:	481b      	ldr	r0, [pc, #108]	; (401a98 <nm_drv_init+0xa4>)
  401a2a:	4d18      	ldr	r5, [pc, #96]	; (401a8c <nm_drv_init+0x98>)
  401a2c:	47a8      	blx	r5
  401a2e:	4b1b      	ldr	r3, [pc, #108]	; (401a9c <nm_drv_init+0xa8>)
  401a30:	4798      	blx	r3
  401a32:	4601      	mov	r1, r0
  401a34:	481a      	ldr	r0, [pc, #104]	; (401aa0 <nm_drv_init+0xac>)
  401a36:	47a8      	blx	r5
  401a38:	4816      	ldr	r0, [pc, #88]	; (401a94 <nm_drv_init+0xa0>)
  401a3a:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  401a3c:	4b19      	ldr	r3, [pc, #100]	; (401aa4 <nm_drv_init+0xb0>)
  401a3e:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  401a40:	4620      	mov	r0, r4
  401a42:	4b19      	ldr	r3, [pc, #100]	; (401aa8 <nm_drv_init+0xb4>)
  401a44:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a46:	4605      	mov	r5, r0
  401a48:	b9b0      	cbnz	r0, 401a78 <nm_drv_init+0x84>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  401a4a:	4620      	mov	r0, r4
  401a4c:	4b17      	ldr	r3, [pc, #92]	; (401aac <nm_drv_init+0xb8>)
  401a4e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a50:	4605      	mov	r5, r0
  401a52:	b988      	cbnz	r0, 401a78 <nm_drv_init+0x84>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  401a54:	3c02      	subs	r4, #2
  401a56:	b2e4      	uxtb	r4, r4
  401a58:	2c01      	cmp	r4, #1
  401a5a:	d90f      	bls.n	401a7c <nm_drv_init+0x88>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  401a5c:	4b14      	ldr	r3, [pc, #80]	; (401ab0 <nm_drv_init+0xbc>)
  401a5e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a60:	4605      	mov	r5, r0
  401a62:	b158      	cbz	r0, 401a7c <nm_drv_init+0x88>
		M2M_ERR("failed to enable interrupts..\n");
  401a64:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  401a68:	4906      	ldr	r1, [pc, #24]	; (401a84 <nm_drv_init+0x90>)
  401a6a:	4807      	ldr	r0, [pc, #28]	; (401a88 <nm_drv_init+0x94>)
  401a6c:	4c07      	ldr	r4, [pc, #28]	; (401a8c <nm_drv_init+0x98>)
  401a6e:	47a0      	blx	r4
  401a70:	4810      	ldr	r0, [pc, #64]	; (401ab4 <nm_drv_init+0xc0>)
  401a72:	47a0      	blx	r4
  401a74:	4807      	ldr	r0, [pc, #28]	; (401a94 <nm_drv_init+0xa0>)
  401a76:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  401a78:	4b0f      	ldr	r3, [pc, #60]	; (401ab8 <nm_drv_init+0xc4>)
  401a7a:	4798      	blx	r3
ERR1:
	return ret;
}
  401a7c:	4628      	mov	r0, r5
  401a7e:	bd38      	pop	{r3, r4, r5, pc}
  401a80:	0040184d 	.word	0x0040184d
  401a84:	0040b190 	.word	0x0040b190
  401a88:	0040a98c 	.word	0x0040a98c
  401a8c:	00403f99 	.word	0x00403f99
  401a90:	0040b0e4 	.word	0x0040b0e4
  401a94:	0040a9b8 	.word	0x0040a9b8
  401a98:	0040ac60 	.word	0x0040ac60
  401a9c:	00401579 	.word	0x00401579
  401aa0:	0040b100 	.word	0x0040b100
  401aa4:	004020fd 	.word	0x004020fd
  401aa8:	00401629 	.word	0x00401629
  401aac:	00401705 	.word	0x00401705
  401ab0:	00401511 	.word	0x00401511
  401ab4:	0040b110 	.word	0x0040b110
  401ab8:	00401859 	.word	0x00401859

00401abc <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  401abc:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  401abe:	4b19      	ldr	r3, [pc, #100]	; (401b24 <nm_drv_deinit+0x68>)
  401ac0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401ac2:	b158      	cbz	r0, 401adc <nm_drv_deinit+0x20>
  401ac4:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  401ac6:	f44f 72ba 	mov.w	r2, #372	; 0x174
  401aca:	4917      	ldr	r1, [pc, #92]	; (401b28 <nm_drv_deinit+0x6c>)
  401acc:	4817      	ldr	r0, [pc, #92]	; (401b2c <nm_drv_deinit+0x70>)
  401ace:	4d18      	ldr	r5, [pc, #96]	; (401b30 <nm_drv_deinit+0x74>)
  401ad0:	47a8      	blx	r5
  401ad2:	4818      	ldr	r0, [pc, #96]	; (401b34 <nm_drv_deinit+0x78>)
  401ad4:	47a8      	blx	r5
  401ad6:	4818      	ldr	r0, [pc, #96]	; (401b38 <nm_drv_deinit+0x7c>)
  401ad8:	47a8      	blx	r5
		goto ERR1;
  401ada:	e020      	b.n	401b1e <nm_drv_deinit+0x62>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  401adc:	2000      	movs	r0, #0
  401ade:	4b17      	ldr	r3, [pc, #92]	; (401b3c <nm_drv_deinit+0x80>)
  401ae0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401ae2:	4604      	mov	r4, r0
  401ae4:	b150      	cbz	r0, 401afc <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  401ae6:	f240 127b 	movw	r2, #379	; 0x17b
  401aea:	490f      	ldr	r1, [pc, #60]	; (401b28 <nm_drv_deinit+0x6c>)
  401aec:	480f      	ldr	r0, [pc, #60]	; (401b2c <nm_drv_deinit+0x70>)
  401aee:	4d10      	ldr	r5, [pc, #64]	; (401b30 <nm_drv_deinit+0x74>)
  401af0:	47a8      	blx	r5
  401af2:	4813      	ldr	r0, [pc, #76]	; (401b40 <nm_drv_deinit+0x84>)
  401af4:	47a8      	blx	r5
  401af6:	4810      	ldr	r0, [pc, #64]	; (401b38 <nm_drv_deinit+0x7c>)
  401af8:	47a8      	blx	r5
		goto ERR1;
  401afa:	e010      	b.n	401b1e <nm_drv_deinit+0x62>
	}

	ret = nm_bus_iface_deinit();
  401afc:	4b11      	ldr	r3, [pc, #68]	; (401b44 <nm_drv_deinit+0x88>)
  401afe:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401b00:	4604      	mov	r4, r0
  401b02:	b150      	cbz	r0, 401b1a <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: fail init bus\n");
  401b04:	f240 1281 	movw	r2, #385	; 0x181
  401b08:	4907      	ldr	r1, [pc, #28]	; (401b28 <nm_drv_deinit+0x6c>)
  401b0a:	4808      	ldr	r0, [pc, #32]	; (401b2c <nm_drv_deinit+0x70>)
  401b0c:	4d08      	ldr	r5, [pc, #32]	; (401b30 <nm_drv_deinit+0x74>)
  401b0e:	47a8      	blx	r5
  401b10:	480d      	ldr	r0, [pc, #52]	; (401b48 <nm_drv_deinit+0x8c>)
  401b12:	47a8      	blx	r5
  401b14:	4808      	ldr	r0, [pc, #32]	; (401b38 <nm_drv_deinit+0x7c>)
  401b16:	47a8      	blx	r5
		goto ERR1;
  401b18:	e001      	b.n	401b1e <nm_drv_deinit+0x62>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  401b1a:	4b0c      	ldr	r3, [pc, #48]	; (401b4c <nm_drv_deinit+0x90>)
  401b1c:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
  401b1e:	4620      	mov	r0, r4
  401b20:	bd38      	pop	{r3, r4, r5, pc}
  401b22:	bf00      	nop
  401b24:	00401785 	.word	0x00401785
  401b28:	0040b19c 	.word	0x0040b19c
  401b2c:	0040a98c 	.word	0x0040a98c
  401b30:	00403f99 	.word	0x00403f99
  401b34:	0040b130 	.word	0x0040b130
  401b38:	0040a9b8 	.word	0x0040a9b8
  401b3c:	00402b65 	.word	0x00402b65
  401b40:	0040b150 	.word	0x0040b150
  401b44:	00401859 	.word	0x00401859
  401b48:	0040b174 	.word	0x0040b174
  401b4c:	004020a9 	.word	0x004020a9

00401b50 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  401b50:	b500      	push	{lr}
  401b52:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  401b54:	2300      	movs	r3, #0
  401b56:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  401b58:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  401b5a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401b5e:	a901      	add	r1, sp, #4
  401b60:	2003      	movs	r0, #3
  401b62:	4b02      	ldr	r3, [pc, #8]	; (401b6c <nmi_spi_read+0x1c>)
  401b64:	4798      	blx	r3
}
  401b66:	b005      	add	sp, #20
  401b68:	f85d fb04 	ldr.w	pc, [sp], #4
  401b6c:	00400445 	.word	0x00400445

00401b70 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  401b70:	b5f0      	push	{r4, r5, r6, r7, lr}
  401b72:	b083      	sub	sp, #12
  401b74:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  401b76:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  401b7a:	b2db      	uxtb	r3, r3
  401b7c:	2b01      	cmp	r3, #1
  401b7e:	d901      	bls.n	401b84 <spi_cmd_rsp+0x14>
  401b80:	28cf      	cmp	r0, #207	; 0xcf
  401b82:	d106      	bne.n	401b92 <spi_cmd_rsp+0x22>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401b84:	2101      	movs	r1, #1
  401b86:	f10d 0007 	add.w	r0, sp, #7
  401b8a:	4b22      	ldr	r3, [pc, #136]	; (401c14 <spi_cmd_rsp+0xa4>)
  401b8c:	4798      	blx	r3
  401b8e:	2800      	cmp	r0, #0
  401b90:	d13a      	bne.n	401c08 <spi_cmd_rsp+0x98>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  401b92:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401b94:	2701      	movs	r7, #1
  401b96:	4e1f      	ldr	r6, [pc, #124]	; (401c14 <spi_cmd_rsp+0xa4>)
  401b98:	4639      	mov	r1, r7
  401b9a:	f10d 0007 	add.w	r0, sp, #7
  401b9e:	47b0      	blx	r6
  401ba0:	b158      	cbz	r0, 401bba <spi_cmd_rsp+0x4a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401ba2:	f240 1227 	movw	r2, #295	; 0x127
  401ba6:	491c      	ldr	r1, [pc, #112]	; (401c18 <spi_cmd_rsp+0xa8>)
  401ba8:	481c      	ldr	r0, [pc, #112]	; (401c1c <spi_cmd_rsp+0xac>)
  401baa:	4c1d      	ldr	r4, [pc, #116]	; (401c20 <spi_cmd_rsp+0xb0>)
  401bac:	47a0      	blx	r4
  401bae:	481d      	ldr	r0, [pc, #116]	; (401c24 <spi_cmd_rsp+0xb4>)
  401bb0:	47a0      	blx	r4
  401bb2:	481d      	ldr	r0, [pc, #116]	; (401c28 <spi_cmd_rsp+0xb8>)
  401bb4:	47a0      	blx	r4
			result = N_FAIL;
  401bb6:	2000      	movs	r0, #0
			goto _fail_;
  401bb8:	e029      	b.n	401c0e <spi_cmd_rsp+0x9e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  401bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401bbe:	42ab      	cmp	r3, r5
  401bc0:	d005      	beq.n	401bce <spi_cmd_rsp+0x5e>
  401bc2:	1e63      	subs	r3, r4, #1
  401bc4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401bc8:	d1e6      	bne.n	401b98 <spi_cmd_rsp+0x28>
  401bca:	240b      	movs	r4, #11
  401bcc:	e000      	b.n	401bd0 <spi_cmd_rsp+0x60>
  401bce:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401bd0:	2601      	movs	r6, #1
  401bd2:	4d10      	ldr	r5, [pc, #64]	; (401c14 <spi_cmd_rsp+0xa4>)
  401bd4:	4631      	mov	r1, r6
  401bd6:	f10d 0007 	add.w	r0, sp, #7
  401bda:	47a8      	blx	r5
  401bdc:	b158      	cbz	r0, 401bf6 <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401bde:	f240 1235 	movw	r2, #309	; 0x135
  401be2:	490d      	ldr	r1, [pc, #52]	; (401c18 <spi_cmd_rsp+0xa8>)
  401be4:	480d      	ldr	r0, [pc, #52]	; (401c1c <spi_cmd_rsp+0xac>)
  401be6:	4c0e      	ldr	r4, [pc, #56]	; (401c20 <spi_cmd_rsp+0xb0>)
  401be8:	47a0      	blx	r4
  401bea:	480e      	ldr	r0, [pc, #56]	; (401c24 <spi_cmd_rsp+0xb4>)
  401bec:	47a0      	blx	r4
  401bee:	480e      	ldr	r0, [pc, #56]	; (401c28 <spi_cmd_rsp+0xb8>)
  401bf0:	47a0      	blx	r4
			result = N_FAIL;
  401bf2:	2000      	movs	r0, #0
			goto _fail_;
  401bf4:	e00b      	b.n	401c0e <spi_cmd_rsp+0x9e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  401bf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401bfa:	b13b      	cbz	r3, 401c0c <spi_cmd_rsp+0x9c>
  401bfc:	1e63      	subs	r3, r4, #1
  401bfe:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401c02:	d1e7      	bne.n	401bd4 <spi_cmd_rsp+0x64>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  401c04:	2001      	movs	r0, #1
  401c06:	e002      	b.n	401c0e <spi_cmd_rsp+0x9e>
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			result = N_FAIL;
  401c08:	2000      	movs	r0, #0
  401c0a:	e000      	b.n	401c0e <spi_cmd_rsp+0x9e>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  401c0c:	2001      	movs	r0, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
  401c0e:	b003      	add	sp, #12
  401c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401c12:	bf00      	nop
  401c14:	00401b51 	.word	0x00401b51
  401c18:	0040b7c0 	.word	0x0040b7c0
  401c1c:	0040a98c 	.word	0x0040a98c
  401c20:	00403f99 	.word	0x00403f99
  401c24:	0040b2e4 	.word	0x0040b2e4
  401c28:	0040a9b8 	.word	0x0040a9b8

00401c2c <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  401c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c30:	b083      	sub	sp, #12
  401c32:	4682      	mov	sl, r0
  401c34:	4689      	mov	r9, r1
  401c36:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  401c38:	f04f 0800 	mov.w	r8, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401c3c:	4d35      	ldr	r5, [pc, #212]	; (401d14 <spi_data_read+0xe8>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
  401c3e:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
			nbytes = sz;
  401c42:	bf94      	ite	ls
  401c44:	fa0f f789 	sxthls.w	r7, r9
		else
			nbytes = DATA_PKT_SZ;
  401c48:	f44f 5700 	movhi.w	r7, #8192	; 0x2000

		/**
			Data Respnose header
		**/
		retry = 10;
  401c4c:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401c4e:	2601      	movs	r6, #1
  401c50:	4631      	mov	r1, r6
  401c52:	f10d 0003 	add.w	r0, sp, #3
  401c56:	47a8      	blx	r5
  401c58:	b158      	cbz	r0, 401c72 <spi_data_read+0x46>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  401c5a:	f240 1257 	movw	r2, #343	; 0x157
  401c5e:	492e      	ldr	r1, [pc, #184]	; (401d18 <spi_data_read+0xec>)
  401c60:	482e      	ldr	r0, [pc, #184]	; (401d1c <spi_data_read+0xf0>)
  401c62:	4c2f      	ldr	r4, [pc, #188]	; (401d20 <spi_data_read+0xf4>)
  401c64:	47a0      	blx	r4
  401c66:	482f      	ldr	r0, [pc, #188]	; (401d24 <spi_data_read+0xf8>)
  401c68:	47a0      	blx	r4
  401c6a:	482f      	ldr	r0, [pc, #188]	; (401d28 <spi_data_read+0xfc>)
  401c6c:	47a0      	blx	r4
  401c6e:	2000      	movs	r0, #0
  401c70:	e04d      	b.n	401d0e <spi_data_read+0xe2>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  401c72:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401c76:	091b      	lsrs	r3, r3, #4
  401c78:	2b0f      	cmp	r3, #15
  401c7a:	d005      	beq.n	401c88 <spi_data_read+0x5c>
  401c7c:	3c01      	subs	r4, #1
  401c7e:	b224      	sxth	r4, r4
				break;
		} while (retry--);
  401c80:	f1b4 3fff 	cmp.w	r4, #4294967295
  401c84:	d1e4      	bne.n	401c50 <spi_data_read+0x24>
  401c86:	e001      	b.n	401c8c <spi_data_read+0x60>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
  401c88:	2c00      	cmp	r4, #0
  401c8a:	dc0d      	bgt.n	401ca8 <spi_data_read+0x7c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  401c8c:	f240 1263 	movw	r2, #355	; 0x163
  401c90:	4921      	ldr	r1, [pc, #132]	; (401d18 <spi_data_read+0xec>)
  401c92:	4822      	ldr	r0, [pc, #136]	; (401d1c <spi_data_read+0xf0>)
  401c94:	4c22      	ldr	r4, [pc, #136]	; (401d20 <spi_data_read+0xf4>)
  401c96:	47a0      	blx	r4
  401c98:	f89d 1003 	ldrb.w	r1, [sp, #3]
  401c9c:	4823      	ldr	r0, [pc, #140]	; (401d2c <spi_data_read+0x100>)
  401c9e:	47a0      	blx	r4
  401ca0:	4821      	ldr	r0, [pc, #132]	; (401d28 <spi_data_read+0xfc>)
  401ca2:	47a0      	blx	r4
			result = N_FAIL;
  401ca4:	2000      	movs	r0, #0
			break;
  401ca6:	e032      	b.n	401d0e <spi_data_read+0xe2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  401ca8:	b2bf      	uxth	r7, r7
  401caa:	4639      	mov	r1, r7
  401cac:	eb0a 0008 	add.w	r0, sl, r8
  401cb0:	47a8      	blx	r5
  401cb2:	b158      	cbz	r0, 401ccc <spi_data_read+0xa0>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  401cb4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  401cb8:	4917      	ldr	r1, [pc, #92]	; (401d18 <spi_data_read+0xec>)
  401cba:	4818      	ldr	r0, [pc, #96]	; (401d1c <spi_data_read+0xf0>)
  401cbc:	4c18      	ldr	r4, [pc, #96]	; (401d20 <spi_data_read+0xf4>)
  401cbe:	47a0      	blx	r4
  401cc0:	481b      	ldr	r0, [pc, #108]	; (401d30 <spi_data_read+0x104>)
  401cc2:	47a0      	blx	r4
  401cc4:	4818      	ldr	r0, [pc, #96]	; (401d28 <spi_data_read+0xfc>)
  401cc6:	47a0      	blx	r4
			result = N_FAIL;
  401cc8:	2000      	movs	r0, #0
			break;
  401cca:	e020      	b.n	401d0e <spi_data_read+0xe2>
		}
		if(!clockless)
  401ccc:	f1bb 0f00 	cmp.w	fp, #0
  401cd0:	d112      	bne.n	401cf8 <spi_data_read+0xcc>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  401cd2:	4b18      	ldr	r3, [pc, #96]	; (401d34 <spi_data_read+0x108>)
  401cd4:	781b      	ldrb	r3, [r3, #0]
  401cd6:	b97b      	cbnz	r3, 401cf8 <spi_data_read+0xcc>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  401cd8:	2102      	movs	r1, #2
  401cda:	a801      	add	r0, sp, #4
  401cdc:	47a8      	blx	r5
  401cde:	b158      	cbz	r0, 401cf8 <spi_data_read+0xcc>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  401ce0:	f240 1277 	movw	r2, #375	; 0x177
  401ce4:	490c      	ldr	r1, [pc, #48]	; (401d18 <spi_data_read+0xec>)
  401ce6:	480d      	ldr	r0, [pc, #52]	; (401d1c <spi_data_read+0xf0>)
  401ce8:	4c0d      	ldr	r4, [pc, #52]	; (401d20 <spi_data_read+0xf4>)
  401cea:	47a0      	blx	r4
  401cec:	4812      	ldr	r0, [pc, #72]	; (401d38 <spi_data_read+0x10c>)
  401cee:	47a0      	blx	r4
  401cf0:	480d      	ldr	r0, [pc, #52]	; (401d28 <spi_data_read+0xfc>)
  401cf2:	47a0      	blx	r4
					result = N_FAIL;
  401cf4:	2000      	movs	r0, #0
					break;
  401cf6:	e00a      	b.n	401d0e <spi_data_read+0xe2>
				}
			}
		}
		ix += nbytes;
  401cf8:	44b8      	add	r8, r7
  401cfa:	fa0f f888 	sxth.w	r8, r8
		sz -= nbytes;
  401cfe:	ebc7 0709 	rsb	r7, r7, r9
  401d02:	fa1f f987 	uxth.w	r9, r7

	} while (sz);
  401d06:	f1b9 0f00 	cmp.w	r9, #0
  401d0a:	d198      	bne.n	401c3e <spi_data_read+0x12>
  401d0c:	2001      	movs	r0, #1

	return result;
}
  401d0e:	b003      	add	sp, #12
  401d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d14:	00401b51 	.word	0x00401b51
  401d18:	0040b1ac 	.word	0x0040b1ac
  401d1c:	0040a98c 	.word	0x0040a98c
  401d20:	00403f99 	.word	0x00403f99
  401d24:	0040b318 	.word	0x0040b318
  401d28:	0040a9b8 	.word	0x0040a9b8
  401d2c:	0040b34c 	.word	0x0040b34c
  401d30:	0040b37c 	.word	0x0040b37c
  401d34:	20400910 	.word	0x20400910
  401d38:	0040b3b0 	.word	0x0040b3b0

00401d3c <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  401d3c:	b500      	push	{lr}
  401d3e:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  401d40:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  401d42:	2300      	movs	r3, #0
  401d44:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  401d46:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401d4a:	a901      	add	r1, sp, #4
  401d4c:	2003      	movs	r0, #3
  401d4e:	4b02      	ldr	r3, [pc, #8]	; (401d58 <nmi_spi_write+0x1c>)
  401d50:	4798      	blx	r3
}
  401d52:	b005      	add	sp, #20
  401d54:	f85d fb04 	ldr.w	pc, [sp], #4
  401d58:	00400445 	.word	0x00400445

00401d5c <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  401d5c:	b570      	push	{r4, r5, r6, lr}
  401d5e:	b084      	sub	sp, #16
  401d60:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
  401d64:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  401d68:	38c1      	subs	r0, #193	; 0xc1
  401d6a:	280e      	cmp	r0, #14
  401d6c:	f200 80ae 	bhi.w	401ecc <spi_cmd+0x170>
  401d70:	e8df f000 	tbb	[pc, r0]
  401d74:	125f3e3e 	.word	0x125f3e3e
  401d78:	4d4d2c23 	.word	0x4d4d2c23
  401d7c:	acac0878 	.word	0xacac0878
  401d80:	acac      	.short	0xacac
  401d82:	35          	.byte	0x35
  401d83:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  401d84:	0c0b      	lsrs	r3, r1, #16
  401d86:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401d8a:	0a0b      	lsrs	r3, r1, #8
  401d8c:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  401d90:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  401d94:	2105      	movs	r1, #5
		break;
  401d96:	e0a4      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  401d98:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  401d9c:	b914      	cbnz	r4, 401da4 <spi_cmd+0x48>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  401d9e:	f88d 3005 	strb.w	r3, [sp, #5]
  401da2:	e003      	b.n	401dac <spi_cmd+0x50>
		if(clockless)  bc[1] |= (1 << 7);
  401da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401da8:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  401dac:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  401db0:	2300      	movs	r3, #0
  401db2:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401db6:	2105      	movs	r1, #5
		break;
  401db8:	e093      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  401dba:	2300      	movs	r3, #0
  401dbc:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  401dc0:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  401dc4:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401dc8:	2105      	movs	r1, #5
		break;
  401dca:	e08a      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  401dcc:	2300      	movs	r3, #0
  401dce:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  401dd2:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  401dd6:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401dda:	2105      	movs	r1, #5
		break;
  401ddc:	e081      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  401dde:	23ff      	movs	r3, #255	; 0xff
  401de0:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  401de4:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  401de8:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401dec:	2105      	movs	r1, #5
		break;
  401dee:	e078      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  401df0:	0c0a      	lsrs	r2, r1, #16
  401df2:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401df6:	0a0a      	lsrs	r2, r1, #8
  401df8:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  401dfc:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  401e00:	0a1a      	lsrs	r2, r3, #8
  401e02:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  401e06:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  401e0a:	2107      	movs	r1, #7
		break;
  401e0c:	e069      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  401e0e:	0c0a      	lsrs	r2, r1, #16
  401e10:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401e14:	0a0a      	lsrs	r2, r1, #8
  401e16:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  401e1a:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  401e1e:	0c1a      	lsrs	r2, r3, #16
  401e20:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  401e24:	0a1a      	lsrs	r2, r3, #8
  401e26:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  401e2a:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  401e2e:	2108      	movs	r1, #8
		break;
  401e30:	e057      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  401e32:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  401e36:	b914      	cbnz	r4, 401e3e <spi_cmd+0xe2>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  401e38:	f88d 3005 	strb.w	r3, [sp, #5]
  401e3c:	e003      	b.n	401e46 <spi_cmd+0xea>
		if(clockless)  bc[1] |= (1 << 7);
  401e3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401e42:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  401e46:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  401e4a:	0e13      	lsrs	r3, r2, #24
  401e4c:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  401e50:	0c13      	lsrs	r3, r2, #16
  401e52:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  401e56:	0a13      	lsrs	r3, r2, #8
  401e58:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  401e5c:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  401e60:	2108      	movs	r1, #8
		break;
  401e62:	e03e      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  401e64:	0c0b      	lsrs	r3, r1, #16
  401e66:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401e6a:	0a0b      	lsrs	r3, r1, #8
  401e6c:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  401e70:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  401e74:	0e13      	lsrs	r3, r2, #24
  401e76:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  401e7a:	0c13      	lsrs	r3, r2, #16
  401e7c:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  401e80:	0a13      	lsrs	r3, r2, #8
  401e82:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  401e86:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  401e8a:	2109      	movs	r1, #9
		break;
  401e8c:	e029      	b.n	401ee2 <spi_cmd+0x186>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  401e8e:	f812 3b01 	ldrb.w	r3, [r2], #1
  401e92:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  401e96:	5ce0      	ldrb	r0, [r4, r3]
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  401e98:	4295      	cmp	r5, r2
  401e9a:	d1f8      	bne.n	401e8e <spi_cmd+0x132>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  401e9c:	ab04      	add	r3, sp, #16
  401e9e:	441e      	add	r6, r3
  401ea0:	0043      	lsls	r3, r0, #1
  401ea2:	f806 3c0c 	strb.w	r3, [r6, #-12]
  401ea6:	e001      	b.n	401eac <spi_cmd+0x150>
		else
			len-=1;
  401ea8:	3901      	subs	r1, #1
  401eaa:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  401eac:	a801      	add	r0, sp, #4
  401eae:	4b10      	ldr	r3, [pc, #64]	; (401ef0 <spi_cmd+0x194>)
  401eb0:	4798      	blx	r3
  401eb2:	b168      	cbz	r0, 401ed0 <spi_cmd+0x174>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  401eb4:	f44f 7284 	mov.w	r2, #264	; 0x108
  401eb8:	490e      	ldr	r1, [pc, #56]	; (401ef4 <spi_cmd+0x198>)
  401eba:	480f      	ldr	r0, [pc, #60]	; (401ef8 <spi_cmd+0x19c>)
  401ebc:	4c0f      	ldr	r4, [pc, #60]	; (401efc <spi_cmd+0x1a0>)
  401ebe:	47a0      	blx	r4
  401ec0:	480f      	ldr	r0, [pc, #60]	; (401f00 <spi_cmd+0x1a4>)
  401ec2:	47a0      	blx	r4
  401ec4:	480f      	ldr	r0, [pc, #60]	; (401f04 <spi_cmd+0x1a8>)
  401ec6:	47a0      	blx	r4
			result = N_FAIL;
  401ec8:	2000      	movs	r0, #0
  401eca:	e00f      	b.n	401eec <spi_cmd+0x190>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
  401ecc:	2000      	movs	r0, #0
  401ece:	e00d      	b.n	401eec <spi_cmd+0x190>
  401ed0:	2001      	movs	r0, #1
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
  401ed2:	e00b      	b.n	401eec <spi_cmd+0x190>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  401ed4:	1e4e      	subs	r6, r1, #1
  401ed6:	ab01      	add	r3, sp, #4
  401ed8:	199d      	adds	r5, r3, r6
  401eda:	207f      	movs	r0, #127	; 0x7f
  401edc:	461a      	mov	r2, r3
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  401ede:	4c0a      	ldr	r4, [pc, #40]	; (401f08 <spi_cmd+0x1ac>)
  401ee0:	e7d5      	b.n	401e8e <spi_cmd+0x132>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
  401ee2:	4b0a      	ldr	r3, [pc, #40]	; (401f0c <spi_cmd+0x1b0>)
  401ee4:	781b      	ldrb	r3, [r3, #0]
  401ee6:	2b00      	cmp	r3, #0
  401ee8:	d1de      	bne.n	401ea8 <spi_cmd+0x14c>
  401eea:	e7f3      	b.n	401ed4 <spi_cmd+0x178>
			result = N_FAIL;
		}
	}

	return result;
}
  401eec:	b004      	add	sp, #16
  401eee:	bd70      	pop	{r4, r5, r6, pc}
  401ef0:	00401d3d 	.word	0x00401d3d
  401ef4:	0040b7a8 	.word	0x0040b7a8
  401ef8:	0040a98c 	.word	0x0040a98c
  401efc:	00403f99 	.word	0x00403f99
  401f00:	0040b3e8 	.word	0x0040b3e8
  401f04:	0040a9b8 	.word	0x0040a9b8
  401f08:	0040b1bc 	.word	0x0040b1bc
  401f0c:	20400910 	.word	0x20400910

00401f10 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  401f10:	b570      	push	{r4, r5, r6, lr}
  401f12:	b082      	sub	sp, #8
  401f14:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  401f16:	2831      	cmp	r0, #49	; 0x31
  401f18:	bf35      	itete	cc
  401f1a:	2301      	movcc	r3, #1
  401f1c:	2300      	movcs	r3, #0
  401f1e:	25c3      	movcc	r5, #195	; 0xc3
  401f20:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  401f22:	9300      	str	r3, [sp, #0]
  401f24:	2304      	movs	r3, #4
  401f26:	460a      	mov	r2, r1
  401f28:	4601      	mov	r1, r0
  401f2a:	4628      	mov	r0, r5
  401f2c:	4e16      	ldr	r6, [pc, #88]	; (401f88 <spi_write_reg+0x78>)
  401f2e:	47b0      	blx	r6
	if (result != N_OK) {
  401f30:	2801      	cmp	r0, #1
  401f32:	d00c      	beq.n	401f4e <spi_write_reg+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  401f34:	f240 12eb 	movw	r2, #491	; 0x1eb
  401f38:	4914      	ldr	r1, [pc, #80]	; (401f8c <spi_write_reg+0x7c>)
  401f3a:	4815      	ldr	r0, [pc, #84]	; (401f90 <spi_write_reg+0x80>)
  401f3c:	4d15      	ldr	r5, [pc, #84]	; (401f94 <spi_write_reg+0x84>)
  401f3e:	47a8      	blx	r5
  401f40:	4621      	mov	r1, r4
  401f42:	4815      	ldr	r0, [pc, #84]	; (401f98 <spi_write_reg+0x88>)
  401f44:	47a8      	blx	r5
  401f46:	4815      	ldr	r0, [pc, #84]	; (401f9c <spi_write_reg+0x8c>)
  401f48:	47a8      	blx	r5
		return N_FAIL;
  401f4a:	2000      	movs	r0, #0
  401f4c:	e01a      	b.n	401f84 <spi_write_reg+0x74>
	}

	result = spi_cmd_rsp(cmd);
  401f4e:	4628      	mov	r0, r5
  401f50:	4b13      	ldr	r3, [pc, #76]	; (401fa0 <spi_write_reg+0x90>)
  401f52:	4798      	blx	r3
	if (result != N_OK) {
  401f54:	2801      	cmp	r0, #1
  401f56:	d014      	beq.n	401f82 <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  401f58:	f240 12f1 	movw	r2, #497	; 0x1f1
  401f5c:	490b      	ldr	r1, [pc, #44]	; (401f8c <spi_write_reg+0x7c>)
  401f5e:	480c      	ldr	r0, [pc, #48]	; (401f90 <spi_write_reg+0x80>)
  401f60:	4d0c      	ldr	r5, [pc, #48]	; (401f94 <spi_write_reg+0x84>)
  401f62:	47a8      	blx	r5
  401f64:	4621      	mov	r1, r4
  401f66:	480f      	ldr	r0, [pc, #60]	; (401fa4 <spi_write_reg+0x94>)
  401f68:	47a8      	blx	r5
  401f6a:	480c      	ldr	r0, [pc, #48]	; (401f9c <spi_write_reg+0x8c>)
  401f6c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  401f6e:	2400      	movs	r4, #0
  401f70:	9400      	str	r4, [sp, #0]
  401f72:	4623      	mov	r3, r4
  401f74:	4622      	mov	r2, r4
  401f76:	4621      	mov	r1, r4
  401f78:	20cf      	movs	r0, #207	; 0xcf
  401f7a:	4d03      	ldr	r5, [pc, #12]	; (401f88 <spi_write_reg+0x78>)
  401f7c:	47a8      	blx	r5
		return N_FAIL;
  401f7e:	4620      	mov	r0, r4
  401f80:	e000      	b.n	401f84 <spi_write_reg+0x74>
	}

	return N_OK;
  401f82:	2001      	movs	r0, #1
	}

	return result;

#endif
}
  401f84:	b002      	add	sp, #8
  401f86:	bd70      	pop	{r4, r5, r6, pc}
  401f88:	00401d5d 	.word	0x00401d5d
  401f8c:	0040b798 	.word	0x0040b798
  401f90:	0040a98c 	.word	0x0040a98c
  401f94:	00403f99 	.word	0x00403f99
  401f98:	0040b414 	.word	0x0040b414
  401f9c:	0040a9b8 	.word	0x0040a9b8
  401fa0:	00401b71 	.word	0x00401b71
  401fa4:	0040b440 	.word	0x0040b440

00401fa8 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  401fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401fac:	b084      	sub	sp, #16
  401fae:	4604      	mov	r4, r0
  401fb0:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  401fb2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  401fb6:	bf35      	itete	cc
  401fb8:	2601      	movcc	r6, #1
  401fba:	2600      	movcs	r6, #0
  401fbc:	25c4      	movcc	r5, #196	; 0xc4
  401fbe:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  401fc0:	9600      	str	r6, [sp, #0]
  401fc2:	2304      	movs	r3, #4
  401fc4:	2200      	movs	r2, #0
  401fc6:	4601      	mov	r1, r0
  401fc8:	4628      	mov	r0, r5
  401fca:	4f2d      	ldr	r7, [pc, #180]	; (402080 <spi_read_reg+0xd8>)
  401fcc:	47b8      	blx	r7
	if (result != N_OK) {
  401fce:	2801      	cmp	r0, #1
  401fd0:	d00c      	beq.n	401fec <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  401fd2:	f240 2245 	movw	r2, #581	; 0x245
  401fd6:	492b      	ldr	r1, [pc, #172]	; (402084 <spi_read_reg+0xdc>)
  401fd8:	482b      	ldr	r0, [pc, #172]	; (402088 <spi_read_reg+0xe0>)
  401fda:	4d2c      	ldr	r5, [pc, #176]	; (40208c <spi_read_reg+0xe4>)
  401fdc:	47a8      	blx	r5
  401fde:	4621      	mov	r1, r4
  401fe0:	482b      	ldr	r0, [pc, #172]	; (402090 <spi_read_reg+0xe8>)
  401fe2:	47a8      	blx	r5
  401fe4:	482b      	ldr	r0, [pc, #172]	; (402094 <spi_read_reg+0xec>)
  401fe6:	47a8      	blx	r5
		return N_FAIL;
  401fe8:	2000      	movs	r0, #0
  401fea:	e045      	b.n	402078 <spi_read_reg+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  401fec:	4628      	mov	r0, r5
  401fee:	4b2a      	ldr	r3, [pc, #168]	; (402098 <spi_read_reg+0xf0>)
  401ff0:	4798      	blx	r3
	if (result != N_OK) {
  401ff2:	2801      	cmp	r0, #1
  401ff4:	d014      	beq.n	402020 <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  401ff6:	f240 224b 	movw	r2, #587	; 0x24b
  401ffa:	4922      	ldr	r1, [pc, #136]	; (402084 <spi_read_reg+0xdc>)
  401ffc:	4822      	ldr	r0, [pc, #136]	; (402088 <spi_read_reg+0xe0>)
  401ffe:	4d23      	ldr	r5, [pc, #140]	; (40208c <spi_read_reg+0xe4>)
  402000:	47a8      	blx	r5
  402002:	4621      	mov	r1, r4
  402004:	4825      	ldr	r0, [pc, #148]	; (40209c <spi_read_reg+0xf4>)
  402006:	47a8      	blx	r5
  402008:	4822      	ldr	r0, [pc, #136]	; (402094 <spi_read_reg+0xec>)
  40200a:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40200c:	2400      	movs	r4, #0
  40200e:	9400      	str	r4, [sp, #0]
  402010:	4623      	mov	r3, r4
  402012:	4622      	mov	r2, r4
  402014:	4621      	mov	r1, r4
  402016:	20cf      	movs	r0, #207	; 0xcf
  402018:	4d19      	ldr	r5, [pc, #100]	; (402080 <spi_read_reg+0xd8>)
  40201a:	47a8      	blx	r5
		return N_FAIL;
  40201c:	4620      	mov	r0, r4
  40201e:	e02b      	b.n	402078 <spi_read_reg+0xd0>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  402020:	4632      	mov	r2, r6
  402022:	2104      	movs	r1, #4
  402024:	a803      	add	r0, sp, #12
  402026:	4b1e      	ldr	r3, [pc, #120]	; (4020a0 <spi_read_reg+0xf8>)
  402028:	4798      	blx	r3
	if (result != N_OK) {
  40202a:	2801      	cmp	r0, #1
  40202c:	d013      	beq.n	402056 <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  40202e:	f240 2253 	movw	r2, #595	; 0x253
  402032:	4914      	ldr	r1, [pc, #80]	; (402084 <spi_read_reg+0xdc>)
  402034:	4814      	ldr	r0, [pc, #80]	; (402088 <spi_read_reg+0xe0>)
  402036:	4c15      	ldr	r4, [pc, #84]	; (40208c <spi_read_reg+0xe4>)
  402038:	47a0      	blx	r4
  40203a:	481a      	ldr	r0, [pc, #104]	; (4020a4 <spi_read_reg+0xfc>)
  40203c:	47a0      	blx	r4
  40203e:	4815      	ldr	r0, [pc, #84]	; (402094 <spi_read_reg+0xec>)
  402040:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402042:	2400      	movs	r4, #0
  402044:	9400      	str	r4, [sp, #0]
  402046:	4623      	mov	r3, r4
  402048:	4622      	mov	r2, r4
  40204a:	4621      	mov	r1, r4
  40204c:	20cf      	movs	r0, #207	; 0xcf
  40204e:	4d0c      	ldr	r5, [pc, #48]	; (402080 <spi_read_reg+0xd8>)
  402050:	47a8      	blx	r5
		return N_FAIL;
  402052:	4620      	mov	r0, r4
  402054:	e010      	b.n	402078 <spi_read_reg+0xd0>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  402056:	f89d 100d 	ldrb.w	r1, [sp, #13]
  40205a:	f89d 200e 	ldrb.w	r2, [sp, #14]
  40205e:	0413      	lsls	r3, r2, #16
  402060:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
  402064:	f89d 300c 	ldrb.w	r3, [sp, #12]
  402068:	4313      	orrs	r3, r2
  40206a:	f89d 200f 	ldrb.w	r2, [sp, #15]
  40206e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402072:	f8c8 3000 	str.w	r3, [r8]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  402076:	2001      	movs	r0, #1
}
  402078:	b004      	add	sp, #16
  40207a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40207e:	bf00      	nop
  402080:	00401d5d 	.word	0x00401d5d
  402084:	0040b7cc 	.word	0x0040b7cc
  402088:	0040a98c 	.word	0x0040a98c
  40208c:	00403f99 	.word	0x00403f99
  402090:	0040b478 	.word	0x0040b478
  402094:	0040a9b8 	.word	0x0040a9b8
  402098:	00401b71 	.word	0x00401b71
  40209c:	0040b4a4 	.word	0x0040b4a4
  4020a0:	00401c2d 	.word	0x00401c2d
  4020a4:	0040b4d8 	.word	0x0040b4d8

004020a8 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  4020a8:	2000      	movs	r0, #0
  4020aa:	4b01      	ldr	r3, [pc, #4]	; (4020b0 <nm_spi_deinit+0x8>)
  4020ac:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  4020ae:	4770      	bx	lr
  4020b0:	20400910 	.word	0x20400910

004020b4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  4020b4:	b500      	push	{lr}
  4020b6:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  4020b8:	a901      	add	r1, sp, #4
  4020ba:	4b03      	ldr	r3, [pc, #12]	; (4020c8 <nm_spi_read_reg+0x14>)
  4020bc:	4798      	blx	r3

	return u32Val;
}
  4020be:	9801      	ldr	r0, [sp, #4]
  4020c0:	b003      	add	sp, #12
  4020c2:	f85d fb04 	ldr.w	pc, [sp], #4
  4020c6:	bf00      	nop
  4020c8:	00401fa9 	.word	0x00401fa9

004020cc <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4020cc:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  4020ce:	4b04      	ldr	r3, [pc, #16]	; (4020e0 <nm_spi_read_reg_with_ret+0x14>)
  4020d0:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4020d2:	2801      	cmp	r0, #1

	return s8Ret;
}
  4020d4:	bf0c      	ite	eq
  4020d6:	2000      	moveq	r0, #0
  4020d8:	f06f 0005 	mvnne.w	r0, #5
  4020dc:	bd08      	pop	{r3, pc}
  4020de:	bf00      	nop
  4020e0:	00401fa9 	.word	0x00401fa9

004020e4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4020e4:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  4020e6:	4b04      	ldr	r3, [pc, #16]	; (4020f8 <nm_spi_write_reg+0x14>)
  4020e8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4020ea:	2801      	cmp	r0, #1

	return s8Ret;
}
  4020ec:	bf0c      	ite	eq
  4020ee:	2000      	moveq	r0, #0
  4020f0:	f06f 0005 	mvnne.w	r0, #5
  4020f4:	bd08      	pop	{r3, pc}
  4020f6:	bf00      	nop
  4020f8:	00401f11 	.word	0x00401f11

004020fc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  4020fc:	b530      	push	{r4, r5, lr}
  4020fe:	b083      	sub	sp, #12
	uint32 chipid;
	uint32 reg =0;
  402100:	2300      	movs	r3, #0
  402102:	a902      	add	r1, sp, #8
  402104:	f841 3d08 	str.w	r3, [r1, #-8]!

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  402108:	4a32      	ldr	r2, [pc, #200]	; (4021d4 <nm_spi_init+0xd8>)
  40210a:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  40210c:	f64e 0024 	movw	r0, #59428	; 0xe824
  402110:	4b31      	ldr	r3, [pc, #196]	; (4021d8 <nm_spi_init+0xdc>)
  402112:	4798      	blx	r3
  402114:	b9f0      	cbnz	r0, 402154 <nm_spi_init+0x58>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  402116:	2201      	movs	r2, #1
  402118:	4b2e      	ldr	r3, [pc, #184]	; (4021d4 <nm_spi_init+0xd8>)
  40211a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  40211c:	f240 22c5 	movw	r2, #709	; 0x2c5
  402120:	492e      	ldr	r1, [pc, #184]	; (4021dc <nm_spi_init+0xe0>)
  402122:	482f      	ldr	r0, [pc, #188]	; (4021e0 <nm_spi_init+0xe4>)
  402124:	4c2f      	ldr	r4, [pc, #188]	; (4021e4 <nm_spi_init+0xe8>)
  402126:	47a0      	blx	r4
  402128:	482f      	ldr	r0, [pc, #188]	; (4021e8 <nm_spi_init+0xec>)
  40212a:	47a0      	blx	r4
  40212c:	482f      	ldr	r0, [pc, #188]	; (4021ec <nm_spi_init+0xf0>)
  40212e:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  402130:	4669      	mov	r1, sp
  402132:	f64e 0024 	movw	r0, #59428	; 0xe824
  402136:	4b28      	ldr	r3, [pc, #160]	; (4021d8 <nm_spi_init+0xdc>)
  402138:	4798      	blx	r3
  40213a:	4604      	mov	r4, r0
  40213c:	b950      	cbnz	r0, 402154 <nm_spi_init+0x58>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  40213e:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  402142:	4926      	ldr	r1, [pc, #152]	; (4021dc <nm_spi_init+0xe0>)
  402144:	4826      	ldr	r0, [pc, #152]	; (4021e0 <nm_spi_init+0xe4>)
  402146:	4d27      	ldr	r5, [pc, #156]	; (4021e4 <nm_spi_init+0xe8>)
  402148:	47a8      	blx	r5
  40214a:	4829      	ldr	r0, [pc, #164]	; (4021f0 <nm_spi_init+0xf4>)
  40214c:	47a8      	blx	r5
  40214e:	4827      	ldr	r0, [pc, #156]	; (4021ec <nm_spi_init+0xf0>)
  402150:	47a8      	blx	r5
			return 0;
  402152:	e03c      	b.n	4021ce <nm_spi_init+0xd2>
		}
	}
	if(gu8Crc_off == 0)
  402154:	4b1f      	ldr	r3, [pc, #124]	; (4021d4 <nm_spi_init+0xd8>)
  402156:	781b      	ldrb	r3, [r3, #0]
  402158:	b9cb      	cbnz	r3, 40218e <nm_spi_init+0x92>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
  40215a:	9900      	ldr	r1, [sp, #0]
  40215c:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
  402160:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402164:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  402166:	f64e 0024 	movw	r0, #59428	; 0xe824
  40216a:	4b22      	ldr	r3, [pc, #136]	; (4021f4 <nm_spi_init+0xf8>)
  40216c:	4798      	blx	r3
  40216e:	4604      	mov	r4, r0
  402170:	b950      	cbnz	r0, 402188 <nm_spi_init+0x8c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  402172:	f240 22d2 	movw	r2, #722	; 0x2d2
  402176:	4919      	ldr	r1, [pc, #100]	; (4021dc <nm_spi_init+0xe0>)
  402178:	4819      	ldr	r0, [pc, #100]	; (4021e0 <nm_spi_init+0xe4>)
  40217a:	4d1a      	ldr	r5, [pc, #104]	; (4021e4 <nm_spi_init+0xe8>)
  40217c:	47a8      	blx	r5
  40217e:	481e      	ldr	r0, [pc, #120]	; (4021f8 <nm_spi_init+0xfc>)
  402180:	47a8      	blx	r5
  402182:	481a      	ldr	r0, [pc, #104]	; (4021ec <nm_spi_init+0xf0>)
  402184:	47a8      	blx	r5
			return 0;
  402186:	e022      	b.n	4021ce <nm_spi_init+0xd2>
		}
		gu8Crc_off = 1;
  402188:	2201      	movs	r2, #1
  40218a:	4b12      	ldr	r3, [pc, #72]	; (4021d4 <nm_spi_init+0xd8>)
  40218c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  40218e:	a901      	add	r1, sp, #4
  402190:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  402194:	4b10      	ldr	r3, [pc, #64]	; (4021d8 <nm_spi_init+0xdc>)
  402196:	4798      	blx	r3
  402198:	b960      	cbnz	r0, 4021b4 <nm_spi_init+0xb8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  40219a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  40219e:	490f      	ldr	r1, [pc, #60]	; (4021dc <nm_spi_init+0xe0>)
  4021a0:	480f      	ldr	r0, [pc, #60]	; (4021e0 <nm_spi_init+0xe4>)
  4021a2:	4c10      	ldr	r4, [pc, #64]	; (4021e4 <nm_spi_init+0xe8>)
  4021a4:	47a0      	blx	r4
  4021a6:	4815      	ldr	r0, [pc, #84]	; (4021fc <nm_spi_init+0x100>)
  4021a8:	47a0      	blx	r4
  4021aa:	4810      	ldr	r0, [pc, #64]	; (4021ec <nm_spi_init+0xf0>)
  4021ac:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  4021ae:	f06f 0405 	mvn.w	r4, #5
  4021b2:	e00c      	b.n	4021ce <nm_spi_init+0xd2>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  4021b4:	f64e 0024 	movw	r0, #59428	; 0xe824
  4021b8:	4b11      	ldr	r3, [pc, #68]	; (402200 <nm_spi_init+0x104>)
  4021ba:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  4021bc:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  4021c0:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4021c4:	f64e 0024 	movw	r0, #59428	; 0xe824
  4021c8:	4b0e      	ldr	r3, [pc, #56]	; (402204 <nm_spi_init+0x108>)
  4021ca:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
  4021cc:	2400      	movs	r4, #0
}
  4021ce:	4620      	mov	r0, r4
  4021d0:	b003      	add	sp, #12
  4021d2:	bd30      	pop	{r4, r5, pc}
  4021d4:	20400910 	.word	0x20400910
  4021d8:	00401fa9 	.word	0x00401fa9
  4021dc:	0040b2bc 	.word	0x0040b2bc
  4021e0:	0040a98c 	.word	0x0040a98c
  4021e4:	00403f99 	.word	0x00403f99
  4021e8:	0040b4f8 	.word	0x0040b4f8
  4021ec:	0040a9b8 	.word	0x0040a9b8
  4021f0:	0040b548 	.word	0x0040b548
  4021f4:	00401f11 	.word	0x00401f11
  4021f8:	0040b578 	.word	0x0040b578
  4021fc:	0040b5ac 	.word	0x0040b5ac
  402200:	004020b5 	.word	0x004020b5
  402204:	004020e5 	.word	0x004020e5

00402208 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402208:	b5f0      	push	{r4, r5, r6, r7, lr}
  40220a:	b083      	sub	sp, #12
  40220c:	4604      	mov	r4, r0
  40220e:	460f      	mov	r7, r1
  402210:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  402212:	2200      	movs	r2, #0
  402214:	9200      	str	r2, [sp, #0]
  402216:	462b      	mov	r3, r5
  402218:	4601      	mov	r1, r0
  40221a:	20c8      	movs	r0, #200	; 0xc8
  40221c:	4e23      	ldr	r6, [pc, #140]	; (4022ac <nm_spi_read_block+0xa4>)
  40221e:	47b0      	blx	r6
	if (result != N_OK) {
  402220:	2801      	cmp	r0, #1
  402222:	d00b      	beq.n	40223c <nm_spi_read_block+0x34>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  402224:	f44f 721d 	mov.w	r2, #628	; 0x274
  402228:	4921      	ldr	r1, [pc, #132]	; (4022b0 <nm_spi_read_block+0xa8>)
  40222a:	4822      	ldr	r0, [pc, #136]	; (4022b4 <nm_spi_read_block+0xac>)
  40222c:	4d22      	ldr	r5, [pc, #136]	; (4022b8 <nm_spi_read_block+0xb0>)
  40222e:	47a8      	blx	r5
  402230:	4621      	mov	r1, r4
  402232:	4822      	ldr	r0, [pc, #136]	; (4022bc <nm_spi_read_block+0xb4>)
  402234:	47a8      	blx	r5
  402236:	4822      	ldr	r0, [pc, #136]	; (4022c0 <nm_spi_read_block+0xb8>)
  402238:	47a8      	blx	r5
  40223a:	e032      	b.n	4022a2 <nm_spi_read_block+0x9a>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  40223c:	20c8      	movs	r0, #200	; 0xc8
  40223e:	4b21      	ldr	r3, [pc, #132]	; (4022c4 <nm_spi_read_block+0xbc>)
  402240:	4798      	blx	r3
	if (result != N_OK) {
  402242:	2801      	cmp	r0, #1
  402244:	d012      	beq.n	40226c <nm_spi_read_block+0x64>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  402246:	f240 227a 	movw	r2, #634	; 0x27a
  40224a:	4919      	ldr	r1, [pc, #100]	; (4022b0 <nm_spi_read_block+0xa8>)
  40224c:	4819      	ldr	r0, [pc, #100]	; (4022b4 <nm_spi_read_block+0xac>)
  40224e:	4d1a      	ldr	r5, [pc, #104]	; (4022b8 <nm_spi_read_block+0xb0>)
  402250:	47a8      	blx	r5
  402252:	4621      	mov	r1, r4
  402254:	481c      	ldr	r0, [pc, #112]	; (4022c8 <nm_spi_read_block+0xc0>)
  402256:	47a8      	blx	r5
  402258:	4819      	ldr	r0, [pc, #100]	; (4022c0 <nm_spi_read_block+0xb8>)
  40225a:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40225c:	2100      	movs	r1, #0
  40225e:	9100      	str	r1, [sp, #0]
  402260:	460b      	mov	r3, r1
  402262:	460a      	mov	r2, r1
  402264:	20cf      	movs	r0, #207	; 0xcf
  402266:	4c11      	ldr	r4, [pc, #68]	; (4022ac <nm_spi_read_block+0xa4>)
  402268:	47a0      	blx	r4
  40226a:	e01a      	b.n	4022a2 <nm_spi_read_block+0x9a>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  40226c:	2200      	movs	r2, #0
  40226e:	4629      	mov	r1, r5
  402270:	4638      	mov	r0, r7
  402272:	4b16      	ldr	r3, [pc, #88]	; (4022cc <nm_spi_read_block+0xc4>)
  402274:	4798      	blx	r3
	if (result != N_OK) {
  402276:	2801      	cmp	r0, #1
  402278:	d011      	beq.n	40229e <nm_spi_read_block+0x96>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  40227a:	f44f 7221 	mov.w	r2, #644	; 0x284
  40227e:	490c      	ldr	r1, [pc, #48]	; (4022b0 <nm_spi_read_block+0xa8>)
  402280:	480c      	ldr	r0, [pc, #48]	; (4022b4 <nm_spi_read_block+0xac>)
  402282:	4c0d      	ldr	r4, [pc, #52]	; (4022b8 <nm_spi_read_block+0xb0>)
  402284:	47a0      	blx	r4
  402286:	4812      	ldr	r0, [pc, #72]	; (4022d0 <nm_spi_read_block+0xc8>)
  402288:	47a0      	blx	r4
  40228a:	480d      	ldr	r0, [pc, #52]	; (4022c0 <nm_spi_read_block+0xb8>)
  40228c:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40228e:	2100      	movs	r1, #0
  402290:	9100      	str	r1, [sp, #0]
  402292:	460b      	mov	r3, r1
  402294:	460a      	mov	r2, r1
  402296:	20cf      	movs	r0, #207	; 0xcf
  402298:	4c04      	ldr	r4, [pc, #16]	; (4022ac <nm_spi_read_block+0xa4>)
  40229a:	47a0      	blx	r4
  40229c:	e001      	b.n	4022a2 <nm_spi_read_block+0x9a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40229e:	2000      	movs	r0, #0
  4022a0:	e001      	b.n	4022a6 <nm_spi_read_block+0x9e>
	else s8Ret = M2M_ERR_BUS_FAIL;
  4022a2:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4022a6:	b003      	add	sp, #12
  4022a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4022aa:	bf00      	nop
  4022ac:	00401d5d 	.word	0x00401d5d
  4022b0:	0040b2d8 	.word	0x0040b2d8
  4022b4:	0040a98c 	.word	0x0040a98c
  4022b8:	00403f99 	.word	0x00403f99
  4022bc:	0040b5d4 	.word	0x0040b5d4
  4022c0:	0040a9b8 	.word	0x0040a9b8
  4022c4:	00401b71 	.word	0x00401b71
  4022c8:	0040b604 	.word	0x0040b604
  4022cc:	00401c2d 	.word	0x00401c2d
  4022d0:	0040b63c 	.word	0x0040b63c

004022d4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4022d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4022d8:	b085      	sub	sp, #20
  4022da:	4604      	mov	r4, r0
  4022dc:	4688      	mov	r8, r1
  4022de:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  4022e0:	2200      	movs	r2, #0
  4022e2:	9200      	str	r2, [sp, #0]
  4022e4:	462b      	mov	r3, r5
  4022e6:	4601      	mov	r1, r0
  4022e8:	20c7      	movs	r0, #199	; 0xc7
  4022ea:	4e4c      	ldr	r6, [pc, #304]	; (40241c <nm_spi_write_block+0x148>)
  4022ec:	47b0      	blx	r6
	if (result != N_OK) {
  4022ee:	2801      	cmp	r0, #1
  4022f0:	d00b      	beq.n	40230a <nm_spi_write_block+0x36>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  4022f2:	f240 220f 	movw	r2, #527	; 0x20f
  4022f6:	494a      	ldr	r1, [pc, #296]	; (402420 <nm_spi_write_block+0x14c>)
  4022f8:	484a      	ldr	r0, [pc, #296]	; (402424 <nm_spi_write_block+0x150>)
  4022fa:	4d4b      	ldr	r5, [pc, #300]	; (402428 <nm_spi_write_block+0x154>)
  4022fc:	47a8      	blx	r5
  4022fe:	4621      	mov	r1, r4
  402300:	484a      	ldr	r0, [pc, #296]	; (40242c <nm_spi_write_block+0x158>)
  402302:	47a8      	blx	r5
  402304:	484a      	ldr	r0, [pc, #296]	; (402430 <nm_spi_write_block+0x15c>)
  402306:	47a8      	blx	r5
  402308:	e082      	b.n	402410 <nm_spi_write_block+0x13c>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  40230a:	20c7      	movs	r0, #199	; 0xc7
  40230c:	4b49      	ldr	r3, [pc, #292]	; (402434 <nm_spi_write_block+0x160>)
  40230e:	4798      	blx	r3
	if (result != N_OK) {
  402310:	2801      	cmp	r0, #1
  402312:	d012      	beq.n	40233a <nm_spi_write_block+0x66>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  402314:	f240 2215 	movw	r2, #533	; 0x215
  402318:	4941      	ldr	r1, [pc, #260]	; (402420 <nm_spi_write_block+0x14c>)
  40231a:	4842      	ldr	r0, [pc, #264]	; (402424 <nm_spi_write_block+0x150>)
  40231c:	4d42      	ldr	r5, [pc, #264]	; (402428 <nm_spi_write_block+0x154>)
  40231e:	47a8      	blx	r5
  402320:	4621      	mov	r1, r4
  402322:	4845      	ldr	r0, [pc, #276]	; (402438 <nm_spi_write_block+0x164>)
  402324:	47a8      	blx	r5
  402326:	4842      	ldr	r0, [pc, #264]	; (402430 <nm_spi_write_block+0x15c>)
  402328:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40232a:	2100      	movs	r1, #0
  40232c:	9100      	str	r1, [sp, #0]
  40232e:	460b      	mov	r3, r1
  402330:	460a      	mov	r2, r1
  402332:	20cf      	movs	r0, #207	; 0xcf
  402334:	4c39      	ldr	r4, [pc, #228]	; (40241c <nm_spi_write_block+0x148>)
  402336:	47a0      	blx	r4
  402338:	e06a      	b.n	402410 <nm_spi_write_block+0x13c>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
  40233a:	2400      	movs	r4, #0
  40233c:	f8ad 400c 	strh.w	r4, [sp, #12]
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  402340:	4f3e      	ldr	r7, [pc, #248]	; (40243c <nm_spi_write_block+0x168>)
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  402342:	f8df 9110 	ldr.w	r9, [pc, #272]	; 402454 <nm_spi_write_block+0x180>
  402346:	462e      	mov	r6, r5
  402348:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40234c:	bf28      	it	cs
  40234e:	f44f 5600 	movcs.w	r6, #8192	; 0x2000

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
  402352:	b92c      	cbnz	r4, 402360 <nm_spi_write_block+0x8c>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
  402354:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402358:	bf94      	ite	ls
  40235a:	2303      	movls	r3, #3
  40235c:	2301      	movhi	r3, #1
  40235e:	e004      	b.n	40236a <nm_spi_write_block+0x96>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
  402360:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402364:	bf94      	ite	ls
  402366:	2303      	movls	r3, #3
  402368:	2302      	movhi	r3, #2
		}
		cmd |= order;
  40236a:	f063 030f 	orn	r3, r3, #15
  40236e:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  402372:	2101      	movs	r1, #1
  402374:	f10d 000b 	add.w	r0, sp, #11
  402378:	47b8      	blx	r7
  40237a:	b150      	cbz	r0, 402392 <nm_spi_write_block+0xbe>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  40237c:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402380:	492f      	ldr	r1, [pc, #188]	; (402440 <nm_spi_write_block+0x16c>)
  402382:	4828      	ldr	r0, [pc, #160]	; (402424 <nm_spi_write_block+0x150>)
  402384:	4c28      	ldr	r4, [pc, #160]	; (402428 <nm_spi_write_block+0x154>)
  402386:	47a0      	blx	r4
  402388:	482e      	ldr	r0, [pc, #184]	; (402444 <nm_spi_write_block+0x170>)
  40238a:	47a0      	blx	r4
  40238c:	4828      	ldr	r0, [pc, #160]	; (402430 <nm_spi_write_block+0x15c>)
  40238e:	47a0      	blx	r4
  402390:	e028      	b.n	4023e4 <nm_spi_write_block+0x110>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  402392:	4631      	mov	r1, r6
  402394:	eb08 0004 	add.w	r0, r8, r4
  402398:	47b8      	blx	r7
  40239a:	b150      	cbz	r0, 4023b2 <nm_spi_write_block+0xde>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  40239c:	f240 12b1 	movw	r2, #433	; 0x1b1
  4023a0:	4927      	ldr	r1, [pc, #156]	; (402440 <nm_spi_write_block+0x16c>)
  4023a2:	4820      	ldr	r0, [pc, #128]	; (402424 <nm_spi_write_block+0x150>)
  4023a4:	4c20      	ldr	r4, [pc, #128]	; (402428 <nm_spi_write_block+0x154>)
  4023a6:	47a0      	blx	r4
  4023a8:	4827      	ldr	r0, [pc, #156]	; (402448 <nm_spi_write_block+0x174>)
  4023aa:	47a0      	blx	r4
  4023ac:	4820      	ldr	r0, [pc, #128]	; (402430 <nm_spi_write_block+0x15c>)
  4023ae:	47a0      	blx	r4
  4023b0:	e018      	b.n	4023e4 <nm_spi_write_block+0x110>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  4023b2:	f899 3000 	ldrb.w	r3, [r9]
  4023b6:	b973      	cbnz	r3, 4023d6 <nm_spi_write_block+0x102>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  4023b8:	2102      	movs	r1, #2
  4023ba:	a803      	add	r0, sp, #12
  4023bc:	47b8      	blx	r7
  4023be:	b150      	cbz	r0, 4023d6 <nm_spi_write_block+0x102>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  4023c0:	f240 12bb 	movw	r2, #443	; 0x1bb
  4023c4:	491e      	ldr	r1, [pc, #120]	; (402440 <nm_spi_write_block+0x16c>)
  4023c6:	4817      	ldr	r0, [pc, #92]	; (402424 <nm_spi_write_block+0x150>)
  4023c8:	4c17      	ldr	r4, [pc, #92]	; (402428 <nm_spi_write_block+0x154>)
  4023ca:	47a0      	blx	r4
  4023cc:	481f      	ldr	r0, [pc, #124]	; (40244c <nm_spi_write_block+0x178>)
  4023ce:	47a0      	blx	r4
  4023d0:	4817      	ldr	r0, [pc, #92]	; (402430 <nm_spi_write_block+0x15c>)
  4023d2:	47a0      	blx	r4
  4023d4:	e006      	b.n	4023e4 <nm_spi_write_block+0x110>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
  4023d6:	4434      	add	r4, r6
  4023d8:	b224      	sxth	r4, r4
		sz -= nbytes;
  4023da:	1bad      	subs	r5, r5, r6
  4023dc:	b2ad      	uxth	r5, r5
	} while (sz);
  4023de:	2d00      	cmp	r5, #0
  4023e0:	d1b1      	bne.n	402346 <nm_spi_write_block+0x72>
  4023e2:	e013      	b.n	40240c <nm_spi_write_block+0x138>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4023e4:	f240 2226 	movw	r2, #550	; 0x226
  4023e8:	490d      	ldr	r1, [pc, #52]	; (402420 <nm_spi_write_block+0x14c>)
  4023ea:	480e      	ldr	r0, [pc, #56]	; (402424 <nm_spi_write_block+0x150>)
  4023ec:	4c0e      	ldr	r4, [pc, #56]	; (402428 <nm_spi_write_block+0x154>)
  4023ee:	47a0      	blx	r4
  4023f0:	4817      	ldr	r0, [pc, #92]	; (402450 <nm_spi_write_block+0x17c>)
  4023f2:	47a0      	blx	r4
  4023f4:	480e      	ldr	r0, [pc, #56]	; (402430 <nm_spi_write_block+0x15c>)
  4023f6:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4023f8:	2400      	movs	r4, #0
  4023fa:	9400      	str	r4, [sp, #0]
  4023fc:	4623      	mov	r3, r4
  4023fe:	4622      	mov	r2, r4
  402400:	4621      	mov	r1, r4
  402402:	20cf      	movs	r0, #207	; 0xcf
  402404:	4d05      	ldr	r5, [pc, #20]	; (40241c <nm_spi_write_block+0x148>)
  402406:	47a8      	blx	r5
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  402408:	4620      	mov	r0, r4
  40240a:	e003      	b.n	402414 <nm_spi_write_block+0x140>
  40240c:	2000      	movs	r0, #0
  40240e:	e001      	b.n	402414 <nm_spi_write_block+0x140>
	else s8Ret = M2M_ERR_BUS_FAIL;
  402410:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  402414:	b005      	add	sp, #20
  402416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40241a:	bf00      	nop
  40241c:	00401d5d 	.word	0x00401d5d
  402420:	0040b7b0 	.word	0x0040b7b0
  402424:	0040a98c 	.word	0x0040a98c
  402428:	00403f99 	.word	0x00403f99
  40242c:	0040b664 	.word	0x0040b664
  402430:	0040a9b8 	.word	0x0040a9b8
  402434:	00401b71 	.word	0x00401b71
  402438:	0040b694 	.word	0x0040b694
  40243c:	00401d3d 	.word	0x00401d3d
  402440:	0040b2c8 	.word	0x0040b2c8
  402444:	0040b6cc 	.word	0x0040b6cc
  402448:	0040b704 	.word	0x0040b704
  40244c:	0040b738 	.word	0x0040b738
  402450:	0040b770 	.word	0x0040b770
  402454:	20400910 	.word	0x20400910

00402458 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  402458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40245c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  402460:	2c00      	cmp	r4, #0
  402462:	d047      	beq.n	4024f4 <Socket_ReadSocketData+0x9c>
  402464:	4681      	mov	r9, r0
  402466:	460e      	mov	r6, r1
  402468:	4692      	mov	sl, r2
  40246a:	4698      	mov	r8, r3
  40246c:	0103      	lsls	r3, r0, #4
  40246e:	4922      	ldr	r1, [pc, #136]	; (4024f8 <Socket_ReadSocketData+0xa0>)
  402470:	58cb      	ldr	r3, [r1, r3]
  402472:	2b00      	cmp	r3, #0
  402474:	d03e      	beq.n	4024f4 <Socket_ReadSocketData+0x9c>
  402476:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40247a:	889b      	ldrh	r3, [r3, #4]
  40247c:	b29b      	uxth	r3, r3
  40247e:	2b00      	cmp	r3, #0
  402480:	d038      	beq.n	4024f4 <Socket_ReadSocketData+0x9c>
  402482:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  402486:	7a9b      	ldrb	r3, [r3, #10]
  402488:	b2db      	uxtb	r3, r3
  40248a:	2b01      	cmp	r3, #1
  40248c:	d132      	bne.n	4024f4 <Socket_ReadSocketData+0x9c>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  40248e:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  402490:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  402494:	f8df b078 	ldr.w	fp, [pc, #120]	; 402510 <Socket_ReadSocketData+0xb8>
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  402498:	88bb      	ldrh	r3, [r7, #4]
			if(s16Diff > 0)
  40249a:	1ae3      	subs	r3, r4, r3
  40249c:	b21b      	sxth	r3, r3
  40249e:	2b00      	cmp	r3, #0
  4024a0:	dd03      	ble.n	4024aa <Socket_ReadSocketData+0x52>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4024a2:	88bd      	ldrh	r5, [r7, #4]
  4024a4:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
  4024a6:	2300      	movs	r3, #0
  4024a8:	e001      	b.n	4024ae <Socket_ReadSocketData+0x56>
  4024aa:	4625      	mov	r5, r4
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
  4024ac:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4024ae:	6839      	ldr	r1, [r7, #0]
  4024b0:	462a      	mov	r2, r5
  4024b2:	4640      	mov	r0, r8
  4024b4:	47d8      	blx	fp
  4024b6:	b9a8      	cbnz	r0, 4024e4 <Socket_ReadSocketData+0x8c>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4024b8:	683b      	ldr	r3, [r7, #0]
  4024ba:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4024bc:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  4024be:	88f3      	ldrh	r3, [r6, #6]
  4024c0:	1b5b      	subs	r3, r3, r5
  4024c2:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
  4024c4:	4b0d      	ldr	r3, [pc, #52]	; (4024fc <Socket_ReadSocketData+0xa4>)
  4024c6:	681b      	ldr	r3, [r3, #0]
  4024c8:	b12b      	cbz	r3, 4024d6 <Socket_ReadSocketData+0x7e>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  4024ca:	4b0c      	ldr	r3, [pc, #48]	; (4024fc <Socket_ReadSocketData+0xa4>)
  4024cc:	681b      	ldr	r3, [r3, #0]
  4024ce:	4632      	mov	r2, r6
  4024d0:	4651      	mov	r1, sl
  4024d2:	4648      	mov	r0, r9
  4024d4:	4798      	blx	r3

				u16ReadCount -= u16Read;
  4024d6:	1b64      	subs	r4, r4, r5
  4024d8:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4024da:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  4024dc:	2c00      	cmp	r4, #0
  4024de:	d1db      	bne.n	402498 <Socket_ReadSocketData+0x40>
  4024e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  4024e4:	4806      	ldr	r0, [pc, #24]	; (402500 <Socket_ReadSocketData+0xa8>)
  4024e6:	4d07      	ldr	r5, [pc, #28]	; (402504 <Socket_ReadSocketData+0xac>)
  4024e8:	47a8      	blx	r5
  4024ea:	4621      	mov	r1, r4
  4024ec:	4806      	ldr	r0, [pc, #24]	; (402508 <Socket_ReadSocketData+0xb0>)
  4024ee:	47a8      	blx	r5
  4024f0:	4806      	ldr	r0, [pc, #24]	; (40250c <Socket_ReadSocketData+0xb4>)
  4024f2:	47a8      	blx	r5
  4024f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024f8:	20401534 	.word	0x20401534
  4024fc:	204015e4 	.word	0x204015e4
  402500:	0040ac60 	.word	0x0040ac60
  402504:	00403f99 	.word	0x00403f99
  402508:	0040b7dc 	.word	0x0040b7dc
  40250c:	0040a9b8 	.word	0x0040a9b8
  402510:	00400bc5 	.word	0x00400bc5

00402514 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  402514:	b5f0      	push	{r4, r5, r6, r7, lr}
  402516:	b099      	sub	sp, #100	; 0x64
  402518:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  40251a:	2841      	cmp	r0, #65	; 0x41
  40251c:	d119      	bne.n	402552 <m2m_ip_cb+0x3e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  40251e:	2300      	movs	r3, #0
  402520:	2204      	movs	r2, #4
  402522:	a907      	add	r1, sp, #28
  402524:	4620      	mov	r0, r4
  402526:	4ca4      	ldr	r4, [pc, #656]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402528:	47a0      	blx	r4
  40252a:	2800      	cmp	r0, #0
  40252c:	f040 8141 	bne.w	4027b2 <m2m_ip_cb+0x29e>
		{
			strBind.status = strBindReply.s8Status;
  402530:	f89d 301d 	ldrb.w	r3, [sp, #29]
  402534:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402538:	4ba0      	ldr	r3, [pc, #640]	; (4027bc <m2m_ip_cb+0x2a8>)
  40253a:	681b      	ldr	r3, [r3, #0]
  40253c:	2b00      	cmp	r3, #0
  40253e:	f000 8138 	beq.w	4027b2 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  402542:	4b9e      	ldr	r3, [pc, #632]	; (4027bc <m2m_ip_cb+0x2a8>)
  402544:	681b      	ldr	r3, [r3, #0]
  402546:	aa03      	add	r2, sp, #12
  402548:	2101      	movs	r1, #1
  40254a:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40254e:	4798      	blx	r3
  402550:	e12f      	b.n	4027b2 <m2m_ip_cb+0x29e>
  402552:	460d      	mov	r5, r1
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  402554:	2842      	cmp	r0, #66	; 0x42
  402556:	d119      	bne.n	40258c <m2m_ip_cb+0x78>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  402558:	2300      	movs	r3, #0
  40255a:	2204      	movs	r2, #4
  40255c:	a907      	add	r1, sp, #28
  40255e:	4620      	mov	r0, r4
  402560:	4c95      	ldr	r4, [pc, #596]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402562:	47a0      	blx	r4
  402564:	2800      	cmp	r0, #0
  402566:	f040 8124 	bne.w	4027b2 <m2m_ip_cb+0x29e>
		{
			strListen.status = strListenReply.s8Status;
  40256a:	f89d 301d 	ldrb.w	r3, [sp, #29]
  40256e:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402572:	4b92      	ldr	r3, [pc, #584]	; (4027bc <m2m_ip_cb+0x2a8>)
  402574:	681b      	ldr	r3, [r3, #0]
  402576:	2b00      	cmp	r3, #0
  402578:	f000 811b 	beq.w	4027b2 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  40257c:	4b8f      	ldr	r3, [pc, #572]	; (4027bc <m2m_ip_cb+0x2a8>)
  40257e:	681b      	ldr	r3, [r3, #0]
  402580:	aa03      	add	r2, sp, #12
  402582:	2102      	movs	r1, #2
  402584:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402588:	4798      	blx	r3
  40258a:	e112      	b.n	4027b2 <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  40258c:	2843      	cmp	r0, #67	; 0x43
  40258e:	d13f      	bne.n	402610 <m2m_ip_cb+0xfc>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  402590:	2300      	movs	r3, #0
  402592:	220c      	movs	r2, #12
  402594:	eb0d 0102 	add.w	r1, sp, r2
  402598:	4620      	mov	r0, r4
  40259a:	4c87      	ldr	r4, [pc, #540]	; (4027b8 <m2m_ip_cb+0x2a4>)
  40259c:	47a0      	blx	r4
  40259e:	2800      	cmp	r0, #0
  4025a0:	f040 8107 	bne.w	4027b2 <m2m_ip_cb+0x29e>
		{
			if(strAcceptReply.sConnectedSock >= 0)
  4025a4:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  4025a8:	2b00      	cmp	r3, #0
  4025aa:	db19      	blt.n	4025e0 <m2m_ip_cb+0xcc>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  4025ac:	4a84      	ldr	r2, [pc, #528]	; (4027c0 <m2m_ip_cb+0x2ac>)
  4025ae:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4025b2:	2100      	movs	r1, #0
  4025b4:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  4025b6:	2101      	movs	r1, #1
  4025b8:	7291      	strb	r1, [r2, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  4025ba:	4982      	ldr	r1, [pc, #520]	; (4027c4 <m2m_ip_cb+0x2b0>)
  4025bc:	880a      	ldrh	r2, [r1, #0]
  4025be:	3201      	adds	r2, #1
  4025c0:	b292      	uxth	r2, r2
  4025c2:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  4025c4:	880a      	ldrh	r2, [r1, #0]
  4025c6:	b292      	uxth	r2, r2
  4025c8:	b91a      	cbnz	r2, 4025d2 <m2m_ip_cb+0xbe>
					++gu16SessionID;
  4025ca:	880a      	ldrh	r2, [r1, #0]
  4025cc:	3201      	adds	r2, #1
  4025ce:	b292      	uxth	r2, r2
  4025d0:	800a      	strh	r2, [r1, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  4025d2:	4a7c      	ldr	r2, [pc, #496]	; (4027c4 <m2m_ip_cb+0x2b0>)
  4025d4:	8811      	ldrh	r1, [r2, #0]
  4025d6:	b289      	uxth	r1, r1
  4025d8:	4a79      	ldr	r2, [pc, #484]	; (4027c0 <m2m_ip_cb+0x2ac>)
  4025da:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4025de:	80d1      	strh	r1, [r2, #6]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
  4025e0:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  4025e4:	2302      	movs	r3, #2
  4025e6:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  4025ea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4025ee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  4025f2:	9b04      	ldr	r3, [sp, #16]
  4025f4:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  4025f6:	4b71      	ldr	r3, [pc, #452]	; (4027bc <m2m_ip_cb+0x2a8>)
  4025f8:	681b      	ldr	r3, [r3, #0]
  4025fa:	2b00      	cmp	r3, #0
  4025fc:	f000 80d9 	beq.w	4027b2 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  402600:	4b6e      	ldr	r3, [pc, #440]	; (4027bc <m2m_ip_cb+0x2a8>)
  402602:	681b      	ldr	r3, [r3, #0]
  402604:	aa07      	add	r2, sp, #28
  402606:	2104      	movs	r1, #4
  402608:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  40260c:	4798      	blx	r3
  40260e:	e0d0      	b.n	4027b2 <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  402610:	2844      	cmp	r0, #68	; 0x44
  402612:	d001      	beq.n	402618 <m2m_ip_cb+0x104>
  402614:	284b      	cmp	r0, #75	; 0x4b
  402616:	d124      	bne.n	402662 <m2m_ip_cb+0x14e>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  402618:	2300      	movs	r3, #0
  40261a:	2204      	movs	r2, #4
  40261c:	a907      	add	r1, sp, #28
  40261e:	4620      	mov	r0, r4
  402620:	4c65      	ldr	r4, [pc, #404]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402622:	47a0      	blx	r4
  402624:	2800      	cmp	r0, #0
  402626:	f040 80c4 	bne.w	4027b2 <m2m_ip_cb+0x29e>
		{
			strConnMsg.sock		= strConnectReply.sock;
  40262a:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40262e:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  402632:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  402636:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  40263a:	b93b      	cbnz	r3, 40264c <m2m_ip_cb+0x138>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  40263c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  402640:	3b08      	subs	r3, #8
  402642:	b29b      	uxth	r3, r3
  402644:	4a5e      	ldr	r2, [pc, #376]	; (4027c0 <m2m_ip_cb+0x2ac>)
  402646:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40264a:	8113      	strh	r3, [r2, #8]
			}
			if(gpfAppSocketCb)
  40264c:	4b5b      	ldr	r3, [pc, #364]	; (4027bc <m2m_ip_cb+0x2a8>)
  40264e:	681b      	ldr	r3, [r3, #0]
  402650:	2b00      	cmp	r3, #0
  402652:	f000 80ae 	beq.w	4027b2 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  402656:	4b59      	ldr	r3, [pc, #356]	; (4027bc <m2m_ip_cb+0x2a8>)
  402658:	681b      	ldr	r3, [r3, #0]
  40265a:	aa03      	add	r2, sp, #12
  40265c:	2105      	movs	r1, #5
  40265e:	4798      	blx	r3
  402660:	e0a7      	b.n	4027b2 <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  402662:	284a      	cmp	r0, #74	; 0x4a
  402664:	d113      	bne.n	40268e <m2m_ip_cb+0x17a>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  402666:	2300      	movs	r3, #0
  402668:	2244      	movs	r2, #68	; 0x44
  40266a:	a907      	add	r1, sp, #28
  40266c:	4620      	mov	r0, r4
  40266e:	4c52      	ldr	r4, [pc, #328]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402670:	47a0      	blx	r4
  402672:	2800      	cmp	r0, #0
  402674:	f040 809d 	bne.w	4027b2 <m2m_ip_cb+0x29e>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
  402678:	4b53      	ldr	r3, [pc, #332]	; (4027c8 <m2m_ip_cb+0x2b4>)
  40267a:	681b      	ldr	r3, [r3, #0]
  40267c:	2b00      	cmp	r3, #0
  40267e:	f000 8098 	beq.w	4027b2 <m2m_ip_cb+0x29e>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  402682:	4b51      	ldr	r3, [pc, #324]	; (4027c8 <m2m_ip_cb+0x2b4>)
  402684:	681b      	ldr	r3, [r3, #0]
  402686:	9917      	ldr	r1, [sp, #92]	; 0x5c
  402688:	a807      	add	r0, sp, #28
  40268a:	4798      	blx	r3
  40268c:	e091      	b.n	4027b2 <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40268e:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  402692:	b2db      	uxtb	r3, r3
  402694:	2b07      	cmp	r3, #7
  402696:	d84d      	bhi.n	402734 <m2m_ip_cb+0x220>
  402698:	2285      	movs	r2, #133	; 0x85
  40269a:	fa22 f303 	lsr.w	r3, r2, r3
  40269e:	f013 0f01 	tst.w	r3, #1
  4026a2:	d047      	beq.n	402734 <m2m_ip_cb+0x220>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  4026a4:	2848      	cmp	r0, #72	; 0x48
  4026a6:	bf14      	ite	ne
  4026a8:	2706      	movne	r7, #6
  4026aa:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  4026ac:	2300      	movs	r3, #0
  4026ae:	2210      	movs	r2, #16
  4026b0:	a903      	add	r1, sp, #12
  4026b2:	4620      	mov	r0, r4
  4026b4:	4e40      	ldr	r6, [pc, #256]	; (4027b8 <m2m_ip_cb+0x2a4>)
  4026b6:	47b0      	blx	r6
  4026b8:	2800      	cmp	r0, #0
  4026ba:	d17a      	bne.n	4027b2 <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  4026bc:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  4026c0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  4026c4:	4a3e      	ldr	r2, [pc, #248]	; (4027c0 <m2m_ip_cb+0x2ac>)
  4026c6:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4026ca:	2300      	movs	r3, #0
  4026cc:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  4026ce:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  4026d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  4026d6:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  4026da:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  4026de:	9e04      	ldr	r6, [sp, #16]
  4026e0:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4026e2:	88d2      	ldrh	r2, [r2, #6]
  4026e4:	b292      	uxth	r2, r2
  4026e6:	4291      	cmp	r1, r2
  4026e8:	d11b      	bne.n	402722 <m2m_ip_cb+0x20e>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  4026ea:	f1be 0f00 	cmp.w	lr, #0
  4026ee:	dd0a      	ble.n	402706 <m2m_ip_cb+0x1f2>
  4026f0:	45ae      	cmp	lr, r5
  4026f2:	da08      	bge.n	402706 <m2m_ip_cb+0x1f2>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  4026f4:	fa1f f28e 	uxth.w	r2, lr
  4026f8:	9200      	str	r2, [sp, #0]
  4026fa:	4423      	add	r3, r4
  4026fc:	463a      	mov	r2, r7
  4026fe:	a907      	add	r1, sp, #28
  402700:	4c32      	ldr	r4, [pc, #200]	; (4027cc <m2m_ip_cb+0x2b8>)
  402702:	47a0      	blx	r4
  402704:	e055      	b.n	4027b2 <m2m_ip_cb+0x29e>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  402706:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  40270a:	2300      	movs	r3, #0
  40270c:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  40270e:	4b2b      	ldr	r3, [pc, #172]	; (4027bc <m2m_ip_cb+0x2a8>)
  402710:	681b      	ldr	r3, [r3, #0]
  402712:	2b00      	cmp	r3, #0
  402714:	d04d      	beq.n	4027b2 <m2m_ip_cb+0x29e>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  402716:	4b29      	ldr	r3, [pc, #164]	; (4027bc <m2m_ip_cb+0x2a8>)
  402718:	681b      	ldr	r3, [r3, #0]
  40271a:	aa07      	add	r2, sp, #28
  40271c:	4639      	mov	r1, r7
  40271e:	4798      	blx	r3
  402720:	e047      	b.n	4027b2 <m2m_ip_cb+0x29e>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  402722:	2d10      	cmp	r5, #16
  402724:	d945      	bls.n	4027b2 <m2m_ip_cb+0x29e>
					hif_receive(0, NULL, 0, 1);
  402726:	2301      	movs	r3, #1
  402728:	2200      	movs	r2, #0
  40272a:	4611      	mov	r1, r2
  40272c:	4610      	mov	r0, r2
  40272e:	4c22      	ldr	r4, [pc, #136]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402730:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  402732:	e03e      	b.n	4027b2 <m2m_ip_cb+0x29e>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  402734:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  402738:	2b45      	cmp	r3, #69	; 0x45
  40273a:	d001      	beq.n	402740 <m2m_ip_cb+0x22c>
  40273c:	284c      	cmp	r0, #76	; 0x4c
  40273e:	d123      	bne.n	402788 <m2m_ip_cb+0x274>
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  402740:	2847      	cmp	r0, #71	; 0x47
  402742:	bf14      	ite	ne
  402744:	2507      	movne	r5, #7
  402746:	2508      	moveq	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  402748:	2300      	movs	r3, #0
  40274a:	2208      	movs	r2, #8
  40274c:	a907      	add	r1, sp, #28
  40274e:	4620      	mov	r0, r4
  402750:	4c19      	ldr	r4, [pc, #100]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402752:	47a0      	blx	r4
  402754:	2800      	cmp	r0, #0
  402756:	d12c      	bne.n	4027b2 <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
  402758:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  40275c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  402760:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  402764:	f8ad 300c 	strh.w	r3, [sp, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  402768:	4b15      	ldr	r3, [pc, #84]	; (4027c0 <m2m_ip_cb+0x2ac>)
  40276a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40276e:	88db      	ldrh	r3, [r3, #6]
  402770:	b29b      	uxth	r3, r3
  402772:	429a      	cmp	r2, r3
  402774:	d11d      	bne.n	4027b2 <m2m_ip_cb+0x29e>
			{
				if(gpfAppSocketCb)
  402776:	4b11      	ldr	r3, [pc, #68]	; (4027bc <m2m_ip_cb+0x2a8>)
  402778:	681b      	ldr	r3, [r3, #0]
  40277a:	b1d3      	cbz	r3, 4027b2 <m2m_ip_cb+0x29e>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  40277c:	4b0f      	ldr	r3, [pc, #60]	; (4027bc <m2m_ip_cb+0x2a8>)
  40277e:	681b      	ldr	r3, [r3, #0]
  402780:	aa03      	add	r2, sp, #12
  402782:	4629      	mov	r1, r5
  402784:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  402786:	e014      	b.n	4027b2 <m2m_ip_cb+0x29e>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
  402788:	2852      	cmp	r0, #82	; 0x52
  40278a:	d112      	bne.n	4027b2 <m2m_ip_cb+0x29e>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  40278c:	2301      	movs	r3, #1
  40278e:	2214      	movs	r2, #20
  402790:	a907      	add	r1, sp, #28
  402792:	4620      	mov	r0, r4
  402794:	4c08      	ldr	r4, [pc, #32]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402796:	47a0      	blx	r4
  402798:	b958      	cbnz	r0, 4027b2 <m2m_ip_cb+0x29e>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  40279a:	4b0d      	ldr	r3, [pc, #52]	; (4027d0 <m2m_ip_cb+0x2bc>)
  40279c:	9a08      	ldr	r2, [sp, #32]
  40279e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  4027a0:	681b      	ldr	r3, [r3, #0]
  4027a2:	b133      	cbz	r3, 4027b2 <m2m_ip_cb+0x29e>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  4027a4:	4b0a      	ldr	r3, [pc, #40]	; (4027d0 <m2m_ip_cb+0x2bc>)
  4027a6:	681b      	ldr	r3, [r3, #0]
  4027a8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  4027ac:	9909      	ldr	r1, [sp, #36]	; 0x24
  4027ae:	9807      	ldr	r0, [sp, #28]
  4027b0:	4798      	blx	r3
			}
		}
	}
}
  4027b2:	b019      	add	sp, #100	; 0x64
  4027b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4027b6:	bf00      	nop
  4027b8:	00400bc5 	.word	0x00400bc5
  4027bc:	204015e4 	.word	0x204015e4
  4027c0:	20401534 	.word	0x20401534
  4027c4:	20400912 	.word	0x20400912
  4027c8:	204015ec 	.word	0x204015ec
  4027cc:	00402459 	.word	0x00402459
  4027d0:	204015e8 	.word	0x204015e8

004027d4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  4027d4:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  4027d6:	4b0a      	ldr	r3, [pc, #40]	; (402800 <socketInit+0x2c>)
  4027d8:	781b      	ldrb	r3, [r3, #0]
  4027da:	f013 0fff 	tst.w	r3, #255	; 0xff
  4027de:	d10e      	bne.n	4027fe <socketInit+0x2a>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4027e0:	22b0      	movs	r2, #176	; 0xb0
  4027e2:	2100      	movs	r1, #0
  4027e4:	4807      	ldr	r0, [pc, #28]	; (402804 <socketInit+0x30>)
  4027e6:	4b08      	ldr	r3, [pc, #32]	; (402808 <socketInit+0x34>)
  4027e8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  4027ea:	4908      	ldr	r1, [pc, #32]	; (40280c <socketInit+0x38>)
  4027ec:	2002      	movs	r0, #2
  4027ee:	4b08      	ldr	r3, [pc, #32]	; (402810 <socketInit+0x3c>)
  4027f0:	4798      	blx	r3
		gbSocketInit=1;
  4027f2:	2201      	movs	r2, #1
  4027f4:	4b02      	ldr	r3, [pc, #8]	; (402800 <socketInit+0x2c>)
  4027f6:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  4027f8:	2200      	movs	r2, #0
  4027fa:	4b06      	ldr	r3, [pc, #24]	; (402814 <socketInit+0x40>)
  4027fc:	801a      	strh	r2, [r3, #0]
  4027fe:	bd08      	pop	{r3, pc}
  402800:	20400911 	.word	0x20400911
  402804:	20401534 	.word	0x20401534
  402808:	00400569 	.word	0x00400569
  40280c:	00402515 	.word	0x00402515
  402810:	00400cd5 	.word	0x00400cd5
  402814:	20400912 	.word	0x20400912

00402818 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  402818:	4b02      	ldr	r3, [pc, #8]	; (402824 <registerSocketCallback+0xc>)
  40281a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  40281c:	4b02      	ldr	r3, [pc, #8]	; (402828 <registerSocketCallback+0x10>)
  40281e:	6019      	str	r1, [r3, #0]
  402820:	4770      	bx	lr
  402822:	bf00      	nop
  402824:	204015e4 	.word	0x204015e4
  402828:	204015ec 	.word	0x204015ec

0040282c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  40282c:	b570      	push	{r4, r5, r6, lr}
  40282e:	b086      	sub	sp, #24
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  402830:	2802      	cmp	r0, #2
  402832:	d14b      	bne.n	4028cc <socket+0xa0>
	{
		if(u8Type == SOCK_STREAM)
  402834:	2901      	cmp	r1, #1
  402836:	d04c      	beq.n	4028d2 <socket+0xa6>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  402838:	2902      	cmp	r1, #2
  40283a:	d04d      	beq.n	4028d8 <socket+0xac>
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
  40283c:	f04f 34ff 	mov.w	r4, #4294967295
  402840:	e058      	b.n	4028f4 <socket+0xc8>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402842:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  402844:	eb00 1304 	add.w	r3, r0, r4, lsl #4
  402848:	7a9b      	ldrb	r3, [r3, #10]
  40284a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40284e:	d136      	bne.n	4028be <socket+0x92>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402850:	482a      	ldr	r0, [pc, #168]	; (4028fc <socket+0xd0>)
  402852:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402856:	4616      	mov	r6, r2
			if(pstrSock->bIsUsed == 0)
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  402858:	2210      	movs	r2, #16
  40285a:	2100      	movs	r1, #0
  40285c:	4b28      	ldr	r3, [pc, #160]	; (402900 <socket+0xd4>)
  40285e:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  402860:	4b26      	ldr	r3, [pc, #152]	; (4028fc <socket+0xd0>)
  402862:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  402866:	2201      	movs	r2, #1
  402868:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  40286a:	4a26      	ldr	r2, [pc, #152]	; (402904 <socket+0xd8>)
  40286c:	8813      	ldrh	r3, [r2, #0]
  40286e:	3301      	adds	r3, #1
  402870:	b29b      	uxth	r3, r3
  402872:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  402874:	8813      	ldrh	r3, [r2, #0]
  402876:	b29b      	uxth	r3, r3
  402878:	b91b      	cbnz	r3, 402882 <socket+0x56>
					++gu16SessionID;
  40287a:	8813      	ldrh	r3, [r2, #0]
  40287c:	3301      	adds	r3, #1
  40287e:	b29b      	uxth	r3, r3
  402880:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  402882:	4b20      	ldr	r3, [pc, #128]	; (402904 <socket+0xd8>)
  402884:	881a      	ldrh	r2, [r3, #0]
  402886:	b292      	uxth	r2, r2
  402888:	4b1c      	ldr	r3, [pc, #112]	; (4028fc <socket+0xd0>)
  40288a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  40288e:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  402890:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  402892:	f016 0f01 	tst.w	r6, #1
  402896:	d02d      	beq.n	4028f4 <socket+0xc8>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  402898:	aa06      	add	r2, sp, #24
  40289a:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  40289e:	4b17      	ldr	r3, [pc, #92]	; (4028fc <socket+0xd0>)
  4028a0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  4028a4:	2321      	movs	r3, #33	; 0x21
  4028a6:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  4028a8:	2300      	movs	r3, #0
  4028aa:	9302      	str	r3, [sp, #8]
  4028ac:	9301      	str	r3, [sp, #4]
  4028ae:	9300      	str	r3, [sp, #0]
  4028b0:	2304      	movs	r3, #4
  4028b2:	2150      	movs	r1, #80	; 0x50
  4028b4:	2002      	movs	r0, #2
  4028b6:	4d14      	ldr	r5, [pc, #80]	; (402908 <socket+0xdc>)
  4028b8:	47a8      	blx	r5
  4028ba:	e01b      	b.n	4028f4 <socket+0xc8>
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
			if(pstrSock->bIsUsed == 0)
  4028bc:	480f      	ldr	r0, [pc, #60]	; (4028fc <socket+0xd0>)
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
  4028be:	3401      	adds	r4, #1
  4028c0:	b2e4      	uxtb	r4, r4
  4028c2:	428c      	cmp	r4, r1
  4028c4:	d3bd      	bcc.n	402842 <socket+0x16>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET		sock = -1;
  4028c6:	f04f 34ff 	mov.w	r4, #4294967295
  4028ca:	e013      	b.n	4028f4 <socket+0xc8>
  4028cc:	f04f 34ff 	mov.w	r4, #4294967295
  4028d0:	e010      	b.n	4028f4 <socket+0xc8>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
  4028d2:	2107      	movs	r1, #7
			u8Count = 0;
  4028d4:	2400      	movs	r4, #0
  4028d6:	e001      	b.n	4028dc <socket+0xb0>
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  4028d8:	210b      	movs	r1, #11
			u8Count = TCP_SOCK_MAX;
  4028da:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4028dc:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  4028de:	4b07      	ldr	r3, [pc, #28]	; (4028fc <socket+0xd0>)
  4028e0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4028e4:	7a9b      	ldrb	r3, [r3, #10]
  4028e6:	f013 0fff 	tst.w	r3, #255	; 0xff
  4028ea:	d1e7      	bne.n	4028bc <socket+0x90>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4028ec:	4803      	ldr	r0, [pc, #12]	; (4028fc <socket+0xd0>)
  4028ee:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4028f2:	e7b0      	b.n	402856 <socket+0x2a>
				break;
			}
		}
	}
	return sock;
}
  4028f4:	4620      	mov	r0, r4
  4028f6:	b006      	add	sp, #24
  4028f8:	bd70      	pop	{r4, r5, r6, pc}
  4028fa:	bf00      	nop
  4028fc:	20401534 	.word	0x20401534
  402900:	00400569 	.word	0x00400569
  402904:	20400912 	.word	0x20400912
  402908:	004006cd 	.word	0x004006cd

0040290c <connect>:
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  40290c:	2800      	cmp	r0, #0
  40290e:	db38      	blt.n	402982 <connect+0x76>
  402910:	2900      	cmp	r1, #0
  402912:	d036      	beq.n	402982 <connect+0x76>
  402914:	4b1f      	ldr	r3, [pc, #124]	; (402994 <connect+0x88>)
  402916:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40291a:	7a9b      	ldrb	r3, [r3, #10]
  40291c:	b2db      	uxtb	r3, r3
  40291e:	2a00      	cmp	r2, #0
  402920:	d032      	beq.n	402988 <connect+0x7c>
  402922:	2b01      	cmp	r3, #1
  402924:	d130      	bne.n	402988 <connect+0x7c>

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  402926:	b530      	push	{r4, r5, lr}
  402928:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  40292a:	4b1a      	ldr	r3, [pc, #104]	; (402994 <connect+0x88>)
  40292c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402930:	7adb      	ldrb	r3, [r3, #11]
  402932:	f013 0f01 	tst.w	r3, #1
  402936:	d007      	beq.n	402948 <connect+0x3c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  402938:	4b16      	ldr	r3, [pc, #88]	; (402994 <connect+0x88>)
  40293a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40293e:	7adb      	ldrb	r3, [r3, #11]
  402940:	f88d 301d 	strb.w	r3, [sp, #29]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  402944:	254b      	movs	r5, #75	; 0x4b
  402946:	e000      	b.n	40294a <connect+0x3e>
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  402948:	2544      	movs	r5, #68	; 0x44
  40294a:	4604      	mov	r4, r0
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
  40294c:	f88d 001c 	strb.w	r0, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  402950:	2208      	movs	r2, #8
  402952:	a805      	add	r0, sp, #20
  402954:	4b10      	ldr	r3, [pc, #64]	; (402998 <connect+0x8c>)
  402956:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  402958:	480e      	ldr	r0, [pc, #56]	; (402994 <connect+0x88>)
  40295a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  40295e:	88c3      	ldrh	r3, [r0, #6]
  402960:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  402964:	2300      	movs	r3, #0
  402966:	9302      	str	r3, [sp, #8]
  402968:	9301      	str	r3, [sp, #4]
  40296a:	9300      	str	r3, [sp, #0]
  40296c:	230c      	movs	r3, #12
  40296e:	aa05      	add	r2, sp, #20
  402970:	4629      	mov	r1, r5
  402972:	2002      	movs	r0, #2
  402974:	4c09      	ldr	r4, [pc, #36]	; (40299c <connect+0x90>)
  402976:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  402978:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  40297a:	bf18      	it	ne
  40297c:	f06f 0008 	mvnne.w	r0, #8
  402980:	e005      	b.n	40298e <connect+0x82>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402982:	f06f 0005 	mvn.w	r0, #5
  402986:	4770      	bx	lr
  402988:	f06f 0005 	mvn.w	r0, #5
  40298c:	4770      	bx	lr
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  40298e:	b009      	add	sp, #36	; 0x24
  402990:	bd30      	pop	{r4, r5, pc}
  402992:	bf00      	nop
  402994:	20401534 	.word	0x20401534
  402998:	00400555 	.word	0x00400555
  40299c:	004006cd 	.word	0x004006cd

004029a0 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  4029a0:	b530      	push	{r4, r5, lr}
  4029a2:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  4029a4:	460c      	mov	r4, r1
  4029a6:	3100      	adds	r1, #0
  4029a8:	bf18      	it	ne
  4029aa:	2101      	movne	r1, #1
  4029ac:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  4029b0:	bf88      	it	hi
  4029b2:	2100      	movhi	r1, #0
  4029b4:	2900      	cmp	r1, #0
  4029b6:	d036      	beq.n	402a26 <send+0x86>
  4029b8:	2800      	cmp	r0, #0
  4029ba:	db34      	blt.n	402a26 <send+0x86>
  4029bc:	4b1d      	ldr	r3, [pc, #116]	; (402a34 <send+0x94>)
  4029be:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4029c2:	7a9b      	ldrb	r3, [r3, #10]
  4029c4:	b2db      	uxtb	r3, r3
  4029c6:	2b01      	cmp	r3, #1
  4029c8:	d130      	bne.n	402a2c <send+0x8c>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  4029ca:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  4029ce:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  4029d2:	4b18      	ldr	r3, [pc, #96]	; (402a34 <send+0x94>)
  4029d4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4029d8:	88db      	ldrh	r3, [r3, #6]
  4029da:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  4029de:	2807      	cmp	r0, #7
  4029e0:	bfb4      	ite	lt
  4029e2:	2550      	movlt	r5, #80	; 0x50
  4029e4:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4029e6:	4b13      	ldr	r3, [pc, #76]	; (402a34 <send+0x94>)
  4029e8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4029ec:	7adb      	ldrb	r3, [r3, #11]
  4029ee:	f013 0f01 	tst.w	r3, #1
  4029f2:	d006      	beq.n	402a02 <send+0x62>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  4029f4:	4b0f      	ldr	r3, [pc, #60]	; (402a34 <send+0x94>)
  4029f6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4029fa:	8905      	ldrh	r5, [r0, #8]
  4029fc:	b2ad      	uxth	r5, r5
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  4029fe:	214c      	movs	r1, #76	; 0x4c
  402a00:	e000      	b.n	402a04 <send+0x64>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
  402a02:	2145      	movs	r1, #69	; 0x45
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  402a04:	9502      	str	r5, [sp, #8]
  402a06:	9201      	str	r2, [sp, #4]
  402a08:	9400      	str	r4, [sp, #0]
  402a0a:	2310      	movs	r3, #16
  402a0c:	eb0d 0203 	add.w	r2, sp, r3
  402a10:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402a14:	2002      	movs	r0, #2
  402a16:	4c08      	ldr	r4, [pc, #32]	; (402a38 <send+0x98>)
  402a18:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  402a1a:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  402a1c:	bf0c      	ite	eq
  402a1e:	2000      	moveq	r0, #0
  402a20:	f06f 000d 	mvnne.w	r0, #13
  402a24:	e004      	b.n	402a30 <send+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402a26:	f06f 0005 	mvn.w	r0, #5
  402a2a:	e001      	b.n	402a30 <send+0x90>
  402a2c:	f06f 0005 	mvn.w	r0, #5
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
  402a30:	b009      	add	sp, #36	; 0x24
  402a32:	bd30      	pop	{r4, r5, pc}
  402a34:	20401534 	.word	0x20401534
  402a38:	004006cd 	.word	0x004006cd

00402a3c <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  402a3c:	2900      	cmp	r1, #0
  402a3e:	bf18      	it	ne
  402a40:	2a00      	cmpne	r2, #0
  402a42:	d045      	beq.n	402ad0 <recv+0x94>

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  402a44:	b570      	push	{r4, r5, r6, lr}
  402a46:	b086      	sub	sp, #24
  402a48:	460e      	mov	r6, r1
  402a4a:	4615      	mov	r5, r2
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  402a4c:	2800      	cmp	r0, #0
  402a4e:	db36      	blt.n	402abe <recv+0x82>
  402a50:	4a21      	ldr	r2, [pc, #132]	; (402ad8 <recv+0x9c>)
  402a52:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402a56:	7a92      	ldrb	r2, [r2, #10]
  402a58:	b2d2      	uxtb	r2, r2
  402a5a:	2a01      	cmp	r2, #1
  402a5c:	d132      	bne.n	402ac4 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  402a5e:	4c1e      	ldr	r4, [pc, #120]	; (402ad8 <recv+0x9c>)
  402a60:	0101      	lsls	r1, r0, #4
  402a62:	1862      	adds	r2, r4, r1
  402a64:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  402a66:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  402a68:	7b12      	ldrb	r2, [r2, #12]
  402a6a:	f012 0fff 	tst.w	r2, #255	; 0xff
  402a6e:	d12c      	bne.n	402aca <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  402a70:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  402a74:	2101      	movs	r1, #1
  402a76:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402a78:	7ad2      	ldrb	r2, [r2, #11]
  402a7a:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  402a7c:	2a00      	cmp	r2, #0
  402a7e:	bf0c      	ite	eq
  402a80:	2146      	moveq	r1, #70	; 0x46
  402a82:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  402a84:	b91b      	cbnz	r3, 402a8e <recv+0x52>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  402a86:	f04f 33ff 	mov.w	r3, #4294967295
  402a8a:	9304      	str	r3, [sp, #16]
  402a8c:	e000      	b.n	402a90 <recv+0x54>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  402a8e:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
  402a90:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  402a94:	4b10      	ldr	r3, [pc, #64]	; (402ad8 <recv+0x9c>)
  402a96:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  402a9a:	88c3      	ldrh	r3, [r0, #6]
  402a9c:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  402aa0:	2300      	movs	r3, #0
  402aa2:	9302      	str	r3, [sp, #8]
  402aa4:	9301      	str	r3, [sp, #4]
  402aa6:	9300      	str	r3, [sp, #0]
  402aa8:	2308      	movs	r3, #8
  402aaa:	aa04      	add	r2, sp, #16
  402aac:	2002      	movs	r0, #2
  402aae:	4c0b      	ldr	r4, [pc, #44]	; (402adc <recv+0xa0>)
  402ab0:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  402ab2:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  402ab4:	bf0c      	ite	eq
  402ab6:	2000      	moveq	r0, #0
  402ab8:	f06f 000d 	mvnne.w	r0, #13
  402abc:	e006      	b.n	402acc <recv+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402abe:	f06f 0005 	mvn.w	r0, #5
  402ac2:	e003      	b.n	402acc <recv+0x90>
  402ac4:	f06f 0005 	mvn.w	r0, #5
  402ac8:	e000      	b.n	402acc <recv+0x90>
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
  402aca:	2000      	movs	r0, #0
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  402acc:	b006      	add	sp, #24
  402ace:	bd70      	pop	{r4, r5, r6, pc}
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402ad0:	f06f 0005 	mvn.w	r0, #5
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  402ad4:	4770      	bx	lr
  402ad6:	bf00      	nop
  402ad8:	20401534 	.word	0x20401534
  402adc:	004006cd 	.word	0x004006cd

00402ae0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  402ae0:	b530      	push	{r4, r5, lr}
  402ae2:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  402ae4:	2800      	cmp	r0, #0
  402ae6:	db2e      	blt.n	402b46 <close+0x66>
  402ae8:	4b1b      	ldr	r3, [pc, #108]	; (402b58 <close+0x78>)
  402aea:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402aee:	7a9b      	ldrb	r3, [r3, #10]
  402af0:	b2db      	uxtb	r3, r3
  402af2:	2b01      	cmp	r3, #1
  402af4:	d12a      	bne.n	402b4c <close+0x6c>
  402af6:	4604      	mov	r4, r0
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  402af8:	f88d 0014 	strb.w	r0, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  402afc:	4b16      	ldr	r3, [pc, #88]	; (402b58 <close+0x78>)
  402afe:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402b02:	88da      	ldrh	r2, [r3, #6]
  402b04:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  402b08:	2200      	movs	r2, #0
  402b0a:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  402b0c:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402b0e:	7adb      	ldrb	r3, [r3, #11]
  402b10:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  402b14:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  402b16:	9202      	str	r2, [sp, #8]
  402b18:	9201      	str	r2, [sp, #4]
  402b1a:	9200      	str	r2, [sp, #0]
  402b1c:	f04f 0304 	mov.w	r3, #4
  402b20:	aa05      	add	r2, sp, #20
  402b22:	bf0c      	ite	eq
  402b24:	2149      	moveq	r1, #73	; 0x49
  402b26:	214e      	movne	r1, #78	; 0x4e
  402b28:	2002      	movs	r0, #2
  402b2a:	4d0c      	ldr	r5, [pc, #48]	; (402b5c <close+0x7c>)
  402b2c:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  402b2e:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  402b30:	bf18      	it	ne
  402b32:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  402b36:	2210      	movs	r2, #16
  402b38:	2100      	movs	r1, #0
  402b3a:	4807      	ldr	r0, [pc, #28]	; (402b58 <close+0x78>)
  402b3c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402b40:	4b07      	ldr	r3, [pc, #28]	; (402b60 <close+0x80>)
  402b42:	4798      	blx	r3
  402b44:	e004      	b.n	402b50 <close+0x70>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402b46:	f06f 0505 	mvn.w	r5, #5
  402b4a:	e001      	b.n	402b50 <close+0x70>
  402b4c:	f06f 0505 	mvn.w	r5, #5
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
  402b50:	4628      	mov	r0, r5
  402b52:	b007      	add	sp, #28
  402b54:	bd30      	pop	{r4, r5, pc}
  402b56:	bf00      	nop
  402b58:	20401534 	.word	0x20401534
  402b5c:	004006cd 	.word	0x004006cd
  402b60:	00400569 	.word	0x00400569

00402b64 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  402b64:	b570      	push	{r4, r5, r6, lr}
  402b66:	b082      	sub	sp, #8
  402b68:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  402b6a:	4b2b      	ldr	r3, [pc, #172]	; (402c18 <spi_flash_enable+0xb4>)
  402b6c:	4798      	blx	r3
  402b6e:	f3c0 000b 	ubfx	r0, r0, #0, #12
  402b72:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  402b76:	d34a      	bcc.n	402c0e <spi_flash_enable+0xaa>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  402b78:	a901      	add	r1, sp, #4
  402b7a:	f241 4010 	movw	r0, #5136	; 0x1410
  402b7e:	4b27      	ldr	r3, [pc, #156]	; (402c1c <spi_flash_enable+0xb8>)
  402b80:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  402b82:	4604      	mov	r4, r0
  402b84:	2800      	cmp	r0, #0
  402b86:	d143      	bne.n	402c10 <spi_flash_enable+0xac>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
  402b88:	4b25      	ldr	r3, [pc, #148]	; (402c20 <spi_flash_enable+0xbc>)
  402b8a:	9a01      	ldr	r2, [sp, #4]
  402b8c:	4013      	ands	r3, r2
  402b8e:	4925      	ldr	r1, [pc, #148]	; (402c24 <spi_flash_enable+0xc0>)
  402b90:	4319      	orrs	r1, r3
  402b92:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  402b94:	f241 4010 	movw	r0, #5136	; 0x1410
  402b98:	4b23      	ldr	r3, [pc, #140]	; (402c28 <spi_flash_enable+0xc4>)
  402b9a:	4798      	blx	r3
		if(enable) {
  402b9c:	b1b5      	cbz	r5, 402bcc <spi_flash_enable+0x68>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  402b9e:	2100      	movs	r1, #0
  402ba0:	4822      	ldr	r0, [pc, #136]	; (402c2c <spi_flash_enable+0xc8>)
  402ba2:	4d21      	ldr	r5, [pc, #132]	; (402c28 <spi_flash_enable+0xc4>)
  402ba4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402ba6:	21ab      	movs	r1, #171	; 0xab
  402ba8:	4821      	ldr	r0, [pc, #132]	; (402c30 <spi_flash_enable+0xcc>)
  402baa:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  402bac:	2101      	movs	r1, #1
  402bae:	4821      	ldr	r0, [pc, #132]	; (402c34 <spi_flash_enable+0xd0>)
  402bb0:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  402bb2:	2100      	movs	r1, #0
  402bb4:	4820      	ldr	r0, [pc, #128]	; (402c38 <spi_flash_enable+0xd4>)
  402bb6:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  402bb8:	2181      	movs	r1, #129	; 0x81
  402bba:	4820      	ldr	r0, [pc, #128]	; (402c3c <spi_flash_enable+0xd8>)
  402bbc:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  402bbe:	4e20      	ldr	r6, [pc, #128]	; (402c40 <spi_flash_enable+0xdc>)
  402bc0:	4d20      	ldr	r5, [pc, #128]	; (402c44 <spi_flash_enable+0xe0>)
  402bc2:	4630      	mov	r0, r6
  402bc4:	47a8      	blx	r5
  402bc6:	2801      	cmp	r0, #1
  402bc8:	d1fb      	bne.n	402bc2 <spi_flash_enable+0x5e>
  402bca:	e015      	b.n	402bf8 <spi_flash_enable+0x94>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  402bcc:	2100      	movs	r1, #0
  402bce:	4817      	ldr	r0, [pc, #92]	; (402c2c <spi_flash_enable+0xc8>)
  402bd0:	4d15      	ldr	r5, [pc, #84]	; (402c28 <spi_flash_enable+0xc4>)
  402bd2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402bd4:	21b9      	movs	r1, #185	; 0xb9
  402bd6:	4816      	ldr	r0, [pc, #88]	; (402c30 <spi_flash_enable+0xcc>)
  402bd8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  402bda:	2101      	movs	r1, #1
  402bdc:	4815      	ldr	r0, [pc, #84]	; (402c34 <spi_flash_enable+0xd0>)
  402bde:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  402be0:	2100      	movs	r1, #0
  402be2:	4815      	ldr	r0, [pc, #84]	; (402c38 <spi_flash_enable+0xd4>)
  402be4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  402be6:	2181      	movs	r1, #129	; 0x81
  402be8:	4814      	ldr	r0, [pc, #80]	; (402c3c <spi_flash_enable+0xd8>)
  402bea:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  402bec:	4e14      	ldr	r6, [pc, #80]	; (402c40 <spi_flash_enable+0xdc>)
  402bee:	4d15      	ldr	r5, [pc, #84]	; (402c44 <spi_flash_enable+0xe0>)
  402bf0:	4630      	mov	r0, r6
  402bf2:	47a8      	blx	r5
  402bf4:	2801      	cmp	r0, #1
  402bf6:	d1fb      	bne.n	402bf0 <spi_flash_enable+0x8c>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
  402bf8:	4909      	ldr	r1, [pc, #36]	; (402c20 <spi_flash_enable+0xbc>)
  402bfa:	9b01      	ldr	r3, [sp, #4]
  402bfc:	4019      	ands	r1, r3
  402bfe:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  402c02:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  402c04:	f241 4010 	movw	r0, #5136	; 0x1410
  402c08:	4b07      	ldr	r3, [pc, #28]	; (402c28 <spi_flash_enable+0xc4>)
  402c0a:	4798      	blx	r3
  402c0c:	e000      	b.n	402c10 <spi_flash_enable+0xac>
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
  402c0e:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  402c10:	4620      	mov	r0, r4
  402c12:	b002      	add	sp, #8
  402c14:	bd70      	pop	{r4, r5, r6, pc}
  402c16:	bf00      	nop
  402c18:	00401579 	.word	0x00401579
  402c1c:	00401871 	.word	0x00401871
  402c20:	f8888fff 	.word	0xf8888fff
  402c24:	01111000 	.word	0x01111000
  402c28:	0040187d 	.word	0x0040187d
  402c2c:	00010208 	.word	0x00010208
  402c30:	0001020c 	.word	0x0001020c
  402c34:	00010214 	.word	0x00010214
  402c38:	0001021c 	.word	0x0001021c
  402c3c:	00010204 	.word	0x00010204
  402c40:	00010218 	.word	0x00010218
  402c44:	00401865 	.word	0x00401865

00402c48 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402c48:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402c4a:	4810      	ldr	r0, [pc, #64]	; (402c8c <sysclk_init+0x44>)
  402c4c:	4b10      	ldr	r3, [pc, #64]	; (402c90 <sysclk_init+0x48>)
  402c4e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402c50:	213e      	movs	r1, #62	; 0x3e
  402c52:	2000      	movs	r0, #0
  402c54:	4b0f      	ldr	r3, [pc, #60]	; (402c94 <sysclk_init+0x4c>)
  402c56:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402c58:	4c0f      	ldr	r4, [pc, #60]	; (402c98 <sysclk_init+0x50>)
  402c5a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402c5c:	2800      	cmp	r0, #0
  402c5e:	d0fc      	beq.n	402c5a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402c60:	4b0e      	ldr	r3, [pc, #56]	; (402c9c <sysclk_init+0x54>)
  402c62:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402c64:	4a0e      	ldr	r2, [pc, #56]	; (402ca0 <sysclk_init+0x58>)
  402c66:	4b0f      	ldr	r3, [pc, #60]	; (402ca4 <sysclk_init+0x5c>)
  402c68:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  402c6a:	4c0f      	ldr	r4, [pc, #60]	; (402ca8 <sysclk_init+0x60>)
  402c6c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402c6e:	2800      	cmp	r0, #0
  402c70:	d0fc      	beq.n	402c6c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402c72:	2002      	movs	r0, #2
  402c74:	4b0d      	ldr	r3, [pc, #52]	; (402cac <sysclk_init+0x64>)
  402c76:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402c78:	2000      	movs	r0, #0
  402c7a:	4b0d      	ldr	r3, [pc, #52]	; (402cb0 <sysclk_init+0x68>)
  402c7c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402c7e:	4b0d      	ldr	r3, [pc, #52]	; (402cb4 <sysclk_init+0x6c>)
  402c80:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402c82:	4802      	ldr	r0, [pc, #8]	; (402c8c <sysclk_init+0x44>)
  402c84:	4b02      	ldr	r3, [pc, #8]	; (402c90 <sysclk_init+0x48>)
  402c86:	4798      	blx	r3
  402c88:	bd10      	pop	{r4, pc}
  402c8a:	bf00      	nop
  402c8c:	11e1a300 	.word	0x11e1a300
  402c90:	00403905 	.word	0x00403905
  402c94:	00403391 	.word	0x00403391
  402c98:	004033e5 	.word	0x004033e5
  402c9c:	004033f5 	.word	0x004033f5
  402ca0:	20183f01 	.word	0x20183f01
  402ca4:	400e0600 	.word	0x400e0600
  402ca8:	00403405 	.word	0x00403405
  402cac:	004032ed 	.word	0x004032ed
  402cb0:	00403329 	.word	0x00403329
  402cb4:	004037f5 	.word	0x004037f5

00402cb8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  402cb8:	b990      	cbnz	r0, 402ce0 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  402cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402cbe:	460c      	mov	r4, r1
  402cc0:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  402cc2:	2a00      	cmp	r2, #0
  402cc4:	dd0f      	ble.n	402ce6 <_read+0x2e>
  402cc6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  402cc8:	4e08      	ldr	r6, [pc, #32]	; (402cec <_read+0x34>)
  402cca:	4d09      	ldr	r5, [pc, #36]	; (402cf0 <_read+0x38>)
  402ccc:	6830      	ldr	r0, [r6, #0]
  402cce:	4621      	mov	r1, r4
  402cd0:	682b      	ldr	r3, [r5, #0]
  402cd2:	4798      	blx	r3
		ptr++;
  402cd4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  402cd6:	42a7      	cmp	r7, r4
  402cd8:	d1f8      	bne.n	402ccc <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  402cda:	4640      	mov	r0, r8
  402cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  402ce0:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  402ce4:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  402ce6:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  402ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402cec:	204015f8 	.word	0x204015f8
  402cf0:	204015f0 	.word	0x204015f0

00402cf4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  402cf4:	3801      	subs	r0, #1
  402cf6:	2802      	cmp	r0, #2
  402cf8:	d815      	bhi.n	402d26 <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  402cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402cfe:	460e      	mov	r6, r1
  402d00:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  402d02:	b19a      	cbz	r2, 402d2c <_write+0x38>
  402d04:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  402d06:	f8df 8038 	ldr.w	r8, [pc, #56]	; 402d40 <_write+0x4c>
  402d0a:	4f0c      	ldr	r7, [pc, #48]	; (402d3c <_write+0x48>)
  402d0c:	f8d8 0000 	ldr.w	r0, [r8]
  402d10:	f815 1b01 	ldrb.w	r1, [r5], #1
  402d14:	683b      	ldr	r3, [r7, #0]
  402d16:	4798      	blx	r3
  402d18:	2800      	cmp	r0, #0
  402d1a:	db0a      	blt.n	402d32 <_write+0x3e>
  402d1c:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  402d1e:	3c01      	subs	r4, #1
  402d20:	d1f4      	bne.n	402d0c <_write+0x18>
  402d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  402d26:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  402d2a:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  402d2c:	2000      	movs	r0, #0
  402d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  402d32:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  402d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d3a:	bf00      	nop
  402d3c:	204015f4 	.word	0x204015f4
  402d40:	204015f8 	.word	0x204015f8

00402d44 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  402d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402d46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402d4a:	4b57      	ldr	r3, [pc, #348]	; (402ea8 <board_init+0x164>)
  402d4c:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402d4e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402d52:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402d56:	4b55      	ldr	r3, [pc, #340]	; (402eac <board_init+0x168>)
  402d58:	2200      	movs	r2, #0
  402d5a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  402d5e:	695a      	ldr	r2, [r3, #20]
  402d60:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  402d64:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402d66:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402d6a:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  402d6e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  402d72:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  402d76:	f006 0707 	and.w	r7, r6, #7
  402d7a:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  402d7c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  402d80:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  402d84:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402d88:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  402d8c:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  402d8e:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  402d90:	fa05 f107 	lsl.w	r1, r5, r7
  402d94:	fa03 f200 	lsl.w	r2, r3, r0
  402d98:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  402d9a:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  402d9e:	3b01      	subs	r3, #1
  402da0:	f1b3 3fff 	cmp.w	r3, #4294967295
  402da4:	d1f6      	bne.n	402d94 <board_init+0x50>
        } while(sets--);
  402da6:	3d01      	subs	r5, #1
  402da8:	f1b5 3fff 	cmp.w	r5, #4294967295
  402dac:	d1ef      	bne.n	402d8e <board_init+0x4a>
  402dae:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  402db2:	4b3e      	ldr	r3, [pc, #248]	; (402eac <board_init+0x168>)
  402db4:	695a      	ldr	r2, [r3, #20]
  402db6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  402dba:	615a      	str	r2, [r3, #20]
  402dbc:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402dc0:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402dc4:	4a3a      	ldr	r2, [pc, #232]	; (402eb0 <board_init+0x16c>)
  402dc6:	493b      	ldr	r1, [pc, #236]	; (402eb4 <board_init+0x170>)
  402dc8:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402dca:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  402dce:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402dd0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402dd4:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  402dd8:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  402ddc:	f022 0201 	bic.w	r2, r2, #1
  402de0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  402de4:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  402de8:	f022 0201 	bic.w	r2, r2, #1
  402dec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402df0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402df4:	f3bf 8f6f 	isb	sy
  402df8:	200a      	movs	r0, #10
  402dfa:	4c2f      	ldr	r4, [pc, #188]	; (402eb8 <board_init+0x174>)
  402dfc:	47a0      	blx	r4
  402dfe:	200b      	movs	r0, #11
  402e00:	47a0      	blx	r4
  402e02:	200c      	movs	r0, #12
  402e04:	47a0      	blx	r4
  402e06:	2010      	movs	r0, #16
  402e08:	47a0      	blx	r4
  402e0a:	2011      	movs	r0, #17
  402e0c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402e0e:	4b2b      	ldr	r3, [pc, #172]	; (402ebc <board_init+0x178>)
  402e10:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e14:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402e16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402e1a:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402e1c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  402e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402e24:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402e26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  402e2a:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402e2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402e30:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  402e32:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  402e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402e38:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402e3a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  402e3e:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402e40:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402e42:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  402e46:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402e48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402e4c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402e50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402e54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402e58:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402e5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402e5e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  402e60:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402e66:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402e68:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  402e6c:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402e6e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402e70:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  402e74:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402e76:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  402e78:	4a11      	ldr	r2, [pc, #68]	; (402ec0 <board_init+0x17c>)
  402e7a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  402e7e:	f043 0310 	orr.w	r3, r3, #16
  402e82:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402e86:	4b0f      	ldr	r3, [pc, #60]	; (402ec4 <board_init+0x180>)
  402e88:	2210      	movs	r2, #16
  402e8a:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402e8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402e90:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  402e92:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  402e98:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402e9a:	4311      	orrs	r1, r2
  402e9c:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  402e9e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402ea0:	4311      	orrs	r1, r2
  402ea2:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402ea4:	605a      	str	r2, [r3, #4]
  402ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ea8:	400e1850 	.word	0x400e1850
  402eac:	e000ed00 	.word	0xe000ed00
  402eb0:	400e0c00 	.word	0x400e0c00
  402eb4:	5a00080c 	.word	0x5a00080c
  402eb8:	00403415 	.word	0x00403415
  402ebc:	400e1200 	.word	0x400e1200
  402ec0:	40088000 	.word	0x40088000
  402ec4:	400e1000 	.word	0x400e1000

00402ec8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402ec8:	b10a      	cbz	r2, 402ece <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  402eca:	6641      	str	r1, [r0, #100]	; 0x64
  402ecc:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402ece:	6601      	str	r1, [r0, #96]	; 0x60
  402ed0:	4770      	bx	lr
  402ed2:	bf00      	nop

00402ed4 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  402ed4:	6301      	str	r1, [r0, #48]	; 0x30
  402ed6:	4770      	bx	lr

00402ed8 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  402ed8:	6341      	str	r1, [r0, #52]	; 0x34
  402eda:	4770      	bx	lr

00402edc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402edc:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402ede:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402ee2:	d02f      	beq.n	402f44 <pio_set_peripheral+0x68>
  402ee4:	d807      	bhi.n	402ef6 <pio_set_peripheral+0x1a>
  402ee6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402eea:	d014      	beq.n	402f16 <pio_set_peripheral+0x3a>
  402eec:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402ef0:	d01e      	beq.n	402f30 <pio_set_peripheral+0x54>
  402ef2:	b939      	cbnz	r1, 402f04 <pio_set_peripheral+0x28>
  402ef4:	4770      	bx	lr
  402ef6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402efa:	d037      	beq.n	402f6c <pio_set_peripheral+0x90>
  402efc:	d804      	bhi.n	402f08 <pio_set_peripheral+0x2c>
  402efe:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402f02:	d029      	beq.n	402f58 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402f04:	6042      	str	r2, [r0, #4]
  402f06:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402f08:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402f0c:	d02e      	beq.n	402f6c <pio_set_peripheral+0x90>
  402f0e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402f12:	d02b      	beq.n	402f6c <pio_set_peripheral+0x90>
  402f14:	e7f6      	b.n	402f04 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  402f16:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f18:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402f1a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402f1c:	43d3      	mvns	r3, r2
  402f1e:	4021      	ands	r1, r4
  402f20:	4019      	ands	r1, r3
  402f22:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402f24:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402f26:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402f28:	4021      	ands	r1, r4
  402f2a:	400b      	ands	r3, r1
  402f2c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402f2e:	e01a      	b.n	402f66 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f30:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402f32:	4313      	orrs	r3, r2
  402f34:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402f36:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402f38:	6f43      	ldr	r3, [r0, #116]	; 0x74
  402f3a:	400b      	ands	r3, r1
  402f3c:	ea23 0302 	bic.w	r3, r3, r2
  402f40:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402f42:	e7df      	b.n	402f04 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f44:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402f46:	6f03      	ldr	r3, [r0, #112]	; 0x70
  402f48:	400b      	ands	r3, r1
  402f4a:	ea23 0302 	bic.w	r3, r3, r2
  402f4e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402f50:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402f52:	4313      	orrs	r3, r2
  402f54:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402f56:	e7d5      	b.n	402f04 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f58:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402f5a:	4313      	orrs	r3, r2
  402f5c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402f5e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402f60:	4313      	orrs	r3, r2
  402f62:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402f64:	e7ce      	b.n	402f04 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402f66:	6042      	str	r2, [r0, #4]
}
  402f68:	f85d 4b04 	ldr.w	r4, [sp], #4
  402f6c:	4770      	bx	lr
  402f6e:	bf00      	nop

00402f70 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402f70:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402f72:	f012 0f01 	tst.w	r2, #1
  402f76:	d001      	beq.n	402f7c <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  402f78:	6641      	str	r1, [r0, #100]	; 0x64
  402f7a:	e000      	b.n	402f7e <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402f7c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402f7e:	f012 0f0a 	tst.w	r2, #10
  402f82:	d001      	beq.n	402f88 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  402f84:	6201      	str	r1, [r0, #32]
  402f86:	e000      	b.n	402f8a <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402f88:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  402f8a:	f012 0f02 	tst.w	r2, #2
  402f8e:	d002      	beq.n	402f96 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  402f90:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402f94:	e004      	b.n	402fa0 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  402f96:	f012 0f08 	tst.w	r2, #8
  402f9a:	d001      	beq.n	402fa0 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  402f9c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402fa0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402fa2:	6001      	str	r1, [r0, #0]
  402fa4:	4770      	bx	lr
  402fa6:	bf00      	nop

00402fa8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402fa8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402faa:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402fac:	9c01      	ldr	r4, [sp, #4]
  402fae:	b10c      	cbz	r4, 402fb4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402fb0:	6641      	str	r1, [r0, #100]	; 0x64
  402fb2:	e000      	b.n	402fb6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402fb4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  402fb6:	b10b      	cbz	r3, 402fbc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  402fb8:	6501      	str	r1, [r0, #80]	; 0x50
  402fba:	e000      	b.n	402fbe <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  402fbc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  402fbe:	b10a      	cbz	r2, 402fc4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  402fc0:	6301      	str	r1, [r0, #48]	; 0x30
  402fc2:	e000      	b.n	402fc6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402fc4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402fc6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402fc8:	6001      	str	r1, [r0, #0]
}
  402fca:	f85d 4b04 	ldr.w	r4, [sp], #4
  402fce:	4770      	bx	lr

00402fd0 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402fd0:	f012 0f10 	tst.w	r2, #16
  402fd4:	d012      	beq.n	402ffc <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  402fd6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402fda:	f012 0f20 	tst.w	r2, #32
  402fde:	d002      	beq.n	402fe6 <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402fe0:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  402fe4:	e001      	b.n	402fea <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402fe6:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402fea:	f012 0f40 	tst.w	r2, #64	; 0x40
  402fee:	d002      	beq.n	402ff6 <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402ff0:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  402ff4:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  402ff6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  402ffa:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  402ffc:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  403000:	4770      	bx	lr
  403002:	bf00      	nop

00403004 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  403004:	6401      	str	r1, [r0, #64]	; 0x40
  403006:	4770      	bx	lr

00403008 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  403008:	6441      	str	r1, [r0, #68]	; 0x44
  40300a:	4770      	bx	lr

0040300c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40300c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40300e:	4770      	bx	lr

00403010 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403010:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  403012:	4770      	bx	lr

00403014 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  403014:	b570      	push	{r4, r5, r6, lr}
  403016:	b082      	sub	sp, #8
  403018:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40301a:	4c47      	ldr	r4, [pc, #284]	; (403138 <pio_configure_pin+0x124>)
  40301c:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  403020:	0264      	lsls	r4, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  403022:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  403026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40302a:	d04d      	beq.n	4030c8 <pio_configure_pin+0xb4>
  40302c:	d809      	bhi.n	403042 <pio_configure_pin+0x2e>
  40302e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403032:	d023      	beq.n	40307c <pio_configure_pin+0x68>
  403034:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403038:	d033      	beq.n	4030a2 <pio_configure_pin+0x8e>
  40303a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40303e:	d177      	bne.n	403130 <pio_configure_pin+0x11c>
  403040:	e009      	b.n	403056 <pio_configure_pin+0x42>
  403042:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403046:	d05d      	beq.n	403104 <pio_configure_pin+0xf0>
  403048:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40304c:	d05a      	beq.n	403104 <pio_configure_pin+0xf0>
  40304e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403052:	d04c      	beq.n	4030ee <pio_configure_pin+0xda>
  403054:	e06c      	b.n	403130 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  403056:	f000 001f 	and.w	r0, r0, #31
  40305a:	2601      	movs	r6, #1
  40305c:	4086      	lsls	r6, r0
  40305e:	4632      	mov	r2, r6
  403060:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403064:	4620      	mov	r0, r4
  403066:	4b35      	ldr	r3, [pc, #212]	; (40313c <pio_configure_pin+0x128>)
  403068:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40306a:	f015 0f01 	tst.w	r5, #1
  40306e:	d002      	beq.n	403076 <pio_configure_pin+0x62>
		p_pio->PIO_PUER = ul_mask;
  403070:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  403072:	2001      	movs	r0, #1
  403074:	e05d      	b.n	403132 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403076:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403078:	2001      	movs	r0, #1
  40307a:	e05a      	b.n	403132 <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40307c:	f000 001f 	and.w	r0, r0, #31
  403080:	2601      	movs	r6, #1
  403082:	4086      	lsls	r6, r0
  403084:	4632      	mov	r2, r6
  403086:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40308a:	4620      	mov	r0, r4
  40308c:	4b2b      	ldr	r3, [pc, #172]	; (40313c <pio_configure_pin+0x128>)
  40308e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403090:	f015 0f01 	tst.w	r5, #1
  403094:	d002      	beq.n	40309c <pio_configure_pin+0x88>
		p_pio->PIO_PUER = ul_mask;
  403096:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  403098:	2001      	movs	r0, #1
  40309a:	e04a      	b.n	403132 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40309c:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40309e:	2001      	movs	r0, #1
  4030a0:	e047      	b.n	403132 <pio_configure_pin+0x11e>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4030a2:	f000 001f 	and.w	r0, r0, #31
  4030a6:	2601      	movs	r6, #1
  4030a8:	4086      	lsls	r6, r0
  4030aa:	4632      	mov	r2, r6
  4030ac:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4030b0:	4620      	mov	r0, r4
  4030b2:	4b22      	ldr	r3, [pc, #136]	; (40313c <pio_configure_pin+0x128>)
  4030b4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4030b6:	f015 0f01 	tst.w	r5, #1
  4030ba:	d002      	beq.n	4030c2 <pio_configure_pin+0xae>
		p_pio->PIO_PUER = ul_mask;
  4030bc:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4030be:	2001      	movs	r0, #1
  4030c0:	e037      	b.n	403132 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4030c2:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4030c4:	2001      	movs	r0, #1
  4030c6:	e034      	b.n	403132 <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4030c8:	f000 001f 	and.w	r0, r0, #31
  4030cc:	2601      	movs	r6, #1
  4030ce:	4086      	lsls	r6, r0
  4030d0:	4632      	mov	r2, r6
  4030d2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4030d6:	4620      	mov	r0, r4
  4030d8:	4b18      	ldr	r3, [pc, #96]	; (40313c <pio_configure_pin+0x128>)
  4030da:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4030dc:	f015 0f01 	tst.w	r5, #1
  4030e0:	d002      	beq.n	4030e8 <pio_configure_pin+0xd4>
		p_pio->PIO_PUER = ul_mask;
  4030e2:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4030e4:	2001      	movs	r0, #1
  4030e6:	e024      	b.n	403132 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4030e8:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4030ea:	2001      	movs	r0, #1
  4030ec:	e021      	b.n	403132 <pio_configure_pin+0x11e>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4030ee:	f000 011f 	and.w	r1, r0, #31
  4030f2:	2601      	movs	r6, #1
  4030f4:	462a      	mov	r2, r5
  4030f6:	fa06 f101 	lsl.w	r1, r6, r1
  4030fa:	4620      	mov	r0, r4
  4030fc:	4b10      	ldr	r3, [pc, #64]	; (403140 <pio_configure_pin+0x12c>)
  4030fe:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  403100:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  403102:	e016      	b.n	403132 <pio_configure_pin+0x11e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  403104:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  403108:	f000 011f 	and.w	r1, r0, #31
  40310c:	2601      	movs	r6, #1
  40310e:	ea05 0306 	and.w	r3, r5, r6
  403112:	9300      	str	r3, [sp, #0]
  403114:	f3c5 0380 	ubfx	r3, r5, #2, #1
  403118:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40311c:	bf14      	ite	ne
  40311e:	2200      	movne	r2, #0
  403120:	2201      	moveq	r2, #1
  403122:	fa06 f101 	lsl.w	r1, r6, r1
  403126:	4620      	mov	r0, r4
  403128:	4c06      	ldr	r4, [pc, #24]	; (403144 <pio_configure_pin+0x130>)
  40312a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40312c:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40312e:	e000      	b.n	403132 <pio_configure_pin+0x11e>

	default:
		return 0;
  403130:	2000      	movs	r0, #0
	}

	return 1;
}
  403132:	b002      	add	sp, #8
  403134:	bd70      	pop	{r4, r5, r6, pc}
  403136:	bf00      	nop
  403138:	00200707 	.word	0x00200707
  40313c:	00402edd 	.word	0x00402edd
  403140:	00402f71 	.word	0x00402f71
  403144:	00402fa9 	.word	0x00402fa9

00403148 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  403148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40314c:	4604      	mov	r4, r0
  40314e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  403150:	4b0e      	ldr	r3, [pc, #56]	; (40318c <pio_handler_process+0x44>)
  403152:	4798      	blx	r3
  403154:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  403156:	4620      	mov	r0, r4
  403158:	4b0d      	ldr	r3, [pc, #52]	; (403190 <pio_handler_process+0x48>)
  40315a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40315c:	4005      	ands	r5, r0
  40315e:	d013      	beq.n	403188 <pio_handler_process+0x40>
  403160:	4c0c      	ldr	r4, [pc, #48]	; (403194 <pio_handler_process+0x4c>)
  403162:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  403166:	6823      	ldr	r3, [r4, #0]
  403168:	4543      	cmp	r3, r8
  40316a:	d108      	bne.n	40317e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40316c:	6861      	ldr	r1, [r4, #4]
  40316e:	4229      	tst	r1, r5
  403170:	d005      	beq.n	40317e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403172:	68e3      	ldr	r3, [r4, #12]
  403174:	4640      	mov	r0, r8
  403176:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  403178:	6863      	ldr	r3, [r4, #4]
  40317a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40317e:	42b4      	cmp	r4, r6
  403180:	d002      	beq.n	403188 <pio_handler_process+0x40>
  403182:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  403184:	2d00      	cmp	r5, #0
  403186:	d1ee      	bne.n	403166 <pio_handler_process+0x1e>
  403188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40318c:	0040300d 	.word	0x0040300d
  403190:	00403011 	.word	0x00403011
  403194:	20400918 	.word	0x20400918

00403198 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  403198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40319a:	4c17      	ldr	r4, [pc, #92]	; (4031f8 <pio_handler_set+0x60>)
  40319c:	6826      	ldr	r6, [r4, #0]
  40319e:	2e06      	cmp	r6, #6
  4031a0:	d828      	bhi.n	4031f4 <pio_handler_set+0x5c>
  4031a2:	f04f 0c00 	mov.w	ip, #0
  4031a6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4031a8:	4f14      	ldr	r7, [pc, #80]	; (4031fc <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  4031aa:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4031ac:	0125      	lsls	r5, r4, #4
  4031ae:	597d      	ldr	r5, [r7, r5]
  4031b0:	428d      	cmp	r5, r1
  4031b2:	d104      	bne.n	4031be <pio_handler_set+0x26>
  4031b4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4031b8:	686d      	ldr	r5, [r5, #4]
  4031ba:	4295      	cmp	r5, r2
  4031bc:	d004      	beq.n	4031c8 <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4031be:	3401      	adds	r4, #1
  4031c0:	b2e4      	uxtb	r4, r4
  4031c2:	46a4      	mov	ip, r4
  4031c4:	42a6      	cmp	r6, r4
  4031c6:	d2f0      	bcs.n	4031aa <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4031c8:	4d0c      	ldr	r5, [pc, #48]	; (4031fc <pio_handler_set+0x64>)
  4031ca:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4031ce:	eb05 040e 	add.w	r4, r5, lr
  4031d2:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4031d6:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4031d8:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4031da:	9906      	ldr	r1, [sp, #24]
  4031dc:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4031de:	3601      	adds	r6, #1
  4031e0:	4566      	cmp	r6, ip
  4031e2:	d101      	bne.n	4031e8 <pio_handler_set+0x50>
		gs_ul_nb_sources++;
  4031e4:	4904      	ldr	r1, [pc, #16]	; (4031f8 <pio_handler_set+0x60>)
  4031e6:	600e      	str	r6, [r1, #0]
  4031e8:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4031ea:	461a      	mov	r2, r3
  4031ec:	4b04      	ldr	r3, [pc, #16]	; (403200 <pio_handler_set+0x68>)
  4031ee:	4798      	blx	r3

	return 0;
  4031f0:	2000      	movs	r0, #0
  4031f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4031f4:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4031f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4031f8:	20400914 	.word	0x20400914
  4031fc:	20400918 	.word	0x20400918
  403200:	00402fd1 	.word	0x00402fd1

00403204 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  403204:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  403206:	210a      	movs	r1, #10
  403208:	4801      	ldr	r0, [pc, #4]	; (403210 <PIOA_Handler+0xc>)
  40320a:	4b02      	ldr	r3, [pc, #8]	; (403214 <PIOA_Handler+0x10>)
  40320c:	4798      	blx	r3
  40320e:	bd08      	pop	{r3, pc}
  403210:	400e0e00 	.word	0x400e0e00
  403214:	00403149 	.word	0x00403149

00403218 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403218:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40321a:	210b      	movs	r1, #11
  40321c:	4801      	ldr	r0, [pc, #4]	; (403224 <PIOB_Handler+0xc>)
  40321e:	4b02      	ldr	r3, [pc, #8]	; (403228 <PIOB_Handler+0x10>)
  403220:	4798      	blx	r3
  403222:	bd08      	pop	{r3, pc}
  403224:	400e1000 	.word	0x400e1000
  403228:	00403149 	.word	0x00403149

0040322c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40322c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40322e:	210c      	movs	r1, #12
  403230:	4801      	ldr	r0, [pc, #4]	; (403238 <PIOC_Handler+0xc>)
  403232:	4b02      	ldr	r3, [pc, #8]	; (40323c <PIOC_Handler+0x10>)
  403234:	4798      	blx	r3
  403236:	bd08      	pop	{r3, pc}
  403238:	400e1200 	.word	0x400e1200
  40323c:	00403149 	.word	0x00403149

00403240 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  403240:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  403242:	2110      	movs	r1, #16
  403244:	4801      	ldr	r0, [pc, #4]	; (40324c <PIOD_Handler+0xc>)
  403246:	4b02      	ldr	r3, [pc, #8]	; (403250 <PIOD_Handler+0x10>)
  403248:	4798      	blx	r3
  40324a:	bd08      	pop	{r3, pc}
  40324c:	400e1400 	.word	0x400e1400
  403250:	00403149 	.word	0x00403149

00403254 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  403254:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  403256:	2111      	movs	r1, #17
  403258:	4801      	ldr	r0, [pc, #4]	; (403260 <PIOE_Handler+0xc>)
  40325a:	4b02      	ldr	r3, [pc, #8]	; (403264 <PIOE_Handler+0x10>)
  40325c:	4798      	blx	r3
  40325e:	bd08      	pop	{r3, pc}
  403260:	400e1600 	.word	0x400e1600
  403264:	00403149 	.word	0x00403149

00403268 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  403268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40326a:	4606      	mov	r6, r0
  40326c:	460d      	mov	r5, r1
  40326e:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  403270:	4b17      	ldr	r3, [pc, #92]	; (4032d0 <pio_handler_set_priority+0x68>)
  403272:	4798      	blx	r3
  403274:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  403276:	f04f 31ff 	mov.w	r1, #4294967295
  40327a:	4630      	mov	r0, r6
  40327c:	4b15      	ldr	r3, [pc, #84]	; (4032d4 <pio_handler_set_priority+0x6c>)
  40327e:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  403280:	4630      	mov	r0, r6
  403282:	4b15      	ldr	r3, [pc, #84]	; (4032d8 <pio_handler_set_priority+0x70>)
  403284:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403286:	fa5f fe85 	uxtb.w	lr, r5
  40328a:	f00e 031f 	and.w	r3, lr, #31
  40328e:	2201      	movs	r2, #1
  403290:	fa02 f303 	lsl.w	r3, r2, r3
  403294:	0968      	lsrs	r0, r5, #5
  403296:	4911      	ldr	r1, [pc, #68]	; (4032dc <pio_handler_set_priority+0x74>)
  403298:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  40329c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4032a0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  4032a4:	2d00      	cmp	r5, #0
  4032a6:	da07      	bge.n	4032b8 <pio_handler_set_priority+0x50>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4032a8:	f00e 0e0f 	and.w	lr, lr, #15
  4032ac:	0164      	lsls	r4, r4, #5
  4032ae:	b2e4      	uxtb	r4, r4
  4032b0:	4a0b      	ldr	r2, [pc, #44]	; (4032e0 <pio_handler_set_priority+0x78>)
  4032b2:	f802 400e 	strb.w	r4, [r2, lr]
  4032b6:	e003      	b.n	4032c0 <pio_handler_set_priority+0x58>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4032b8:	0164      	lsls	r4, r4, #5
  4032ba:	b2e4      	uxtb	r4, r4
  4032bc:	4a09      	ldr	r2, [pc, #36]	; (4032e4 <pio_handler_set_priority+0x7c>)
  4032be:	5554      	strb	r4, [r2, r5]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4032c0:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4032c4:	4639      	mov	r1, r7
  4032c6:	4630      	mov	r0, r6
  4032c8:	4b07      	ldr	r3, [pc, #28]	; (4032e8 <pio_handler_set_priority+0x80>)
  4032ca:	4798      	blx	r3
  4032cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4032ce:	bf00      	nop
  4032d0:	00403011 	.word	0x00403011
  4032d4:	00403009 	.word	0x00403009
  4032d8:	0040300d 	.word	0x0040300d
  4032dc:	e000e100 	.word	0xe000e100
  4032e0:	e000ed14 	.word	0xe000ed14
  4032e4:	e000e400 	.word	0xe000e400
  4032e8:	00403005 	.word	0x00403005

004032ec <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4032ec:	2803      	cmp	r0, #3
  4032ee:	d007      	beq.n	403300 <pmc_mck_set_division+0x14>
  4032f0:	2804      	cmp	r0, #4
  4032f2:	d008      	beq.n	403306 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4032f4:	2802      	cmp	r0, #2
  4032f6:	bf0c      	ite	eq
  4032f8:	f44f 7280 	moveq.w	r2, #256	; 0x100
  4032fc:	2200      	movne	r2, #0
  4032fe:	e004      	b.n	40330a <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  403300:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  403304:	e001      	b.n	40330a <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  403306:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40330a:	4906      	ldr	r1, [pc, #24]	; (403324 <pmc_mck_set_division+0x38>)
  40330c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40330e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  403312:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  403314:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403316:	460a      	mov	r2, r1
  403318:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40331a:	f013 0f08 	tst.w	r3, #8
  40331e:	d0fb      	beq.n	403318 <pmc_mck_set_division+0x2c>
}
  403320:	4770      	bx	lr
  403322:	bf00      	nop
  403324:	400e0600 	.word	0x400e0600

00403328 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403328:	4a18      	ldr	r2, [pc, #96]	; (40338c <pmc_switch_mck_to_pllack+0x64>)
  40332a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40332c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403330:	4318      	orrs	r0, r3
  403332:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403334:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403336:	f013 0f08 	tst.w	r3, #8
  40333a:	d003      	beq.n	403344 <pmc_switch_mck_to_pllack+0x1c>
  40333c:	e009      	b.n	403352 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40333e:	3b01      	subs	r3, #1
  403340:	d103      	bne.n	40334a <pmc_switch_mck_to_pllack+0x22>
  403342:	e01e      	b.n	403382 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403348:	4910      	ldr	r1, [pc, #64]	; (40338c <pmc_switch_mck_to_pllack+0x64>)
  40334a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40334c:	f012 0f08 	tst.w	r2, #8
  403350:	d0f5      	beq.n	40333e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  403352:	4a0e      	ldr	r2, [pc, #56]	; (40338c <pmc_switch_mck_to_pllack+0x64>)
  403354:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403356:	f023 0303 	bic.w	r3, r3, #3
  40335a:	f043 0302 	orr.w	r3, r3, #2
  40335e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403360:	6e90      	ldr	r0, [r2, #104]	; 0x68
  403362:	f010 0008 	ands.w	r0, r0, #8
  403366:	d004      	beq.n	403372 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  403368:	2000      	movs	r0, #0
  40336a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40336c:	3b01      	subs	r3, #1
  40336e:	d103      	bne.n	403378 <pmc_switch_mck_to_pllack+0x50>
  403370:	e009      	b.n	403386 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403376:	4905      	ldr	r1, [pc, #20]	; (40338c <pmc_switch_mck_to_pllack+0x64>)
  403378:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40337a:	f012 0f08 	tst.w	r2, #8
  40337e:	d0f5      	beq.n	40336c <pmc_switch_mck_to_pllack+0x44>
  403380:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  403382:	2001      	movs	r0, #1
  403384:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  403386:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403388:	4770      	bx	lr
  40338a:	bf00      	nop
  40338c:	400e0600 	.word	0x400e0600

00403390 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  403390:	b138      	cbz	r0, 4033a2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403392:	490e      	ldr	r1, [pc, #56]	; (4033cc <pmc_switch_mainck_to_xtal+0x3c>)
  403394:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  403396:	4a0e      	ldr	r2, [pc, #56]	; (4033d0 <pmc_switch_mainck_to_xtal+0x40>)
  403398:	401a      	ands	r2, r3
  40339a:	4b0e      	ldr	r3, [pc, #56]	; (4033d4 <pmc_switch_mainck_to_xtal+0x44>)
  40339c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40339e:	620b      	str	r3, [r1, #32]
  4033a0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4033a2:	480a      	ldr	r0, [pc, #40]	; (4033cc <pmc_switch_mainck_to_xtal+0x3c>)
  4033a4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4033a6:	0209      	lsls	r1, r1, #8
  4033a8:	b289      	uxth	r1, r1
  4033aa:	4a0b      	ldr	r2, [pc, #44]	; (4033d8 <pmc_switch_mainck_to_xtal+0x48>)
  4033ac:	401a      	ands	r2, r3
  4033ae:	4b0b      	ldr	r3, [pc, #44]	; (4033dc <pmc_switch_mainck_to_xtal+0x4c>)
  4033b0:	4313      	orrs	r3, r2
  4033b2:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4033b4:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4033b6:	4602      	mov	r2, r0
  4033b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4033ba:	f013 0f01 	tst.w	r3, #1
  4033be:	d0fb      	beq.n	4033b8 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4033c0:	4a02      	ldr	r2, [pc, #8]	; (4033cc <pmc_switch_mainck_to_xtal+0x3c>)
  4033c2:	6a11      	ldr	r1, [r2, #32]
  4033c4:	4b06      	ldr	r3, [pc, #24]	; (4033e0 <pmc_switch_mainck_to_xtal+0x50>)
  4033c6:	430b      	orrs	r3, r1
  4033c8:	6213      	str	r3, [r2, #32]
  4033ca:	4770      	bx	lr
  4033cc:	400e0600 	.word	0x400e0600
  4033d0:	fec8fffc 	.word	0xfec8fffc
  4033d4:	01370002 	.word	0x01370002
  4033d8:	ffc8fffc 	.word	0xffc8fffc
  4033dc:	00370001 	.word	0x00370001
  4033e0:	01370000 	.word	0x01370000

004033e4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4033e4:	4b02      	ldr	r3, [pc, #8]	; (4033f0 <pmc_osc_is_ready_mainck+0xc>)
  4033e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4033e8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4033ec:	4770      	bx	lr
  4033ee:	bf00      	nop
  4033f0:	400e0600 	.word	0x400e0600

004033f4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4033f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4033f8:	4b01      	ldr	r3, [pc, #4]	; (403400 <pmc_disable_pllack+0xc>)
  4033fa:	629a      	str	r2, [r3, #40]	; 0x28
  4033fc:	4770      	bx	lr
  4033fe:	bf00      	nop
  403400:	400e0600 	.word	0x400e0600

00403404 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403404:	4b02      	ldr	r3, [pc, #8]	; (403410 <pmc_is_locked_pllack+0xc>)
  403406:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403408:	f000 0002 	and.w	r0, r0, #2
  40340c:	4770      	bx	lr
  40340e:	bf00      	nop
  403410:	400e0600 	.word	0x400e0600

00403414 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  403414:	283f      	cmp	r0, #63	; 0x3f
  403416:	d81e      	bhi.n	403456 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403418:	281f      	cmp	r0, #31
  40341a:	d80c      	bhi.n	403436 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40341c:	4b11      	ldr	r3, [pc, #68]	; (403464 <pmc_enable_periph_clk+0x50>)
  40341e:	699a      	ldr	r2, [r3, #24]
  403420:	2301      	movs	r3, #1
  403422:	4083      	lsls	r3, r0
  403424:	4393      	bics	r3, r2
  403426:	d018      	beq.n	40345a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403428:	2301      	movs	r3, #1
  40342a:	fa03 f000 	lsl.w	r0, r3, r0
  40342e:	4b0d      	ldr	r3, [pc, #52]	; (403464 <pmc_enable_periph_clk+0x50>)
  403430:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  403432:	2000      	movs	r0, #0
  403434:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  403436:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403438:	4b0a      	ldr	r3, [pc, #40]	; (403464 <pmc_enable_periph_clk+0x50>)
  40343a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40343e:	2301      	movs	r3, #1
  403440:	4083      	lsls	r3, r0
  403442:	4393      	bics	r3, r2
  403444:	d00b      	beq.n	40345e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  403446:	2301      	movs	r3, #1
  403448:	fa03 f000 	lsl.w	r0, r3, r0
  40344c:	4b05      	ldr	r3, [pc, #20]	; (403464 <pmc_enable_periph_clk+0x50>)
  40344e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  403452:	2000      	movs	r0, #0
  403454:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  403456:	2001      	movs	r0, #1
  403458:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40345a:	2000      	movs	r0, #0
  40345c:	4770      	bx	lr
  40345e:	2000      	movs	r0, #0
}
  403460:	4770      	bx	lr
  403462:	bf00      	nop
  403464:	400e0600 	.word	0x400e0600

00403468 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  403468:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40346a:	4b07      	ldr	r3, [pc, #28]	; (403488 <spi_enable_clock+0x20>)
  40346c:	4298      	cmp	r0, r3
  40346e:	d103      	bne.n	403478 <spi_enable_clock+0x10>
  403470:	2015      	movs	r0, #21
  403472:	4b06      	ldr	r3, [pc, #24]	; (40348c <spi_enable_clock+0x24>)
  403474:	4798      	blx	r3
  403476:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  403478:	4b05      	ldr	r3, [pc, #20]	; (403490 <spi_enable_clock+0x28>)
  40347a:	4298      	cmp	r0, r3
  40347c:	d102      	bne.n	403484 <spi_enable_clock+0x1c>
  40347e:	202a      	movs	r0, #42	; 0x2a
  403480:	4b02      	ldr	r3, [pc, #8]	; (40348c <spi_enable_clock+0x24>)
  403482:	4798      	blx	r3
  403484:	bd08      	pop	{r3, pc}
  403486:	bf00      	nop
  403488:	40008000 	.word	0x40008000
  40348c:	00403415 	.word	0x00403415
  403490:	40058000 	.word	0x40058000

00403494 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  403494:	6843      	ldr	r3, [r0, #4]
  403496:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40349a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40349c:	6843      	ldr	r3, [r0, #4]
  40349e:	0409      	lsls	r1, r1, #16
  4034a0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4034a4:	430b      	orrs	r3, r1
  4034a6:	6043      	str	r3, [r0, #4]
  4034a8:	4770      	bx	lr
  4034aa:	bf00      	nop

004034ac <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4034ac:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4034ae:	f643 2399 	movw	r3, #15001	; 0x3a99
  4034b2:	e001      	b.n	4034b8 <spi_read+0xc>
		if (!timeout--) {
  4034b4:	3b01      	subs	r3, #1
  4034b6:	d00e      	beq.n	4034d6 <spi_read+0x2a>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4034b8:	6904      	ldr	r4, [r0, #16]
  4034ba:	f014 0f01 	tst.w	r4, #1
  4034be:	d0f9      	beq.n	4034b4 <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  4034c0:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4034c2:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4034c4:	f010 0f02 	tst.w	r0, #2
  4034c8:	d002      	beq.n	4034d0 <spi_read+0x24>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4034ca:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4034ce:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4034d0:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4034d2:	2000      	movs	r0, #0
  4034d4:	e000      	b.n	4034d8 <spi_read+0x2c>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  4034d6:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
  4034d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4034dc:	4770      	bx	lr
  4034de:	bf00      	nop

004034e0 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4034e0:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4034e2:	f643 2499 	movw	r4, #15001	; 0x3a99
  4034e6:	e001      	b.n	4034ec <spi_write+0xc>
		if (!timeout--) {
  4034e8:	3c01      	subs	r4, #1
  4034ea:	d011      	beq.n	403510 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4034ec:	6905      	ldr	r5, [r0, #16]
  4034ee:	f015 0f02 	tst.w	r5, #2
  4034f2:	d0f9      	beq.n	4034e8 <spi_write+0x8>
  4034f4:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4034f6:	f014 0f02 	tst.w	r4, #2
  4034fa:	d006      	beq.n	40350a <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4034fc:	0412      	lsls	r2, r2, #16
  4034fe:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  403502:	4311      	orrs	r1, r2
		if (uc_last) {
  403504:	b10b      	cbz	r3, 40350a <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  403506:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40350a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40350c:	2000      	movs	r0, #0
  40350e:	e000      	b.n	403512 <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  403510:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  403512:	bc30      	pop	{r4, r5}
  403514:	4770      	bx	lr
  403516:	bf00      	nop

00403518 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  403518:	b132      	cbz	r2, 403528 <spi_set_clock_polarity+0x10>
  40351a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40351e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403520:	f043 0301 	orr.w	r3, r3, #1
  403524:	6303      	str	r3, [r0, #48]	; 0x30
  403526:	4770      	bx	lr
  403528:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40352c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40352e:	f023 0301 	bic.w	r3, r3, #1
  403532:	6303      	str	r3, [r0, #48]	; 0x30
  403534:	4770      	bx	lr
  403536:	bf00      	nop

00403538 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  403538:	b132      	cbz	r2, 403548 <spi_set_clock_phase+0x10>
  40353a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40353e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403540:	f043 0302 	orr.w	r3, r3, #2
  403544:	6303      	str	r3, [r0, #48]	; 0x30
  403546:	4770      	bx	lr
  403548:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40354c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40354e:	f023 0302 	bic.w	r3, r3, #2
  403552:	6303      	str	r3, [r0, #48]	; 0x30
  403554:	4770      	bx	lr
  403556:	bf00      	nop

00403558 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  403558:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40355c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40355e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  403562:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  403564:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403566:	431a      	orrs	r2, r3
  403568:	630a      	str	r2, [r1, #48]	; 0x30
  40356a:	4770      	bx	lr

0040356c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40356c:	1e43      	subs	r3, r0, #1
  40356e:	4419      	add	r1, r3
  403570:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  403574:	1e43      	subs	r3, r0, #1
  403576:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  403578:	bf94      	ite	ls
  40357a:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  40357c:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  403580:	4770      	bx	lr
  403582:	bf00      	nop

00403584 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  403584:	b16a      	cbz	r2, 4035a2 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  403586:	b410      	push	{r4}
  403588:	4614      	mov	r4, r2
  40358a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40358e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403590:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  403594:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  403596:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  403598:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40359c:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40359e:	2000      	movs	r0, #0
  4035a0:	e002      	b.n	4035a8 <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  4035a2:	f04f 30ff 	mov.w	r0, #4294967295
  4035a6:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  4035a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4035ac:	4770      	bx	lr
  4035ae:	bf00      	nop

004035b0 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4035b0:	b410      	push	{r4}
  4035b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4035b6:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4035b8:	b280      	uxth	r0, r0
  4035ba:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4035bc:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4035be:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4035c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4035c6:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4035c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4035cc:	4770      	bx	lr
  4035ce:	bf00      	nop

004035d0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4035d0:	6943      	ldr	r3, [r0, #20]
  4035d2:	f013 0f02 	tst.w	r3, #2
  4035d6:	d002      	beq.n	4035de <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4035d8:	61c1      	str	r1, [r0, #28]
	return 0;
  4035da:	2000      	movs	r0, #0
  4035dc:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4035de:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4035e0:	4770      	bx	lr
  4035e2:	bf00      	nop

004035e4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4035e4:	6943      	ldr	r3, [r0, #20]
  4035e6:	f013 0f01 	tst.w	r3, #1
  4035ea:	d003      	beq.n	4035f4 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4035ec:	6983      	ldr	r3, [r0, #24]
  4035ee:	700b      	strb	r3, [r1, #0]
	return 0;
  4035f0:	2000      	movs	r0, #0
  4035f2:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4035f4:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4035f6:	4770      	bx	lr

004035f8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4035f8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4035fa:	010c      	lsls	r4, r1, #4
  4035fc:	4294      	cmp	r4, r2
  4035fe:	d90f      	bls.n	403620 <usart_set_async_baudrate+0x28>
  403600:	e01a      	b.n	403638 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  403602:	6841      	ldr	r1, [r0, #4]
  403604:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  403608:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40360a:	0412      	lsls	r2, r2, #16
  40360c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  403610:	431a      	orrs	r2, r3
  403612:	6202      	str	r2, [r0, #32]

	return 0;
  403614:	2000      	movs	r0, #0
  403616:	e01c      	b.n	403652 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  403618:	2001      	movs	r0, #1
  40361a:	e01a      	b.n	403652 <usart_set_async_baudrate+0x5a>
  40361c:	2001      	movs	r0, #1
  40361e:	e018      	b.n	403652 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403620:	0863      	lsrs	r3, r4, #1
  403622:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  403626:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  40362a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40362c:	1e5c      	subs	r4, r3, #1
  40362e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403632:	428c      	cmp	r4, r1
  403634:	d9e9      	bls.n	40360a <usart_set_async_baudrate+0x12>
  403636:	e7ef      	b.n	403618 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403638:	00c9      	lsls	r1, r1, #3
  40363a:	084b      	lsrs	r3, r1, #1
  40363c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  403640:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  403644:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403646:	1e5c      	subs	r4, r3, #1
  403648:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40364c:	428c      	cmp	r4, r1
  40364e:	d8e5      	bhi.n	40361c <usart_set_async_baudrate+0x24>
  403650:	e7d7      	b.n	403602 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  403652:	f85d 4b04 	ldr.w	r4, [sp], #4
  403656:	4770      	bx	lr

00403658 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403658:	4b08      	ldr	r3, [pc, #32]	; (40367c <usart_reset+0x24>)
  40365a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40365e:	2300      	movs	r3, #0
  403660:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  403662:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403664:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  403666:	2388      	movs	r3, #136	; 0x88
  403668:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40366a:	2324      	movs	r3, #36	; 0x24
  40366c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  40366e:	f44f 7380 	mov.w	r3, #256	; 0x100
  403672:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  403674:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  403678:	6003      	str	r3, [r0, #0]
  40367a:	4770      	bx	lr
  40367c:	55534100 	.word	0x55534100

00403680 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  403680:	b570      	push	{r4, r5, r6, lr}
  403682:	4605      	mov	r5, r0
  403684:	460c      	mov	r4, r1
  403686:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  403688:	4b0f      	ldr	r3, [pc, #60]	; (4036c8 <usart_init_rs232+0x48>)
  40368a:	4798      	blx	r3

	ul_reg_val = 0;
  40368c:	2200      	movs	r2, #0
  40368e:	4b0f      	ldr	r3, [pc, #60]	; (4036cc <usart_init_rs232+0x4c>)
  403690:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  403692:	b19c      	cbz	r4, 4036bc <usart_init_rs232+0x3c>
  403694:	4632      	mov	r2, r6
  403696:	6821      	ldr	r1, [r4, #0]
  403698:	4628      	mov	r0, r5
  40369a:	4b0d      	ldr	r3, [pc, #52]	; (4036d0 <usart_init_rs232+0x50>)
  40369c:	4798      	blx	r3
  40369e:	4602      	mov	r2, r0
  4036a0:	b970      	cbnz	r0, 4036c0 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4036a2:	6861      	ldr	r1, [r4, #4]
  4036a4:	68a3      	ldr	r3, [r4, #8]
  4036a6:	4319      	orrs	r1, r3
  4036a8:	6923      	ldr	r3, [r4, #16]
  4036aa:	4319      	orrs	r1, r3
  4036ac:	68e3      	ldr	r3, [r4, #12]
  4036ae:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4036b0:	4906      	ldr	r1, [pc, #24]	; (4036cc <usart_init_rs232+0x4c>)
  4036b2:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  4036b4:	6869      	ldr	r1, [r5, #4]
  4036b6:	430b      	orrs	r3, r1
  4036b8:	606b      	str	r3, [r5, #4]

	return 0;
  4036ba:	e002      	b.n	4036c2 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4036bc:	2201      	movs	r2, #1
  4036be:	e000      	b.n	4036c2 <usart_init_rs232+0x42>
  4036c0:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  4036c2:	4610      	mov	r0, r2
  4036c4:	bd70      	pop	{r4, r5, r6, pc}
  4036c6:	bf00      	nop
  4036c8:	00403659 	.word	0x00403659
  4036cc:	20400988 	.word	0x20400988
  4036d0:	004035f9 	.word	0x004035f9

004036d4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  4036d4:	2340      	movs	r3, #64	; 0x40
  4036d6:	6003      	str	r3, [r0, #0]
  4036d8:	4770      	bx	lr
  4036da:	bf00      	nop

004036dc <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  4036dc:	2310      	movs	r3, #16
  4036de:	6003      	str	r3, [r0, #0]
  4036e0:	4770      	bx	lr
  4036e2:	bf00      	nop

004036e4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4036e4:	6943      	ldr	r3, [r0, #20]
  4036e6:	f013 0f02 	tst.w	r3, #2
  4036ea:	d004      	beq.n	4036f6 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4036ec:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4036f0:	61c1      	str	r1, [r0, #28]
	return 0;
  4036f2:	2000      	movs	r0, #0
  4036f4:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4036f6:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4036f8:	4770      	bx	lr
  4036fa:	bf00      	nop

004036fc <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4036fc:	6943      	ldr	r3, [r0, #20]
  4036fe:	f013 0f01 	tst.w	r3, #1
  403702:	d005      	beq.n	403710 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403704:	6983      	ldr	r3, [r0, #24]
  403706:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40370a:	600b      	str	r3, [r1, #0]

	return 0;
  40370c:	2000      	movs	r0, #0
  40370e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  403710:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  403712:	4770      	bx	lr

00403714 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403714:	e7fe      	b.n	403714 <Dummy_Handler>
  403716:	bf00      	nop

00403718 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403718:	b500      	push	{lr}
  40371a:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  40371c:	4b27      	ldr	r3, [pc, #156]	; (4037bc <Reset_Handler+0xa4>)
  40371e:	4a28      	ldr	r2, [pc, #160]	; (4037c0 <Reset_Handler+0xa8>)
  403720:	429a      	cmp	r2, r3
  403722:	d003      	beq.n	40372c <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  403724:	4b27      	ldr	r3, [pc, #156]	; (4037c4 <Reset_Handler+0xac>)
  403726:	4a25      	ldr	r2, [pc, #148]	; (4037bc <Reset_Handler+0xa4>)
  403728:	429a      	cmp	r2, r3
  40372a:	d304      	bcc.n	403736 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40372c:	4b26      	ldr	r3, [pc, #152]	; (4037c8 <Reset_Handler+0xb0>)
  40372e:	4a27      	ldr	r2, [pc, #156]	; (4037cc <Reset_Handler+0xb4>)
  403730:	429a      	cmp	r2, r3
  403732:	d30f      	bcc.n	403754 <Reset_Handler+0x3c>
  403734:	e01a      	b.n	40376c <Reset_Handler+0x54>
  403736:	4921      	ldr	r1, [pc, #132]	; (4037bc <Reset_Handler+0xa4>)
  403738:	4b25      	ldr	r3, [pc, #148]	; (4037d0 <Reset_Handler+0xb8>)
  40373a:	1a5b      	subs	r3, r3, r1
  40373c:	f023 0303 	bic.w	r3, r3, #3
  403740:	3304      	adds	r3, #4
  403742:	4a1f      	ldr	r2, [pc, #124]	; (4037c0 <Reset_Handler+0xa8>)
  403744:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  403746:	f852 0b04 	ldr.w	r0, [r2], #4
  40374a:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  40374e:	429a      	cmp	r2, r3
  403750:	d1f9      	bne.n	403746 <Reset_Handler+0x2e>
  403752:	e7eb      	b.n	40372c <Reset_Handler+0x14>
  403754:	4b1f      	ldr	r3, [pc, #124]	; (4037d4 <Reset_Handler+0xbc>)
  403756:	4a20      	ldr	r2, [pc, #128]	; (4037d8 <Reset_Handler+0xc0>)
  403758:	1ad2      	subs	r2, r2, r3
  40375a:	f022 0203 	bic.w	r2, r2, #3
  40375e:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403760:	3b04      	subs	r3, #4
                *pDest++ = 0;
  403762:	2100      	movs	r1, #0
  403764:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403768:	4293      	cmp	r3, r2
  40376a:	d1fb      	bne.n	403764 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40376c:	4a1b      	ldr	r2, [pc, #108]	; (4037dc <Reset_Handler+0xc4>)
  40376e:	4b1c      	ldr	r3, [pc, #112]	; (4037e0 <Reset_Handler+0xc8>)
  403770:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403774:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403776:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40377a:	fab3 f383 	clz	r3, r3
  40377e:	095b      	lsrs	r3, r3, #5
  403780:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403782:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  403784:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403788:	2200      	movs	r2, #0
  40378a:	4b16      	ldr	r3, [pc, #88]	; (4037e4 <Reset_Handler+0xcc>)
  40378c:	701a      	strb	r2, [r3, #0]
	return flags;
  40378e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403790:	4a15      	ldr	r2, [pc, #84]	; (4037e8 <Reset_Handler+0xd0>)
  403792:	6813      	ldr	r3, [r2, #0]
  403794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403798:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40379a:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40379e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4037a2:	b129      	cbz	r1, 4037b0 <Reset_Handler+0x98>
		cpu_irq_enable();
  4037a4:	2201      	movs	r2, #1
  4037a6:	4b0f      	ldr	r3, [pc, #60]	; (4037e4 <Reset_Handler+0xcc>)
  4037a8:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4037aa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4037ae:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4037b0:	4b0e      	ldr	r3, [pc, #56]	; (4037ec <Reset_Handler+0xd4>)
  4037b2:	4798      	blx	r3

        /* Branch to main function */
        main();
  4037b4:	4b0e      	ldr	r3, [pc, #56]	; (4037f0 <Reset_Handler+0xd8>)
  4037b6:	4798      	blx	r3
  4037b8:	e7fe      	b.n	4037b8 <Reset_Handler+0xa0>
  4037ba:	bf00      	nop
  4037bc:	20400000 	.word	0x20400000
  4037c0:	0040bc88 	.word	0x0040bc88
  4037c4:	204008bc 	.word	0x204008bc
  4037c8:	20401600 	.word	0x20401600
  4037cc:	204008bc 	.word	0x204008bc
  4037d0:	204008bb 	.word	0x204008bb
  4037d4:	204008c0 	.word	0x204008c0
  4037d8:	20401603 	.word	0x20401603
  4037dc:	e000ed00 	.word	0xe000ed00
  4037e0:	00400000 	.word	0x00400000
  4037e4:	20400014 	.word	0x20400014
  4037e8:	e000ed88 	.word	0xe000ed88
  4037ec:	00403f49 	.word	0x00403f49
  4037f0:	00403d85 	.word	0x00403d85

004037f4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4037f4:	4b3c      	ldr	r3, [pc, #240]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  4037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4037f8:	f003 0303 	and.w	r3, r3, #3
  4037fc:	2b01      	cmp	r3, #1
  4037fe:	d00f      	beq.n	403820 <SystemCoreClockUpdate+0x2c>
  403800:	b113      	cbz	r3, 403808 <SystemCoreClockUpdate+0x14>
  403802:	2b02      	cmp	r3, #2
  403804:	d029      	beq.n	40385a <SystemCoreClockUpdate+0x66>
  403806:	e057      	b.n	4038b8 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403808:	4b38      	ldr	r3, [pc, #224]	; (4038ec <SystemCoreClockUpdate+0xf8>)
  40380a:	695b      	ldr	r3, [r3, #20]
  40380c:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403810:	bf14      	ite	ne
  403812:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403816:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40381a:	4b35      	ldr	r3, [pc, #212]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  40381c:	601a      	str	r2, [r3, #0]
  40381e:	e04b      	b.n	4038b8 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403820:	4b31      	ldr	r3, [pc, #196]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  403822:	6a1b      	ldr	r3, [r3, #32]
  403824:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403828:	d003      	beq.n	403832 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40382a:	4a32      	ldr	r2, [pc, #200]	; (4038f4 <SystemCoreClockUpdate+0x100>)
  40382c:	4b30      	ldr	r3, [pc, #192]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  40382e:	601a      	str	r2, [r3, #0]
  403830:	e042      	b.n	4038b8 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403832:	4a31      	ldr	r2, [pc, #196]	; (4038f8 <SystemCoreClockUpdate+0x104>)
  403834:	4b2e      	ldr	r3, [pc, #184]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  403836:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403838:	4b2b      	ldr	r3, [pc, #172]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  40383a:	6a1b      	ldr	r3, [r3, #32]
  40383c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403840:	2b10      	cmp	r3, #16
  403842:	d002      	beq.n	40384a <SystemCoreClockUpdate+0x56>
  403844:	2b20      	cmp	r3, #32
  403846:	d004      	beq.n	403852 <SystemCoreClockUpdate+0x5e>
  403848:	e036      	b.n	4038b8 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40384a:	4a2c      	ldr	r2, [pc, #176]	; (4038fc <SystemCoreClockUpdate+0x108>)
  40384c:	4b28      	ldr	r3, [pc, #160]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  40384e:	601a      	str	r2, [r3, #0]
          break;
  403850:	e032      	b.n	4038b8 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403852:	4a28      	ldr	r2, [pc, #160]	; (4038f4 <SystemCoreClockUpdate+0x100>)
  403854:	4b26      	ldr	r3, [pc, #152]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  403856:	601a      	str	r2, [r3, #0]
          break;
  403858:	e02e      	b.n	4038b8 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40385a:	4b23      	ldr	r3, [pc, #140]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  40385c:	6a1b      	ldr	r3, [r3, #32]
  40385e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403862:	d003      	beq.n	40386c <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  403864:	4a23      	ldr	r2, [pc, #140]	; (4038f4 <SystemCoreClockUpdate+0x100>)
  403866:	4b22      	ldr	r3, [pc, #136]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  403868:	601a      	str	r2, [r3, #0]
  40386a:	e012      	b.n	403892 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40386c:	4a22      	ldr	r2, [pc, #136]	; (4038f8 <SystemCoreClockUpdate+0x104>)
  40386e:	4b20      	ldr	r3, [pc, #128]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  403870:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403872:	4b1d      	ldr	r3, [pc, #116]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  403874:	6a1b      	ldr	r3, [r3, #32]
  403876:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40387a:	2b10      	cmp	r3, #16
  40387c:	d002      	beq.n	403884 <SystemCoreClockUpdate+0x90>
  40387e:	2b20      	cmp	r3, #32
  403880:	d004      	beq.n	40388c <SystemCoreClockUpdate+0x98>
  403882:	e006      	b.n	403892 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  403884:	4a1d      	ldr	r2, [pc, #116]	; (4038fc <SystemCoreClockUpdate+0x108>)
  403886:	4b1a      	ldr	r3, [pc, #104]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  403888:	601a      	str	r2, [r3, #0]
          break;
  40388a:	e002      	b.n	403892 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40388c:	4a19      	ldr	r2, [pc, #100]	; (4038f4 <SystemCoreClockUpdate+0x100>)
  40388e:	4b18      	ldr	r3, [pc, #96]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  403890:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403892:	4b15      	ldr	r3, [pc, #84]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  403894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403896:	f003 0303 	and.w	r3, r3, #3
  40389a:	2b02      	cmp	r3, #2
  40389c:	d10c      	bne.n	4038b8 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40389e:	4a12      	ldr	r2, [pc, #72]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  4038a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4038a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4038a4:	4812      	ldr	r0, [pc, #72]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  4038a6:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4038aa:	6803      	ldr	r3, [r0, #0]
  4038ac:	fb01 3303 	mla	r3, r1, r3, r3
  4038b0:	b2d2      	uxtb	r2, r2
  4038b2:	fbb3 f3f2 	udiv	r3, r3, r2
  4038b6:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4038b8:	4b0b      	ldr	r3, [pc, #44]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  4038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4038bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4038c0:	2b70      	cmp	r3, #112	; 0x70
  4038c2:	d107      	bne.n	4038d4 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  4038c4:	4a0a      	ldr	r2, [pc, #40]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  4038c6:	6813      	ldr	r3, [r2, #0]
  4038c8:	490d      	ldr	r1, [pc, #52]	; (403900 <SystemCoreClockUpdate+0x10c>)
  4038ca:	fba1 1303 	umull	r1, r3, r1, r3
  4038ce:	085b      	lsrs	r3, r3, #1
  4038d0:	6013      	str	r3, [r2, #0]
  4038d2:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4038d4:	4b04      	ldr	r3, [pc, #16]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  4038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4038d8:	4905      	ldr	r1, [pc, #20]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  4038da:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4038de:	680b      	ldr	r3, [r1, #0]
  4038e0:	40d3      	lsrs	r3, r2
  4038e2:	600b      	str	r3, [r1, #0]
  4038e4:	4770      	bx	lr
  4038e6:	bf00      	nop
  4038e8:	400e0600 	.word	0x400e0600
  4038ec:	400e1810 	.word	0x400e1810
  4038f0:	20400018 	.word	0x20400018
  4038f4:	00b71b00 	.word	0x00b71b00
  4038f8:	003d0900 	.word	0x003d0900
  4038fc:	007a1200 	.word	0x007a1200
  403900:	aaaaaaab 	.word	0xaaaaaaab

00403904 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403904:	4b12      	ldr	r3, [pc, #72]	; (403950 <system_init_flash+0x4c>)
  403906:	4298      	cmp	r0, r3
  403908:	d804      	bhi.n	403914 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40390a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40390e:	4b11      	ldr	r3, [pc, #68]	; (403954 <system_init_flash+0x50>)
  403910:	601a      	str	r2, [r3, #0]
  403912:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403914:	4b10      	ldr	r3, [pc, #64]	; (403958 <system_init_flash+0x54>)
  403916:	4298      	cmp	r0, r3
  403918:	d803      	bhi.n	403922 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40391a:	4a10      	ldr	r2, [pc, #64]	; (40395c <system_init_flash+0x58>)
  40391c:	4b0d      	ldr	r3, [pc, #52]	; (403954 <system_init_flash+0x50>)
  40391e:	601a      	str	r2, [r3, #0]
  403920:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403922:	4b0f      	ldr	r3, [pc, #60]	; (403960 <system_init_flash+0x5c>)
  403924:	4298      	cmp	r0, r3
  403926:	d803      	bhi.n	403930 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403928:	4a0e      	ldr	r2, [pc, #56]	; (403964 <system_init_flash+0x60>)
  40392a:	4b0a      	ldr	r3, [pc, #40]	; (403954 <system_init_flash+0x50>)
  40392c:	601a      	str	r2, [r3, #0]
  40392e:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403930:	4b0d      	ldr	r3, [pc, #52]	; (403968 <system_init_flash+0x64>)
  403932:	4298      	cmp	r0, r3
  403934:	d803      	bhi.n	40393e <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403936:	4a0d      	ldr	r2, [pc, #52]	; (40396c <system_init_flash+0x68>)
  403938:	4b06      	ldr	r3, [pc, #24]	; (403954 <system_init_flash+0x50>)
  40393a:	601a      	str	r2, [r3, #0]
  40393c:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40393e:	4b0c      	ldr	r3, [pc, #48]	; (403970 <system_init_flash+0x6c>)
  403940:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403942:	bf94      	ite	ls
  403944:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403948:	4a0a      	ldrhi	r2, [pc, #40]	; (403974 <system_init_flash+0x70>)
  40394a:	4b02      	ldr	r3, [pc, #8]	; (403954 <system_init_flash+0x50>)
  40394c:	601a      	str	r2, [r3, #0]
  40394e:	4770      	bx	lr
  403950:	01312cff 	.word	0x01312cff
  403954:	400e0c00 	.word	0x400e0c00
  403958:	026259ff 	.word	0x026259ff
  40395c:	04000100 	.word	0x04000100
  403960:	039386ff 	.word	0x039386ff
  403964:	04000200 	.word	0x04000200
  403968:	04c4b3ff 	.word	0x04c4b3ff
  40396c:	04000300 	.word	0x04000300
  403970:	05f5e0ff 	.word	0x05f5e0ff
  403974:	04000500 	.word	0x04000500

00403978 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403978:	4b09      	ldr	r3, [pc, #36]	; (4039a0 <_sbrk+0x28>)
  40397a:	681b      	ldr	r3, [r3, #0]
  40397c:	b913      	cbnz	r3, 403984 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40397e:	4a09      	ldr	r2, [pc, #36]	; (4039a4 <_sbrk+0x2c>)
  403980:	4b07      	ldr	r3, [pc, #28]	; (4039a0 <_sbrk+0x28>)
  403982:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403984:	4b06      	ldr	r3, [pc, #24]	; (4039a0 <_sbrk+0x28>)
  403986:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403988:	181a      	adds	r2, r3, r0
  40398a:	4907      	ldr	r1, [pc, #28]	; (4039a8 <_sbrk+0x30>)
  40398c:	4291      	cmp	r1, r2
  40398e:	db04      	blt.n	40399a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  403990:	4610      	mov	r0, r2
  403992:	4a03      	ldr	r2, [pc, #12]	; (4039a0 <_sbrk+0x28>)
  403994:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403996:	4618      	mov	r0, r3
  403998:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40399a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40399e:	4770      	bx	lr
  4039a0:	2040098c 	.word	0x2040098c
  4039a4:	20403800 	.word	0x20403800
  4039a8:	2045fffc 	.word	0x2045fffc

004039ac <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4039ac:	f04f 30ff 	mov.w	r0, #4294967295
  4039b0:	4770      	bx	lr
  4039b2:	bf00      	nop

004039b4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4039b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4039b8:	604b      	str	r3, [r1, #4]

	return 0;
}
  4039ba:	2000      	movs	r0, #0
  4039bc:	4770      	bx	lr
  4039be:	bf00      	nop

004039c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4039c0:	2001      	movs	r0, #1
  4039c2:	4770      	bx	lr

004039c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4039c4:	2000      	movs	r0, #0
  4039c6:	4770      	bx	lr

004039c8 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  4039c8:	b538      	push	{r3, r4, r5, lr}
  4039ca:	4614      	mov	r4, r2
	switch (u8Msg) {
  4039cc:	2906      	cmp	r1, #6
  4039ce:	d044      	beq.n	403a5a <socket_cb+0x92>
  4039d0:	2907      	cmp	r1, #7
  4039d2:	d035      	beq.n	403a40 <socket_cb+0x78>
  4039d4:	2905      	cmp	r1, #5
  4039d6:	f040 808a 	bne.w	403aee <socket_cb+0x126>

  /* Socket connected */
  case SOCKET_MSG_CONNECT:
  {
    uint16_t rtn;
    memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  4039da:	4d45      	ldr	r5, [pc, #276]	; (403af0 <socket_cb+0x128>)
  4039dc:	f240 52b4 	movw	r2, #1460	; 0x5b4
  4039e0:	2100      	movs	r1, #0
  4039e2:	4628      	mov	r0, r5
  4039e4:	4b43      	ldr	r3, [pc, #268]	; (403af4 <socket_cb+0x12c>)
  4039e6:	4798      	blx	r3
    sprintf((char *)gau8ReceivedBuffer, "%s%s",MAIN_PREFIX_BUFFER,MAIN_POST);
  4039e8:	4b43      	ldr	r3, [pc, #268]	; (403af8 <socket_cb+0x130>)
  4039ea:	4a44      	ldr	r2, [pc, #272]	; (403afc <socket_cb+0x134>)
  4039ec:	4944      	ldr	r1, [pc, #272]	; (403b00 <socket_cb+0x138>)
  4039ee:	4628      	mov	r0, r5
  4039f0:	4d44      	ldr	r5, [pc, #272]	; (403b04 <socket_cb+0x13c>)
  4039f2:	47a8      	blx	r5

    tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
    if (pstrConnect && pstrConnect->s8Error >= 0) {
  4039f4:	b1cc      	cbz	r4, 403a2a <socket_cb+0x62>
  4039f6:	f994 3001 	ldrsb.w	r3, [r4, #1]
  4039fa:	2b00      	cmp	r3, #0
  4039fc:	db15      	blt.n	403a2a <socket_cb+0x62>
      printf("socket_cb: connect success!\r\n");
  4039fe:	4842      	ldr	r0, [pc, #264]	; (403b08 <socket_cb+0x140>)
  403a00:	4b42      	ldr	r3, [pc, #264]	; (403b0c <socket_cb+0x144>)
  403a02:	4798      	blx	r3
      rtn = send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  403a04:	4c3a      	ldr	r4, [pc, #232]	; (403af0 <socket_cb+0x128>)
  403a06:	4620      	mov	r0, r4
  403a08:	4b41      	ldr	r3, [pc, #260]	; (403b10 <socket_cb+0x148>)
  403a0a:	4798      	blx	r3
  403a0c:	2300      	movs	r3, #0
  403a0e:	b282      	uxth	r2, r0
  403a10:	4621      	mov	r1, r4
  403a12:	4840      	ldr	r0, [pc, #256]	; (403b14 <socket_cb+0x14c>)
  403a14:	f990 0000 	ldrsb.w	r0, [r0]
  403a18:	4d3f      	ldr	r5, [pc, #252]	; (403b18 <socket_cb+0x150>)
  403a1a:	47a8      	blx	r5
      memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  403a1c:	f240 52b4 	movw	r2, #1460	; 0x5b4
  403a20:	2100      	movs	r1, #0
  403a22:	4620      	mov	r0, r4
  403a24:	4b33      	ldr	r3, [pc, #204]	; (403af4 <socket_cb+0x12c>)
  403a26:	4798      	blx	r3
  403a28:	bd38      	pop	{r3, r4, r5, pc}
      //recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
      } else {
      printf("socket_cb: connect error!\r\n");
  403a2a:	483c      	ldr	r0, [pc, #240]	; (403b1c <socket_cb+0x154>)
  403a2c:	4b37      	ldr	r3, [pc, #220]	; (403b0c <socket_cb+0x144>)
  403a2e:	4798      	blx	r3
      close(tcp_client_socket);
  403a30:	4c38      	ldr	r4, [pc, #224]	; (403b14 <socket_cb+0x14c>)
  403a32:	f994 0000 	ldrsb.w	r0, [r4]
  403a36:	4b3a      	ldr	r3, [pc, #232]	; (403b20 <socket_cb+0x158>)
  403a38:	4798      	blx	r3
      tcp_client_socket = -1;
  403a3a:	23ff      	movs	r3, #255	; 0xff
  403a3c:	7023      	strb	r3, [r4, #0]
  403a3e:	bd38      	pop	{r3, r4, r5, pc}
  break;

	/* Message send */
	case SOCKET_MSG_SEND:
	{
		printf("socket_cb: send success!\r\n");
  403a40:	4838      	ldr	r0, [pc, #224]	; (403b24 <socket_cb+0x15c>)
  403a42:	4b32      	ldr	r3, [pc, #200]	; (403b0c <socket_cb+0x144>)
  403a44:	4798      	blx	r3
    recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  403a46:	2300      	movs	r3, #0
  403a48:	f240 52b4 	movw	r2, #1460	; 0x5b4
  403a4c:	4936      	ldr	r1, [pc, #216]	; (403b28 <socket_cb+0x160>)
  403a4e:	4831      	ldr	r0, [pc, #196]	; (403b14 <socket_cb+0x14c>)
  403a50:	f990 0000 	ldrsb.w	r0, [r0]
  403a54:	4c35      	ldr	r4, [pc, #212]	; (403b2c <socket_cb+0x164>)
  403a56:	47a0      	blx	r4
	  //printf("TCP Server Test Complete!\r\n");
		//printf("close socket\n");
		//close(tcp_client_socket);
		//close(tcp_server_socket);
	}
	break;
  403a58:	bd38      	pop	{r3, r4, r5, pc}

    uint8_t  messageAck[64];
    uint16_t messageAckSize;
    uint8_t  command;

		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  403a5a:	2a00      	cmp	r2, #0
  403a5c:	d03d      	beq.n	403ada <socket_cb+0x112>
  403a5e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  403a62:	2b00      	cmp	r3, #0
  403a64:	dd39      	ble.n	403ada <socket_cb+0x112>


		// Para debug das mensagens do socket
			printf("%s",pstrRecv->pu8Buffer);
  403a66:	6811      	ldr	r1, [r2, #0]
  403a68:	4831      	ldr	r0, [pc, #196]	; (403b30 <socket_cb+0x168>)
  403a6a:	4b28      	ldr	r3, [pc, #160]	; (403b0c <socket_cb+0x144>)
  403a6c:	4798      	blx	r3
			const char *last = &pstrRecv->pu8Buffer[pstrRecv->s16BufferSize-2];
  403a6e:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
  403a72:	1eab      	subs	r3, r5, #2
  403a74:	6825      	ldr	r5, [r4, #0]
  403a76:	441d      	add	r5, r3
			if(!strcmp(last, "ON"))
  403a78:	492e      	ldr	r1, [pc, #184]	; (403b34 <socket_cb+0x16c>)
  403a7a:	4628      	mov	r0, r5
  403a7c:	4b2e      	ldr	r3, [pc, #184]	; (403b38 <socket_cb+0x170>)
  403a7e:	4798      	blx	r3
  403a80:	b928      	cbnz	r0, 403a8e <socket_cb+0xc6>
				pio_clear(LED_PIO, LED_PIN_MASK);
  403a82:	f44f 7180 	mov.w	r1, #256	; 0x100
  403a86:	482d      	ldr	r0, [pc, #180]	; (403b3c <socket_cb+0x174>)
  403a88:	4b2d      	ldr	r3, [pc, #180]	; (403b40 <socket_cb+0x178>)
  403a8a:	4798      	blx	r3
  403a8c:	e009      	b.n	403aa2 <socket_cb+0xda>
			else if(!strcmp(last, "FF"))
  403a8e:	492d      	ldr	r1, [pc, #180]	; (403b44 <socket_cb+0x17c>)
  403a90:	4628      	mov	r0, r5
  403a92:	4b29      	ldr	r3, [pc, #164]	; (403b38 <socket_cb+0x170>)
  403a94:	4798      	blx	r3
  403a96:	b920      	cbnz	r0, 403aa2 <socket_cb+0xda>
				pio_set(LED_PIO, LED_PIN_MASK);
  403a98:	f44f 7180 	mov.w	r1, #256	; 0x100
  403a9c:	4827      	ldr	r0, [pc, #156]	; (403b3c <socket_cb+0x174>)
  403a9e:	4b2a      	ldr	r3, [pc, #168]	; (403b48 <socket_cb+0x180>)
  403aa0:	4798      	blx	r3

      // limpa o buffer de recepcao e tx
      memset(pstrRecv->pu8Buffer, 0, pstrRecv->s16BufferSize);
  403aa2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  403aa6:	2100      	movs	r1, #0
  403aa8:	6820      	ldr	r0, [r4, #0]
  403aaa:	4b12      	ldr	r3, [pc, #72]	; (403af4 <socket_cb+0x12c>)
  403aac:	4798      	blx	r3

      // envia a resposta
      delay_s(1);
  403aae:	4827      	ldr	r0, [pc, #156]	; (403b4c <socket_cb+0x184>)
  403ab0:	4b27      	ldr	r3, [pc, #156]	; (403b50 <socket_cb+0x188>)
  403ab2:	4798      	blx	r3
      sprintf((char *)gau8ReceivedBuffer, "%s%s",MAIN_PREFIX_BUFFER,MAIN_POST);
  403ab4:	4c0e      	ldr	r4, [pc, #56]	; (403af0 <socket_cb+0x128>)
  403ab6:	4b10      	ldr	r3, [pc, #64]	; (403af8 <socket_cb+0x130>)
  403ab8:	4a10      	ldr	r2, [pc, #64]	; (403afc <socket_cb+0x134>)
  403aba:	4911      	ldr	r1, [pc, #68]	; (403b00 <socket_cb+0x138>)
  403abc:	4620      	mov	r0, r4
  403abe:	4d11      	ldr	r5, [pc, #68]	; (403b04 <socket_cb+0x13c>)
  403ac0:	47a8      	blx	r5
      send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  403ac2:	4620      	mov	r0, r4
  403ac4:	4b12      	ldr	r3, [pc, #72]	; (403b10 <socket_cb+0x148>)
  403ac6:	4798      	blx	r3
  403ac8:	2300      	movs	r3, #0
  403aca:	b282      	uxth	r2, r0
  403acc:	4621      	mov	r1, r4
  403ace:	4811      	ldr	r0, [pc, #68]	; (403b14 <socket_cb+0x14c>)
  403ad0:	f990 0000 	ldrsb.w	r0, [r0]
  403ad4:	4c10      	ldr	r4, [pc, #64]	; (403b18 <socket_cb+0x150>)
  403ad6:	47a0      	blx	r4

    uint8_t  messageAck[64];
    uint16_t messageAckSize;
    uint8_t  command;

		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  403ad8:	bd38      	pop	{r3, r4, r5, pc}

      // Requista novos dados
      //recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);

 		} else {
			printf("socket_cb: recv error!\r\n");
  403ada:	481e      	ldr	r0, [pc, #120]	; (403b54 <socket_cb+0x18c>)
  403adc:	4b0b      	ldr	r3, [pc, #44]	; (403b0c <socket_cb+0x144>)
  403ade:	4798      	blx	r3
			close(tcp_client_socket);
  403ae0:	4c0c      	ldr	r4, [pc, #48]	; (403b14 <socket_cb+0x14c>)
  403ae2:	f994 0000 	ldrsb.w	r0, [r4]
  403ae6:	4b0e      	ldr	r3, [pc, #56]	; (403b20 <socket_cb+0x158>)
  403ae8:	4798      	blx	r3
			tcp_client_socket = -1;
  403aea:	23ff      	movs	r3, #255	; 0xff
  403aec:	7023      	strb	r3, [r4, #0]
  403aee:	bd38      	pop	{r3, r4, r5, pc}
  403af0:	20400990 	.word	0x20400990
  403af4:	00403fc1 	.word	0x00403fc1
  403af8:	0040b838 	.word	0x0040b838
  403afc:	0040b854 	.word	0x0040b854
  403b00:	0040b868 	.word	0x0040b868
  403b04:	004041bd 	.word	0x004041bd
  403b08:	0040b870 	.word	0x0040b870
  403b0c:	00403f99 	.word	0x00403f99
  403b10:	00404501 	.word	0x00404501
  403b14:	2040001c 	.word	0x2040001c
  403b18:	004029a1 	.word	0x004029a1
  403b1c:	0040b890 	.word	0x0040b890
  403b20:	00402ae1 	.word	0x00402ae1
  403b24:	0040b8ac 	.word	0x0040b8ac
  403b28:	20400f44 	.word	0x20400f44
  403b2c:	00402a3d 	.word	0x00402a3d
  403b30:	0040b8c8 	.word	0x0040b8c8
  403b34:	0040b9b8 	.word	0x0040b9b8
  403b38:	00404229 	.word	0x00404229
  403b3c:	400e1200 	.word	0x400e1200
  403b40:	00402ed9 	.word	0x00402ed9
  403b44:	0040b8cc 	.word	0x0040b8cc
  403b48:	00402ed5 	.word	0x00402ed5
  403b4c:	0303af6b 	.word	0x0303af6b
  403b50:	20400001 	.word	0x20400001
  403b54:	0040b8d0 	.word	0x0040b8d0

00403b58 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  403b58:	b510      	push	{r4, lr}
  403b5a:	b082      	sub	sp, #8
	switch (u8MsgType) {
  403b5c:	282c      	cmp	r0, #44	; 0x2c
  403b5e:	d002      	beq.n	403b66 <wifi_cb+0xe>
  403b60:	2832      	cmp	r0, #50	; 0x32
  403b62:	d019      	beq.n	403b98 <wifi_cb+0x40>
  403b64:	e024      	b.n	403bb0 <wifi_cb+0x58>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  403b66:	780b      	ldrb	r3, [r1, #0]
  403b68:	2b01      	cmp	r3, #1
  403b6a:	d105      	bne.n	403b78 <wifi_cb+0x20>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
  403b6c:	4811      	ldr	r0, [pc, #68]	; (403bb4 <wifi_cb+0x5c>)
  403b6e:	4b12      	ldr	r3, [pc, #72]	; (403bb8 <wifi_cb+0x60>)
  403b70:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  403b72:	4b12      	ldr	r3, [pc, #72]	; (403bbc <wifi_cb+0x64>)
  403b74:	4798      	blx	r3
  403b76:	e01b      	b.n	403bb0 <wifi_cb+0x58>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  403b78:	b9d3      	cbnz	r3, 403bb0 <wifi_cb+0x58>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
  403b7a:	4811      	ldr	r0, [pc, #68]	; (403bc0 <wifi_cb+0x68>)
  403b7c:	4b0e      	ldr	r3, [pc, #56]	; (403bb8 <wifi_cb+0x60>)
  403b7e:	4798      	blx	r3
			wifi_connected = 0;
  403b80:	2200      	movs	r2, #0
  403b82:	4b10      	ldr	r3, [pc, #64]	; (403bc4 <wifi_cb+0x6c>)
  403b84:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  403b86:	23ff      	movs	r3, #255	; 0xff
  403b88:	9300      	str	r3, [sp, #0]
  403b8a:	4b0f      	ldr	r3, [pc, #60]	; (403bc8 <wifi_cb+0x70>)
  403b8c:	2202      	movs	r2, #2
  403b8e:	2109      	movs	r1, #9
  403b90:	480e      	ldr	r0, [pc, #56]	; (403bcc <wifi_cb+0x74>)
  403b92:	4c0f      	ldr	r4, [pc, #60]	; (403bd0 <wifi_cb+0x78>)
  403b94:	47a0      	blx	r4
  403b96:	e00b      	b.n	403bb0 <wifi_cb+0x58>
	break;

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		wifi_connected = 1;
  403b98:	2201      	movs	r2, #1
  403b9a:	4b0a      	ldr	r3, [pc, #40]	; (403bc4 <wifi_cb+0x6c>)
  403b9c:	701a      	strb	r2, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
  403b9e:	788b      	ldrb	r3, [r1, #2]
  403ba0:	784a      	ldrb	r2, [r1, #1]
  403ba2:	7808      	ldrb	r0, [r1, #0]
  403ba4:	78c9      	ldrb	r1, [r1, #3]
  403ba6:	9100      	str	r1, [sp, #0]
  403ba8:	4601      	mov	r1, r0
  403baa:	480a      	ldr	r0, [pc, #40]	; (403bd4 <wifi_cb+0x7c>)
  403bac:	4c02      	ldr	r4, [pc, #8]	; (403bb8 <wifi_cb+0x60>)
  403bae:	47a0      	blx	r4
	break;

	default:
		break;
	}
}
  403bb0:	b002      	add	sp, #8
  403bb2:	bd10      	pop	{r4, pc}
  403bb4:	0040b8ec 	.word	0x0040b8ec
  403bb8:	00403f99 	.word	0x00403f99
  403bbc:	004013a1 	.word	0x004013a1
  403bc0:	0040b924 	.word	0x0040b924
  403bc4:	204014f8 	.word	0x204014f8
  403bc8:	0040b960 	.word	0x0040b960
  403bcc:	0040b96c 	.word	0x0040b96c
  403bd0:	00401385 	.word	0x00401385
  403bd4:	0040b978 	.word	0x0040b978

00403bd8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  403bda:	b083      	sub	sp, #12
  403bdc:	4605      	mov	r5, r0
  403bde:	460c      	mov	r4, r1
	uint32_t val = 0;
  403be0:	2300      	movs	r3, #0
  403be2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403be4:	4b29      	ldr	r3, [pc, #164]	; (403c8c <usart_serial_getchar+0xb4>)
  403be6:	4298      	cmp	r0, r3
  403be8:	d107      	bne.n	403bfa <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  403bea:	461f      	mov	r7, r3
  403bec:	4e28      	ldr	r6, [pc, #160]	; (403c90 <usart_serial_getchar+0xb8>)
  403bee:	4621      	mov	r1, r4
  403bf0:	4638      	mov	r0, r7
  403bf2:	47b0      	blx	r6
  403bf4:	2800      	cmp	r0, #0
  403bf6:	d1fa      	bne.n	403bee <usart_serial_getchar+0x16>
  403bf8:	e015      	b.n	403c26 <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403bfa:	4b26      	ldr	r3, [pc, #152]	; (403c94 <usart_serial_getchar+0xbc>)
  403bfc:	4298      	cmp	r0, r3
  403bfe:	d107      	bne.n	403c10 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  403c00:	461f      	mov	r7, r3
  403c02:	4e23      	ldr	r6, [pc, #140]	; (403c90 <usart_serial_getchar+0xb8>)
  403c04:	4621      	mov	r1, r4
  403c06:	4638      	mov	r0, r7
  403c08:	47b0      	blx	r6
  403c0a:	2800      	cmp	r0, #0
  403c0c:	d1fa      	bne.n	403c04 <usart_serial_getchar+0x2c>
  403c0e:	e015      	b.n	403c3c <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403c10:	4b21      	ldr	r3, [pc, #132]	; (403c98 <usart_serial_getchar+0xc0>)
  403c12:	4298      	cmp	r0, r3
  403c14:	d107      	bne.n	403c26 <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  403c16:	461f      	mov	r7, r3
  403c18:	4e1d      	ldr	r6, [pc, #116]	; (403c90 <usart_serial_getchar+0xb8>)
  403c1a:	4621      	mov	r1, r4
  403c1c:	4638      	mov	r0, r7
  403c1e:	47b0      	blx	r6
  403c20:	2800      	cmp	r0, #0
  403c22:	d1fa      	bne.n	403c1a <usart_serial_getchar+0x42>
  403c24:	e017      	b.n	403c56 <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403c26:	4b1d      	ldr	r3, [pc, #116]	; (403c9c <usart_serial_getchar+0xc4>)
  403c28:	429d      	cmp	r5, r3
  403c2a:	d107      	bne.n	403c3c <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  403c2c:	461f      	mov	r7, r3
  403c2e:	4e18      	ldr	r6, [pc, #96]	; (403c90 <usart_serial_getchar+0xb8>)
  403c30:	4621      	mov	r1, r4
  403c32:	4638      	mov	r0, r7
  403c34:	47b0      	blx	r6
  403c36:	2800      	cmp	r0, #0
  403c38:	d1fa      	bne.n	403c30 <usart_serial_getchar+0x58>
  403c3a:	e019      	b.n	403c70 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403c3c:	4b18      	ldr	r3, [pc, #96]	; (403ca0 <usart_serial_getchar+0xc8>)
  403c3e:	429d      	cmp	r5, r3
  403c40:	d109      	bne.n	403c56 <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  403c42:	461e      	mov	r6, r3
  403c44:	4d17      	ldr	r5, [pc, #92]	; (403ca4 <usart_serial_getchar+0xcc>)
  403c46:	a901      	add	r1, sp, #4
  403c48:	4630      	mov	r0, r6
  403c4a:	47a8      	blx	r5
  403c4c:	2800      	cmp	r0, #0
  403c4e:	d1fa      	bne.n	403c46 <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  403c50:	9b01      	ldr	r3, [sp, #4]
  403c52:	7023      	strb	r3, [r4, #0]
  403c54:	e018      	b.n	403c88 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403c56:	4b14      	ldr	r3, [pc, #80]	; (403ca8 <usart_serial_getchar+0xd0>)
  403c58:	429d      	cmp	r5, r3
  403c5a:	d109      	bne.n	403c70 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  403c5c:	461e      	mov	r6, r3
  403c5e:	4d11      	ldr	r5, [pc, #68]	; (403ca4 <usart_serial_getchar+0xcc>)
  403c60:	a901      	add	r1, sp, #4
  403c62:	4630      	mov	r0, r6
  403c64:	47a8      	blx	r5
  403c66:	2800      	cmp	r0, #0
  403c68:	d1fa      	bne.n	403c60 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  403c6a:	9b01      	ldr	r3, [sp, #4]
  403c6c:	7023      	strb	r3, [r4, #0]
  403c6e:	e00b      	b.n	403c88 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403c70:	4b0e      	ldr	r3, [pc, #56]	; (403cac <usart_serial_getchar+0xd4>)
  403c72:	429d      	cmp	r5, r3
  403c74:	d108      	bne.n	403c88 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  403c76:	461e      	mov	r6, r3
  403c78:	4d0a      	ldr	r5, [pc, #40]	; (403ca4 <usart_serial_getchar+0xcc>)
  403c7a:	a901      	add	r1, sp, #4
  403c7c:	4630      	mov	r0, r6
  403c7e:	47a8      	blx	r5
  403c80:	2800      	cmp	r0, #0
  403c82:	d1fa      	bne.n	403c7a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  403c84:	9b01      	ldr	r3, [sp, #4]
  403c86:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403c88:	b003      	add	sp, #12
  403c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403c8c:	400e0800 	.word	0x400e0800
  403c90:	004035e5 	.word	0x004035e5
  403c94:	400e0a00 	.word	0x400e0a00
  403c98:	400e1a00 	.word	0x400e1a00
  403c9c:	400e1c00 	.word	0x400e1c00
  403ca0:	40024000 	.word	0x40024000
  403ca4:	004036fd 	.word	0x004036fd
  403ca8:	40028000 	.word	0x40028000
  403cac:	4002c000 	.word	0x4002c000

00403cb0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  403cb0:	b570      	push	{r4, r5, r6, lr}
  403cb2:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403cb4:	4b2a      	ldr	r3, [pc, #168]	; (403d60 <usart_serial_putchar+0xb0>)
  403cb6:	4298      	cmp	r0, r3
  403cb8:	d108      	bne.n	403ccc <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  403cba:	461e      	mov	r6, r3
  403cbc:	4d29      	ldr	r5, [pc, #164]	; (403d64 <usart_serial_putchar+0xb4>)
  403cbe:	4621      	mov	r1, r4
  403cc0:	4630      	mov	r0, r6
  403cc2:	47a8      	blx	r5
  403cc4:	2800      	cmp	r0, #0
  403cc6:	d1fa      	bne.n	403cbe <usart_serial_putchar+0xe>
		return 1;
  403cc8:	2001      	movs	r0, #1
  403cca:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403ccc:	4b26      	ldr	r3, [pc, #152]	; (403d68 <usart_serial_putchar+0xb8>)
  403cce:	4298      	cmp	r0, r3
  403cd0:	d108      	bne.n	403ce4 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  403cd2:	461e      	mov	r6, r3
  403cd4:	4d23      	ldr	r5, [pc, #140]	; (403d64 <usart_serial_putchar+0xb4>)
  403cd6:	4621      	mov	r1, r4
  403cd8:	4630      	mov	r0, r6
  403cda:	47a8      	blx	r5
  403cdc:	2800      	cmp	r0, #0
  403cde:	d1fa      	bne.n	403cd6 <usart_serial_putchar+0x26>
		return 1;
  403ce0:	2001      	movs	r0, #1
  403ce2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403ce4:	4b21      	ldr	r3, [pc, #132]	; (403d6c <usart_serial_putchar+0xbc>)
  403ce6:	4298      	cmp	r0, r3
  403ce8:	d108      	bne.n	403cfc <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  403cea:	461e      	mov	r6, r3
  403cec:	4d1d      	ldr	r5, [pc, #116]	; (403d64 <usart_serial_putchar+0xb4>)
  403cee:	4621      	mov	r1, r4
  403cf0:	4630      	mov	r0, r6
  403cf2:	47a8      	blx	r5
  403cf4:	2800      	cmp	r0, #0
  403cf6:	d1fa      	bne.n	403cee <usart_serial_putchar+0x3e>
		return 1;
  403cf8:	2001      	movs	r0, #1
  403cfa:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403cfc:	4b1c      	ldr	r3, [pc, #112]	; (403d70 <usart_serial_putchar+0xc0>)
  403cfe:	4298      	cmp	r0, r3
  403d00:	d108      	bne.n	403d14 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  403d02:	461e      	mov	r6, r3
  403d04:	4d17      	ldr	r5, [pc, #92]	; (403d64 <usart_serial_putchar+0xb4>)
  403d06:	4621      	mov	r1, r4
  403d08:	4630      	mov	r0, r6
  403d0a:	47a8      	blx	r5
  403d0c:	2800      	cmp	r0, #0
  403d0e:	d1fa      	bne.n	403d06 <usart_serial_putchar+0x56>
		return 1;
  403d10:	2001      	movs	r0, #1
  403d12:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403d14:	4b17      	ldr	r3, [pc, #92]	; (403d74 <usart_serial_putchar+0xc4>)
  403d16:	4298      	cmp	r0, r3
  403d18:	d108      	bne.n	403d2c <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  403d1a:	461e      	mov	r6, r3
  403d1c:	4d16      	ldr	r5, [pc, #88]	; (403d78 <usart_serial_putchar+0xc8>)
  403d1e:	4621      	mov	r1, r4
  403d20:	4630      	mov	r0, r6
  403d22:	47a8      	blx	r5
  403d24:	2800      	cmp	r0, #0
  403d26:	d1fa      	bne.n	403d1e <usart_serial_putchar+0x6e>
		return 1;
  403d28:	2001      	movs	r0, #1
  403d2a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403d2c:	4b13      	ldr	r3, [pc, #76]	; (403d7c <usart_serial_putchar+0xcc>)
  403d2e:	4298      	cmp	r0, r3
  403d30:	d108      	bne.n	403d44 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  403d32:	461e      	mov	r6, r3
  403d34:	4d10      	ldr	r5, [pc, #64]	; (403d78 <usart_serial_putchar+0xc8>)
  403d36:	4621      	mov	r1, r4
  403d38:	4630      	mov	r0, r6
  403d3a:	47a8      	blx	r5
  403d3c:	2800      	cmp	r0, #0
  403d3e:	d1fa      	bne.n	403d36 <usart_serial_putchar+0x86>
		return 1;
  403d40:	2001      	movs	r0, #1
  403d42:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403d44:	4b0e      	ldr	r3, [pc, #56]	; (403d80 <usart_serial_putchar+0xd0>)
  403d46:	4298      	cmp	r0, r3
  403d48:	d108      	bne.n	403d5c <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  403d4a:	461e      	mov	r6, r3
  403d4c:	4d0a      	ldr	r5, [pc, #40]	; (403d78 <usart_serial_putchar+0xc8>)
  403d4e:	4621      	mov	r1, r4
  403d50:	4630      	mov	r0, r6
  403d52:	47a8      	blx	r5
  403d54:	2800      	cmp	r0, #0
  403d56:	d1fa      	bne.n	403d4e <usart_serial_putchar+0x9e>
		return 1;
  403d58:	2001      	movs	r0, #1
  403d5a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  403d5c:	2000      	movs	r0, #0
}
  403d5e:	bd70      	pop	{r4, r5, r6, pc}
  403d60:	400e0800 	.word	0x400e0800
  403d64:	004035d1 	.word	0x004035d1
  403d68:	400e0a00 	.word	0x400e0a00
  403d6c:	400e1a00 	.word	0x400e1a00
  403d70:	400e1c00 	.word	0x400e1c00
  403d74:	40024000 	.word	0x40024000
  403d78:	004036e5 	.word	0x004036e5
  403d7c:	40028000 	.word	0x40028000
  403d80:	4002c000 	.word	0x4002c000

00403d84 <main>:
 * Initialize system, UART console, network then test function of TCP server.
 *
 * \return program return value.
 */
int main(void)
{
  403d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  403d86:	b093      	sub	sp, #76	; 0x4c
	tstrWifiInitParam param;
	int8_t ret;
	struct sockaddr_in addr;

	/* Initialize the board. */
	sysclk_init();
  403d88:	4b48      	ldr	r3, [pc, #288]	; (403eac <main+0x128>)
  403d8a:	4798      	blx	r3
	board_init();
  403d8c:	4b48      	ldr	r3, [pc, #288]	; (403eb0 <main+0x12c>)
  403d8e:	4798      	blx	r3
  403d90:	200e      	movs	r0, #14
  403d92:	4e48      	ldr	r6, [pc, #288]	; (403eb4 <main+0x130>)
  403d94:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403d96:	4d48      	ldr	r5, [pc, #288]	; (403eb8 <main+0x134>)
  403d98:	4b48      	ldr	r3, [pc, #288]	; (403ebc <main+0x138>)
  403d9a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403d9c:	4a48      	ldr	r2, [pc, #288]	; (403ec0 <main+0x13c>)
  403d9e:	4b49      	ldr	r3, [pc, #292]	; (403ec4 <main+0x140>)
  403da0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403da2:	4a49      	ldr	r2, [pc, #292]	; (403ec8 <main+0x144>)
  403da4:	4b49      	ldr	r3, [pc, #292]	; (403ecc <main+0x148>)
  403da6:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  403da8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403dac:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  403dae:	23c0      	movs	r3, #192	; 0xc0
  403db0:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  403db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403db6:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  403db8:	2400      	movs	r4, #0
  403dba:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403dbc:	9406      	str	r4, [sp, #24]
  403dbe:	200e      	movs	r0, #14
  403dc0:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403dc2:	4a43      	ldr	r2, [pc, #268]	; (403ed0 <main+0x14c>)
  403dc4:	a902      	add	r1, sp, #8
  403dc6:	4628      	mov	r0, r5
  403dc8:	4b42      	ldr	r3, [pc, #264]	; (403ed4 <main+0x150>)
  403dca:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403dcc:	4628      	mov	r0, r5
  403dce:	4b42      	ldr	r3, [pc, #264]	; (403ed8 <main+0x154>)
  403dd0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403dd2:	4628      	mov	r0, r5
  403dd4:	4b41      	ldr	r3, [pc, #260]	; (403edc <main+0x158>)
  403dd6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403dd8:	4f41      	ldr	r7, [pc, #260]	; (403ee0 <main+0x15c>)
  403dda:	683b      	ldr	r3, [r7, #0]
  403ddc:	4621      	mov	r1, r4
  403dde:	6898      	ldr	r0, [r3, #8]
  403de0:	4d40      	ldr	r5, [pc, #256]	; (403ee4 <main+0x160>)
  403de2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403de4:	683b      	ldr	r3, [r7, #0]
  403de6:	4621      	mov	r1, r4
  403de8:	6858      	ldr	r0, [r3, #4]
  403dea:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  403dec:	483e      	ldr	r0, [pc, #248]	; (403ee8 <main+0x164>)
  403dee:	4b3f      	ldr	r3, [pc, #252]	; (403eec <main+0x168>)
  403df0:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  403df2:	4b3f      	ldr	r3, [pc, #252]	; (403ef0 <main+0x16c>)
  403df4:	4798      	blx	r3

	pmc_enable_periph_clk(LED_PIO_ID);
  403df6:	200c      	movs	r0, #12
  403df8:	47b0      	blx	r6
	pio_set_output(LED_PIO, LED_PIN_MASK, 0, 0, 0);
  403dfa:	9400      	str	r4, [sp, #0]
  403dfc:	4623      	mov	r3, r4
  403dfe:	4622      	mov	r2, r4
  403e00:	f44f 7180 	mov.w	r1, #256	; 0x100
  403e04:	483b      	ldr	r0, [pc, #236]	; (403ef4 <main+0x170>)
  403e06:	4d3c      	ldr	r5, [pc, #240]	; (403ef8 <main+0x174>)
  403e08:	47a8      	blx	r5

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
  403e0a:	2302      	movs	r3, #2
  403e0c:	f8ad 3020 	strh.w	r3, [sp, #32]
	addr.sin_port = _htons(MAIN_SERVER_PORT);
  403e10:	f648 0313 	movw	r3, #34835	; 0x8813
  403e14:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	addr.sin_addr.s_addr = MAIN_SERVER_IP;
  403e18:	4b38      	ldr	r3, [pc, #224]	; (403efc <main+0x178>)
  403e1a:	9309      	str	r3, [sp, #36]	; 0x24

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  403e1c:	940d      	str	r4, [sp, #52]	; 0x34
  403e1e:	940e      	str	r4, [sp, #56]	; 0x38
  403e20:	940f      	str	r4, [sp, #60]	; 0x3c
  403e22:	9410      	str	r4, [sp, #64]	; 0x40
  403e24:	9411      	str	r4, [sp, #68]	; 0x44

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  403e26:	4b36      	ldr	r3, [pc, #216]	; (403f00 <main+0x17c>)
  403e28:	930c      	str	r3, [sp, #48]	; 0x30
	ret = m2m_wifi_init(&param);
  403e2a:	a80c      	add	r0, sp, #48	; 0x30
  403e2c:	4b35      	ldr	r3, [pc, #212]	; (403f04 <main+0x180>)
  403e2e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403e30:	b120      	cbz	r0, 403e3c <main+0xb8>
  403e32:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  403e34:	4834      	ldr	r0, [pc, #208]	; (403f08 <main+0x184>)
  403e36:	4b2d      	ldr	r3, [pc, #180]	; (403eec <main+0x168>)
  403e38:	4798      	blx	r3
  403e3a:	e7fe      	b.n	403e3a <main+0xb6>
		while (1) {
		}
	}

	/* Initialize socket module */
	socketInit();
  403e3c:	4b33      	ldr	r3, [pc, #204]	; (403f0c <main+0x188>)
  403e3e:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);
  403e40:	2100      	movs	r1, #0
  403e42:	4833      	ldr	r0, [pc, #204]	; (403f10 <main+0x18c>)
  403e44:	4b33      	ldr	r3, [pc, #204]	; (403f14 <main+0x190>)
  403e46:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  403e48:	23ff      	movs	r3, #255	; 0xff
  403e4a:	9300      	str	r3, [sp, #0]
  403e4c:	4b32      	ldr	r3, [pc, #200]	; (403f18 <main+0x194>)
  403e4e:	2202      	movs	r2, #2
  403e50:	2109      	movs	r1, #9
  403e52:	4832      	ldr	r0, [pc, #200]	; (403f1c <main+0x198>)
  403e54:	4c32      	ldr	r4, [pc, #200]	; (403f20 <main+0x19c>)
  403e56:	47a0      	blx	r4
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  403e58:	4d32      	ldr	r5, [pc, #200]	; (403f24 <main+0x1a0>)

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  403e5a:	4c33      	ldr	r4, [pc, #204]	; (403f28 <main+0x1a4>)
				if (tcp_client_socket < 0) {
  403e5c:	4e33      	ldr	r6, [pc, #204]	; (403f2c <main+0x1a8>)

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  403e5e:	2000      	movs	r0, #0
  403e60:	47a8      	blx	r5

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  403e62:	7823      	ldrb	r3, [r4, #0]
  403e64:	2b01      	cmp	r3, #1
  403e66:	d1fa      	bne.n	403e5e <main+0xda>
				if (tcp_client_socket < 0) {
  403e68:	f996 3000 	ldrsb.w	r3, [r6]
  403e6c:	2b00      	cmp	r3, #0
  403e6e:	daf6      	bge.n	403e5e <main+0xda>
  				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  403e70:	2200      	movs	r2, #0
  403e72:	2101      	movs	r1, #1
  403e74:	2002      	movs	r0, #2
  403e76:	4b2e      	ldr	r3, [pc, #184]	; (403f30 <main+0x1ac>)
  403e78:	4798      	blx	r3
  403e7a:	7030      	strb	r0, [r6, #0]
  403e7c:	2800      	cmp	r0, #0
  403e7e:	da03      	bge.n	403e88 <main+0x104>
    				printf("main: failed to create TCP client socket error!\r\n");
  403e80:	482c      	ldr	r0, [pc, #176]	; (403f34 <main+0x1b0>)
  403e82:	4b1a      	ldr	r3, [pc, #104]	; (403eec <main+0x168>)
  403e84:	4798      	blx	r3
    				continue;
  403e86:	e7ea      	b.n	403e5e <main+0xda>
  				}

          /* Connect TCP client socket. */
          if (connect(tcp_client_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR ) {
  403e88:	2210      	movs	r2, #16
  403e8a:	a908      	add	r1, sp, #32
  403e8c:	4b2a      	ldr	r3, [pc, #168]	; (403f38 <main+0x1b4>)
  403e8e:	4798      	blx	r3
  403e90:	b138      	cbz	r0, 403ea2 <main+0x11e>
            printf("main: failed to connect socket error!\r\n");
  403e92:	482a      	ldr	r0, [pc, #168]	; (403f3c <main+0x1b8>)
  403e94:	4b15      	ldr	r3, [pc, #84]	; (403eec <main+0x168>)
  403e96:	4798      	blx	r3
            close(tcp_client_socket);
  403e98:	f996 0000 	ldrsb.w	r0, [r6]
  403e9c:	4b28      	ldr	r3, [pc, #160]	; (403f40 <main+0x1bc>)
  403e9e:	4798      	blx	r3
            continue;
  403ea0:	e7dd      	b.n	403e5e <main+0xda>
          }else{
            printf("Conectado ! \n");
  403ea2:	4828      	ldr	r0, [pc, #160]	; (403f44 <main+0x1c0>)
  403ea4:	4b11      	ldr	r3, [pc, #68]	; (403eec <main+0x168>)
  403ea6:	4798      	blx	r3
  403ea8:	e7d9      	b.n	403e5e <main+0xda>
  403eaa:	bf00      	nop
  403eac:	00402c49 	.word	0x00402c49
  403eb0:	00402d45 	.word	0x00402d45
  403eb4:	00403415 	.word	0x00403415
  403eb8:	40028000 	.word	0x40028000
  403ebc:	204015f8 	.word	0x204015f8
  403ec0:	00403cb1 	.word	0x00403cb1
  403ec4:	204015f4 	.word	0x204015f4
  403ec8:	00403bd9 	.word	0x00403bd9
  403ecc:	204015f0 	.word	0x204015f0
  403ed0:	08f0d180 	.word	0x08f0d180
  403ed4:	00403681 	.word	0x00403681
  403ed8:	004036d5 	.word	0x004036d5
  403edc:	004036dd 	.word	0x004036dd
  403ee0:	20400448 	.word	0x20400448
  403ee4:	0040405d 	.word	0x0040405d
  403ee8:	0040b9c4 	.word	0x0040b9c4
  403eec:	00403f99 	.word	0x00403f99
  403ef0:	00400211 	.word	0x00400211
  403ef4:	400e1200 	.word	0x400e1200
  403ef8:	00402fa9 	.word	0x00402fa9
  403efc:	212ba8c0 	.word	0x212ba8c0
  403f00:	00403b59 	.word	0x00403b59
  403f04:	00401039 	.word	0x00401039
  403f08:	0040ba24 	.word	0x0040ba24
  403f0c:	004027d5 	.word	0x004027d5
  403f10:	004039c9 	.word	0x004039c9
  403f14:	00402819 	.word	0x00402819
  403f18:	0040b960 	.word	0x0040b960
  403f1c:	0040b96c 	.word	0x0040b96c
  403f20:	00401385 	.word	0x00401385
  403f24:	00401135 	.word	0x00401135
  403f28:	204014f8 	.word	0x204014f8
  403f2c:	2040001c 	.word	0x2040001c
  403f30:	0040282d 	.word	0x0040282d
  403f34:	0040ba4c 	.word	0x0040ba4c
  403f38:	0040290d 	.word	0x0040290d
  403f3c:	0040ba80 	.word	0x0040ba80
  403f40:	00402ae1 	.word	0x00402ae1
  403f44:	0040baa8 	.word	0x0040baa8

00403f48 <__libc_init_array>:
  403f48:	b570      	push	{r4, r5, r6, lr}
  403f4a:	4e0f      	ldr	r6, [pc, #60]	; (403f88 <__libc_init_array+0x40>)
  403f4c:	4d0f      	ldr	r5, [pc, #60]	; (403f8c <__libc_init_array+0x44>)
  403f4e:	1b76      	subs	r6, r6, r5
  403f50:	10b6      	asrs	r6, r6, #2
  403f52:	bf18      	it	ne
  403f54:	2400      	movne	r4, #0
  403f56:	d005      	beq.n	403f64 <__libc_init_array+0x1c>
  403f58:	3401      	adds	r4, #1
  403f5a:	f855 3b04 	ldr.w	r3, [r5], #4
  403f5e:	4798      	blx	r3
  403f60:	42a6      	cmp	r6, r4
  403f62:	d1f9      	bne.n	403f58 <__libc_init_array+0x10>
  403f64:	4e0a      	ldr	r6, [pc, #40]	; (403f90 <__libc_init_array+0x48>)
  403f66:	4d0b      	ldr	r5, [pc, #44]	; (403f94 <__libc_init_array+0x4c>)
  403f68:	1b76      	subs	r6, r6, r5
  403f6a:	f007 fe77 	bl	40bc5c <_init>
  403f6e:	10b6      	asrs	r6, r6, #2
  403f70:	bf18      	it	ne
  403f72:	2400      	movne	r4, #0
  403f74:	d006      	beq.n	403f84 <__libc_init_array+0x3c>
  403f76:	3401      	adds	r4, #1
  403f78:	f855 3b04 	ldr.w	r3, [r5], #4
  403f7c:	4798      	blx	r3
  403f7e:	42a6      	cmp	r6, r4
  403f80:	d1f9      	bne.n	403f76 <__libc_init_array+0x2e>
  403f82:	bd70      	pop	{r4, r5, r6, pc}
  403f84:	bd70      	pop	{r4, r5, r6, pc}
  403f86:	bf00      	nop
  403f88:	0040bc68 	.word	0x0040bc68
  403f8c:	0040bc68 	.word	0x0040bc68
  403f90:	0040bc70 	.word	0x0040bc70
  403f94:	0040bc68 	.word	0x0040bc68

00403f98 <iprintf>:
  403f98:	b40f      	push	{r0, r1, r2, r3}
  403f9a:	b500      	push	{lr}
  403f9c:	4907      	ldr	r1, [pc, #28]	; (403fbc <iprintf+0x24>)
  403f9e:	b083      	sub	sp, #12
  403fa0:	ab04      	add	r3, sp, #16
  403fa2:	6808      	ldr	r0, [r1, #0]
  403fa4:	f853 2b04 	ldr.w	r2, [r3], #4
  403fa8:	6881      	ldr	r1, [r0, #8]
  403faa:	9301      	str	r3, [sp, #4]
  403fac:	f001 fea0 	bl	405cf0 <_vfiprintf_r>
  403fb0:	b003      	add	sp, #12
  403fb2:	f85d eb04 	ldr.w	lr, [sp], #4
  403fb6:	b004      	add	sp, #16
  403fb8:	4770      	bx	lr
  403fba:	bf00      	nop
  403fbc:	20400448 	.word	0x20400448

00403fc0 <memset>:
  403fc0:	b470      	push	{r4, r5, r6}
  403fc2:	0784      	lsls	r4, r0, #30
  403fc4:	d046      	beq.n	404054 <memset+0x94>
  403fc6:	1e54      	subs	r4, r2, #1
  403fc8:	2a00      	cmp	r2, #0
  403fca:	d041      	beq.n	404050 <memset+0x90>
  403fcc:	b2cd      	uxtb	r5, r1
  403fce:	4603      	mov	r3, r0
  403fd0:	e002      	b.n	403fd8 <memset+0x18>
  403fd2:	1e62      	subs	r2, r4, #1
  403fd4:	b3e4      	cbz	r4, 404050 <memset+0x90>
  403fd6:	4614      	mov	r4, r2
  403fd8:	f803 5b01 	strb.w	r5, [r3], #1
  403fdc:	079a      	lsls	r2, r3, #30
  403fde:	d1f8      	bne.n	403fd2 <memset+0x12>
  403fe0:	2c03      	cmp	r4, #3
  403fe2:	d92e      	bls.n	404042 <memset+0x82>
  403fe4:	b2cd      	uxtb	r5, r1
  403fe6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403fea:	2c0f      	cmp	r4, #15
  403fec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403ff0:	d919      	bls.n	404026 <memset+0x66>
  403ff2:	f103 0210 	add.w	r2, r3, #16
  403ff6:	4626      	mov	r6, r4
  403ff8:	3e10      	subs	r6, #16
  403ffa:	2e0f      	cmp	r6, #15
  403ffc:	f842 5c10 	str.w	r5, [r2, #-16]
  404000:	f842 5c0c 	str.w	r5, [r2, #-12]
  404004:	f842 5c08 	str.w	r5, [r2, #-8]
  404008:	f842 5c04 	str.w	r5, [r2, #-4]
  40400c:	f102 0210 	add.w	r2, r2, #16
  404010:	d8f2      	bhi.n	403ff8 <memset+0x38>
  404012:	f1a4 0210 	sub.w	r2, r4, #16
  404016:	f022 020f 	bic.w	r2, r2, #15
  40401a:	f004 040f 	and.w	r4, r4, #15
  40401e:	3210      	adds	r2, #16
  404020:	2c03      	cmp	r4, #3
  404022:	4413      	add	r3, r2
  404024:	d90d      	bls.n	404042 <memset+0x82>
  404026:	461e      	mov	r6, r3
  404028:	4622      	mov	r2, r4
  40402a:	3a04      	subs	r2, #4
  40402c:	2a03      	cmp	r2, #3
  40402e:	f846 5b04 	str.w	r5, [r6], #4
  404032:	d8fa      	bhi.n	40402a <memset+0x6a>
  404034:	1f22      	subs	r2, r4, #4
  404036:	f022 0203 	bic.w	r2, r2, #3
  40403a:	3204      	adds	r2, #4
  40403c:	4413      	add	r3, r2
  40403e:	f004 0403 	and.w	r4, r4, #3
  404042:	b12c      	cbz	r4, 404050 <memset+0x90>
  404044:	b2c9      	uxtb	r1, r1
  404046:	441c      	add	r4, r3
  404048:	f803 1b01 	strb.w	r1, [r3], #1
  40404c:	42a3      	cmp	r3, r4
  40404e:	d1fb      	bne.n	404048 <memset+0x88>
  404050:	bc70      	pop	{r4, r5, r6}
  404052:	4770      	bx	lr
  404054:	4614      	mov	r4, r2
  404056:	4603      	mov	r3, r0
  404058:	e7c2      	b.n	403fe0 <memset+0x20>
  40405a:	bf00      	nop

0040405c <setbuf>:
  40405c:	2900      	cmp	r1, #0
  40405e:	bf0c      	ite	eq
  404060:	2202      	moveq	r2, #2
  404062:	2200      	movne	r2, #0
  404064:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404068:	f000 b800 	b.w	40406c <setvbuf>

0040406c <setvbuf>:
  40406c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404070:	4c51      	ldr	r4, [pc, #324]	; (4041b8 <setvbuf+0x14c>)
  404072:	6825      	ldr	r5, [r4, #0]
  404074:	b083      	sub	sp, #12
  404076:	4604      	mov	r4, r0
  404078:	460f      	mov	r7, r1
  40407a:	4690      	mov	r8, r2
  40407c:	461e      	mov	r6, r3
  40407e:	b115      	cbz	r5, 404086 <setvbuf+0x1a>
  404080:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404082:	2b00      	cmp	r3, #0
  404084:	d079      	beq.n	40417a <setvbuf+0x10e>
  404086:	f1b8 0f02 	cmp.w	r8, #2
  40408a:	d004      	beq.n	404096 <setvbuf+0x2a>
  40408c:	f1b8 0f01 	cmp.w	r8, #1
  404090:	d87f      	bhi.n	404192 <setvbuf+0x126>
  404092:	2e00      	cmp	r6, #0
  404094:	db7d      	blt.n	404192 <setvbuf+0x126>
  404096:	4621      	mov	r1, r4
  404098:	4628      	mov	r0, r5
  40409a:	f003 fe35 	bl	407d08 <_fflush_r>
  40409e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4040a0:	b141      	cbz	r1, 4040b4 <setvbuf+0x48>
  4040a2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4040a6:	4299      	cmp	r1, r3
  4040a8:	d002      	beq.n	4040b0 <setvbuf+0x44>
  4040aa:	4628      	mov	r0, r5
  4040ac:	f003 ff8a 	bl	407fc4 <_free_r>
  4040b0:	2300      	movs	r3, #0
  4040b2:	6323      	str	r3, [r4, #48]	; 0x30
  4040b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4040b8:	2200      	movs	r2, #0
  4040ba:	61a2      	str	r2, [r4, #24]
  4040bc:	6062      	str	r2, [r4, #4]
  4040be:	061a      	lsls	r2, r3, #24
  4040c0:	d454      	bmi.n	40416c <setvbuf+0x100>
  4040c2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4040c6:	f023 0303 	bic.w	r3, r3, #3
  4040ca:	f1b8 0f02 	cmp.w	r8, #2
  4040ce:	81a3      	strh	r3, [r4, #12]
  4040d0:	d039      	beq.n	404146 <setvbuf+0xda>
  4040d2:	ab01      	add	r3, sp, #4
  4040d4:	466a      	mov	r2, sp
  4040d6:	4621      	mov	r1, r4
  4040d8:	4628      	mov	r0, r5
  4040da:	f004 fa15 	bl	408508 <__swhatbuf_r>
  4040de:	89a3      	ldrh	r3, [r4, #12]
  4040e0:	4318      	orrs	r0, r3
  4040e2:	81a0      	strh	r0, [r4, #12]
  4040e4:	b326      	cbz	r6, 404130 <setvbuf+0xc4>
  4040e6:	b327      	cbz	r7, 404132 <setvbuf+0xc6>
  4040e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4040ea:	2b00      	cmp	r3, #0
  4040ec:	d04d      	beq.n	40418a <setvbuf+0x11e>
  4040ee:	9b00      	ldr	r3, [sp, #0]
  4040f0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4040f4:	6027      	str	r7, [r4, #0]
  4040f6:	429e      	cmp	r6, r3
  4040f8:	bf1c      	itt	ne
  4040fa:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4040fe:	81a0      	strhne	r0, [r4, #12]
  404100:	f1b8 0f01 	cmp.w	r8, #1
  404104:	bf08      	it	eq
  404106:	f040 0001 	orreq.w	r0, r0, #1
  40410a:	b283      	uxth	r3, r0
  40410c:	bf08      	it	eq
  40410e:	81a0      	strheq	r0, [r4, #12]
  404110:	f003 0008 	and.w	r0, r3, #8
  404114:	b280      	uxth	r0, r0
  404116:	6127      	str	r7, [r4, #16]
  404118:	6166      	str	r6, [r4, #20]
  40411a:	b318      	cbz	r0, 404164 <setvbuf+0xf8>
  40411c:	f013 0001 	ands.w	r0, r3, #1
  404120:	d02f      	beq.n	404182 <setvbuf+0x116>
  404122:	2000      	movs	r0, #0
  404124:	4276      	negs	r6, r6
  404126:	61a6      	str	r6, [r4, #24]
  404128:	60a0      	str	r0, [r4, #8]
  40412a:	b003      	add	sp, #12
  40412c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404130:	9e00      	ldr	r6, [sp, #0]
  404132:	4630      	mov	r0, r6
  404134:	f004 fa5c 	bl	4085f0 <malloc>
  404138:	4607      	mov	r7, r0
  40413a:	b368      	cbz	r0, 404198 <setvbuf+0x12c>
  40413c:	89a3      	ldrh	r3, [r4, #12]
  40413e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404142:	81a3      	strh	r3, [r4, #12]
  404144:	e7d0      	b.n	4040e8 <setvbuf+0x7c>
  404146:	2000      	movs	r0, #0
  404148:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40414c:	f043 0302 	orr.w	r3, r3, #2
  404150:	2500      	movs	r5, #0
  404152:	2101      	movs	r1, #1
  404154:	81a3      	strh	r3, [r4, #12]
  404156:	60a5      	str	r5, [r4, #8]
  404158:	6022      	str	r2, [r4, #0]
  40415a:	6122      	str	r2, [r4, #16]
  40415c:	6161      	str	r1, [r4, #20]
  40415e:	b003      	add	sp, #12
  404160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404164:	60a0      	str	r0, [r4, #8]
  404166:	b003      	add	sp, #12
  404168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40416c:	6921      	ldr	r1, [r4, #16]
  40416e:	4628      	mov	r0, r5
  404170:	f003 ff28 	bl	407fc4 <_free_r>
  404174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404178:	e7a3      	b.n	4040c2 <setvbuf+0x56>
  40417a:	4628      	mov	r0, r5
  40417c:	f003 fe58 	bl	407e30 <__sinit>
  404180:	e781      	b.n	404086 <setvbuf+0x1a>
  404182:	60a6      	str	r6, [r4, #8]
  404184:	b003      	add	sp, #12
  404186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40418a:	4628      	mov	r0, r5
  40418c:	f003 fe50 	bl	407e30 <__sinit>
  404190:	e7ad      	b.n	4040ee <setvbuf+0x82>
  404192:	f04f 30ff 	mov.w	r0, #4294967295
  404196:	e7e2      	b.n	40415e <setvbuf+0xf2>
  404198:	f8dd 9000 	ldr.w	r9, [sp]
  40419c:	45b1      	cmp	r9, r6
  40419e:	d006      	beq.n	4041ae <setvbuf+0x142>
  4041a0:	4648      	mov	r0, r9
  4041a2:	f004 fa25 	bl	4085f0 <malloc>
  4041a6:	4607      	mov	r7, r0
  4041a8:	b108      	cbz	r0, 4041ae <setvbuf+0x142>
  4041aa:	464e      	mov	r6, r9
  4041ac:	e7c6      	b.n	40413c <setvbuf+0xd0>
  4041ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041b2:	f04f 30ff 	mov.w	r0, #4294967295
  4041b6:	e7c7      	b.n	404148 <setvbuf+0xdc>
  4041b8:	20400448 	.word	0x20400448

004041bc <sprintf>:
  4041bc:	b40e      	push	{r1, r2, r3}
  4041be:	b5f0      	push	{r4, r5, r6, r7, lr}
  4041c0:	b09c      	sub	sp, #112	; 0x70
  4041c2:	ab21      	add	r3, sp, #132	; 0x84
  4041c4:	490f      	ldr	r1, [pc, #60]	; (404204 <sprintf+0x48>)
  4041c6:	f853 2b04 	ldr.w	r2, [r3], #4
  4041ca:	9301      	str	r3, [sp, #4]
  4041cc:	4605      	mov	r5, r0
  4041ce:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4041d2:	6808      	ldr	r0, [r1, #0]
  4041d4:	9502      	str	r5, [sp, #8]
  4041d6:	f44f 7702 	mov.w	r7, #520	; 0x208
  4041da:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4041de:	a902      	add	r1, sp, #8
  4041e0:	9506      	str	r5, [sp, #24]
  4041e2:	f8ad 7014 	strh.w	r7, [sp, #20]
  4041e6:	9404      	str	r4, [sp, #16]
  4041e8:	9407      	str	r4, [sp, #28]
  4041ea:	f8ad 6016 	strh.w	r6, [sp, #22]
  4041ee:	f000 f9f5 	bl	4045dc <_svfprintf_r>
  4041f2:	9b02      	ldr	r3, [sp, #8]
  4041f4:	2200      	movs	r2, #0
  4041f6:	701a      	strb	r2, [r3, #0]
  4041f8:	b01c      	add	sp, #112	; 0x70
  4041fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4041fe:	b003      	add	sp, #12
  404200:	4770      	bx	lr
  404202:	bf00      	nop
  404204:	20400448 	.word	0x20400448
	...
  404220:	eba2 0003 	sub.w	r0, r2, r3
  404224:	4770      	bx	lr
  404226:	bf00      	nop

00404228 <strcmp>:
  404228:	7802      	ldrb	r2, [r0, #0]
  40422a:	780b      	ldrb	r3, [r1, #0]
  40422c:	2a01      	cmp	r2, #1
  40422e:	bf28      	it	cs
  404230:	429a      	cmpcs	r2, r3
  404232:	d1f5      	bne.n	404220 <sprintf+0x64>
  404234:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  404238:	ea40 0401 	orr.w	r4, r0, r1
  40423c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  404240:	f06f 0c00 	mvn.w	ip, #0
  404244:	ea4f 7244 	mov.w	r2, r4, lsl #29
  404248:	b312      	cbz	r2, 404290 <strcmp+0x68>
  40424a:	ea80 0401 	eor.w	r4, r0, r1
  40424e:	f014 0f07 	tst.w	r4, #7
  404252:	d16a      	bne.n	40432a <strcmp+0x102>
  404254:	f000 0407 	and.w	r4, r0, #7
  404258:	f020 0007 	bic.w	r0, r0, #7
  40425c:	f004 0503 	and.w	r5, r4, #3
  404260:	f021 0107 	bic.w	r1, r1, #7
  404264:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404268:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40426c:	f014 0f04 	tst.w	r4, #4
  404270:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  404274:	fa0c f405 	lsl.w	r4, ip, r5
  404278:	ea62 0204 	orn	r2, r2, r4
  40427c:	ea66 0604 	orn	r6, r6, r4
  404280:	d00a      	beq.n	404298 <strcmp+0x70>
  404282:	ea63 0304 	orn	r3, r3, r4
  404286:	4662      	mov	r2, ip
  404288:	ea67 0704 	orn	r7, r7, r4
  40428c:	4666      	mov	r6, ip
  40428e:	e003      	b.n	404298 <strcmp+0x70>
  404290:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  404294:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  404298:	fa82 f54c 	uadd8	r5, r2, ip
  40429c:	ea82 0406 	eor.w	r4, r2, r6
  4042a0:	faa4 f48c 	sel	r4, r4, ip
  4042a4:	bb6c      	cbnz	r4, 404302 <strcmp+0xda>
  4042a6:	fa83 f54c 	uadd8	r5, r3, ip
  4042aa:	ea83 0507 	eor.w	r5, r3, r7
  4042ae:	faa5 f58c 	sel	r5, r5, ip
  4042b2:	b995      	cbnz	r5, 4042da <strcmp+0xb2>
  4042b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  4042b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  4042bc:	fa82 f54c 	uadd8	r5, r2, ip
  4042c0:	ea82 0406 	eor.w	r4, r2, r6
  4042c4:	faa4 f48c 	sel	r4, r4, ip
  4042c8:	fa83 f54c 	uadd8	r5, r3, ip
  4042cc:	ea83 0507 	eor.w	r5, r3, r7
  4042d0:	faa5 f58c 	sel	r5, r5, ip
  4042d4:	4325      	orrs	r5, r4
  4042d6:	d0db      	beq.n	404290 <strcmp+0x68>
  4042d8:	b99c      	cbnz	r4, 404302 <strcmp+0xda>
  4042da:	ba2d      	rev	r5, r5
  4042dc:	fab5 f485 	clz	r4, r5
  4042e0:	f024 0407 	bic.w	r4, r4, #7
  4042e4:	fa27 f104 	lsr.w	r1, r7, r4
  4042e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4042ec:	fa23 f304 	lsr.w	r3, r3, r4
  4042f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4042f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4042f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4042fc:	eba0 0001 	sub.w	r0, r0, r1
  404300:	4770      	bx	lr
  404302:	ba24      	rev	r4, r4
  404304:	fab4 f484 	clz	r4, r4
  404308:	f024 0407 	bic.w	r4, r4, #7
  40430c:	fa26 f104 	lsr.w	r1, r6, r4
  404310:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  404314:	fa22 f204 	lsr.w	r2, r2, r4
  404318:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40431c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404320:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404324:	eba0 0001 	sub.w	r0, r0, r1
  404328:	4770      	bx	lr
  40432a:	f014 0f03 	tst.w	r4, #3
  40432e:	d13c      	bne.n	4043aa <strcmp+0x182>
  404330:	f010 0403 	ands.w	r4, r0, #3
  404334:	d128      	bne.n	404388 <strcmp+0x160>
  404336:	f850 2b08 	ldr.w	r2, [r0], #8
  40433a:	f851 3b08 	ldr.w	r3, [r1], #8
  40433e:	fa82 f54c 	uadd8	r5, r2, ip
  404342:	ea82 0503 	eor.w	r5, r2, r3
  404346:	faa5 f58c 	sel	r5, r5, ip
  40434a:	b95d      	cbnz	r5, 404364 <strcmp+0x13c>
  40434c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  404350:	f851 3c04 	ldr.w	r3, [r1, #-4]
  404354:	fa82 f54c 	uadd8	r5, r2, ip
  404358:	ea82 0503 	eor.w	r5, r2, r3
  40435c:	faa5 f58c 	sel	r5, r5, ip
  404360:	2d00      	cmp	r5, #0
  404362:	d0e8      	beq.n	404336 <strcmp+0x10e>
  404364:	ba2d      	rev	r5, r5
  404366:	fab5 f485 	clz	r4, r5
  40436a:	f024 0407 	bic.w	r4, r4, #7
  40436e:	fa23 f104 	lsr.w	r1, r3, r4
  404372:	fa22 f204 	lsr.w	r2, r2, r4
  404376:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40437a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40437e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404382:	eba0 0001 	sub.w	r0, r0, r1
  404386:	4770      	bx	lr
  404388:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40438c:	f020 0003 	bic.w	r0, r0, #3
  404390:	f850 2b08 	ldr.w	r2, [r0], #8
  404394:	f021 0103 	bic.w	r1, r1, #3
  404398:	f851 3b08 	ldr.w	r3, [r1], #8
  40439c:	fa0c f404 	lsl.w	r4, ip, r4
  4043a0:	ea62 0204 	orn	r2, r2, r4
  4043a4:	ea63 0304 	orn	r3, r3, r4
  4043a8:	e7c9      	b.n	40433e <strcmp+0x116>
  4043aa:	f010 0403 	ands.w	r4, r0, #3
  4043ae:	d01a      	beq.n	4043e6 <strcmp+0x1be>
  4043b0:	eba1 0104 	sub.w	r1, r1, r4
  4043b4:	f020 0003 	bic.w	r0, r0, #3
  4043b8:	07e4      	lsls	r4, r4, #31
  4043ba:	f850 2b04 	ldr.w	r2, [r0], #4
  4043be:	d006      	beq.n	4043ce <strcmp+0x1a6>
  4043c0:	d20f      	bcs.n	4043e2 <strcmp+0x1ba>
  4043c2:	788b      	ldrb	r3, [r1, #2]
  4043c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  4043c8:	1ae4      	subs	r4, r4, r3
  4043ca:	d106      	bne.n	4043da <strcmp+0x1b2>
  4043cc:	b12b      	cbz	r3, 4043da <strcmp+0x1b2>
  4043ce:	78cb      	ldrb	r3, [r1, #3]
  4043d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  4043d4:	1ae4      	subs	r4, r4, r3
  4043d6:	d100      	bne.n	4043da <strcmp+0x1b2>
  4043d8:	b91b      	cbnz	r3, 4043e2 <strcmp+0x1ba>
  4043da:	4620      	mov	r0, r4
  4043dc:	f85d 4b10 	ldr.w	r4, [sp], #16
  4043e0:	4770      	bx	lr
  4043e2:	f101 0104 	add.w	r1, r1, #4
  4043e6:	f850 2b04 	ldr.w	r2, [r0], #4
  4043ea:	07cc      	lsls	r4, r1, #31
  4043ec:	f021 0103 	bic.w	r1, r1, #3
  4043f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043f4:	d848      	bhi.n	404488 <strcmp+0x260>
  4043f6:	d224      	bcs.n	404442 <strcmp+0x21a>
  4043f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  4043fc:	fa82 f54c 	uadd8	r5, r2, ip
  404400:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  404404:	faa5 f58c 	sel	r5, r5, ip
  404408:	d10a      	bne.n	404420 <strcmp+0x1f8>
  40440a:	b965      	cbnz	r5, 404426 <strcmp+0x1fe>
  40440c:	f851 3b04 	ldr.w	r3, [r1], #4
  404410:	ea84 0402 	eor.w	r4, r4, r2
  404414:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  404418:	d10e      	bne.n	404438 <strcmp+0x210>
  40441a:	f850 2b04 	ldr.w	r2, [r0], #4
  40441e:	e7eb      	b.n	4043f8 <strcmp+0x1d0>
  404420:	ea4f 2313 	mov.w	r3, r3, lsr #8
  404424:	e055      	b.n	4044d2 <strcmp+0x2aa>
  404426:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40442a:	d14d      	bne.n	4044c8 <strcmp+0x2a0>
  40442c:	7808      	ldrb	r0, [r1, #0]
  40442e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404432:	f1c0 0000 	rsb	r0, r0, #0
  404436:	4770      	bx	lr
  404438:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40443c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  404440:	e047      	b.n	4044d2 <strcmp+0x2aa>
  404442:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  404446:	fa82 f54c 	uadd8	r5, r2, ip
  40444a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40444e:	faa5 f58c 	sel	r5, r5, ip
  404452:	d10a      	bne.n	40446a <strcmp+0x242>
  404454:	b965      	cbnz	r5, 404470 <strcmp+0x248>
  404456:	f851 3b04 	ldr.w	r3, [r1], #4
  40445a:	ea84 0402 	eor.w	r4, r4, r2
  40445e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  404462:	d10c      	bne.n	40447e <strcmp+0x256>
  404464:	f850 2b04 	ldr.w	r2, [r0], #4
  404468:	e7eb      	b.n	404442 <strcmp+0x21a>
  40446a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40446e:	e030      	b.n	4044d2 <strcmp+0x2aa>
  404470:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  404474:	d128      	bne.n	4044c8 <strcmp+0x2a0>
  404476:	880b      	ldrh	r3, [r1, #0]
  404478:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40447c:	e029      	b.n	4044d2 <strcmp+0x2aa>
  40447e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  404482:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  404486:	e024      	b.n	4044d2 <strcmp+0x2aa>
  404488:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40448c:	fa82 f54c 	uadd8	r5, r2, ip
  404490:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  404494:	faa5 f58c 	sel	r5, r5, ip
  404498:	d10a      	bne.n	4044b0 <strcmp+0x288>
  40449a:	b965      	cbnz	r5, 4044b6 <strcmp+0x28e>
  40449c:	f851 3b04 	ldr.w	r3, [r1], #4
  4044a0:	ea84 0402 	eor.w	r4, r4, r2
  4044a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  4044a8:	d109      	bne.n	4044be <strcmp+0x296>
  4044aa:	f850 2b04 	ldr.w	r2, [r0], #4
  4044ae:	e7eb      	b.n	404488 <strcmp+0x260>
  4044b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  4044b4:	e00d      	b.n	4044d2 <strcmp+0x2aa>
  4044b6:	f015 0fff 	tst.w	r5, #255	; 0xff
  4044ba:	d105      	bne.n	4044c8 <strcmp+0x2a0>
  4044bc:	680b      	ldr	r3, [r1, #0]
  4044be:	ea4f 2212 	mov.w	r2, r2, lsr #8
  4044c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4044c6:	e004      	b.n	4044d2 <strcmp+0x2aa>
  4044c8:	f04f 0000 	mov.w	r0, #0
  4044cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4044d0:	4770      	bx	lr
  4044d2:	ba12      	rev	r2, r2
  4044d4:	ba1b      	rev	r3, r3
  4044d6:	fa82 f44c 	uadd8	r4, r2, ip
  4044da:	ea82 0403 	eor.w	r4, r2, r3
  4044de:	faa4 f58c 	sel	r5, r4, ip
  4044e2:	fab5 f485 	clz	r4, r5
  4044e6:	fa02 f204 	lsl.w	r2, r2, r4
  4044ea:	fa03 f304 	lsl.w	r3, r3, r4
  4044ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
  4044f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4044f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  4044fa:	4770      	bx	lr
  4044fc:	0000      	movs	r0, r0
	...

00404500 <strlen>:
  404500:	f890 f000 	pld	[r0]
  404504:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404508:	f020 0107 	bic.w	r1, r0, #7
  40450c:	f06f 0c00 	mvn.w	ip, #0
  404510:	f010 0407 	ands.w	r4, r0, #7
  404514:	f891 f020 	pld	[r1, #32]
  404518:	f040 8049 	bne.w	4045ae <strlen+0xae>
  40451c:	f04f 0400 	mov.w	r4, #0
  404520:	f06f 0007 	mvn.w	r0, #7
  404524:	e9d1 2300 	ldrd	r2, r3, [r1]
  404528:	f891 f040 	pld	[r1, #64]	; 0x40
  40452c:	f100 0008 	add.w	r0, r0, #8
  404530:	fa82 f24c 	uadd8	r2, r2, ip
  404534:	faa4 f28c 	sel	r2, r4, ip
  404538:	fa83 f34c 	uadd8	r3, r3, ip
  40453c:	faa2 f38c 	sel	r3, r2, ip
  404540:	bb4b      	cbnz	r3, 404596 <strlen+0x96>
  404542:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404546:	fa82 f24c 	uadd8	r2, r2, ip
  40454a:	f100 0008 	add.w	r0, r0, #8
  40454e:	faa4 f28c 	sel	r2, r4, ip
  404552:	fa83 f34c 	uadd8	r3, r3, ip
  404556:	faa2 f38c 	sel	r3, r2, ip
  40455a:	b9e3      	cbnz	r3, 404596 <strlen+0x96>
  40455c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404560:	fa82 f24c 	uadd8	r2, r2, ip
  404564:	f100 0008 	add.w	r0, r0, #8
  404568:	faa4 f28c 	sel	r2, r4, ip
  40456c:	fa83 f34c 	uadd8	r3, r3, ip
  404570:	faa2 f38c 	sel	r3, r2, ip
  404574:	b97b      	cbnz	r3, 404596 <strlen+0x96>
  404576:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40457a:	f101 0120 	add.w	r1, r1, #32
  40457e:	fa82 f24c 	uadd8	r2, r2, ip
  404582:	f100 0008 	add.w	r0, r0, #8
  404586:	faa4 f28c 	sel	r2, r4, ip
  40458a:	fa83 f34c 	uadd8	r3, r3, ip
  40458e:	faa2 f38c 	sel	r3, r2, ip
  404592:	2b00      	cmp	r3, #0
  404594:	d0c6      	beq.n	404524 <strlen+0x24>
  404596:	2a00      	cmp	r2, #0
  404598:	bf04      	itt	eq
  40459a:	3004      	addeq	r0, #4
  40459c:	461a      	moveq	r2, r3
  40459e:	ba12      	rev	r2, r2
  4045a0:	fab2 f282 	clz	r2, r2
  4045a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4045a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4045ac:	4770      	bx	lr
  4045ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4045b2:	f004 0503 	and.w	r5, r4, #3
  4045b6:	f1c4 0000 	rsb	r0, r4, #0
  4045ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4045be:	f014 0f04 	tst.w	r4, #4
  4045c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4045c6:	fa0c f505 	lsl.w	r5, ip, r5
  4045ca:	ea62 0205 	orn	r2, r2, r5
  4045ce:	bf1c      	itt	ne
  4045d0:	ea63 0305 	ornne	r3, r3, r5
  4045d4:	4662      	movne	r2, ip
  4045d6:	f04f 0400 	mov.w	r4, #0
  4045da:	e7a9      	b.n	404530 <strlen+0x30>

004045dc <_svfprintf_r>:
  4045dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045e0:	b0c1      	sub	sp, #260	; 0x104
  4045e2:	460c      	mov	r4, r1
  4045e4:	9109      	str	r1, [sp, #36]	; 0x24
  4045e6:	4615      	mov	r5, r2
  4045e8:	930e      	str	r3, [sp, #56]	; 0x38
  4045ea:	900a      	str	r0, [sp, #40]	; 0x28
  4045ec:	f003 ff88 	bl	408500 <_localeconv_r>
  4045f0:	6803      	ldr	r3, [r0, #0]
  4045f2:	9317      	str	r3, [sp, #92]	; 0x5c
  4045f4:	4618      	mov	r0, r3
  4045f6:	f7ff ff83 	bl	404500 <strlen>
  4045fa:	89a3      	ldrh	r3, [r4, #12]
  4045fc:	9016      	str	r0, [sp, #88]	; 0x58
  4045fe:	061e      	lsls	r6, r3, #24
  404600:	d503      	bpl.n	40460a <_svfprintf_r+0x2e>
  404602:	6923      	ldr	r3, [r4, #16]
  404604:	2b00      	cmp	r3, #0
  404606:	f001 8119 	beq.w	40583c <_svfprintf_r+0x1260>
  40460a:	2300      	movs	r3, #0
  40460c:	461a      	mov	r2, r3
  40460e:	9312      	str	r3, [sp, #72]	; 0x48
  404610:	9325      	str	r3, [sp, #148]	; 0x94
  404612:	9324      	str	r3, [sp, #144]	; 0x90
  404614:	9319      	str	r3, [sp, #100]	; 0x64
  404616:	930b      	str	r3, [sp, #44]	; 0x2c
  404618:	f8df a464 	ldr.w	sl, [pc, #1124]	; 404a80 <_svfprintf_r+0x4a4>
  40461c:	9214      	str	r2, [sp, #80]	; 0x50
  40461e:	ab30      	add	r3, sp, #192	; 0xc0
  404620:	9323      	str	r3, [sp, #140]	; 0x8c
  404622:	4699      	mov	r9, r3
  404624:	9215      	str	r2, [sp, #84]	; 0x54
  404626:	46a8      	mov	r8, r5
  404628:	f898 3000 	ldrb.w	r3, [r8]
  40462c:	4644      	mov	r4, r8
  40462e:	b1eb      	cbz	r3, 40466c <_svfprintf_r+0x90>
  404630:	2b25      	cmp	r3, #37	; 0x25
  404632:	d102      	bne.n	40463a <_svfprintf_r+0x5e>
  404634:	e01a      	b.n	40466c <_svfprintf_r+0x90>
  404636:	2b25      	cmp	r3, #37	; 0x25
  404638:	d003      	beq.n	404642 <_svfprintf_r+0x66>
  40463a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40463e:	2b00      	cmp	r3, #0
  404640:	d1f9      	bne.n	404636 <_svfprintf_r+0x5a>
  404642:	ebc8 0504 	rsb	r5, r8, r4
  404646:	b18d      	cbz	r5, 40466c <_svfprintf_r+0x90>
  404648:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40464a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40464c:	f8c9 8000 	str.w	r8, [r9]
  404650:	3301      	adds	r3, #1
  404652:	442a      	add	r2, r5
  404654:	2b07      	cmp	r3, #7
  404656:	f8c9 5004 	str.w	r5, [r9, #4]
  40465a:	9225      	str	r2, [sp, #148]	; 0x94
  40465c:	9324      	str	r3, [sp, #144]	; 0x90
  40465e:	f300 80a6 	bgt.w	4047ae <_svfprintf_r+0x1d2>
  404662:	f109 0908 	add.w	r9, r9, #8
  404666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404668:	442b      	add	r3, r5
  40466a:	930b      	str	r3, [sp, #44]	; 0x2c
  40466c:	7823      	ldrb	r3, [r4, #0]
  40466e:	2b00      	cmp	r3, #0
  404670:	f000 80a6 	beq.w	4047c0 <_svfprintf_r+0x1e4>
  404674:	2300      	movs	r3, #0
  404676:	461a      	mov	r2, r3
  404678:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40467c:	4619      	mov	r1, r3
  40467e:	930c      	str	r3, [sp, #48]	; 0x30
  404680:	9307      	str	r3, [sp, #28]
  404682:	f04f 3bff 	mov.w	fp, #4294967295
  404686:	7863      	ldrb	r3, [r4, #1]
  404688:	f104 0801 	add.w	r8, r4, #1
  40468c:	465d      	mov	r5, fp
  40468e:	f108 0801 	add.w	r8, r8, #1
  404692:	f1a3 0020 	sub.w	r0, r3, #32
  404696:	2858      	cmp	r0, #88	; 0x58
  404698:	f200 8425 	bhi.w	404ee6 <_svfprintf_r+0x90a>
  40469c:	e8df f010 	tbh	[pc, r0, lsl #1]
  4046a0:	04230388 	.word	0x04230388
  4046a4:	03900423 	.word	0x03900423
  4046a8:	04230423 	.word	0x04230423
  4046ac:	04230423 	.word	0x04230423
  4046b0:	04230423 	.word	0x04230423
  4046b4:	03a50397 	.word	0x03a50397
  4046b8:	005d0423 	.word	0x005d0423
  4046bc:	042300e2 	.word	0x042300e2
  4046c0:	010500fe 	.word	0x010500fe
  4046c4:	01050105 	.word	0x01050105
  4046c8:	01050105 	.word	0x01050105
  4046cc:	01050105 	.word	0x01050105
  4046d0:	01050105 	.word	0x01050105
  4046d4:	04230423 	.word	0x04230423
  4046d8:	04230423 	.word	0x04230423
  4046dc:	04230423 	.word	0x04230423
  4046e0:	04230423 	.word	0x04230423
  4046e4:	04230423 	.word	0x04230423
  4046e8:	02810115 	.word	0x02810115
  4046ec:	02810423 	.word	0x02810423
  4046f0:	04230423 	.word	0x04230423
  4046f4:	04230423 	.word	0x04230423
  4046f8:	042302c6 	.word	0x042302c6
  4046fc:	02cd0423 	.word	0x02cd0423
  404700:	04230423 	.word	0x04230423
  404704:	04230423 	.word	0x04230423
  404708:	02f70423 	.word	0x02f70423
  40470c:	04230423 	.word	0x04230423
  404710:	04230325 	.word	0x04230325
  404714:	04230423 	.word	0x04230423
  404718:	04230423 	.word	0x04230423
  40471c:	04230423 	.word	0x04230423
  404720:	04230423 	.word	0x04230423
  404724:	03660423 	.word	0x03660423
  404728:	02810379 	.word	0x02810379
  40472c:	02810281 	.word	0x02810281
  404730:	03790381 	.word	0x03790381
  404734:	04230423 	.word	0x04230423
  404738:	042303d1 	.word	0x042303d1
  40473c:	00a303db 	.word	0x00a303db
  404740:	03ee0064 	.word	0x03ee0064
  404744:	03f50423 	.word	0x03f50423
  404748:	03aa0423 	.word	0x03aa0423
  40474c:	04230423 	.word	0x04230423
  404750:	03bc      	.short	0x03bc
  404752:	980c      	ldr	r0, [sp, #48]	; 0x30
  404754:	930e      	str	r3, [sp, #56]	; 0x38
  404756:	4240      	negs	r0, r0
  404758:	900c      	str	r0, [sp, #48]	; 0x30
  40475a:	9b07      	ldr	r3, [sp, #28]
  40475c:	f043 0304 	orr.w	r3, r3, #4
  404760:	9307      	str	r3, [sp, #28]
  404762:	f898 3000 	ldrb.w	r3, [r8]
  404766:	e792      	b.n	40468e <_svfprintf_r+0xb2>
  404768:	980e      	ldr	r0, [sp, #56]	; 0x38
  40476a:	46ab      	mov	fp, r5
  40476c:	2100      	movs	r1, #0
  40476e:	6804      	ldr	r4, [r0, #0]
  404770:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404774:	1d07      	adds	r7, r0, #4
  404776:	9807      	ldr	r0, [sp, #28]
  404778:	2330      	movs	r3, #48	; 0x30
  40477a:	2278      	movs	r2, #120	; 0x78
  40477c:	458b      	cmp	fp, r1
  40477e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  404782:	f04f 0500 	mov.w	r5, #0
  404786:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40478a:	f040 0302 	orr.w	r3, r0, #2
  40478e:	f2c0 83c7 	blt.w	404f20 <_svfprintf_r+0x944>
  404792:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  404796:	f043 0302 	orr.w	r3, r3, #2
  40479a:	9307      	str	r3, [sp, #28]
  40479c:	ea54 0305 	orrs.w	r3, r4, r5
  4047a0:	970e      	str	r7, [sp, #56]	; 0x38
  4047a2:	f000 8393 	beq.w	404ecc <_svfprintf_r+0x8f0>
  4047a6:	460f      	mov	r7, r1
  4047a8:	9211      	str	r2, [sp, #68]	; 0x44
  4047aa:	48b3      	ldr	r0, [pc, #716]	; (404a78 <_svfprintf_r+0x49c>)
  4047ac:	e2ce      	b.n	404d4c <_svfprintf_r+0x770>
  4047ae:	aa23      	add	r2, sp, #140	; 0x8c
  4047b0:	9909      	ldr	r1, [sp, #36]	; 0x24
  4047b2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4047b4:	f005 f882 	bl	4098bc <__ssprint_r>
  4047b8:	b948      	cbnz	r0, 4047ce <_svfprintf_r+0x1f2>
  4047ba:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4047be:	e752      	b.n	404666 <_svfprintf_r+0x8a>
  4047c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4047c2:	b123      	cbz	r3, 4047ce <_svfprintf_r+0x1f2>
  4047c4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4047c6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4047c8:	aa23      	add	r2, sp, #140	; 0x8c
  4047ca:	f005 f877 	bl	4098bc <__ssprint_r>
  4047ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4047d0:	899b      	ldrh	r3, [r3, #12]
  4047d2:	f013 0f40 	tst.w	r3, #64	; 0x40
  4047d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4047d8:	bf18      	it	ne
  4047da:	f04f 33ff 	movne.w	r3, #4294967295
  4047de:	4618      	mov	r0, r3
  4047e0:	b041      	add	sp, #260	; 0x104
  4047e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047e6:	9311      	str	r3, [sp, #68]	; 0x44
  4047e8:	46ab      	mov	fp, r5
  4047ea:	2a00      	cmp	r2, #0
  4047ec:	f041 8223 	bne.w	405c36 <_svfprintf_r+0x165a>
  4047f0:	9a07      	ldr	r2, [sp, #28]
  4047f2:	f012 0320 	ands.w	r3, r2, #32
  4047f6:	f000 822e 	beq.w	404c56 <_svfprintf_r+0x67a>
  4047fa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4047fc:	3707      	adds	r7, #7
  4047fe:	f027 0307 	bic.w	r3, r7, #7
  404802:	2700      	movs	r7, #0
  404804:	f103 0108 	add.w	r1, r3, #8
  404808:	45bb      	cmp	fp, r7
  40480a:	910e      	str	r1, [sp, #56]	; 0x38
  40480c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404810:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404814:	f2c0 8752 	blt.w	4056bc <_svfprintf_r+0x10e0>
  404818:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40481c:	9307      	str	r3, [sp, #28]
  40481e:	ea54 0305 	orrs.w	r3, r4, r5
  404822:	f000 8375 	beq.w	404f10 <_svfprintf_r+0x934>
  404826:	ae30      	add	r6, sp, #192	; 0xc0
  404828:	08e2      	lsrs	r2, r4, #3
  40482a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40482e:	08e9      	lsrs	r1, r5, #3
  404830:	f004 0307 	and.w	r3, r4, #7
  404834:	460d      	mov	r5, r1
  404836:	4614      	mov	r4, r2
  404838:	3330      	adds	r3, #48	; 0x30
  40483a:	ea54 0205 	orrs.w	r2, r4, r5
  40483e:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404842:	d1f1      	bne.n	404828 <_svfprintf_r+0x24c>
  404844:	9a07      	ldr	r2, [sp, #28]
  404846:	07d1      	lsls	r1, r2, #31
  404848:	f140 8084 	bpl.w	404954 <_svfprintf_r+0x378>
  40484c:	2b30      	cmp	r3, #48	; 0x30
  40484e:	f000 8081 	beq.w	404954 <_svfprintf_r+0x378>
  404852:	2230      	movs	r2, #48	; 0x30
  404854:	1e73      	subs	r3, r6, #1
  404856:	f806 2c01 	strb.w	r2, [r6, #-1]
  40485a:	aa30      	add	r2, sp, #192	; 0xc0
  40485c:	1ad2      	subs	r2, r2, r3
  40485e:	920d      	str	r2, [sp, #52]	; 0x34
  404860:	461e      	mov	r6, r3
  404862:	e07a      	b.n	40495a <_svfprintf_r+0x37e>
  404864:	f898 3000 	ldrb.w	r3, [r8]
  404868:	2b2a      	cmp	r3, #42	; 0x2a
  40486a:	f108 0401 	add.w	r4, r8, #1
  40486e:	f001 81b1 	beq.w	405bd4 <_svfprintf_r+0x15f8>
  404872:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404876:	2809      	cmp	r0, #9
  404878:	bf98      	it	ls
  40487a:	2500      	movls	r5, #0
  40487c:	f201 8164 	bhi.w	405b48 <_svfprintf_r+0x156c>
  404880:	f814 3b01 	ldrb.w	r3, [r4], #1
  404884:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  404888:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  40488c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404890:	2809      	cmp	r0, #9
  404892:	d9f5      	bls.n	404880 <_svfprintf_r+0x2a4>
  404894:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  404898:	46a0      	mov	r8, r4
  40489a:	e6fa      	b.n	404692 <_svfprintf_r+0xb6>
  40489c:	9b07      	ldr	r3, [sp, #28]
  40489e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4048a2:	9307      	str	r3, [sp, #28]
  4048a4:	f898 3000 	ldrb.w	r3, [r8]
  4048a8:	e6f1      	b.n	40468e <_svfprintf_r+0xb2>
  4048aa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4048ae:	2300      	movs	r3, #0
  4048b0:	461c      	mov	r4, r3
  4048b2:	f818 3b01 	ldrb.w	r3, [r8], #1
  4048b6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4048ba:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4048be:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4048c2:	2809      	cmp	r0, #9
  4048c4:	d9f5      	bls.n	4048b2 <_svfprintf_r+0x2d6>
  4048c6:	940c      	str	r4, [sp, #48]	; 0x30
  4048c8:	e6e3      	b.n	404692 <_svfprintf_r+0xb6>
  4048ca:	9311      	str	r3, [sp, #68]	; 0x44
  4048cc:	46ab      	mov	fp, r5
  4048ce:	2a00      	cmp	r2, #0
  4048d0:	f041 81c9 	bne.w	405c66 <_svfprintf_r+0x168a>
  4048d4:	9b07      	ldr	r3, [sp, #28]
  4048d6:	f043 0310 	orr.w	r3, r3, #16
  4048da:	9307      	str	r3, [sp, #28]
  4048dc:	9b07      	ldr	r3, [sp, #28]
  4048de:	0698      	lsls	r0, r3, #26
  4048e0:	f140 8530 	bpl.w	405344 <_svfprintf_r+0xd68>
  4048e4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4048e6:	3707      	adds	r7, #7
  4048e8:	f027 0707 	bic.w	r7, r7, #7
  4048ec:	e9d7 2300 	ldrd	r2, r3, [r7]
  4048f0:	f107 0108 	add.w	r1, r7, #8
  4048f4:	910e      	str	r1, [sp, #56]	; 0x38
  4048f6:	4614      	mov	r4, r2
  4048f8:	461d      	mov	r5, r3
  4048fa:	2a00      	cmp	r2, #0
  4048fc:	f173 0300 	sbcs.w	r3, r3, #0
  404900:	f2c0 855b 	blt.w	4053ba <_svfprintf_r+0xdde>
  404904:	f1bb 0f00 	cmp.w	fp, #0
  404908:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40490c:	f2c0 8538 	blt.w	405380 <_svfprintf_r+0xda4>
  404910:	9b07      	ldr	r3, [sp, #28]
  404912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404916:	9307      	str	r3, [sp, #28]
  404918:	ea54 0305 	orrs.w	r3, r4, r5
  40491c:	f000 81db 	beq.w	404cd6 <_svfprintf_r+0x6fa>
  404920:	2d00      	cmp	r5, #0
  404922:	bf08      	it	eq
  404924:	2c0a      	cmpeq	r4, #10
  404926:	f0c0 81db 	bcc.w	404ce0 <_svfprintf_r+0x704>
  40492a:	ae30      	add	r6, sp, #192	; 0xc0
  40492c:	4620      	mov	r0, r4
  40492e:	4629      	mov	r1, r5
  404930:	220a      	movs	r2, #10
  404932:	2300      	movs	r3, #0
  404934:	f005 fe9e 	bl	40a674 <__aeabi_uldivmod>
  404938:	3230      	adds	r2, #48	; 0x30
  40493a:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40493e:	4620      	mov	r0, r4
  404940:	4629      	mov	r1, r5
  404942:	2300      	movs	r3, #0
  404944:	220a      	movs	r2, #10
  404946:	f005 fe95 	bl	40a674 <__aeabi_uldivmod>
  40494a:	4604      	mov	r4, r0
  40494c:	460d      	mov	r5, r1
  40494e:	ea54 0305 	orrs.w	r3, r4, r5
  404952:	d1eb      	bne.n	40492c <_svfprintf_r+0x350>
  404954:	ab30      	add	r3, sp, #192	; 0xc0
  404956:	1b9b      	subs	r3, r3, r6
  404958:	930d      	str	r3, [sp, #52]	; 0x34
  40495a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40495c:	455b      	cmp	r3, fp
  40495e:	bfb8      	it	lt
  404960:	465b      	movlt	r3, fp
  404962:	9308      	str	r3, [sp, #32]
  404964:	2300      	movs	r3, #0
  404966:	9313      	str	r3, [sp, #76]	; 0x4c
  404968:	b117      	cbz	r7, 404970 <_svfprintf_r+0x394>
  40496a:	9b08      	ldr	r3, [sp, #32]
  40496c:	3301      	adds	r3, #1
  40496e:	9308      	str	r3, [sp, #32]
  404970:	9b07      	ldr	r3, [sp, #28]
  404972:	f013 0302 	ands.w	r3, r3, #2
  404976:	930f      	str	r3, [sp, #60]	; 0x3c
  404978:	d002      	beq.n	404980 <_svfprintf_r+0x3a4>
  40497a:	9b08      	ldr	r3, [sp, #32]
  40497c:	3302      	adds	r3, #2
  40497e:	9308      	str	r3, [sp, #32]
  404980:	9b07      	ldr	r3, [sp, #28]
  404982:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404986:	9310      	str	r3, [sp, #64]	; 0x40
  404988:	f040 82d7 	bne.w	404f3a <_svfprintf_r+0x95e>
  40498c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40498e:	9a08      	ldr	r2, [sp, #32]
  404990:	1a9d      	subs	r5, r3, r2
  404992:	2d00      	cmp	r5, #0
  404994:	f340 82d1 	ble.w	404f3a <_svfprintf_r+0x95e>
  404998:	2d10      	cmp	r5, #16
  40499a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40499c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40499e:	4f37      	ldr	r7, [pc, #220]	; (404a7c <_svfprintf_r+0x4a0>)
  4049a0:	dd27      	ble.n	4049f2 <_svfprintf_r+0x416>
  4049a2:	9618      	str	r6, [sp, #96]	; 0x60
  4049a4:	4648      	mov	r0, r9
  4049a6:	2410      	movs	r4, #16
  4049a8:	46b9      	mov	r9, r7
  4049aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4049ac:	462f      	mov	r7, r5
  4049ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4049b0:	e004      	b.n	4049bc <_svfprintf_r+0x3e0>
  4049b2:	3f10      	subs	r7, #16
  4049b4:	2f10      	cmp	r7, #16
  4049b6:	f100 0008 	add.w	r0, r0, #8
  4049ba:	dd16      	ble.n	4049ea <_svfprintf_r+0x40e>
  4049bc:	3201      	adds	r2, #1
  4049be:	4b2f      	ldr	r3, [pc, #188]	; (404a7c <_svfprintf_r+0x4a0>)
  4049c0:	9224      	str	r2, [sp, #144]	; 0x90
  4049c2:	3110      	adds	r1, #16
  4049c4:	2a07      	cmp	r2, #7
  4049c6:	9125      	str	r1, [sp, #148]	; 0x94
  4049c8:	e880 0018 	stmia.w	r0, {r3, r4}
  4049cc:	ddf1      	ble.n	4049b2 <_svfprintf_r+0x3d6>
  4049ce:	aa23      	add	r2, sp, #140	; 0x8c
  4049d0:	4631      	mov	r1, r6
  4049d2:	4628      	mov	r0, r5
  4049d4:	f004 ff72 	bl	4098bc <__ssprint_r>
  4049d8:	2800      	cmp	r0, #0
  4049da:	f47f aef8 	bne.w	4047ce <_svfprintf_r+0x1f2>
  4049de:	3f10      	subs	r7, #16
  4049e0:	2f10      	cmp	r7, #16
  4049e2:	9925      	ldr	r1, [sp, #148]	; 0x94
  4049e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4049e6:	a830      	add	r0, sp, #192	; 0xc0
  4049e8:	dce8      	bgt.n	4049bc <_svfprintf_r+0x3e0>
  4049ea:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4049ec:	463d      	mov	r5, r7
  4049ee:	464f      	mov	r7, r9
  4049f0:	4681      	mov	r9, r0
  4049f2:	3201      	adds	r2, #1
  4049f4:	186c      	adds	r4, r5, r1
  4049f6:	2a07      	cmp	r2, #7
  4049f8:	9425      	str	r4, [sp, #148]	; 0x94
  4049fa:	9224      	str	r2, [sp, #144]	; 0x90
  4049fc:	f8c9 7000 	str.w	r7, [r9]
  404a00:	f8c9 5004 	str.w	r5, [r9, #4]
  404a04:	f300 8428 	bgt.w	405258 <_svfprintf_r+0xc7c>
  404a08:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404a0c:	f109 0908 	add.w	r9, r9, #8
  404a10:	b177      	cbz	r7, 404a30 <_svfprintf_r+0x454>
  404a12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a14:	3301      	adds	r3, #1
  404a16:	3401      	adds	r4, #1
  404a18:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  404a1c:	2201      	movs	r2, #1
  404a1e:	2b07      	cmp	r3, #7
  404a20:	9425      	str	r4, [sp, #148]	; 0x94
  404a22:	9324      	str	r3, [sp, #144]	; 0x90
  404a24:	e889 0006 	stmia.w	r9, {r1, r2}
  404a28:	f300 83a0 	bgt.w	40516c <_svfprintf_r+0xb90>
  404a2c:	f109 0908 	add.w	r9, r9, #8
  404a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404a32:	b16b      	cbz	r3, 404a50 <_svfprintf_r+0x474>
  404a34:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a36:	3301      	adds	r3, #1
  404a38:	3402      	adds	r4, #2
  404a3a:	a91c      	add	r1, sp, #112	; 0x70
  404a3c:	2202      	movs	r2, #2
  404a3e:	2b07      	cmp	r3, #7
  404a40:	9425      	str	r4, [sp, #148]	; 0x94
  404a42:	9324      	str	r3, [sp, #144]	; 0x90
  404a44:	e889 0006 	stmia.w	r9, {r1, r2}
  404a48:	f300 839c 	bgt.w	405184 <_svfprintf_r+0xba8>
  404a4c:	f109 0908 	add.w	r9, r9, #8
  404a50:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404a52:	2b80      	cmp	r3, #128	; 0x80
  404a54:	f000 82d5 	beq.w	405002 <_svfprintf_r+0xa26>
  404a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404a5a:	ebc3 070b 	rsb	r7, r3, fp
  404a5e:	2f00      	cmp	r7, #0
  404a60:	dd39      	ble.n	404ad6 <_svfprintf_r+0x4fa>
  404a62:	4a07      	ldr	r2, [pc, #28]	; (404a80 <_svfprintf_r+0x4a4>)
  404a64:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a66:	920f      	str	r2, [sp, #60]	; 0x3c
  404a68:	2f10      	cmp	r7, #16
  404a6a:	dd28      	ble.n	404abe <_svfprintf_r+0x4e2>
  404a6c:	4622      	mov	r2, r4
  404a6e:	f04f 0b10 	mov.w	fp, #16
  404a72:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404a74:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404a76:	e00a      	b.n	404a8e <_svfprintf_r+0x4b2>
  404a78:	0040baf4 	.word	0x0040baf4
  404a7c:	0040bb14 	.word	0x0040bb14
  404a80:	0040bac0 	.word	0x0040bac0
  404a84:	3f10      	subs	r7, #16
  404a86:	2f10      	cmp	r7, #16
  404a88:	f109 0908 	add.w	r9, r9, #8
  404a8c:	dd16      	ble.n	404abc <_svfprintf_r+0x4e0>
  404a8e:	3301      	adds	r3, #1
  404a90:	3210      	adds	r2, #16
  404a92:	2b07      	cmp	r3, #7
  404a94:	9225      	str	r2, [sp, #148]	; 0x94
  404a96:	9324      	str	r3, [sp, #144]	; 0x90
  404a98:	e889 0c00 	stmia.w	r9, {sl, fp}
  404a9c:	ddf2      	ble.n	404a84 <_svfprintf_r+0x4a8>
  404a9e:	aa23      	add	r2, sp, #140	; 0x8c
  404aa0:	4621      	mov	r1, r4
  404aa2:	4628      	mov	r0, r5
  404aa4:	f004 ff0a 	bl	4098bc <__ssprint_r>
  404aa8:	2800      	cmp	r0, #0
  404aaa:	f47f ae90 	bne.w	4047ce <_svfprintf_r+0x1f2>
  404aae:	3f10      	subs	r7, #16
  404ab0:	2f10      	cmp	r7, #16
  404ab2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404ab4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ab6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404aba:	dce8      	bgt.n	404a8e <_svfprintf_r+0x4b2>
  404abc:	4614      	mov	r4, r2
  404abe:	3301      	adds	r3, #1
  404ac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ac2:	9324      	str	r3, [sp, #144]	; 0x90
  404ac4:	443c      	add	r4, r7
  404ac6:	2b07      	cmp	r3, #7
  404ac8:	9425      	str	r4, [sp, #148]	; 0x94
  404aca:	e889 0084 	stmia.w	r9, {r2, r7}
  404ace:	f300 8341 	bgt.w	405154 <_svfprintf_r+0xb78>
  404ad2:	f109 0908 	add.w	r9, r9, #8
  404ad6:	9b07      	ldr	r3, [sp, #28]
  404ad8:	05da      	lsls	r2, r3, #23
  404ada:	f100 8230 	bmi.w	404f3e <_svfprintf_r+0x962>
  404ade:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ae0:	990d      	ldr	r1, [sp, #52]	; 0x34
  404ae2:	f8c9 6000 	str.w	r6, [r9]
  404ae6:	3301      	adds	r3, #1
  404ae8:	440c      	add	r4, r1
  404aea:	2b07      	cmp	r3, #7
  404aec:	9425      	str	r4, [sp, #148]	; 0x94
  404aee:	f8c9 1004 	str.w	r1, [r9, #4]
  404af2:	9324      	str	r3, [sp, #144]	; 0x90
  404af4:	f300 8318 	bgt.w	405128 <_svfprintf_r+0xb4c>
  404af8:	f109 0908 	add.w	r9, r9, #8
  404afc:	9b07      	ldr	r3, [sp, #28]
  404afe:	0759      	lsls	r1, r3, #29
  404b00:	d53f      	bpl.n	404b82 <_svfprintf_r+0x5a6>
  404b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404b04:	9a08      	ldr	r2, [sp, #32]
  404b06:	1a9d      	subs	r5, r3, r2
  404b08:	2d00      	cmp	r5, #0
  404b0a:	dd3a      	ble.n	404b82 <_svfprintf_r+0x5a6>
  404b0c:	2d10      	cmp	r5, #16
  404b0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404b10:	4fbc      	ldr	r7, [pc, #752]	; (404e04 <_svfprintf_r+0x828>)
  404b12:	dd23      	ble.n	404b5c <_svfprintf_r+0x580>
  404b14:	4622      	mov	r2, r4
  404b16:	2610      	movs	r6, #16
  404b18:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404b1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404b1e:	e004      	b.n	404b2a <_svfprintf_r+0x54e>
  404b20:	3d10      	subs	r5, #16
  404b22:	2d10      	cmp	r5, #16
  404b24:	f109 0908 	add.w	r9, r9, #8
  404b28:	dd17      	ble.n	404b5a <_svfprintf_r+0x57e>
  404b2a:	3301      	adds	r3, #1
  404b2c:	49b5      	ldr	r1, [pc, #724]	; (404e04 <_svfprintf_r+0x828>)
  404b2e:	9324      	str	r3, [sp, #144]	; 0x90
  404b30:	3210      	adds	r2, #16
  404b32:	2b07      	cmp	r3, #7
  404b34:	9225      	str	r2, [sp, #148]	; 0x94
  404b36:	e889 0042 	stmia.w	r9, {r1, r6}
  404b3a:	ddf1      	ble.n	404b20 <_svfprintf_r+0x544>
  404b3c:	aa23      	add	r2, sp, #140	; 0x8c
  404b3e:	4621      	mov	r1, r4
  404b40:	4658      	mov	r0, fp
  404b42:	f004 febb 	bl	4098bc <__ssprint_r>
  404b46:	2800      	cmp	r0, #0
  404b48:	f47f ae41 	bne.w	4047ce <_svfprintf_r+0x1f2>
  404b4c:	3d10      	subs	r5, #16
  404b4e:	2d10      	cmp	r5, #16
  404b50:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404b52:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404b54:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404b58:	dce7      	bgt.n	404b2a <_svfprintf_r+0x54e>
  404b5a:	4614      	mov	r4, r2
  404b5c:	3301      	adds	r3, #1
  404b5e:	442c      	add	r4, r5
  404b60:	2b07      	cmp	r3, #7
  404b62:	9425      	str	r4, [sp, #148]	; 0x94
  404b64:	9324      	str	r3, [sp, #144]	; 0x90
  404b66:	f8c9 7000 	str.w	r7, [r9]
  404b6a:	f8c9 5004 	str.w	r5, [r9, #4]
  404b6e:	dd08      	ble.n	404b82 <_svfprintf_r+0x5a6>
  404b70:	aa23      	add	r2, sp, #140	; 0x8c
  404b72:	9909      	ldr	r1, [sp, #36]	; 0x24
  404b74:	980a      	ldr	r0, [sp, #40]	; 0x28
  404b76:	f004 fea1 	bl	4098bc <__ssprint_r>
  404b7a:	2800      	cmp	r0, #0
  404b7c:	f47f ae27 	bne.w	4047ce <_svfprintf_r+0x1f2>
  404b80:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404b86:	9908      	ldr	r1, [sp, #32]
  404b88:	428a      	cmp	r2, r1
  404b8a:	bfac      	ite	ge
  404b8c:	189b      	addge	r3, r3, r2
  404b8e:	185b      	addlt	r3, r3, r1
  404b90:	930b      	str	r3, [sp, #44]	; 0x2c
  404b92:	2c00      	cmp	r4, #0
  404b94:	f040 82d4 	bne.w	405140 <_svfprintf_r+0xb64>
  404b98:	2300      	movs	r3, #0
  404b9a:	9324      	str	r3, [sp, #144]	; 0x90
  404b9c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404ba0:	e542      	b.n	404628 <_svfprintf_r+0x4c>
  404ba2:	9311      	str	r3, [sp, #68]	; 0x44
  404ba4:	46ab      	mov	fp, r5
  404ba6:	2a00      	cmp	r2, #0
  404ba8:	f041 8059 	bne.w	405c5e <_svfprintf_r+0x1682>
  404bac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404bae:	3707      	adds	r7, #7
  404bb0:	f027 0307 	bic.w	r3, r7, #7
  404bb4:	f103 0208 	add.w	r2, r3, #8
  404bb8:	920e      	str	r2, [sp, #56]	; 0x38
  404bba:	681a      	ldr	r2, [r3, #0]
  404bbc:	9214      	str	r2, [sp, #80]	; 0x50
  404bbe:	685b      	ldr	r3, [r3, #4]
  404bc0:	9315      	str	r3, [sp, #84]	; 0x54
  404bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404bc4:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404bc6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404bca:	4628      	mov	r0, r5
  404bcc:	4621      	mov	r1, r4
  404bce:	f04f 32ff 	mov.w	r2, #4294967295
  404bd2:	4b8d      	ldr	r3, [pc, #564]	; (404e08 <_svfprintf_r+0x82c>)
  404bd4:	f005 fd10 	bl	40a5f8 <__aeabi_dcmpun>
  404bd8:	2800      	cmp	r0, #0
  404bda:	f040 84c1 	bne.w	405560 <_svfprintf_r+0xf84>
  404bde:	4628      	mov	r0, r5
  404be0:	4621      	mov	r1, r4
  404be2:	f04f 32ff 	mov.w	r2, #4294967295
  404be6:	4b88      	ldr	r3, [pc, #544]	; (404e08 <_svfprintf_r+0x82c>)
  404be8:	f005 fce8 	bl	40a5bc <__aeabi_dcmple>
  404bec:	2800      	cmp	r0, #0
  404bee:	f040 84b7 	bne.w	405560 <_svfprintf_r+0xf84>
  404bf2:	9814      	ldr	r0, [sp, #80]	; 0x50
  404bf4:	9915      	ldr	r1, [sp, #84]	; 0x54
  404bf6:	2200      	movs	r2, #0
  404bf8:	2300      	movs	r3, #0
  404bfa:	f005 fcd5 	bl	40a5a8 <__aeabi_dcmplt>
  404bfe:	2800      	cmp	r0, #0
  404c00:	f040 874b 	bne.w	405a9a <_svfprintf_r+0x14be>
  404c04:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404c08:	4e80      	ldr	r6, [pc, #512]	; (404e0c <_svfprintf_r+0x830>)
  404c0a:	4b81      	ldr	r3, [pc, #516]	; (404e10 <_svfprintf_r+0x834>)
  404c0c:	9907      	ldr	r1, [sp, #28]
  404c0e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  404c12:	9107      	str	r1, [sp, #28]
  404c14:	9911      	ldr	r1, [sp, #68]	; 0x44
  404c16:	2203      	movs	r2, #3
  404c18:	f04f 0b00 	mov.w	fp, #0
  404c1c:	9208      	str	r2, [sp, #32]
  404c1e:	2947      	cmp	r1, #71	; 0x47
  404c20:	bfd8      	it	le
  404c22:	461e      	movle	r6, r3
  404c24:	920d      	str	r2, [sp, #52]	; 0x34
  404c26:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  404c2a:	e69d      	b.n	404968 <_svfprintf_r+0x38c>
  404c2c:	9b07      	ldr	r3, [sp, #28]
  404c2e:	f043 0308 	orr.w	r3, r3, #8
  404c32:	9307      	str	r3, [sp, #28]
  404c34:	f898 3000 	ldrb.w	r3, [r8]
  404c38:	e529      	b.n	40468e <_svfprintf_r+0xb2>
  404c3a:	9311      	str	r3, [sp, #68]	; 0x44
  404c3c:	46ab      	mov	fp, r5
  404c3e:	2a00      	cmp	r2, #0
  404c40:	f041 8009 	bne.w	405c56 <_svfprintf_r+0x167a>
  404c44:	9b07      	ldr	r3, [sp, #28]
  404c46:	f043 0310 	orr.w	r3, r3, #16
  404c4a:	9307      	str	r3, [sp, #28]
  404c4c:	9a07      	ldr	r2, [sp, #28]
  404c4e:	f012 0320 	ands.w	r3, r2, #32
  404c52:	f47f add2 	bne.w	4047fa <_svfprintf_r+0x21e>
  404c56:	9907      	ldr	r1, [sp, #28]
  404c58:	f011 0210 	ands.w	r2, r1, #16
  404c5c:	f000 8507 	beq.w	40566e <_svfprintf_r+0x1092>
  404c60:	980e      	ldr	r0, [sp, #56]	; 0x38
  404c62:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404c66:	f1bb 0f00 	cmp.w	fp, #0
  404c6a:	6804      	ldr	r4, [r0, #0]
  404c6c:	f100 0704 	add.w	r7, r0, #4
  404c70:	f04f 0500 	mov.w	r5, #0
  404c74:	f2c0 8521 	blt.w	4056ba <_svfprintf_r+0x10de>
  404c78:	460a      	mov	r2, r1
  404c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  404c7e:	9207      	str	r2, [sp, #28]
  404c80:	ea54 0205 	orrs.w	r2, r4, r5
  404c84:	970e      	str	r7, [sp, #56]	; 0x38
  404c86:	f000 8143 	beq.w	404f10 <_svfprintf_r+0x934>
  404c8a:	461f      	mov	r7, r3
  404c8c:	e5cb      	b.n	404826 <_svfprintf_r+0x24a>
  404c8e:	9311      	str	r3, [sp, #68]	; 0x44
  404c90:	46ab      	mov	fp, r5
  404c92:	2a00      	cmp	r2, #0
  404c94:	f040 87d7 	bne.w	405c46 <_svfprintf_r+0x166a>
  404c98:	9b07      	ldr	r3, [sp, #28]
  404c9a:	f043 0310 	orr.w	r3, r3, #16
  404c9e:	9307      	str	r3, [sp, #28]
  404ca0:	9a07      	ldr	r2, [sp, #28]
  404ca2:	f012 0320 	ands.w	r3, r2, #32
  404ca6:	f000 8332 	beq.w	40530e <_svfprintf_r+0xd32>
  404caa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404cac:	3707      	adds	r7, #7
  404cae:	f027 0307 	bic.w	r3, r7, #7
  404cb2:	2700      	movs	r7, #0
  404cb4:	f103 0108 	add.w	r1, r3, #8
  404cb8:	45bb      	cmp	fp, r7
  404cba:	910e      	str	r1, [sp, #56]	; 0x38
  404cbc:	e9d3 4500 	ldrd	r4, r5, [r3]
  404cc0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404cc4:	f2c0 835c 	blt.w	405380 <_svfprintf_r+0xda4>
  404cc8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  404ccc:	9307      	str	r3, [sp, #28]
  404cce:	ea54 0305 	orrs.w	r3, r4, r5
  404cd2:	f47f ae25 	bne.w	404920 <_svfprintf_r+0x344>
  404cd6:	f1bb 0f00 	cmp.w	fp, #0
  404cda:	f000 80fe 	beq.w	404eda <_svfprintf_r+0x8fe>
  404cde:	2400      	movs	r4, #0
  404ce0:	ae40      	add	r6, sp, #256	; 0x100
  404ce2:	3430      	adds	r4, #48	; 0x30
  404ce4:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404ce8:	e634      	b.n	404954 <_svfprintf_r+0x378>
  404cea:	9311      	str	r3, [sp, #68]	; 0x44
  404cec:	46ab      	mov	fp, r5
  404cee:	2a00      	cmp	r2, #0
  404cf0:	f040 87a5 	bne.w	405c3e <_svfprintf_r+0x1662>
  404cf4:	9b07      	ldr	r3, [sp, #28]
  404cf6:	4847      	ldr	r0, [pc, #284]	; (404e14 <_svfprintf_r+0x838>)
  404cf8:	069d      	lsls	r5, r3, #26
  404cfa:	f140 8097 	bpl.w	404e2c <_svfprintf_r+0x850>
  404cfe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404d00:	3707      	adds	r7, #7
  404d02:	f027 0307 	bic.w	r3, r7, #7
  404d06:	e9d3 4500 	ldrd	r4, r5, [r3]
  404d0a:	f103 0208 	add.w	r2, r3, #8
  404d0e:	920e      	str	r2, [sp, #56]	; 0x38
  404d10:	9a07      	ldr	r2, [sp, #28]
  404d12:	f012 0701 	ands.w	r7, r2, #1
  404d16:	f000 8241 	beq.w	40519c <_svfprintf_r+0xbc0>
  404d1a:	ea54 0305 	orrs.w	r3, r4, r5
  404d1e:	f000 84f5 	beq.w	40570c <_svfprintf_r+0x1130>
  404d22:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404d26:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  404d2a:	2700      	movs	r7, #0
  404d2c:	9a07      	ldr	r2, [sp, #28]
  404d2e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404d32:	2330      	movs	r3, #48	; 0x30
  404d34:	45bb      	cmp	fp, r7
  404d36:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  404d3a:	f042 0302 	orr.w	r3, r2, #2
  404d3e:	f2c0 86a9 	blt.w	405a94 <_svfprintf_r+0x14b8>
  404d42:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  404d46:	f043 0302 	orr.w	r3, r3, #2
  404d4a:	9307      	str	r3, [sp, #28]
  404d4c:	ae30      	add	r6, sp, #192	; 0xc0
  404d4e:	0923      	lsrs	r3, r4, #4
  404d50:	f004 010f 	and.w	r1, r4, #15
  404d54:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404d58:	092a      	lsrs	r2, r5, #4
  404d5a:	461c      	mov	r4, r3
  404d5c:	4615      	mov	r5, r2
  404d5e:	5c43      	ldrb	r3, [r0, r1]
  404d60:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404d64:	ea54 0305 	orrs.w	r3, r4, r5
  404d68:	d1f1      	bne.n	404d4e <_svfprintf_r+0x772>
  404d6a:	e5f3      	b.n	404954 <_svfprintf_r+0x378>
  404d6c:	990e      	ldr	r1, [sp, #56]	; 0x38
  404d6e:	9311      	str	r3, [sp, #68]	; 0x44
  404d70:	680a      	ldr	r2, [r1, #0]
  404d72:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404d76:	2300      	movs	r3, #0
  404d78:	460a      	mov	r2, r1
  404d7a:	461f      	mov	r7, r3
  404d7c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404d80:	3204      	adds	r2, #4
  404d82:	2301      	movs	r3, #1
  404d84:	9308      	str	r3, [sp, #32]
  404d86:	46bb      	mov	fp, r7
  404d88:	9713      	str	r7, [sp, #76]	; 0x4c
  404d8a:	920e      	str	r2, [sp, #56]	; 0x38
  404d8c:	930d      	str	r3, [sp, #52]	; 0x34
  404d8e:	ae26      	add	r6, sp, #152	; 0x98
  404d90:	e5ee      	b.n	404970 <_svfprintf_r+0x394>
  404d92:	9311      	str	r3, [sp, #68]	; 0x44
  404d94:	46ab      	mov	fp, r5
  404d96:	2a00      	cmp	r2, #0
  404d98:	f43f ada0 	beq.w	4048dc <_svfprintf_r+0x300>
  404d9c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404da0:	e59c      	b.n	4048dc <_svfprintf_r+0x300>
  404da2:	9b07      	ldr	r3, [sp, #28]
  404da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404da8:	9307      	str	r3, [sp, #28]
  404daa:	f898 3000 	ldrb.w	r3, [r8]
  404dae:	e46e      	b.n	40468e <_svfprintf_r+0xb2>
  404db0:	f898 3000 	ldrb.w	r3, [r8]
  404db4:	2900      	cmp	r1, #0
  404db6:	f47f ac6a 	bne.w	40468e <_svfprintf_r+0xb2>
  404dba:	2201      	movs	r2, #1
  404dbc:	2120      	movs	r1, #32
  404dbe:	e466      	b.n	40468e <_svfprintf_r+0xb2>
  404dc0:	9b07      	ldr	r3, [sp, #28]
  404dc2:	f043 0301 	orr.w	r3, r3, #1
  404dc6:	9307      	str	r3, [sp, #28]
  404dc8:	f898 3000 	ldrb.w	r3, [r8]
  404dcc:	e45f      	b.n	40468e <_svfprintf_r+0xb2>
  404dce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  404dd0:	6823      	ldr	r3, [r4, #0]
  404dd2:	930c      	str	r3, [sp, #48]	; 0x30
  404dd4:	4618      	mov	r0, r3
  404dd6:	2800      	cmp	r0, #0
  404dd8:	4623      	mov	r3, r4
  404dda:	f103 0304 	add.w	r3, r3, #4
  404dde:	f6ff acb8 	blt.w	404752 <_svfprintf_r+0x176>
  404de2:	930e      	str	r3, [sp, #56]	; 0x38
  404de4:	f898 3000 	ldrb.w	r3, [r8]
  404de8:	e451      	b.n	40468e <_svfprintf_r+0xb2>
  404dea:	f898 3000 	ldrb.w	r3, [r8]
  404dee:	2201      	movs	r2, #1
  404df0:	212b      	movs	r1, #43	; 0x2b
  404df2:	e44c      	b.n	40468e <_svfprintf_r+0xb2>
  404df4:	9311      	str	r3, [sp, #68]	; 0x44
  404df6:	46ab      	mov	fp, r5
  404df8:	2a00      	cmp	r2, #0
  404dfa:	f43f af51 	beq.w	404ca0 <_svfprintf_r+0x6c4>
  404dfe:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404e02:	e74d      	b.n	404ca0 <_svfprintf_r+0x6c4>
  404e04:	0040bb14 	.word	0x0040bb14
  404e08:	7fefffff 	.word	0x7fefffff
  404e0c:	0040bad4 	.word	0x0040bad4
  404e10:	0040bad0 	.word	0x0040bad0
  404e14:	0040bae0 	.word	0x0040bae0
  404e18:	9311      	str	r3, [sp, #68]	; 0x44
  404e1a:	46ab      	mov	fp, r5
  404e1c:	2a00      	cmp	r2, #0
  404e1e:	f040 8703 	bne.w	405c28 <_svfprintf_r+0x164c>
  404e22:	9b07      	ldr	r3, [sp, #28]
  404e24:	4899      	ldr	r0, [pc, #612]	; (40508c <_svfprintf_r+0xab0>)
  404e26:	069d      	lsls	r5, r3, #26
  404e28:	f53f af69 	bmi.w	404cfe <_svfprintf_r+0x722>
  404e2c:	9b07      	ldr	r3, [sp, #28]
  404e2e:	06dc      	lsls	r4, r3, #27
  404e30:	f140 845e 	bpl.w	4056f0 <_svfprintf_r+0x1114>
  404e34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404e36:	4613      	mov	r3, r2
  404e38:	3304      	adds	r3, #4
  404e3a:	6814      	ldr	r4, [r2, #0]
  404e3c:	930e      	str	r3, [sp, #56]	; 0x38
  404e3e:	2500      	movs	r5, #0
  404e40:	e766      	b.n	404d10 <_svfprintf_r+0x734>
  404e42:	f898 3000 	ldrb.w	r3, [r8]
  404e46:	2b6c      	cmp	r3, #108	; 0x6c
  404e48:	f000 84e1 	beq.w	40580e <_svfprintf_r+0x1232>
  404e4c:	9807      	ldr	r0, [sp, #28]
  404e4e:	f040 0010 	orr.w	r0, r0, #16
  404e52:	9007      	str	r0, [sp, #28]
  404e54:	e41b      	b.n	40468e <_svfprintf_r+0xb2>
  404e56:	2a00      	cmp	r2, #0
  404e58:	f040 86db 	bne.w	405c12 <_svfprintf_r+0x1636>
  404e5c:	9b07      	ldr	r3, [sp, #28]
  404e5e:	069b      	lsls	r3, r3, #26
  404e60:	f140 842f 	bpl.w	4056c2 <_svfprintf_r+0x10e6>
  404e64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404e66:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e68:	6813      	ldr	r3, [r2, #0]
  404e6a:	17cd      	asrs	r5, r1, #31
  404e6c:	4608      	mov	r0, r1
  404e6e:	3204      	adds	r2, #4
  404e70:	4629      	mov	r1, r5
  404e72:	920e      	str	r2, [sp, #56]	; 0x38
  404e74:	e9c3 0100 	strd	r0, r1, [r3]
  404e78:	f7ff bbd6 	b.w	404628 <_svfprintf_r+0x4c>
  404e7c:	9b07      	ldr	r3, [sp, #28]
  404e7e:	f043 0320 	orr.w	r3, r3, #32
  404e82:	9307      	str	r3, [sp, #28]
  404e84:	f898 3000 	ldrb.w	r3, [r8]
  404e88:	e401      	b.n	40468e <_svfprintf_r+0xb2>
  404e8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404e8c:	9311      	str	r3, [sp, #68]	; 0x44
  404e8e:	6816      	ldr	r6, [r2, #0]
  404e90:	2400      	movs	r4, #0
  404e92:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  404e96:	1d17      	adds	r7, r2, #4
  404e98:	2e00      	cmp	r6, #0
  404e9a:	f000 85bd 	beq.w	405a18 <_svfprintf_r+0x143c>
  404e9e:	2d00      	cmp	r5, #0
  404ea0:	f2c0 850f 	blt.w	4058c2 <_svfprintf_r+0x12e6>
  404ea4:	462a      	mov	r2, r5
  404ea6:	4621      	mov	r1, r4
  404ea8:	4630      	mov	r0, r6
  404eaa:	f003 fe61 	bl	408b70 <memchr>
  404eae:	2800      	cmp	r0, #0
  404eb0:	f000 8604 	beq.w	405abc <_svfprintf_r+0x14e0>
  404eb4:	1b83      	subs	r3, r0, r6
  404eb6:	930d      	str	r3, [sp, #52]	; 0x34
  404eb8:	46a3      	mov	fp, r4
  404eba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ebe:	970e      	str	r7, [sp, #56]	; 0x38
  404ec0:	9308      	str	r3, [sp, #32]
  404ec2:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  404ec6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404eca:	e54d      	b.n	404968 <_svfprintf_r+0x38c>
  404ecc:	486f      	ldr	r0, [pc, #444]	; (40508c <_svfprintf_r+0xab0>)
  404ece:	9211      	str	r2, [sp, #68]	; 0x44
  404ed0:	f1bb 0f00 	cmp.w	fp, #0
  404ed4:	f040 8173 	bne.w	4051be <_svfprintf_r+0xbe2>
  404ed8:	465f      	mov	r7, fp
  404eda:	f04f 0b00 	mov.w	fp, #0
  404ede:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  404ee2:	ae30      	add	r6, sp, #192	; 0xc0
  404ee4:	e539      	b.n	40495a <_svfprintf_r+0x37e>
  404ee6:	9311      	str	r3, [sp, #68]	; 0x44
  404ee8:	2a00      	cmp	r2, #0
  404eea:	f040 86b0 	bne.w	405c4e <_svfprintf_r+0x1672>
  404eee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ef0:	2a00      	cmp	r2, #0
  404ef2:	f43f ac65 	beq.w	4047c0 <_svfprintf_r+0x1e4>
  404ef6:	2300      	movs	r3, #0
  404ef8:	2101      	movs	r1, #1
  404efa:	461f      	mov	r7, r3
  404efc:	9108      	str	r1, [sp, #32]
  404efe:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404f02:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404f06:	469b      	mov	fp, r3
  404f08:	9313      	str	r3, [sp, #76]	; 0x4c
  404f0a:	910d      	str	r1, [sp, #52]	; 0x34
  404f0c:	ae26      	add	r6, sp, #152	; 0x98
  404f0e:	e52f      	b.n	404970 <_svfprintf_r+0x394>
  404f10:	f1bb 0f00 	cmp.w	fp, #0
  404f14:	f000 85dd 	beq.w	405ad2 <_svfprintf_r+0x14f6>
  404f18:	2700      	movs	r7, #0
  404f1a:	2400      	movs	r4, #0
  404f1c:	2500      	movs	r5, #0
  404f1e:	e482      	b.n	404826 <_svfprintf_r+0x24a>
  404f20:	485a      	ldr	r0, [pc, #360]	; (40508c <_svfprintf_r+0xab0>)
  404f22:	9307      	str	r3, [sp, #28]
  404f24:	9211      	str	r2, [sp, #68]	; 0x44
  404f26:	ea54 0305 	orrs.w	r3, r4, r5
  404f2a:	970e      	str	r7, [sp, #56]	; 0x38
  404f2c:	f04f 0700 	mov.w	r7, #0
  404f30:	f47f af0c 	bne.w	404d4c <_svfprintf_r+0x770>
  404f34:	2400      	movs	r4, #0
  404f36:	2500      	movs	r5, #0
  404f38:	e708      	b.n	404d4c <_svfprintf_r+0x770>
  404f3a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f3c:	e568      	b.n	404a10 <_svfprintf_r+0x434>
  404f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f40:	2b65      	cmp	r3, #101	; 0x65
  404f42:	f340 80a9 	ble.w	405098 <_svfprintf_r+0xabc>
  404f46:	9814      	ldr	r0, [sp, #80]	; 0x50
  404f48:	9915      	ldr	r1, [sp, #84]	; 0x54
  404f4a:	2200      	movs	r2, #0
  404f4c:	2300      	movs	r3, #0
  404f4e:	f005 fb21 	bl	40a594 <__aeabi_dcmpeq>
  404f52:	2800      	cmp	r0, #0
  404f54:	f000 8135 	beq.w	4051c2 <_svfprintf_r+0xbe6>
  404f58:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f5a:	4a4d      	ldr	r2, [pc, #308]	; (405090 <_svfprintf_r+0xab4>)
  404f5c:	f8c9 2000 	str.w	r2, [r9]
  404f60:	3301      	adds	r3, #1
  404f62:	3401      	adds	r4, #1
  404f64:	2201      	movs	r2, #1
  404f66:	2b07      	cmp	r3, #7
  404f68:	9425      	str	r4, [sp, #148]	; 0x94
  404f6a:	9324      	str	r3, [sp, #144]	; 0x90
  404f6c:	f8c9 2004 	str.w	r2, [r9, #4]
  404f70:	f300 83e6 	bgt.w	405740 <_svfprintf_r+0x1164>
  404f74:	f109 0908 	add.w	r9, r9, #8
  404f78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404f7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404f7c:	4293      	cmp	r3, r2
  404f7e:	db03      	blt.n	404f88 <_svfprintf_r+0x9ac>
  404f80:	9b07      	ldr	r3, [sp, #28]
  404f82:	07db      	lsls	r3, r3, #31
  404f84:	f57f adba 	bpl.w	404afc <_svfprintf_r+0x520>
  404f88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f8a:	9916      	ldr	r1, [sp, #88]	; 0x58
  404f8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  404f8e:	f8c9 2000 	str.w	r2, [r9]
  404f92:	3301      	adds	r3, #1
  404f94:	440c      	add	r4, r1
  404f96:	2b07      	cmp	r3, #7
  404f98:	9425      	str	r4, [sp, #148]	; 0x94
  404f9a:	f8c9 1004 	str.w	r1, [r9, #4]
  404f9e:	9324      	str	r3, [sp, #144]	; 0x90
  404fa0:	f300 843f 	bgt.w	405822 <_svfprintf_r+0x1246>
  404fa4:	f109 0908 	add.w	r9, r9, #8
  404fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404faa:	1e5d      	subs	r5, r3, #1
  404fac:	2d00      	cmp	r5, #0
  404fae:	f77f ada5 	ble.w	404afc <_svfprintf_r+0x520>
  404fb2:	4a38      	ldr	r2, [pc, #224]	; (405094 <_svfprintf_r+0xab8>)
  404fb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fb6:	920f      	str	r2, [sp, #60]	; 0x3c
  404fb8:	2d10      	cmp	r5, #16
  404fba:	f340 81e6 	ble.w	40538a <_svfprintf_r+0xdae>
  404fbe:	2610      	movs	r6, #16
  404fc0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404fc2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  404fc6:	e005      	b.n	404fd4 <_svfprintf_r+0x9f8>
  404fc8:	f109 0908 	add.w	r9, r9, #8
  404fcc:	3d10      	subs	r5, #16
  404fce:	2d10      	cmp	r5, #16
  404fd0:	f340 81db 	ble.w	40538a <_svfprintf_r+0xdae>
  404fd4:	3301      	adds	r3, #1
  404fd6:	3410      	adds	r4, #16
  404fd8:	2b07      	cmp	r3, #7
  404fda:	9425      	str	r4, [sp, #148]	; 0x94
  404fdc:	9324      	str	r3, [sp, #144]	; 0x90
  404fde:	f8c9 a000 	str.w	sl, [r9]
  404fe2:	f8c9 6004 	str.w	r6, [r9, #4]
  404fe6:	ddef      	ble.n	404fc8 <_svfprintf_r+0x9ec>
  404fe8:	aa23      	add	r2, sp, #140	; 0x8c
  404fea:	4659      	mov	r1, fp
  404fec:	4638      	mov	r0, r7
  404fee:	f004 fc65 	bl	4098bc <__ssprint_r>
  404ff2:	2800      	cmp	r0, #0
  404ff4:	f47f abeb 	bne.w	4047ce <_svfprintf_r+0x1f2>
  404ff8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404ffa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ffc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405000:	e7e4      	b.n	404fcc <_svfprintf_r+0x9f0>
  405002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405004:	9a08      	ldr	r2, [sp, #32]
  405006:	1a9f      	subs	r7, r3, r2
  405008:	2f00      	cmp	r7, #0
  40500a:	f77f ad25 	ble.w	404a58 <_svfprintf_r+0x47c>
  40500e:	4a21      	ldr	r2, [pc, #132]	; (405094 <_svfprintf_r+0xab8>)
  405010:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405012:	920f      	str	r2, [sp, #60]	; 0x3c
  405014:	2f10      	cmp	r7, #16
  405016:	dd2b      	ble.n	405070 <_svfprintf_r+0xa94>
  405018:	464a      	mov	r2, r9
  40501a:	4621      	mov	r1, r4
  40501c:	46b9      	mov	r9, r7
  40501e:	2510      	movs	r5, #16
  405020:	4637      	mov	r7, r6
  405022:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405024:	9e09      	ldr	r6, [sp, #36]	; 0x24
  405026:	e006      	b.n	405036 <_svfprintf_r+0xa5a>
  405028:	f1a9 0910 	sub.w	r9, r9, #16
  40502c:	f1b9 0f10 	cmp.w	r9, #16
  405030:	f102 0208 	add.w	r2, r2, #8
  405034:	dd18      	ble.n	405068 <_svfprintf_r+0xa8c>
  405036:	3301      	adds	r3, #1
  405038:	3110      	adds	r1, #16
  40503a:	2b07      	cmp	r3, #7
  40503c:	9125      	str	r1, [sp, #148]	; 0x94
  40503e:	9324      	str	r3, [sp, #144]	; 0x90
  405040:	f8c2 a000 	str.w	sl, [r2]
  405044:	6055      	str	r5, [r2, #4]
  405046:	ddef      	ble.n	405028 <_svfprintf_r+0xa4c>
  405048:	aa23      	add	r2, sp, #140	; 0x8c
  40504a:	4631      	mov	r1, r6
  40504c:	4620      	mov	r0, r4
  40504e:	f004 fc35 	bl	4098bc <__ssprint_r>
  405052:	2800      	cmp	r0, #0
  405054:	f47f abbb 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405058:	f1a9 0910 	sub.w	r9, r9, #16
  40505c:	f1b9 0f10 	cmp.w	r9, #16
  405060:	9925      	ldr	r1, [sp, #148]	; 0x94
  405062:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405064:	aa30      	add	r2, sp, #192	; 0xc0
  405066:	dce6      	bgt.n	405036 <_svfprintf_r+0xa5a>
  405068:	463e      	mov	r6, r7
  40506a:	460c      	mov	r4, r1
  40506c:	464f      	mov	r7, r9
  40506e:	4691      	mov	r9, r2
  405070:	3301      	adds	r3, #1
  405072:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405074:	9324      	str	r3, [sp, #144]	; 0x90
  405076:	443c      	add	r4, r7
  405078:	2b07      	cmp	r3, #7
  40507a:	9425      	str	r4, [sp, #148]	; 0x94
  40507c:	e889 0084 	stmia.w	r9, {r2, r7}
  405080:	f300 8245 	bgt.w	40550e <_svfprintf_r+0xf32>
  405084:	f109 0908 	add.w	r9, r9, #8
  405088:	e4e6      	b.n	404a58 <_svfprintf_r+0x47c>
  40508a:	bf00      	nop
  40508c:	0040baf4 	.word	0x0040baf4
  405090:	0040bb10 	.word	0x0040bb10
  405094:	0040bac0 	.word	0x0040bac0
  405098:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40509a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40509c:	2b01      	cmp	r3, #1
  40509e:	f340 8208 	ble.w	4054b2 <_svfprintf_r+0xed6>
  4050a2:	3501      	adds	r5, #1
  4050a4:	3401      	adds	r4, #1
  4050a6:	2301      	movs	r3, #1
  4050a8:	2d07      	cmp	r5, #7
  4050aa:	9425      	str	r4, [sp, #148]	; 0x94
  4050ac:	9524      	str	r5, [sp, #144]	; 0x90
  4050ae:	f8c9 6000 	str.w	r6, [r9]
  4050b2:	f8c9 3004 	str.w	r3, [r9, #4]
  4050b6:	f300 820d 	bgt.w	4054d4 <_svfprintf_r+0xef8>
  4050ba:	f109 0908 	add.w	r9, r9, #8
  4050be:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4050c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4050c2:	f8c9 3000 	str.w	r3, [r9]
  4050c6:	3501      	adds	r5, #1
  4050c8:	4414      	add	r4, r2
  4050ca:	2d07      	cmp	r5, #7
  4050cc:	9425      	str	r4, [sp, #148]	; 0x94
  4050ce:	9524      	str	r5, [sp, #144]	; 0x90
  4050d0:	f8c9 2004 	str.w	r2, [r9, #4]
  4050d4:	f300 820e 	bgt.w	4054f4 <_svfprintf_r+0xf18>
  4050d8:	f109 0908 	add.w	r9, r9, #8
  4050dc:	2300      	movs	r3, #0
  4050de:	9814      	ldr	r0, [sp, #80]	; 0x50
  4050e0:	9915      	ldr	r1, [sp, #84]	; 0x54
  4050e2:	2200      	movs	r2, #0
  4050e4:	f005 fa56 	bl	40a594 <__aeabi_dcmpeq>
  4050e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4050ea:	2800      	cmp	r0, #0
  4050ec:	f040 80c3 	bne.w	405276 <_svfprintf_r+0xc9a>
  4050f0:	3b01      	subs	r3, #1
  4050f2:	3501      	adds	r5, #1
  4050f4:	3601      	adds	r6, #1
  4050f6:	441c      	add	r4, r3
  4050f8:	2d07      	cmp	r5, #7
  4050fa:	9524      	str	r5, [sp, #144]	; 0x90
  4050fc:	9425      	str	r4, [sp, #148]	; 0x94
  4050fe:	f8c9 6000 	str.w	r6, [r9]
  405102:	f8c9 3004 	str.w	r3, [r9, #4]
  405106:	f300 80f5 	bgt.w	4052f4 <_svfprintf_r+0xd18>
  40510a:	f109 0908 	add.w	r9, r9, #8
  40510e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405110:	f8c9 2004 	str.w	r2, [r9, #4]
  405114:	3501      	adds	r5, #1
  405116:	4414      	add	r4, r2
  405118:	ab1f      	add	r3, sp, #124	; 0x7c
  40511a:	2d07      	cmp	r5, #7
  40511c:	9425      	str	r4, [sp, #148]	; 0x94
  40511e:	9524      	str	r5, [sp, #144]	; 0x90
  405120:	f8c9 3000 	str.w	r3, [r9]
  405124:	f77f ace8 	ble.w	404af8 <_svfprintf_r+0x51c>
  405128:	aa23      	add	r2, sp, #140	; 0x8c
  40512a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40512c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40512e:	f004 fbc5 	bl	4098bc <__ssprint_r>
  405132:	2800      	cmp	r0, #0
  405134:	f47f ab4b 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405138:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40513a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40513e:	e4dd      	b.n	404afc <_svfprintf_r+0x520>
  405140:	aa23      	add	r2, sp, #140	; 0x8c
  405142:	9909      	ldr	r1, [sp, #36]	; 0x24
  405144:	980a      	ldr	r0, [sp, #40]	; 0x28
  405146:	f004 fbb9 	bl	4098bc <__ssprint_r>
  40514a:	2800      	cmp	r0, #0
  40514c:	f43f ad24 	beq.w	404b98 <_svfprintf_r+0x5bc>
  405150:	f7ff bb3d 	b.w	4047ce <_svfprintf_r+0x1f2>
  405154:	aa23      	add	r2, sp, #140	; 0x8c
  405156:	9909      	ldr	r1, [sp, #36]	; 0x24
  405158:	980a      	ldr	r0, [sp, #40]	; 0x28
  40515a:	f004 fbaf 	bl	4098bc <__ssprint_r>
  40515e:	2800      	cmp	r0, #0
  405160:	f47f ab35 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405164:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405166:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40516a:	e4b4      	b.n	404ad6 <_svfprintf_r+0x4fa>
  40516c:	aa23      	add	r2, sp, #140	; 0x8c
  40516e:	9909      	ldr	r1, [sp, #36]	; 0x24
  405170:	980a      	ldr	r0, [sp, #40]	; 0x28
  405172:	f004 fba3 	bl	4098bc <__ssprint_r>
  405176:	2800      	cmp	r0, #0
  405178:	f47f ab29 	bne.w	4047ce <_svfprintf_r+0x1f2>
  40517c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40517e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405182:	e455      	b.n	404a30 <_svfprintf_r+0x454>
  405184:	aa23      	add	r2, sp, #140	; 0x8c
  405186:	9909      	ldr	r1, [sp, #36]	; 0x24
  405188:	980a      	ldr	r0, [sp, #40]	; 0x28
  40518a:	f004 fb97 	bl	4098bc <__ssprint_r>
  40518e:	2800      	cmp	r0, #0
  405190:	f47f ab1d 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405194:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405196:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40519a:	e459      	b.n	404a50 <_svfprintf_r+0x474>
  40519c:	f1bb 0f00 	cmp.w	fp, #0
  4051a0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4051a4:	f2c0 82d8 	blt.w	405758 <_svfprintf_r+0x117c>
  4051a8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4051ac:	9307      	str	r3, [sp, #28]
  4051ae:	ea54 0305 	orrs.w	r3, r4, r5
  4051b2:	f47f adcb 	bne.w	404d4c <_svfprintf_r+0x770>
  4051b6:	f1bb 0f00 	cmp.w	fp, #0
  4051ba:	f43f ae8d 	beq.w	404ed8 <_svfprintf_r+0x8fc>
  4051be:	2700      	movs	r7, #0
  4051c0:	e6b8      	b.n	404f34 <_svfprintf_r+0x958>
  4051c2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4051c4:	2d00      	cmp	r5, #0
  4051c6:	f340 82ca 	ble.w	40575e <_svfprintf_r+0x1182>
  4051ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4051cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4051ce:	4293      	cmp	r3, r2
  4051d0:	bfa8      	it	ge
  4051d2:	4613      	movge	r3, r2
  4051d4:	2b00      	cmp	r3, #0
  4051d6:	461d      	mov	r5, r3
  4051d8:	dd0d      	ble.n	4051f6 <_svfprintf_r+0xc1a>
  4051da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4051dc:	f8c9 6000 	str.w	r6, [r9]
  4051e0:	3301      	adds	r3, #1
  4051e2:	442c      	add	r4, r5
  4051e4:	2b07      	cmp	r3, #7
  4051e6:	9425      	str	r4, [sp, #148]	; 0x94
  4051e8:	f8c9 5004 	str.w	r5, [r9, #4]
  4051ec:	9324      	str	r3, [sp, #144]	; 0x90
  4051ee:	f300 839c 	bgt.w	40592a <_svfprintf_r+0x134e>
  4051f2:	f109 0908 	add.w	r9, r9, #8
  4051f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4051f8:	2d00      	cmp	r5, #0
  4051fa:	bfa8      	it	ge
  4051fc:	1b5b      	subge	r3, r3, r5
  4051fe:	2b00      	cmp	r3, #0
  405200:	461d      	mov	r5, r3
  405202:	f340 80f6 	ble.w	4053f2 <_svfprintf_r+0xe16>
  405206:	4aba      	ldr	r2, [pc, #744]	; (4054f0 <_svfprintf_r+0xf14>)
  405208:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40520a:	920f      	str	r2, [sp, #60]	; 0x3c
  40520c:	2d10      	cmp	r5, #16
  40520e:	f340 828a 	ble.w	405726 <_svfprintf_r+0x114a>
  405212:	4622      	mov	r2, r4
  405214:	2710      	movs	r7, #16
  405216:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40521a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40521c:	e005      	b.n	40522a <_svfprintf_r+0xc4e>
  40521e:	f109 0908 	add.w	r9, r9, #8
  405222:	3d10      	subs	r5, #16
  405224:	2d10      	cmp	r5, #16
  405226:	f340 827d 	ble.w	405724 <_svfprintf_r+0x1148>
  40522a:	3301      	adds	r3, #1
  40522c:	3210      	adds	r2, #16
  40522e:	2b07      	cmp	r3, #7
  405230:	9225      	str	r2, [sp, #148]	; 0x94
  405232:	9324      	str	r3, [sp, #144]	; 0x90
  405234:	f8c9 a000 	str.w	sl, [r9]
  405238:	f8c9 7004 	str.w	r7, [r9, #4]
  40523c:	ddef      	ble.n	40521e <_svfprintf_r+0xc42>
  40523e:	aa23      	add	r2, sp, #140	; 0x8c
  405240:	4621      	mov	r1, r4
  405242:	4658      	mov	r0, fp
  405244:	f004 fb3a 	bl	4098bc <__ssprint_r>
  405248:	2800      	cmp	r0, #0
  40524a:	f47f aac0 	bne.w	4047ce <_svfprintf_r+0x1f2>
  40524e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405250:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405252:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405256:	e7e4      	b.n	405222 <_svfprintf_r+0xc46>
  405258:	aa23      	add	r2, sp, #140	; 0x8c
  40525a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40525c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40525e:	f004 fb2d 	bl	4098bc <__ssprint_r>
  405262:	2800      	cmp	r0, #0
  405264:	f47f aab3 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405268:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40526c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40526e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405272:	f7ff bbcd 	b.w	404a10 <_svfprintf_r+0x434>
  405276:	1e5e      	subs	r6, r3, #1
  405278:	2e00      	cmp	r6, #0
  40527a:	f77f af48 	ble.w	40510e <_svfprintf_r+0xb32>
  40527e:	4b9c      	ldr	r3, [pc, #624]	; (4054f0 <_svfprintf_r+0xf14>)
  405280:	930f      	str	r3, [sp, #60]	; 0x3c
  405282:	2e10      	cmp	r6, #16
  405284:	dd2c      	ble.n	4052e0 <_svfprintf_r+0xd04>
  405286:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  40528a:	2710      	movs	r7, #16
  40528c:	46b0      	mov	r8, r6
  40528e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405292:	9e09      	ldr	r6, [sp, #36]	; 0x24
  405294:	e006      	b.n	4052a4 <_svfprintf_r+0xcc8>
  405296:	f1a8 0810 	sub.w	r8, r8, #16
  40529a:	f1b8 0f10 	cmp.w	r8, #16
  40529e:	f109 0908 	add.w	r9, r9, #8
  4052a2:	dd1a      	ble.n	4052da <_svfprintf_r+0xcfe>
  4052a4:	3501      	adds	r5, #1
  4052a6:	3410      	adds	r4, #16
  4052a8:	2d07      	cmp	r5, #7
  4052aa:	9425      	str	r4, [sp, #148]	; 0x94
  4052ac:	9524      	str	r5, [sp, #144]	; 0x90
  4052ae:	f8c9 a000 	str.w	sl, [r9]
  4052b2:	f8c9 7004 	str.w	r7, [r9, #4]
  4052b6:	ddee      	ble.n	405296 <_svfprintf_r+0xcba>
  4052b8:	aa23      	add	r2, sp, #140	; 0x8c
  4052ba:	4631      	mov	r1, r6
  4052bc:	4658      	mov	r0, fp
  4052be:	f004 fafd 	bl	4098bc <__ssprint_r>
  4052c2:	2800      	cmp	r0, #0
  4052c4:	f47f aa83 	bne.w	4047ce <_svfprintf_r+0x1f2>
  4052c8:	f1a8 0810 	sub.w	r8, r8, #16
  4052cc:	f1b8 0f10 	cmp.w	r8, #16
  4052d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4052d2:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4052d4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4052d8:	dce4      	bgt.n	4052a4 <_svfprintf_r+0xcc8>
  4052da:	4646      	mov	r6, r8
  4052dc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4052e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4052e2:	3501      	adds	r5, #1
  4052e4:	4434      	add	r4, r6
  4052e6:	2d07      	cmp	r5, #7
  4052e8:	9425      	str	r4, [sp, #148]	; 0x94
  4052ea:	9524      	str	r5, [sp, #144]	; 0x90
  4052ec:	e889 0048 	stmia.w	r9, {r3, r6}
  4052f0:	f77f af0b 	ble.w	40510a <_svfprintf_r+0xb2e>
  4052f4:	aa23      	add	r2, sp, #140	; 0x8c
  4052f6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4052f8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4052fa:	f004 fadf 	bl	4098bc <__ssprint_r>
  4052fe:	2800      	cmp	r0, #0
  405300:	f47f aa65 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405304:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405306:	9d24      	ldr	r5, [sp, #144]	; 0x90
  405308:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40530c:	e6ff      	b.n	40510e <_svfprintf_r+0xb32>
  40530e:	9907      	ldr	r1, [sp, #28]
  405310:	f011 0210 	ands.w	r2, r1, #16
  405314:	f000 8108 	beq.w	405528 <_svfprintf_r+0xf4c>
  405318:	980e      	ldr	r0, [sp, #56]	; 0x38
  40531a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40531e:	f1bb 0f00 	cmp.w	fp, #0
  405322:	6804      	ldr	r4, [r0, #0]
  405324:	f100 0704 	add.w	r7, r0, #4
  405328:	f04f 0500 	mov.w	r5, #0
  40532c:	db26      	blt.n	40537c <_svfprintf_r+0xda0>
  40532e:	460a      	mov	r2, r1
  405330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  405334:	9207      	str	r2, [sp, #28]
  405336:	ea54 0205 	orrs.w	r2, r4, r5
  40533a:	970e      	str	r7, [sp, #56]	; 0x38
  40533c:	461f      	mov	r7, r3
  40533e:	f47f aaef 	bne.w	404920 <_svfprintf_r+0x344>
  405342:	e4c8      	b.n	404cd6 <_svfprintf_r+0x6fa>
  405344:	9b07      	ldr	r3, [sp, #28]
  405346:	06d9      	lsls	r1, r3, #27
  405348:	d42a      	bmi.n	4053a0 <_svfprintf_r+0xdc4>
  40534a:	9b07      	ldr	r3, [sp, #28]
  40534c:	065a      	lsls	r2, r3, #25
  40534e:	d527      	bpl.n	4053a0 <_svfprintf_r+0xdc4>
  405350:	990e      	ldr	r1, [sp, #56]	; 0x38
  405352:	f9b1 4000 	ldrsh.w	r4, [r1]
  405356:	3104      	adds	r1, #4
  405358:	17e5      	asrs	r5, r4, #31
  40535a:	4622      	mov	r2, r4
  40535c:	462b      	mov	r3, r5
  40535e:	910e      	str	r1, [sp, #56]	; 0x38
  405360:	f7ff bacb 	b.w	4048fa <_svfprintf_r+0x31e>
  405364:	990e      	ldr	r1, [sp, #56]	; 0x38
  405366:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40536a:	f1bb 0f00 	cmp.w	fp, #0
  40536e:	680c      	ldr	r4, [r1, #0]
  405370:	f101 0704 	add.w	r7, r1, #4
  405374:	f04f 0500 	mov.w	r5, #0
  405378:	f280 8247 	bge.w	40580a <_svfprintf_r+0x122e>
  40537c:	970e      	str	r7, [sp, #56]	; 0x38
  40537e:	461f      	mov	r7, r3
  405380:	ea54 0305 	orrs.w	r3, r4, r5
  405384:	f47f aacc 	bne.w	404920 <_svfprintf_r+0x344>
  405388:	e4aa      	b.n	404ce0 <_svfprintf_r+0x704>
  40538a:	3301      	adds	r3, #1
  40538c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40538e:	9324      	str	r3, [sp, #144]	; 0x90
  405390:	442c      	add	r4, r5
  405392:	2b07      	cmp	r3, #7
  405394:	9425      	str	r4, [sp, #148]	; 0x94
  405396:	e889 0024 	stmia.w	r9, {r2, r5}
  40539a:	f77f abad 	ble.w	404af8 <_svfprintf_r+0x51c>
  40539e:	e6c3      	b.n	405128 <_svfprintf_r+0xb4c>
  4053a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4053a2:	6814      	ldr	r4, [r2, #0]
  4053a4:	4613      	mov	r3, r2
  4053a6:	3304      	adds	r3, #4
  4053a8:	17e5      	asrs	r5, r4, #31
  4053aa:	4622      	mov	r2, r4
  4053ac:	930e      	str	r3, [sp, #56]	; 0x38
  4053ae:	2a00      	cmp	r2, #0
  4053b0:	462b      	mov	r3, r5
  4053b2:	f173 0300 	sbcs.w	r3, r3, #0
  4053b6:	f6bf aaa5 	bge.w	404904 <_svfprintf_r+0x328>
  4053ba:	4264      	negs	r4, r4
  4053bc:	f04f 072d 	mov.w	r7, #45	; 0x2d
  4053c0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4053c4:	f1bb 0f00 	cmp.w	fp, #0
  4053c8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4053cc:	f6ff aaa8 	blt.w	404920 <_svfprintf_r+0x344>
  4053d0:	9b07      	ldr	r3, [sp, #28]
  4053d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4053d6:	9307      	str	r3, [sp, #28]
  4053d8:	f7ff baa2 	b.w	404920 <_svfprintf_r+0x344>
  4053dc:	aa23      	add	r2, sp, #140	; 0x8c
  4053de:	9909      	ldr	r1, [sp, #36]	; 0x24
  4053e0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4053e2:	f004 fa6b 	bl	4098bc <__ssprint_r>
  4053e6:	2800      	cmp	r0, #0
  4053e8:	f47f a9f1 	bne.w	4047ce <_svfprintf_r+0x1f2>
  4053ec:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4053ee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4053f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4053f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4053f6:	4432      	add	r2, r6
  4053f8:	4617      	mov	r7, r2
  4053fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4053fc:	4293      	cmp	r3, r2
  4053fe:	db47      	blt.n	405490 <_svfprintf_r+0xeb4>
  405400:	9a07      	ldr	r2, [sp, #28]
  405402:	07d5      	lsls	r5, r2, #31
  405404:	d444      	bmi.n	405490 <_svfprintf_r+0xeb4>
  405406:	9912      	ldr	r1, [sp, #72]	; 0x48
  405408:	440e      	add	r6, r1
  40540a:	1bf5      	subs	r5, r6, r7
  40540c:	1acb      	subs	r3, r1, r3
  40540e:	429d      	cmp	r5, r3
  405410:	bfa8      	it	ge
  405412:	461d      	movge	r5, r3
  405414:	2d00      	cmp	r5, #0
  405416:	462e      	mov	r6, r5
  405418:	dd0d      	ble.n	405436 <_svfprintf_r+0xe5a>
  40541a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40541c:	f8c9 7000 	str.w	r7, [r9]
  405420:	3201      	adds	r2, #1
  405422:	442c      	add	r4, r5
  405424:	2a07      	cmp	r2, #7
  405426:	9425      	str	r4, [sp, #148]	; 0x94
  405428:	f8c9 5004 	str.w	r5, [r9, #4]
  40542c:	9224      	str	r2, [sp, #144]	; 0x90
  40542e:	f300 830b 	bgt.w	405a48 <_svfprintf_r+0x146c>
  405432:	f109 0908 	add.w	r9, r9, #8
  405436:	2e00      	cmp	r6, #0
  405438:	bfac      	ite	ge
  40543a:	1b9d      	subge	r5, r3, r6
  40543c:	461d      	movlt	r5, r3
  40543e:	2d00      	cmp	r5, #0
  405440:	f77f ab5c 	ble.w	404afc <_svfprintf_r+0x520>
  405444:	4a2a      	ldr	r2, [pc, #168]	; (4054f0 <_svfprintf_r+0xf14>)
  405446:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405448:	920f      	str	r2, [sp, #60]	; 0x3c
  40544a:	2d10      	cmp	r5, #16
  40544c:	dd9d      	ble.n	40538a <_svfprintf_r+0xdae>
  40544e:	2610      	movs	r6, #16
  405450:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405452:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  405456:	e004      	b.n	405462 <_svfprintf_r+0xe86>
  405458:	f109 0908 	add.w	r9, r9, #8
  40545c:	3d10      	subs	r5, #16
  40545e:	2d10      	cmp	r5, #16
  405460:	dd93      	ble.n	40538a <_svfprintf_r+0xdae>
  405462:	3301      	adds	r3, #1
  405464:	3410      	adds	r4, #16
  405466:	2b07      	cmp	r3, #7
  405468:	9425      	str	r4, [sp, #148]	; 0x94
  40546a:	9324      	str	r3, [sp, #144]	; 0x90
  40546c:	f8c9 a000 	str.w	sl, [r9]
  405470:	f8c9 6004 	str.w	r6, [r9, #4]
  405474:	ddf0      	ble.n	405458 <_svfprintf_r+0xe7c>
  405476:	aa23      	add	r2, sp, #140	; 0x8c
  405478:	4659      	mov	r1, fp
  40547a:	4638      	mov	r0, r7
  40547c:	f004 fa1e 	bl	4098bc <__ssprint_r>
  405480:	2800      	cmp	r0, #0
  405482:	f47f a9a4 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405486:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405488:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40548a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40548e:	e7e5      	b.n	40545c <_svfprintf_r+0xe80>
  405490:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405492:	9816      	ldr	r0, [sp, #88]	; 0x58
  405494:	9917      	ldr	r1, [sp, #92]	; 0x5c
  405496:	f8c9 1000 	str.w	r1, [r9]
  40549a:	3201      	adds	r2, #1
  40549c:	4404      	add	r4, r0
  40549e:	2a07      	cmp	r2, #7
  4054a0:	9425      	str	r4, [sp, #148]	; 0x94
  4054a2:	f8c9 0004 	str.w	r0, [r9, #4]
  4054a6:	9224      	str	r2, [sp, #144]	; 0x90
  4054a8:	f300 82a9 	bgt.w	4059fe <_svfprintf_r+0x1422>
  4054ac:	f109 0908 	add.w	r9, r9, #8
  4054b0:	e7a9      	b.n	405406 <_svfprintf_r+0xe2a>
  4054b2:	9b07      	ldr	r3, [sp, #28]
  4054b4:	07d8      	lsls	r0, r3, #31
  4054b6:	f53f adf4 	bmi.w	4050a2 <_svfprintf_r+0xac6>
  4054ba:	3501      	adds	r5, #1
  4054bc:	3401      	adds	r4, #1
  4054be:	2301      	movs	r3, #1
  4054c0:	2d07      	cmp	r5, #7
  4054c2:	9425      	str	r4, [sp, #148]	; 0x94
  4054c4:	9524      	str	r5, [sp, #144]	; 0x90
  4054c6:	f8c9 6000 	str.w	r6, [r9]
  4054ca:	f8c9 3004 	str.w	r3, [r9, #4]
  4054ce:	f77f ae1c 	ble.w	40510a <_svfprintf_r+0xb2e>
  4054d2:	e70f      	b.n	4052f4 <_svfprintf_r+0xd18>
  4054d4:	aa23      	add	r2, sp, #140	; 0x8c
  4054d6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4054d8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4054da:	f004 f9ef 	bl	4098bc <__ssprint_r>
  4054de:	2800      	cmp	r0, #0
  4054e0:	f47f a975 	bne.w	4047ce <_svfprintf_r+0x1f2>
  4054e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4054e6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4054e8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4054ec:	e5e7      	b.n	4050be <_svfprintf_r+0xae2>
  4054ee:	bf00      	nop
  4054f0:	0040bac0 	.word	0x0040bac0
  4054f4:	aa23      	add	r2, sp, #140	; 0x8c
  4054f6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4054f8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4054fa:	f004 f9df 	bl	4098bc <__ssprint_r>
  4054fe:	2800      	cmp	r0, #0
  405500:	f47f a965 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405504:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405506:	9d24      	ldr	r5, [sp, #144]	; 0x90
  405508:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40550c:	e5e6      	b.n	4050dc <_svfprintf_r+0xb00>
  40550e:	aa23      	add	r2, sp, #140	; 0x8c
  405510:	9909      	ldr	r1, [sp, #36]	; 0x24
  405512:	980a      	ldr	r0, [sp, #40]	; 0x28
  405514:	f004 f9d2 	bl	4098bc <__ssprint_r>
  405518:	2800      	cmp	r0, #0
  40551a:	f47f a958 	bne.w	4047ce <_svfprintf_r+0x1f2>
  40551e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405520:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405524:	f7ff ba98 	b.w	404a58 <_svfprintf_r+0x47c>
  405528:	9907      	ldr	r1, [sp, #28]
  40552a:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40552e:	f43f af19 	beq.w	405364 <_svfprintf_r+0xd88>
  405532:	980e      	ldr	r0, [sp, #56]	; 0x38
  405534:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  405538:	f1bb 0f00 	cmp.w	fp, #0
  40553c:	8804      	ldrh	r4, [r0, #0]
  40553e:	f100 0704 	add.w	r7, r0, #4
  405542:	f04f 0500 	mov.w	r5, #0
  405546:	f2c0 81b9 	blt.w	4058bc <_svfprintf_r+0x12e0>
  40554a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  40554e:	9307      	str	r3, [sp, #28]
  405550:	ea54 0305 	orrs.w	r3, r4, r5
  405554:	970e      	str	r7, [sp, #56]	; 0x38
  405556:	4617      	mov	r7, r2
  405558:	f47f a9e2 	bne.w	404920 <_svfprintf_r+0x344>
  40555c:	f7ff bbbb 	b.w	404cd6 <_svfprintf_r+0x6fa>
  405560:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405562:	4622      	mov	r2, r4
  405564:	4620      	mov	r0, r4
  405566:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405568:	4623      	mov	r3, r4
  40556a:	4621      	mov	r1, r4
  40556c:	f005 f844 	bl	40a5f8 <__aeabi_dcmpun>
  405570:	2800      	cmp	r0, #0
  405572:	f040 8317 	bne.w	405ba4 <_svfprintf_r+0x15c8>
  405576:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405578:	f1bb 3fff 	cmp.w	fp, #4294967295
  40557c:	f023 0320 	bic.w	r3, r3, #32
  405580:	930d      	str	r3, [sp, #52]	; 0x34
  405582:	f000 8270 	beq.w	405a66 <_svfprintf_r+0x148a>
  405586:	2b47      	cmp	r3, #71	; 0x47
  405588:	f000 8192 	beq.w	4058b0 <_svfprintf_r+0x12d4>
  40558c:	9b07      	ldr	r3, [sp, #28]
  40558e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  405592:	9310      	str	r3, [sp, #64]	; 0x40
  405594:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405596:	1e1f      	subs	r7, r3, #0
  405598:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40559a:	9308      	str	r3, [sp, #32]
  40559c:	bfbb      	ittet	lt
  40559e:	463b      	movlt	r3, r7
  4055a0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4055a4:	2300      	movge	r3, #0
  4055a6:	232d      	movlt	r3, #45	; 0x2d
  4055a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4055aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055ac:	2b66      	cmp	r3, #102	; 0x66
  4055ae:	f000 825d 	beq.w	405a6c <_svfprintf_r+0x1490>
  4055b2:	2b46      	cmp	r3, #70	; 0x46
  4055b4:	f000 8151 	beq.w	40585a <_svfprintf_r+0x127e>
  4055b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4055ba:	9a08      	ldr	r2, [sp, #32]
  4055bc:	2b45      	cmp	r3, #69	; 0x45
  4055be:	a821      	add	r0, sp, #132	; 0x84
  4055c0:	a91e      	add	r1, sp, #120	; 0x78
  4055c2:	bf0c      	ite	eq
  4055c4:	f10b 0501 	addeq.w	r5, fp, #1
  4055c8:	465d      	movne	r5, fp
  4055ca:	9004      	str	r0, [sp, #16]
  4055cc:	9103      	str	r1, [sp, #12]
  4055ce:	a81d      	add	r0, sp, #116	; 0x74
  4055d0:	2102      	movs	r1, #2
  4055d2:	463b      	mov	r3, r7
  4055d4:	9002      	str	r0, [sp, #8]
  4055d6:	9501      	str	r5, [sp, #4]
  4055d8:	9100      	str	r1, [sp, #0]
  4055da:	980a      	ldr	r0, [sp, #40]	; 0x28
  4055dc:	f001 fbc4 	bl	406d68 <_dtoa_r>
  4055e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055e2:	2b67      	cmp	r3, #103	; 0x67
  4055e4:	4606      	mov	r6, r0
  4055e6:	f040 8290 	bne.w	405b0a <_svfprintf_r+0x152e>
  4055ea:	9b07      	ldr	r3, [sp, #28]
  4055ec:	07da      	lsls	r2, r3, #31
  4055ee:	f140 82af 	bpl.w	405b50 <_svfprintf_r+0x1574>
  4055f2:	1974      	adds	r4, r6, r5
  4055f4:	9808      	ldr	r0, [sp, #32]
  4055f6:	4639      	mov	r1, r7
  4055f8:	2200      	movs	r2, #0
  4055fa:	2300      	movs	r3, #0
  4055fc:	f004 ffca 	bl	40a594 <__aeabi_dcmpeq>
  405600:	2800      	cmp	r0, #0
  405602:	f040 8190 	bne.w	405926 <_svfprintf_r+0x134a>
  405606:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405608:	429c      	cmp	r4, r3
  40560a:	d906      	bls.n	40561a <_svfprintf_r+0x103e>
  40560c:	2130      	movs	r1, #48	; 0x30
  40560e:	1c5a      	adds	r2, r3, #1
  405610:	9221      	str	r2, [sp, #132]	; 0x84
  405612:	7019      	strb	r1, [r3, #0]
  405614:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405616:	429c      	cmp	r4, r3
  405618:	d8f9      	bhi.n	40560e <_svfprintf_r+0x1032>
  40561a:	1b9b      	subs	r3, r3, r6
  40561c:	9312      	str	r3, [sp, #72]	; 0x48
  40561e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405620:	2b47      	cmp	r3, #71	; 0x47
  405622:	f000 8179 	beq.w	405918 <_svfprintf_r+0x133c>
  405626:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405628:	2b65      	cmp	r3, #101	; 0x65
  40562a:	f340 827d 	ble.w	405b28 <_svfprintf_r+0x154c>
  40562e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405630:	2b66      	cmp	r3, #102	; 0x66
  405632:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405634:	9313      	str	r3, [sp, #76]	; 0x4c
  405636:	f000 825b 	beq.w	405af0 <_svfprintf_r+0x1514>
  40563a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40563c:	9912      	ldr	r1, [sp, #72]	; 0x48
  40563e:	428a      	cmp	r2, r1
  405640:	f2c0 8230 	blt.w	405aa4 <_svfprintf_r+0x14c8>
  405644:	9b07      	ldr	r3, [sp, #28]
  405646:	07d9      	lsls	r1, r3, #31
  405648:	f100 8284 	bmi.w	405b54 <_svfprintf_r+0x1578>
  40564c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405650:	920d      	str	r2, [sp, #52]	; 0x34
  405652:	2267      	movs	r2, #103	; 0x67
  405654:	9211      	str	r2, [sp, #68]	; 0x44
  405656:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405658:	2a00      	cmp	r2, #0
  40565a:	f040 8153 	bne.w	405904 <_svfprintf_r+0x1328>
  40565e:	9308      	str	r3, [sp, #32]
  405660:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405662:	9307      	str	r3, [sp, #28]
  405664:	4693      	mov	fp, r2
  405666:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40566a:	f7ff b97d 	b.w	404968 <_svfprintf_r+0x38c>
  40566e:	9907      	ldr	r1, [sp, #28]
  405670:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  405674:	d015      	beq.n	4056a2 <_svfprintf_r+0x10c6>
  405676:	980e      	ldr	r0, [sp, #56]	; 0x38
  405678:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40567c:	f1bb 0f00 	cmp.w	fp, #0
  405680:	8804      	ldrh	r4, [r0, #0]
  405682:	f100 0704 	add.w	r7, r0, #4
  405686:	f04f 0500 	mov.w	r5, #0
  40568a:	db16      	blt.n	4056ba <_svfprintf_r+0x10de>
  40568c:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  405690:	9307      	str	r3, [sp, #28]
  405692:	ea54 0305 	orrs.w	r3, r4, r5
  405696:	970e      	str	r7, [sp, #56]	; 0x38
  405698:	f43f ac3a 	beq.w	404f10 <_svfprintf_r+0x934>
  40569c:	4617      	mov	r7, r2
  40569e:	f7ff b8c2 	b.w	404826 <_svfprintf_r+0x24a>
  4056a2:	990e      	ldr	r1, [sp, #56]	; 0x38
  4056a4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4056a8:	f1bb 0f00 	cmp.w	fp, #0
  4056ac:	680c      	ldr	r4, [r1, #0]
  4056ae:	f101 0704 	add.w	r7, r1, #4
  4056b2:	f04f 0500 	mov.w	r5, #0
  4056b6:	f280 80a5 	bge.w	405804 <_svfprintf_r+0x1228>
  4056ba:	970e      	str	r7, [sp, #56]	; 0x38
  4056bc:	2700      	movs	r7, #0
  4056be:	f7ff b8b2 	b.w	404826 <_svfprintf_r+0x24a>
  4056c2:	9b07      	ldr	r3, [sp, #28]
  4056c4:	06df      	lsls	r7, r3, #27
  4056c6:	d40b      	bmi.n	4056e0 <_svfprintf_r+0x1104>
  4056c8:	9b07      	ldr	r3, [sp, #28]
  4056ca:	065e      	lsls	r6, r3, #25
  4056cc:	d508      	bpl.n	4056e0 <_svfprintf_r+0x1104>
  4056ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4056d0:	6813      	ldr	r3, [r2, #0]
  4056d2:	3204      	adds	r2, #4
  4056d4:	920e      	str	r2, [sp, #56]	; 0x38
  4056d6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4056da:	801a      	strh	r2, [r3, #0]
  4056dc:	f7fe bfa4 	b.w	404628 <_svfprintf_r+0x4c>
  4056e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4056e2:	6813      	ldr	r3, [r2, #0]
  4056e4:	3204      	adds	r2, #4
  4056e6:	920e      	str	r2, [sp, #56]	; 0x38
  4056e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4056ea:	601a      	str	r2, [r3, #0]
  4056ec:	f7fe bf9c 	b.w	404628 <_svfprintf_r+0x4c>
  4056f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4056f2:	9b07      	ldr	r3, [sp, #28]
  4056f4:	f013 0f40 	tst.w	r3, #64	; 0x40
  4056f8:	4613      	mov	r3, r2
  4056fa:	f103 0304 	add.w	r3, r3, #4
  4056fe:	bf0c      	ite	eq
  405700:	6814      	ldreq	r4, [r2, #0]
  405702:	8814      	ldrhne	r4, [r2, #0]
  405704:	930e      	str	r3, [sp, #56]	; 0x38
  405706:	2500      	movs	r5, #0
  405708:	f7ff bb02 	b.w	404d10 <_svfprintf_r+0x734>
  40570c:	2700      	movs	r7, #0
  40570e:	45bb      	cmp	fp, r7
  405710:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405714:	f6ff ac0e 	blt.w	404f34 <_svfprintf_r+0x958>
  405718:	9b07      	ldr	r3, [sp, #28]
  40571a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40571e:	9307      	str	r3, [sp, #28]
  405720:	f7ff bbd6 	b.w	404ed0 <_svfprintf_r+0x8f4>
  405724:	4614      	mov	r4, r2
  405726:	3301      	adds	r3, #1
  405728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40572a:	9324      	str	r3, [sp, #144]	; 0x90
  40572c:	442c      	add	r4, r5
  40572e:	2b07      	cmp	r3, #7
  405730:	9425      	str	r4, [sp, #148]	; 0x94
  405732:	e889 0024 	stmia.w	r9, {r2, r5}
  405736:	f73f ae51 	bgt.w	4053dc <_svfprintf_r+0xe00>
  40573a:	f109 0908 	add.w	r9, r9, #8
  40573e:	e658      	b.n	4053f2 <_svfprintf_r+0xe16>
  405740:	aa23      	add	r2, sp, #140	; 0x8c
  405742:	9909      	ldr	r1, [sp, #36]	; 0x24
  405744:	980a      	ldr	r0, [sp, #40]	; 0x28
  405746:	f004 f8b9 	bl	4098bc <__ssprint_r>
  40574a:	2800      	cmp	r0, #0
  40574c:	f47f a83f 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405750:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405752:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405756:	e40f      	b.n	404f78 <_svfprintf_r+0x99c>
  405758:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40575a:	f7ff bbe4 	b.w	404f26 <_svfprintf_r+0x94a>
  40575e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405760:	4ab5      	ldr	r2, [pc, #724]	; (405a38 <_svfprintf_r+0x145c>)
  405762:	f8c9 2000 	str.w	r2, [r9]
  405766:	3301      	adds	r3, #1
  405768:	3401      	adds	r4, #1
  40576a:	2201      	movs	r2, #1
  40576c:	2b07      	cmp	r3, #7
  40576e:	9425      	str	r4, [sp, #148]	; 0x94
  405770:	9324      	str	r3, [sp, #144]	; 0x90
  405772:	f8c9 2004 	str.w	r2, [r9, #4]
  405776:	f300 808e 	bgt.w	405896 <_svfprintf_r+0x12ba>
  40577a:	f109 0908 	add.w	r9, r9, #8
  40577e:	b92d      	cbnz	r5, 40578c <_svfprintf_r+0x11b0>
  405780:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405782:	b91b      	cbnz	r3, 40578c <_svfprintf_r+0x11b0>
  405784:	9b07      	ldr	r3, [sp, #28]
  405786:	07df      	lsls	r7, r3, #31
  405788:	f57f a9b8 	bpl.w	404afc <_svfprintf_r+0x520>
  40578c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40578e:	9916      	ldr	r1, [sp, #88]	; 0x58
  405790:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  405792:	f8c9 2000 	str.w	r2, [r9]
  405796:	3301      	adds	r3, #1
  405798:	440c      	add	r4, r1
  40579a:	2b07      	cmp	r3, #7
  40579c:	9425      	str	r4, [sp, #148]	; 0x94
  40579e:	f8c9 1004 	str.w	r1, [r9, #4]
  4057a2:	9324      	str	r3, [sp, #144]	; 0x90
  4057a4:	f300 81c2 	bgt.w	405b2c <_svfprintf_r+0x1550>
  4057a8:	f109 0908 	add.w	r9, r9, #8
  4057ac:	426d      	negs	r5, r5
  4057ae:	2d00      	cmp	r5, #0
  4057b0:	f340 809b 	ble.w	4058ea <_svfprintf_r+0x130e>
  4057b4:	4aa1      	ldr	r2, [pc, #644]	; (405a3c <_svfprintf_r+0x1460>)
  4057b6:	920f      	str	r2, [sp, #60]	; 0x3c
  4057b8:	2d10      	cmp	r5, #16
  4057ba:	f340 80c3 	ble.w	405944 <_svfprintf_r+0x1368>
  4057be:	4622      	mov	r2, r4
  4057c0:	2710      	movs	r7, #16
  4057c2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4057c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4057c8:	e005      	b.n	4057d6 <_svfprintf_r+0x11fa>
  4057ca:	f109 0908 	add.w	r9, r9, #8
  4057ce:	3d10      	subs	r5, #16
  4057d0:	2d10      	cmp	r5, #16
  4057d2:	f340 80b6 	ble.w	405942 <_svfprintf_r+0x1366>
  4057d6:	3301      	adds	r3, #1
  4057d8:	3210      	adds	r2, #16
  4057da:	2b07      	cmp	r3, #7
  4057dc:	9225      	str	r2, [sp, #148]	; 0x94
  4057de:	9324      	str	r3, [sp, #144]	; 0x90
  4057e0:	f8c9 a000 	str.w	sl, [r9]
  4057e4:	f8c9 7004 	str.w	r7, [r9, #4]
  4057e8:	ddef      	ble.n	4057ca <_svfprintf_r+0x11ee>
  4057ea:	aa23      	add	r2, sp, #140	; 0x8c
  4057ec:	4621      	mov	r1, r4
  4057ee:	4658      	mov	r0, fp
  4057f0:	f004 f864 	bl	4098bc <__ssprint_r>
  4057f4:	2800      	cmp	r0, #0
  4057f6:	f47e afea 	bne.w	4047ce <_svfprintf_r+0x1f2>
  4057fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4057fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4057fe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405802:	e7e4      	b.n	4057ce <_svfprintf_r+0x11f2>
  405804:	9a07      	ldr	r2, [sp, #28]
  405806:	f7ff ba38 	b.w	404c7a <_svfprintf_r+0x69e>
  40580a:	9a07      	ldr	r2, [sp, #28]
  40580c:	e590      	b.n	405330 <_svfprintf_r+0xd54>
  40580e:	9b07      	ldr	r3, [sp, #28]
  405810:	f043 0320 	orr.w	r3, r3, #32
  405814:	9307      	str	r3, [sp, #28]
  405816:	f108 0801 	add.w	r8, r8, #1
  40581a:	f898 3000 	ldrb.w	r3, [r8]
  40581e:	f7fe bf36 	b.w	40468e <_svfprintf_r+0xb2>
  405822:	aa23      	add	r2, sp, #140	; 0x8c
  405824:	9909      	ldr	r1, [sp, #36]	; 0x24
  405826:	980a      	ldr	r0, [sp, #40]	; 0x28
  405828:	f004 f848 	bl	4098bc <__ssprint_r>
  40582c:	2800      	cmp	r0, #0
  40582e:	f47e afce 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405832:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405834:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405838:	f7ff bbb6 	b.w	404fa8 <_svfprintf_r+0x9cc>
  40583c:	2140      	movs	r1, #64	; 0x40
  40583e:	980a      	ldr	r0, [sp, #40]	; 0x28
  405840:	f002 fede 	bl	408600 <_malloc_r>
  405844:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405846:	6010      	str	r0, [r2, #0]
  405848:	6110      	str	r0, [r2, #16]
  40584a:	2800      	cmp	r0, #0
  40584c:	f000 81e5 	beq.w	405c1a <_svfprintf_r+0x163e>
  405850:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405852:	2340      	movs	r3, #64	; 0x40
  405854:	6153      	str	r3, [r2, #20]
  405856:	f7fe bed8 	b.w	40460a <_svfprintf_r+0x2e>
  40585a:	a821      	add	r0, sp, #132	; 0x84
  40585c:	a91e      	add	r1, sp, #120	; 0x78
  40585e:	9004      	str	r0, [sp, #16]
  405860:	9103      	str	r1, [sp, #12]
  405862:	a81d      	add	r0, sp, #116	; 0x74
  405864:	2103      	movs	r1, #3
  405866:	9002      	str	r0, [sp, #8]
  405868:	9a08      	ldr	r2, [sp, #32]
  40586a:	f8cd b004 	str.w	fp, [sp, #4]
  40586e:	463b      	mov	r3, r7
  405870:	9100      	str	r1, [sp, #0]
  405872:	980a      	ldr	r0, [sp, #40]	; 0x28
  405874:	f001 fa78 	bl	406d68 <_dtoa_r>
  405878:	465d      	mov	r5, fp
  40587a:	4606      	mov	r6, r0
  40587c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40587e:	2b46      	cmp	r3, #70	; 0x46
  405880:	eb06 0405 	add.w	r4, r6, r5
  405884:	f47f aeb6 	bne.w	4055f4 <_svfprintf_r+0x1018>
  405888:	7833      	ldrb	r3, [r6, #0]
  40588a:	2b30      	cmp	r3, #48	; 0x30
  40588c:	f000 817c 	beq.w	405b88 <_svfprintf_r+0x15ac>
  405890:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  405892:	442c      	add	r4, r5
  405894:	e6ae      	b.n	4055f4 <_svfprintf_r+0x1018>
  405896:	aa23      	add	r2, sp, #140	; 0x8c
  405898:	9909      	ldr	r1, [sp, #36]	; 0x24
  40589a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40589c:	f004 f80e 	bl	4098bc <__ssprint_r>
  4058a0:	2800      	cmp	r0, #0
  4058a2:	f47e af94 	bne.w	4047ce <_svfprintf_r+0x1f2>
  4058a6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4058a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4058aa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4058ae:	e766      	b.n	40577e <_svfprintf_r+0x11a2>
  4058b0:	f1bb 0f00 	cmp.w	fp, #0
  4058b4:	bf08      	it	eq
  4058b6:	f04f 0b01 	moveq.w	fp, #1
  4058ba:	e667      	b.n	40558c <_svfprintf_r+0xfb0>
  4058bc:	970e      	str	r7, [sp, #56]	; 0x38
  4058be:	4617      	mov	r7, r2
  4058c0:	e55e      	b.n	405380 <_svfprintf_r+0xda4>
  4058c2:	4630      	mov	r0, r6
  4058c4:	f7fe fe1c 	bl	404500 <strlen>
  4058c8:	46a3      	mov	fp, r4
  4058ca:	4603      	mov	r3, r0
  4058cc:	900d      	str	r0, [sp, #52]	; 0x34
  4058ce:	f7ff baf4 	b.w	404eba <_svfprintf_r+0x8de>
  4058d2:	aa23      	add	r2, sp, #140	; 0x8c
  4058d4:	9909      	ldr	r1, [sp, #36]	; 0x24
  4058d6:	980a      	ldr	r0, [sp, #40]	; 0x28
  4058d8:	f003 fff0 	bl	4098bc <__ssprint_r>
  4058dc:	2800      	cmp	r0, #0
  4058de:	f47e af76 	bne.w	4047ce <_svfprintf_r+0x1f2>
  4058e2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4058e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058e6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4058ea:	9912      	ldr	r1, [sp, #72]	; 0x48
  4058ec:	f8c9 6000 	str.w	r6, [r9]
  4058f0:	3301      	adds	r3, #1
  4058f2:	440c      	add	r4, r1
  4058f4:	2b07      	cmp	r3, #7
  4058f6:	9425      	str	r4, [sp, #148]	; 0x94
  4058f8:	9324      	str	r3, [sp, #144]	; 0x90
  4058fa:	f8c9 1004 	str.w	r1, [r9, #4]
  4058fe:	f77f a8fb 	ble.w	404af8 <_svfprintf_r+0x51c>
  405902:	e411      	b.n	405128 <_svfprintf_r+0xb4c>
  405904:	272d      	movs	r7, #45	; 0x2d
  405906:	9308      	str	r3, [sp, #32]
  405908:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40590a:	9307      	str	r3, [sp, #28]
  40590c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405910:	f04f 0b00 	mov.w	fp, #0
  405914:	f7ff b829 	b.w	40496a <_svfprintf_r+0x38e>
  405918:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40591a:	1cdd      	adds	r5, r3, #3
  40591c:	db1e      	blt.n	40595c <_svfprintf_r+0x1380>
  40591e:	459b      	cmp	fp, r3
  405920:	db1c      	blt.n	40595c <_svfprintf_r+0x1380>
  405922:	9313      	str	r3, [sp, #76]	; 0x4c
  405924:	e689      	b.n	40563a <_svfprintf_r+0x105e>
  405926:	4623      	mov	r3, r4
  405928:	e677      	b.n	40561a <_svfprintf_r+0x103e>
  40592a:	aa23      	add	r2, sp, #140	; 0x8c
  40592c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40592e:	980a      	ldr	r0, [sp, #40]	; 0x28
  405930:	f003 ffc4 	bl	4098bc <__ssprint_r>
  405934:	2800      	cmp	r0, #0
  405936:	f47e af4a 	bne.w	4047ce <_svfprintf_r+0x1f2>
  40593a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40593c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405940:	e459      	b.n	4051f6 <_svfprintf_r+0xc1a>
  405942:	4614      	mov	r4, r2
  405944:	3301      	adds	r3, #1
  405946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405948:	9324      	str	r3, [sp, #144]	; 0x90
  40594a:	442c      	add	r4, r5
  40594c:	2b07      	cmp	r3, #7
  40594e:	9425      	str	r4, [sp, #148]	; 0x94
  405950:	e889 0024 	stmia.w	r9, {r2, r5}
  405954:	dcbd      	bgt.n	4058d2 <_svfprintf_r+0x12f6>
  405956:	f109 0908 	add.w	r9, r9, #8
  40595a:	e7c6      	b.n	4058ea <_svfprintf_r+0x130e>
  40595c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40595e:	3a02      	subs	r2, #2
  405960:	9211      	str	r2, [sp, #68]	; 0x44
  405962:	3b01      	subs	r3, #1
  405964:	2b00      	cmp	r3, #0
  405966:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40596a:	931d      	str	r3, [sp, #116]	; 0x74
  40596c:	bfb8      	it	lt
  40596e:	425b      	neglt	r3, r3
  405970:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  405974:	bfb4      	ite	lt
  405976:	222d      	movlt	r2, #45	; 0x2d
  405978:	222b      	movge	r2, #43	; 0x2b
  40597a:	2b09      	cmp	r3, #9
  40597c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  405980:	f340 80f1 	ble.w	405b66 <_svfprintf_r+0x158a>
  405984:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  405988:	4604      	mov	r4, r0
  40598a:	4a2d      	ldr	r2, [pc, #180]	; (405a40 <_svfprintf_r+0x1464>)
  40598c:	fb82 2103 	smull	r2, r1, r2, r3
  405990:	17da      	asrs	r2, r3, #31
  405992:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  405996:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40599a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40599e:	f103 0130 	add.w	r1, r3, #48	; 0x30
  4059a2:	2a09      	cmp	r2, #9
  4059a4:	4613      	mov	r3, r2
  4059a6:	f804 1d01 	strb.w	r1, [r4, #-1]!
  4059aa:	dcee      	bgt.n	40598a <_svfprintf_r+0x13ae>
  4059ac:	4621      	mov	r1, r4
  4059ae:	3330      	adds	r3, #48	; 0x30
  4059b0:	b2da      	uxtb	r2, r3
  4059b2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  4059b6:	4288      	cmp	r0, r1
  4059b8:	f240 813a 	bls.w	405c30 <_svfprintf_r+0x1654>
  4059bc:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  4059c0:	4623      	mov	r3, r4
  4059c2:	e001      	b.n	4059c8 <_svfprintf_r+0x13ec>
  4059c4:	f813 2b01 	ldrb.w	r2, [r3], #1
  4059c8:	f801 2b01 	strb.w	r2, [r1], #1
  4059cc:	4298      	cmp	r0, r3
  4059ce:	d1f9      	bne.n	4059c4 <_svfprintf_r+0x13e8>
  4059d0:	1c43      	adds	r3, r0, #1
  4059d2:	1b1b      	subs	r3, r3, r4
  4059d4:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  4059d8:	4413      	add	r3, r2
  4059da:	aa1f      	add	r2, sp, #124	; 0x7c
  4059dc:	1a9b      	subs	r3, r3, r2
  4059de:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4059e0:	9319      	str	r3, [sp, #100]	; 0x64
  4059e2:	2a01      	cmp	r2, #1
  4059e4:	4413      	add	r3, r2
  4059e6:	930d      	str	r3, [sp, #52]	; 0x34
  4059e8:	f340 80ea 	ble.w	405bc0 <_svfprintf_r+0x15e4>
  4059ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4059ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4059f0:	4413      	add	r3, r2
  4059f2:	2200      	movs	r2, #0
  4059f4:	930d      	str	r3, [sp, #52]	; 0x34
  4059f6:	9213      	str	r2, [sp, #76]	; 0x4c
  4059f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4059fc:	e62b      	b.n	405656 <_svfprintf_r+0x107a>
  4059fe:	aa23      	add	r2, sp, #140	; 0x8c
  405a00:	9909      	ldr	r1, [sp, #36]	; 0x24
  405a02:	980a      	ldr	r0, [sp, #40]	; 0x28
  405a04:	f003 ff5a 	bl	4098bc <__ssprint_r>
  405a08:	2800      	cmp	r0, #0
  405a0a:	f47e aee0 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405a0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405a10:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405a12:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405a16:	e4f6      	b.n	405406 <_svfprintf_r+0xe2a>
  405a18:	2d06      	cmp	r5, #6
  405a1a:	462b      	mov	r3, r5
  405a1c:	bf28      	it	cs
  405a1e:	2306      	movcs	r3, #6
  405a20:	930d      	str	r3, [sp, #52]	; 0x34
  405a22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405a26:	46b3      	mov	fp, r6
  405a28:	970e      	str	r7, [sp, #56]	; 0x38
  405a2a:	9613      	str	r6, [sp, #76]	; 0x4c
  405a2c:	4637      	mov	r7, r6
  405a2e:	9308      	str	r3, [sp, #32]
  405a30:	4e04      	ldr	r6, [pc, #16]	; (405a44 <_svfprintf_r+0x1468>)
  405a32:	f7fe bf99 	b.w	404968 <_svfprintf_r+0x38c>
  405a36:	bf00      	nop
  405a38:	0040bb10 	.word	0x0040bb10
  405a3c:	0040bac0 	.word	0x0040bac0
  405a40:	66666667 	.word	0x66666667
  405a44:	0040bb08 	.word	0x0040bb08
  405a48:	aa23      	add	r2, sp, #140	; 0x8c
  405a4a:	9909      	ldr	r1, [sp, #36]	; 0x24
  405a4c:	980a      	ldr	r0, [sp, #40]	; 0x28
  405a4e:	f003 ff35 	bl	4098bc <__ssprint_r>
  405a52:	2800      	cmp	r0, #0
  405a54:	f47e aebb 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405a58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405a5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405a5c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405a5e:	1ad3      	subs	r3, r2, r3
  405a60:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405a64:	e4e7      	b.n	405436 <_svfprintf_r+0xe5a>
  405a66:	f04f 0b06 	mov.w	fp, #6
  405a6a:	e58f      	b.n	40558c <_svfprintf_r+0xfb0>
  405a6c:	a821      	add	r0, sp, #132	; 0x84
  405a6e:	a91e      	add	r1, sp, #120	; 0x78
  405a70:	9004      	str	r0, [sp, #16]
  405a72:	9103      	str	r1, [sp, #12]
  405a74:	a81d      	add	r0, sp, #116	; 0x74
  405a76:	2103      	movs	r1, #3
  405a78:	9002      	str	r0, [sp, #8]
  405a7a:	9a08      	ldr	r2, [sp, #32]
  405a7c:	f8cd b004 	str.w	fp, [sp, #4]
  405a80:	463b      	mov	r3, r7
  405a82:	9100      	str	r1, [sp, #0]
  405a84:	980a      	ldr	r0, [sp, #40]	; 0x28
  405a86:	f001 f96f 	bl	406d68 <_dtoa_r>
  405a8a:	465d      	mov	r5, fp
  405a8c:	4606      	mov	r6, r0
  405a8e:	eb00 040b 	add.w	r4, r0, fp
  405a92:	e6f9      	b.n	405888 <_svfprintf_r+0x12ac>
  405a94:	9307      	str	r3, [sp, #28]
  405a96:	f7ff b959 	b.w	404d4c <_svfprintf_r+0x770>
  405a9a:	272d      	movs	r7, #45	; 0x2d
  405a9c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405aa0:	f7ff b8b2 	b.w	404c08 <_svfprintf_r+0x62c>
  405aa4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405aa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405aa8:	4413      	add	r3, r2
  405aaa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405aac:	930d      	str	r3, [sp, #52]	; 0x34
  405aae:	2a00      	cmp	r2, #0
  405ab0:	dd7e      	ble.n	405bb0 <_svfprintf_r+0x15d4>
  405ab2:	2267      	movs	r2, #103	; 0x67
  405ab4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405ab8:	9211      	str	r2, [sp, #68]	; 0x44
  405aba:	e5cc      	b.n	405656 <_svfprintf_r+0x107a>
  405abc:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  405ac0:	970e      	str	r7, [sp, #56]	; 0x38
  405ac2:	9308      	str	r3, [sp, #32]
  405ac4:	950d      	str	r5, [sp, #52]	; 0x34
  405ac6:	4683      	mov	fp, r0
  405ac8:	9013      	str	r0, [sp, #76]	; 0x4c
  405aca:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405ace:	f7fe bf4b 	b.w	404968 <_svfprintf_r+0x38c>
  405ad2:	9b07      	ldr	r3, [sp, #28]
  405ad4:	07db      	lsls	r3, r3, #31
  405ad6:	465f      	mov	r7, fp
  405ad8:	d505      	bpl.n	405ae6 <_svfprintf_r+0x150a>
  405ada:	ae40      	add	r6, sp, #256	; 0x100
  405adc:	2330      	movs	r3, #48	; 0x30
  405ade:	f806 3d41 	strb.w	r3, [r6, #-65]!
  405ae2:	f7fe bf37 	b.w	404954 <_svfprintf_r+0x378>
  405ae6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  405aea:	ae30      	add	r6, sp, #192	; 0xc0
  405aec:	f7fe bf35 	b.w	40495a <_svfprintf_r+0x37e>
  405af0:	2b00      	cmp	r3, #0
  405af2:	dd7d      	ble.n	405bf0 <_svfprintf_r+0x1614>
  405af4:	f1bb 0f00 	cmp.w	fp, #0
  405af8:	d13d      	bne.n	405b76 <_svfprintf_r+0x159a>
  405afa:	9a07      	ldr	r2, [sp, #28]
  405afc:	07d4      	lsls	r4, r2, #31
  405afe:	d43a      	bmi.n	405b76 <_svfprintf_r+0x159a>
  405b00:	461a      	mov	r2, r3
  405b02:	920d      	str	r2, [sp, #52]	; 0x34
  405b04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405b08:	e5a5      	b.n	405656 <_svfprintf_r+0x107a>
  405b0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405b0c:	2b47      	cmp	r3, #71	; 0x47
  405b0e:	f47f ad70 	bne.w	4055f2 <_svfprintf_r+0x1016>
  405b12:	9b07      	ldr	r3, [sp, #28]
  405b14:	07db      	lsls	r3, r3, #31
  405b16:	f53f aeb1 	bmi.w	40587c <_svfprintf_r+0x12a0>
  405b1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405b1c:	1b9b      	subs	r3, r3, r6
  405b1e:	9312      	str	r3, [sp, #72]	; 0x48
  405b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405b22:	2b47      	cmp	r3, #71	; 0x47
  405b24:	f43f aef8 	beq.w	405918 <_svfprintf_r+0x133c>
  405b28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405b2a:	e71a      	b.n	405962 <_svfprintf_r+0x1386>
  405b2c:	aa23      	add	r2, sp, #140	; 0x8c
  405b2e:	9909      	ldr	r1, [sp, #36]	; 0x24
  405b30:	980a      	ldr	r0, [sp, #40]	; 0x28
  405b32:	f003 fec3 	bl	4098bc <__ssprint_r>
  405b36:	2800      	cmp	r0, #0
  405b38:	f47e ae49 	bne.w	4047ce <_svfprintf_r+0x1f2>
  405b3c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  405b3e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405b40:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405b42:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405b46:	e631      	b.n	4057ac <_svfprintf_r+0x11d0>
  405b48:	46a0      	mov	r8, r4
  405b4a:	2500      	movs	r5, #0
  405b4c:	f7fe bda1 	b.w	404692 <_svfprintf_r+0xb6>
  405b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405b52:	e562      	b.n	40561a <_svfprintf_r+0x103e>
  405b54:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405b56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405b58:	4413      	add	r3, r2
  405b5a:	2267      	movs	r2, #103	; 0x67
  405b5c:	930d      	str	r3, [sp, #52]	; 0x34
  405b5e:	9211      	str	r2, [sp, #68]	; 0x44
  405b60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405b64:	e577      	b.n	405656 <_svfprintf_r+0x107a>
  405b66:	3330      	adds	r3, #48	; 0x30
  405b68:	2230      	movs	r2, #48	; 0x30
  405b6a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  405b6e:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  405b72:	ab20      	add	r3, sp, #128	; 0x80
  405b74:	e731      	b.n	4059da <_svfprintf_r+0x13fe>
  405b76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405b78:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405b7a:	189d      	adds	r5, r3, r2
  405b7c:	eb05 030b 	add.w	r3, r5, fp
  405b80:	930d      	str	r3, [sp, #52]	; 0x34
  405b82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405b86:	e566      	b.n	405656 <_svfprintf_r+0x107a>
  405b88:	9808      	ldr	r0, [sp, #32]
  405b8a:	4639      	mov	r1, r7
  405b8c:	2200      	movs	r2, #0
  405b8e:	2300      	movs	r3, #0
  405b90:	f004 fd00 	bl	40a594 <__aeabi_dcmpeq>
  405b94:	2800      	cmp	r0, #0
  405b96:	f47f ae7b 	bne.w	405890 <_svfprintf_r+0x12b4>
  405b9a:	f1c5 0501 	rsb	r5, r5, #1
  405b9e:	951d      	str	r5, [sp, #116]	; 0x74
  405ba0:	442c      	add	r4, r5
  405ba2:	e527      	b.n	4055f4 <_svfprintf_r+0x1018>
  405ba4:	4e32      	ldr	r6, [pc, #200]	; (405c70 <_svfprintf_r+0x1694>)
  405ba6:	4b33      	ldr	r3, [pc, #204]	; (405c74 <_svfprintf_r+0x1698>)
  405ba8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405bac:	f7ff b82e 	b.w	404c0c <_svfprintf_r+0x630>
  405bb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405bb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405bb4:	f1c3 0301 	rsb	r3, r3, #1
  405bb8:	441a      	add	r2, r3
  405bba:	4613      	mov	r3, r2
  405bbc:	920d      	str	r2, [sp, #52]	; 0x34
  405bbe:	e778      	b.n	405ab2 <_svfprintf_r+0x14d6>
  405bc0:	9b07      	ldr	r3, [sp, #28]
  405bc2:	f013 0301 	ands.w	r3, r3, #1
  405bc6:	f47f af11 	bne.w	4059ec <_svfprintf_r+0x1410>
  405bca:	9313      	str	r3, [sp, #76]	; 0x4c
  405bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405bce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405bd2:	e540      	b.n	405656 <_svfprintf_r+0x107a>
  405bd4:	980e      	ldr	r0, [sp, #56]	; 0x38
  405bd6:	f898 3001 	ldrb.w	r3, [r8, #1]
  405bda:	6805      	ldr	r5, [r0, #0]
  405bdc:	3004      	adds	r0, #4
  405bde:	2d00      	cmp	r5, #0
  405be0:	900e      	str	r0, [sp, #56]	; 0x38
  405be2:	46a0      	mov	r8, r4
  405be4:	f6be ad53 	bge.w	40468e <_svfprintf_r+0xb2>
  405be8:	f04f 35ff 	mov.w	r5, #4294967295
  405bec:	f7fe bd4f 	b.w	40468e <_svfprintf_r+0xb2>
  405bf0:	f1bb 0f00 	cmp.w	fp, #0
  405bf4:	d102      	bne.n	405bfc <_svfprintf_r+0x1620>
  405bf6:	9b07      	ldr	r3, [sp, #28]
  405bf8:	07d8      	lsls	r0, r3, #31
  405bfa:	d507      	bpl.n	405c0c <_svfprintf_r+0x1630>
  405bfc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  405bfe:	1c5d      	adds	r5, r3, #1
  405c00:	eb05 030b 	add.w	r3, r5, fp
  405c04:	930d      	str	r3, [sp, #52]	; 0x34
  405c06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405c0a:	e524      	b.n	405656 <_svfprintf_r+0x107a>
  405c0c:	2301      	movs	r3, #1
  405c0e:	930d      	str	r3, [sp, #52]	; 0x34
  405c10:	e521      	b.n	405656 <_svfprintf_r+0x107a>
  405c12:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405c16:	f7ff b921 	b.w	404e5c <_svfprintf_r+0x880>
  405c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405c1c:	230c      	movs	r3, #12
  405c1e:	6013      	str	r3, [r2, #0]
  405c20:	f04f 30ff 	mov.w	r0, #4294967295
  405c24:	f7fe bddc 	b.w	4047e0 <_svfprintf_r+0x204>
  405c28:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405c2c:	f7ff b8f9 	b.w	404e22 <_svfprintf_r+0x846>
  405c30:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  405c34:	e6d1      	b.n	4059da <_svfprintf_r+0x13fe>
  405c36:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405c3a:	f7fe bdd9 	b.w	4047f0 <_svfprintf_r+0x214>
  405c3e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405c42:	f7ff b857 	b.w	404cf4 <_svfprintf_r+0x718>
  405c46:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405c4a:	f7ff b825 	b.w	404c98 <_svfprintf_r+0x6bc>
  405c4e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405c52:	f7ff b94c 	b.w	404eee <_svfprintf_r+0x912>
  405c56:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405c5a:	f7fe bff3 	b.w	404c44 <_svfprintf_r+0x668>
  405c5e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405c62:	f7fe bfa3 	b.w	404bac <_svfprintf_r+0x5d0>
  405c66:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405c6a:	f7fe be33 	b.w	4048d4 <_svfprintf_r+0x2f8>
  405c6e:	bf00      	nop
  405c70:	0040badc 	.word	0x0040badc
  405c74:	0040bad8 	.word	0x0040bad8

00405c78 <__sprint_r.part.0>:
  405c78:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  405c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405c7e:	049c      	lsls	r4, r3, #18
  405c80:	4692      	mov	sl, r2
  405c82:	d52c      	bpl.n	405cde <__sprint_r.part.0+0x66>
  405c84:	6893      	ldr	r3, [r2, #8]
  405c86:	6812      	ldr	r2, [r2, #0]
  405c88:	b33b      	cbz	r3, 405cda <__sprint_r.part.0+0x62>
  405c8a:	460f      	mov	r7, r1
  405c8c:	4680      	mov	r8, r0
  405c8e:	f102 0908 	add.w	r9, r2, #8
  405c92:	e919 0060 	ldmdb	r9, {r5, r6}
  405c96:	08b6      	lsrs	r6, r6, #2
  405c98:	d017      	beq.n	405cca <__sprint_r.part.0+0x52>
  405c9a:	3d04      	subs	r5, #4
  405c9c:	2400      	movs	r4, #0
  405c9e:	e001      	b.n	405ca4 <__sprint_r.part.0+0x2c>
  405ca0:	42a6      	cmp	r6, r4
  405ca2:	d010      	beq.n	405cc6 <__sprint_r.part.0+0x4e>
  405ca4:	463a      	mov	r2, r7
  405ca6:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405caa:	4640      	mov	r0, r8
  405cac:	f002 f92a 	bl	407f04 <_fputwc_r>
  405cb0:	1c43      	adds	r3, r0, #1
  405cb2:	f104 0401 	add.w	r4, r4, #1
  405cb6:	d1f3      	bne.n	405ca0 <__sprint_r.part.0+0x28>
  405cb8:	2300      	movs	r3, #0
  405cba:	f8ca 3008 	str.w	r3, [sl, #8]
  405cbe:	f8ca 3004 	str.w	r3, [sl, #4]
  405cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405cc6:	f8da 3008 	ldr.w	r3, [sl, #8]
  405cca:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  405cce:	f8ca 3008 	str.w	r3, [sl, #8]
  405cd2:	f109 0908 	add.w	r9, r9, #8
  405cd6:	2b00      	cmp	r3, #0
  405cd8:	d1db      	bne.n	405c92 <__sprint_r.part.0+0x1a>
  405cda:	2000      	movs	r0, #0
  405cdc:	e7ec      	b.n	405cb8 <__sprint_r.part.0+0x40>
  405cde:	f002 fa59 	bl	408194 <__sfvwrite_r>
  405ce2:	2300      	movs	r3, #0
  405ce4:	f8ca 3008 	str.w	r3, [sl, #8]
  405ce8:	f8ca 3004 	str.w	r3, [sl, #4]
  405cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00405cf0 <_vfiprintf_r>:
  405cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cf4:	b0ab      	sub	sp, #172	; 0xac
  405cf6:	461c      	mov	r4, r3
  405cf8:	9100      	str	r1, [sp, #0]
  405cfa:	4690      	mov	r8, r2
  405cfc:	9304      	str	r3, [sp, #16]
  405cfe:	9005      	str	r0, [sp, #20]
  405d00:	b118      	cbz	r0, 405d0a <_vfiprintf_r+0x1a>
  405d02:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405d04:	2b00      	cmp	r3, #0
  405d06:	f000 80de 	beq.w	405ec6 <_vfiprintf_r+0x1d6>
  405d0a:	9800      	ldr	r0, [sp, #0]
  405d0c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  405d10:	b28a      	uxth	r2, r1
  405d12:	0495      	lsls	r5, r2, #18
  405d14:	d407      	bmi.n	405d26 <_vfiprintf_r+0x36>
  405d16:	6e43      	ldr	r3, [r0, #100]	; 0x64
  405d18:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  405d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405d20:	8182      	strh	r2, [r0, #12]
  405d22:	6643      	str	r3, [r0, #100]	; 0x64
  405d24:	b292      	uxth	r2, r2
  405d26:	0711      	lsls	r1, r2, #28
  405d28:	f140 80b1 	bpl.w	405e8e <_vfiprintf_r+0x19e>
  405d2c:	9b00      	ldr	r3, [sp, #0]
  405d2e:	691b      	ldr	r3, [r3, #16]
  405d30:	2b00      	cmp	r3, #0
  405d32:	f000 80ac 	beq.w	405e8e <_vfiprintf_r+0x19e>
  405d36:	f002 021a 	and.w	r2, r2, #26
  405d3a:	2a0a      	cmp	r2, #10
  405d3c:	f000 80b5 	beq.w	405eaa <_vfiprintf_r+0x1ba>
  405d40:	2300      	movs	r3, #0
  405d42:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  405d46:	9302      	str	r3, [sp, #8]
  405d48:	930f      	str	r3, [sp, #60]	; 0x3c
  405d4a:	930e      	str	r3, [sp, #56]	; 0x38
  405d4c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  405d50:	46da      	mov	sl, fp
  405d52:	f898 3000 	ldrb.w	r3, [r8]
  405d56:	4644      	mov	r4, r8
  405d58:	b1fb      	cbz	r3, 405d9a <_vfiprintf_r+0xaa>
  405d5a:	2b25      	cmp	r3, #37	; 0x25
  405d5c:	d102      	bne.n	405d64 <_vfiprintf_r+0x74>
  405d5e:	e01c      	b.n	405d9a <_vfiprintf_r+0xaa>
  405d60:	2b25      	cmp	r3, #37	; 0x25
  405d62:	d003      	beq.n	405d6c <_vfiprintf_r+0x7c>
  405d64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405d68:	2b00      	cmp	r3, #0
  405d6a:	d1f9      	bne.n	405d60 <_vfiprintf_r+0x70>
  405d6c:	ebc8 0504 	rsb	r5, r8, r4
  405d70:	b19d      	cbz	r5, 405d9a <_vfiprintf_r+0xaa>
  405d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405d74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405d76:	f8ca 8000 	str.w	r8, [sl]
  405d7a:	3301      	adds	r3, #1
  405d7c:	442a      	add	r2, r5
  405d7e:	2b07      	cmp	r3, #7
  405d80:	f8ca 5004 	str.w	r5, [sl, #4]
  405d84:	920f      	str	r2, [sp, #60]	; 0x3c
  405d86:	930e      	str	r3, [sp, #56]	; 0x38
  405d88:	dd7b      	ble.n	405e82 <_vfiprintf_r+0x192>
  405d8a:	2a00      	cmp	r2, #0
  405d8c:	f040 8528 	bne.w	4067e0 <_vfiprintf_r+0xaf0>
  405d90:	9b02      	ldr	r3, [sp, #8]
  405d92:	920e      	str	r2, [sp, #56]	; 0x38
  405d94:	442b      	add	r3, r5
  405d96:	46da      	mov	sl, fp
  405d98:	9302      	str	r3, [sp, #8]
  405d9a:	7823      	ldrb	r3, [r4, #0]
  405d9c:	2b00      	cmp	r3, #0
  405d9e:	f000 843e 	beq.w	40661e <_vfiprintf_r+0x92e>
  405da2:	2100      	movs	r1, #0
  405da4:	f04f 0300 	mov.w	r3, #0
  405da8:	f04f 32ff 	mov.w	r2, #4294967295
  405dac:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405db0:	f104 0801 	add.w	r8, r4, #1
  405db4:	7863      	ldrb	r3, [r4, #1]
  405db6:	9201      	str	r2, [sp, #4]
  405db8:	4608      	mov	r0, r1
  405dba:	460e      	mov	r6, r1
  405dbc:	460c      	mov	r4, r1
  405dbe:	f108 0801 	add.w	r8, r8, #1
  405dc2:	f1a3 0220 	sub.w	r2, r3, #32
  405dc6:	2a58      	cmp	r2, #88	; 0x58
  405dc8:	f200 8393 	bhi.w	4064f2 <_vfiprintf_r+0x802>
  405dcc:	e8df f012 	tbh	[pc, r2, lsl #1]
  405dd0:	03910346 	.word	0x03910346
  405dd4:	034e0391 	.word	0x034e0391
  405dd8:	03910391 	.word	0x03910391
  405ddc:	03910391 	.word	0x03910391
  405de0:	03910391 	.word	0x03910391
  405de4:	02670289 	.word	0x02670289
  405de8:	00800391 	.word	0x00800391
  405dec:	0391026c 	.word	0x0391026c
  405df0:	025901c6 	.word	0x025901c6
  405df4:	02590259 	.word	0x02590259
  405df8:	02590259 	.word	0x02590259
  405dfc:	02590259 	.word	0x02590259
  405e00:	02590259 	.word	0x02590259
  405e04:	03910391 	.word	0x03910391
  405e08:	03910391 	.word	0x03910391
  405e0c:	03910391 	.word	0x03910391
  405e10:	03910391 	.word	0x03910391
  405e14:	03910391 	.word	0x03910391
  405e18:	039101cb 	.word	0x039101cb
  405e1c:	03910391 	.word	0x03910391
  405e20:	03910391 	.word	0x03910391
  405e24:	03910391 	.word	0x03910391
  405e28:	03910391 	.word	0x03910391
  405e2c:	02140391 	.word	0x02140391
  405e30:	03910391 	.word	0x03910391
  405e34:	03910391 	.word	0x03910391
  405e38:	02ee0391 	.word	0x02ee0391
  405e3c:	03910391 	.word	0x03910391
  405e40:	03910311 	.word	0x03910311
  405e44:	03910391 	.word	0x03910391
  405e48:	03910391 	.word	0x03910391
  405e4c:	03910391 	.word	0x03910391
  405e50:	03910391 	.word	0x03910391
  405e54:	03340391 	.word	0x03340391
  405e58:	0391038a 	.word	0x0391038a
  405e5c:	03910391 	.word	0x03910391
  405e60:	038a0367 	.word	0x038a0367
  405e64:	03910391 	.word	0x03910391
  405e68:	0391036c 	.word	0x0391036c
  405e6c:	02950379 	.word	0x02950379
  405e70:	02e90085 	.word	0x02e90085
  405e74:	029b0391 	.word	0x029b0391
  405e78:	02ba0391 	.word	0x02ba0391
  405e7c:	03910391 	.word	0x03910391
  405e80:	0353      	.short	0x0353
  405e82:	f10a 0a08 	add.w	sl, sl, #8
  405e86:	9b02      	ldr	r3, [sp, #8]
  405e88:	442b      	add	r3, r5
  405e8a:	9302      	str	r3, [sp, #8]
  405e8c:	e785      	b.n	405d9a <_vfiprintf_r+0xaa>
  405e8e:	9900      	ldr	r1, [sp, #0]
  405e90:	9805      	ldr	r0, [sp, #20]
  405e92:	f000 fe61 	bl	406b58 <__swsetup_r>
  405e96:	2800      	cmp	r0, #0
  405e98:	f040 8558 	bne.w	40694c <_vfiprintf_r+0xc5c>
  405e9c:	9b00      	ldr	r3, [sp, #0]
  405e9e:	899a      	ldrh	r2, [r3, #12]
  405ea0:	f002 021a 	and.w	r2, r2, #26
  405ea4:	2a0a      	cmp	r2, #10
  405ea6:	f47f af4b 	bne.w	405d40 <_vfiprintf_r+0x50>
  405eaa:	9900      	ldr	r1, [sp, #0]
  405eac:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  405eb0:	2b00      	cmp	r3, #0
  405eb2:	f6ff af45 	blt.w	405d40 <_vfiprintf_r+0x50>
  405eb6:	4623      	mov	r3, r4
  405eb8:	4642      	mov	r2, r8
  405eba:	9805      	ldr	r0, [sp, #20]
  405ebc:	f000 fe16 	bl	406aec <__sbprintf>
  405ec0:	b02b      	add	sp, #172	; 0xac
  405ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ec6:	f001 ffb3 	bl	407e30 <__sinit>
  405eca:	e71e      	b.n	405d0a <_vfiprintf_r+0x1a>
  405ecc:	4264      	negs	r4, r4
  405ece:	9304      	str	r3, [sp, #16]
  405ed0:	f046 0604 	orr.w	r6, r6, #4
  405ed4:	f898 3000 	ldrb.w	r3, [r8]
  405ed8:	e771      	b.n	405dbe <_vfiprintf_r+0xce>
  405eda:	2130      	movs	r1, #48	; 0x30
  405edc:	9804      	ldr	r0, [sp, #16]
  405ede:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  405ee2:	9901      	ldr	r1, [sp, #4]
  405ee4:	9406      	str	r4, [sp, #24]
  405ee6:	f04f 0300 	mov.w	r3, #0
  405eea:	2278      	movs	r2, #120	; 0x78
  405eec:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405ef0:	2900      	cmp	r1, #0
  405ef2:	4603      	mov	r3, r0
  405ef4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  405ef8:	6804      	ldr	r4, [r0, #0]
  405efa:	f103 0304 	add.w	r3, r3, #4
  405efe:	f04f 0500 	mov.w	r5, #0
  405f02:	f046 0202 	orr.w	r2, r6, #2
  405f06:	f2c0 8525 	blt.w	406954 <_vfiprintf_r+0xc64>
  405f0a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405f0e:	ea54 0205 	orrs.w	r2, r4, r5
  405f12:	f046 0602 	orr.w	r6, r6, #2
  405f16:	9304      	str	r3, [sp, #16]
  405f18:	f040 84bf 	bne.w	40689a <_vfiprintf_r+0xbaa>
  405f1c:	48b3      	ldr	r0, [pc, #716]	; (4061ec <_vfiprintf_r+0x4fc>)
  405f1e:	9b01      	ldr	r3, [sp, #4]
  405f20:	2b00      	cmp	r3, #0
  405f22:	f040 841c 	bne.w	40675e <_vfiprintf_r+0xa6e>
  405f26:	4699      	mov	r9, r3
  405f28:	2300      	movs	r3, #0
  405f2a:	9301      	str	r3, [sp, #4]
  405f2c:	9303      	str	r3, [sp, #12]
  405f2e:	465f      	mov	r7, fp
  405f30:	9b01      	ldr	r3, [sp, #4]
  405f32:	9a03      	ldr	r2, [sp, #12]
  405f34:	4293      	cmp	r3, r2
  405f36:	bfb8      	it	lt
  405f38:	4613      	movlt	r3, r2
  405f3a:	461d      	mov	r5, r3
  405f3c:	f1b9 0f00 	cmp.w	r9, #0
  405f40:	d000      	beq.n	405f44 <_vfiprintf_r+0x254>
  405f42:	3501      	adds	r5, #1
  405f44:	f016 0302 	ands.w	r3, r6, #2
  405f48:	9307      	str	r3, [sp, #28]
  405f4a:	bf18      	it	ne
  405f4c:	3502      	addne	r5, #2
  405f4e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  405f52:	9308      	str	r3, [sp, #32]
  405f54:	f040 82f1 	bne.w	40653a <_vfiprintf_r+0x84a>
  405f58:	9b06      	ldr	r3, [sp, #24]
  405f5a:	1b5c      	subs	r4, r3, r5
  405f5c:	2c00      	cmp	r4, #0
  405f5e:	f340 82ec 	ble.w	40653a <_vfiprintf_r+0x84a>
  405f62:	2c10      	cmp	r4, #16
  405f64:	f340 8556 	ble.w	406a14 <_vfiprintf_r+0xd24>
  405f68:	f8df 9284 	ldr.w	r9, [pc, #644]	; 4061f0 <_vfiprintf_r+0x500>
  405f6c:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  405f70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405f72:	46d4      	mov	ip, sl
  405f74:	2310      	movs	r3, #16
  405f76:	46c2      	mov	sl, r8
  405f78:	4670      	mov	r0, lr
  405f7a:	46a8      	mov	r8, r5
  405f7c:	464d      	mov	r5, r9
  405f7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405f82:	e007      	b.n	405f94 <_vfiprintf_r+0x2a4>
  405f84:	f100 0e02 	add.w	lr, r0, #2
  405f88:	f10c 0c08 	add.w	ip, ip, #8
  405f8c:	4608      	mov	r0, r1
  405f8e:	3c10      	subs	r4, #16
  405f90:	2c10      	cmp	r4, #16
  405f92:	dd13      	ble.n	405fbc <_vfiprintf_r+0x2cc>
  405f94:	1c41      	adds	r1, r0, #1
  405f96:	3210      	adds	r2, #16
  405f98:	2907      	cmp	r1, #7
  405f9a:	920f      	str	r2, [sp, #60]	; 0x3c
  405f9c:	f8cc 5000 	str.w	r5, [ip]
  405fa0:	f8cc 3004 	str.w	r3, [ip, #4]
  405fa4:	910e      	str	r1, [sp, #56]	; 0x38
  405fa6:	dded      	ble.n	405f84 <_vfiprintf_r+0x294>
  405fa8:	2a00      	cmp	r2, #0
  405faa:	f040 82b7 	bne.w	40651c <_vfiprintf_r+0x82c>
  405fae:	3c10      	subs	r4, #16
  405fb0:	2c10      	cmp	r4, #16
  405fb2:	4610      	mov	r0, r2
  405fb4:	f04f 0e01 	mov.w	lr, #1
  405fb8:	46dc      	mov	ip, fp
  405fba:	dceb      	bgt.n	405f94 <_vfiprintf_r+0x2a4>
  405fbc:	46a9      	mov	r9, r5
  405fbe:	4670      	mov	r0, lr
  405fc0:	4645      	mov	r5, r8
  405fc2:	46d0      	mov	r8, sl
  405fc4:	46e2      	mov	sl, ip
  405fc6:	4422      	add	r2, r4
  405fc8:	2807      	cmp	r0, #7
  405fca:	920f      	str	r2, [sp, #60]	; 0x3c
  405fcc:	f8ca 9000 	str.w	r9, [sl]
  405fd0:	f8ca 4004 	str.w	r4, [sl, #4]
  405fd4:	900e      	str	r0, [sp, #56]	; 0x38
  405fd6:	f300 8375 	bgt.w	4066c4 <_vfiprintf_r+0x9d4>
  405fda:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  405fde:	f10a 0a08 	add.w	sl, sl, #8
  405fe2:	f100 0e01 	add.w	lr, r0, #1
  405fe6:	2b00      	cmp	r3, #0
  405fe8:	f040 82b0 	bne.w	40654c <_vfiprintf_r+0x85c>
  405fec:	9b07      	ldr	r3, [sp, #28]
  405fee:	2b00      	cmp	r3, #0
  405ff0:	f000 82c3 	beq.w	40657a <_vfiprintf_r+0x88a>
  405ff4:	3202      	adds	r2, #2
  405ff6:	a90c      	add	r1, sp, #48	; 0x30
  405ff8:	2302      	movs	r3, #2
  405ffa:	f1be 0f07 	cmp.w	lr, #7
  405ffe:	920f      	str	r2, [sp, #60]	; 0x3c
  406000:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  406004:	e88a 000a 	stmia.w	sl, {r1, r3}
  406008:	f340 8378 	ble.w	4066fc <_vfiprintf_r+0xa0c>
  40600c:	2a00      	cmp	r2, #0
  40600e:	f040 840a 	bne.w	406826 <_vfiprintf_r+0xb36>
  406012:	9b08      	ldr	r3, [sp, #32]
  406014:	2b80      	cmp	r3, #128	; 0x80
  406016:	f04f 0e01 	mov.w	lr, #1
  40601a:	4610      	mov	r0, r2
  40601c:	46da      	mov	sl, fp
  40601e:	f040 82b0 	bne.w	406582 <_vfiprintf_r+0x892>
  406022:	9b06      	ldr	r3, [sp, #24]
  406024:	1b5c      	subs	r4, r3, r5
  406026:	2c00      	cmp	r4, #0
  406028:	f340 82ab 	ble.w	406582 <_vfiprintf_r+0x892>
  40602c:	2c10      	cmp	r4, #16
  40602e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 4061f4 <_vfiprintf_r+0x504>
  406032:	f340 850b 	ble.w	406a4c <_vfiprintf_r+0xd5c>
  406036:	46d6      	mov	lr, sl
  406038:	2310      	movs	r3, #16
  40603a:	46c2      	mov	sl, r8
  40603c:	46a8      	mov	r8, r5
  40603e:	464d      	mov	r5, r9
  406040:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406044:	e007      	b.n	406056 <_vfiprintf_r+0x366>
  406046:	f100 0c02 	add.w	ip, r0, #2
  40604a:	f10e 0e08 	add.w	lr, lr, #8
  40604e:	4608      	mov	r0, r1
  406050:	3c10      	subs	r4, #16
  406052:	2c10      	cmp	r4, #16
  406054:	dd13      	ble.n	40607e <_vfiprintf_r+0x38e>
  406056:	1c41      	adds	r1, r0, #1
  406058:	3210      	adds	r2, #16
  40605a:	2907      	cmp	r1, #7
  40605c:	920f      	str	r2, [sp, #60]	; 0x3c
  40605e:	f8ce 5000 	str.w	r5, [lr]
  406062:	f8ce 3004 	str.w	r3, [lr, #4]
  406066:	910e      	str	r1, [sp, #56]	; 0x38
  406068:	dded      	ble.n	406046 <_vfiprintf_r+0x356>
  40606a:	2a00      	cmp	r2, #0
  40606c:	f040 8315 	bne.w	40669a <_vfiprintf_r+0x9aa>
  406070:	3c10      	subs	r4, #16
  406072:	2c10      	cmp	r4, #16
  406074:	f04f 0c01 	mov.w	ip, #1
  406078:	4610      	mov	r0, r2
  40607a:	46de      	mov	lr, fp
  40607c:	dceb      	bgt.n	406056 <_vfiprintf_r+0x366>
  40607e:	46a9      	mov	r9, r5
  406080:	4645      	mov	r5, r8
  406082:	46d0      	mov	r8, sl
  406084:	46f2      	mov	sl, lr
  406086:	4422      	add	r2, r4
  406088:	f1bc 0f07 	cmp.w	ip, #7
  40608c:	920f      	str	r2, [sp, #60]	; 0x3c
  40608e:	f8ca 9000 	str.w	r9, [sl]
  406092:	f8ca 4004 	str.w	r4, [sl, #4]
  406096:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  40609a:	f300 83d2 	bgt.w	406842 <_vfiprintf_r+0xb52>
  40609e:	9b01      	ldr	r3, [sp, #4]
  4060a0:	9903      	ldr	r1, [sp, #12]
  4060a2:	1a5c      	subs	r4, r3, r1
  4060a4:	2c00      	cmp	r4, #0
  4060a6:	f10a 0a08 	add.w	sl, sl, #8
  4060aa:	f10c 0e01 	add.w	lr, ip, #1
  4060ae:	4660      	mov	r0, ip
  4060b0:	f300 826d 	bgt.w	40658e <_vfiprintf_r+0x89e>
  4060b4:	9903      	ldr	r1, [sp, #12]
  4060b6:	f8ca 7000 	str.w	r7, [sl]
  4060ba:	440a      	add	r2, r1
  4060bc:	f1be 0f07 	cmp.w	lr, #7
  4060c0:	920f      	str	r2, [sp, #60]	; 0x3c
  4060c2:	f8ca 1004 	str.w	r1, [sl, #4]
  4060c6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4060ca:	f340 82ce 	ble.w	40666a <_vfiprintf_r+0x97a>
  4060ce:	2a00      	cmp	r2, #0
  4060d0:	f040 833a 	bne.w	406748 <_vfiprintf_r+0xa58>
  4060d4:	0770      	lsls	r0, r6, #29
  4060d6:	920e      	str	r2, [sp, #56]	; 0x38
  4060d8:	d538      	bpl.n	40614c <_vfiprintf_r+0x45c>
  4060da:	9b06      	ldr	r3, [sp, #24]
  4060dc:	1b5c      	subs	r4, r3, r5
  4060de:	2c00      	cmp	r4, #0
  4060e0:	dd34      	ble.n	40614c <_vfiprintf_r+0x45c>
  4060e2:	46da      	mov	sl, fp
  4060e4:	2c10      	cmp	r4, #16
  4060e6:	f340 84ab 	ble.w	406a40 <_vfiprintf_r+0xd50>
  4060ea:	f8df 9104 	ldr.w	r9, [pc, #260]	; 4061f0 <_vfiprintf_r+0x500>
  4060ee:	990e      	ldr	r1, [sp, #56]	; 0x38
  4060f0:	464f      	mov	r7, r9
  4060f2:	2610      	movs	r6, #16
  4060f4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4060f8:	e006      	b.n	406108 <_vfiprintf_r+0x418>
  4060fa:	1c88      	adds	r0, r1, #2
  4060fc:	f10a 0a08 	add.w	sl, sl, #8
  406100:	4619      	mov	r1, r3
  406102:	3c10      	subs	r4, #16
  406104:	2c10      	cmp	r4, #16
  406106:	dd13      	ble.n	406130 <_vfiprintf_r+0x440>
  406108:	1c4b      	adds	r3, r1, #1
  40610a:	3210      	adds	r2, #16
  40610c:	2b07      	cmp	r3, #7
  40610e:	920f      	str	r2, [sp, #60]	; 0x3c
  406110:	f8ca 7000 	str.w	r7, [sl]
  406114:	f8ca 6004 	str.w	r6, [sl, #4]
  406118:	930e      	str	r3, [sp, #56]	; 0x38
  40611a:	ddee      	ble.n	4060fa <_vfiprintf_r+0x40a>
  40611c:	2a00      	cmp	r2, #0
  40611e:	f040 828e 	bne.w	40663e <_vfiprintf_r+0x94e>
  406122:	3c10      	subs	r4, #16
  406124:	2c10      	cmp	r4, #16
  406126:	f04f 0001 	mov.w	r0, #1
  40612a:	4611      	mov	r1, r2
  40612c:	46da      	mov	sl, fp
  40612e:	dceb      	bgt.n	406108 <_vfiprintf_r+0x418>
  406130:	46b9      	mov	r9, r7
  406132:	4422      	add	r2, r4
  406134:	2807      	cmp	r0, #7
  406136:	920f      	str	r2, [sp, #60]	; 0x3c
  406138:	f8ca 9000 	str.w	r9, [sl]
  40613c:	f8ca 4004 	str.w	r4, [sl, #4]
  406140:	900e      	str	r0, [sp, #56]	; 0x38
  406142:	f340 829b 	ble.w	40667c <_vfiprintf_r+0x98c>
  406146:	2a00      	cmp	r2, #0
  406148:	f040 8425 	bne.w	406996 <_vfiprintf_r+0xca6>
  40614c:	9b02      	ldr	r3, [sp, #8]
  40614e:	9a06      	ldr	r2, [sp, #24]
  406150:	42aa      	cmp	r2, r5
  406152:	bfac      	ite	ge
  406154:	189b      	addge	r3, r3, r2
  406156:	195b      	addlt	r3, r3, r5
  406158:	9302      	str	r3, [sp, #8]
  40615a:	e299      	b.n	406690 <_vfiprintf_r+0x9a0>
  40615c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  406160:	f898 3000 	ldrb.w	r3, [r8]
  406164:	e62b      	b.n	405dbe <_vfiprintf_r+0xce>
  406166:	9406      	str	r4, [sp, #24]
  406168:	2900      	cmp	r1, #0
  40616a:	f040 84af 	bne.w	406acc <_vfiprintf_r+0xddc>
  40616e:	f046 0610 	orr.w	r6, r6, #16
  406172:	06b3      	lsls	r3, r6, #26
  406174:	f140 8312 	bpl.w	40679c <_vfiprintf_r+0xaac>
  406178:	9904      	ldr	r1, [sp, #16]
  40617a:	3107      	adds	r1, #7
  40617c:	f021 0107 	bic.w	r1, r1, #7
  406180:	e9d1 2300 	ldrd	r2, r3, [r1]
  406184:	3108      	adds	r1, #8
  406186:	9104      	str	r1, [sp, #16]
  406188:	4614      	mov	r4, r2
  40618a:	461d      	mov	r5, r3
  40618c:	2a00      	cmp	r2, #0
  40618e:	f173 0300 	sbcs.w	r3, r3, #0
  406192:	f2c0 8386 	blt.w	4068a2 <_vfiprintf_r+0xbb2>
  406196:	9b01      	ldr	r3, [sp, #4]
  406198:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40619c:	2b00      	cmp	r3, #0
  40619e:	f2c0 831a 	blt.w	4067d6 <_vfiprintf_r+0xae6>
  4061a2:	ea54 0305 	orrs.w	r3, r4, r5
  4061a6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4061aa:	f000 80ed 	beq.w	406388 <_vfiprintf_r+0x698>
  4061ae:	2d00      	cmp	r5, #0
  4061b0:	bf08      	it	eq
  4061b2:	2c0a      	cmpeq	r4, #10
  4061b4:	f0c0 80ed 	bcc.w	406392 <_vfiprintf_r+0x6a2>
  4061b8:	465f      	mov	r7, fp
  4061ba:	4620      	mov	r0, r4
  4061bc:	4629      	mov	r1, r5
  4061be:	220a      	movs	r2, #10
  4061c0:	2300      	movs	r3, #0
  4061c2:	f004 fa57 	bl	40a674 <__aeabi_uldivmod>
  4061c6:	3230      	adds	r2, #48	; 0x30
  4061c8:	f807 2d01 	strb.w	r2, [r7, #-1]!
  4061cc:	4620      	mov	r0, r4
  4061ce:	4629      	mov	r1, r5
  4061d0:	2300      	movs	r3, #0
  4061d2:	220a      	movs	r2, #10
  4061d4:	f004 fa4e 	bl	40a674 <__aeabi_uldivmod>
  4061d8:	4604      	mov	r4, r0
  4061da:	460d      	mov	r5, r1
  4061dc:	ea54 0305 	orrs.w	r3, r4, r5
  4061e0:	d1eb      	bne.n	4061ba <_vfiprintf_r+0x4ca>
  4061e2:	ebc7 030b 	rsb	r3, r7, fp
  4061e6:	9303      	str	r3, [sp, #12]
  4061e8:	e6a2      	b.n	405f30 <_vfiprintf_r+0x240>
  4061ea:	bf00      	nop
  4061ec:	0040baf4 	.word	0x0040baf4
  4061f0:	0040bb34 	.word	0x0040bb34
  4061f4:	0040bb24 	.word	0x0040bb24
  4061f8:	9406      	str	r4, [sp, #24]
  4061fa:	2900      	cmp	r1, #0
  4061fc:	f040 8462 	bne.w	406ac4 <_vfiprintf_r+0xdd4>
  406200:	f046 0610 	orr.w	r6, r6, #16
  406204:	f016 0320 	ands.w	r3, r6, #32
  406208:	f000 82ae 	beq.w	406768 <_vfiprintf_r+0xa78>
  40620c:	9b04      	ldr	r3, [sp, #16]
  40620e:	3307      	adds	r3, #7
  406210:	f023 0307 	bic.w	r3, r3, #7
  406214:	f04f 0200 	mov.w	r2, #0
  406218:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40621c:	e9d3 4500 	ldrd	r4, r5, [r3]
  406220:	f103 0208 	add.w	r2, r3, #8
  406224:	9b01      	ldr	r3, [sp, #4]
  406226:	9204      	str	r2, [sp, #16]
  406228:	2b00      	cmp	r3, #0
  40622a:	f2c0 8174 	blt.w	406516 <_vfiprintf_r+0x826>
  40622e:	ea54 0305 	orrs.w	r3, r4, r5
  406232:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406236:	f040 816e 	bne.w	406516 <_vfiprintf_r+0x826>
  40623a:	9b01      	ldr	r3, [sp, #4]
  40623c:	2b00      	cmp	r3, #0
  40623e:	f000 8430 	beq.w	406aa2 <_vfiprintf_r+0xdb2>
  406242:	f04f 0900 	mov.w	r9, #0
  406246:	2400      	movs	r4, #0
  406248:	2500      	movs	r5, #0
  40624a:	465f      	mov	r7, fp
  40624c:	08e2      	lsrs	r2, r4, #3
  40624e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  406252:	08e9      	lsrs	r1, r5, #3
  406254:	f004 0307 	and.w	r3, r4, #7
  406258:	460d      	mov	r5, r1
  40625a:	4614      	mov	r4, r2
  40625c:	3330      	adds	r3, #48	; 0x30
  40625e:	ea54 0205 	orrs.w	r2, r4, r5
  406262:	f807 3d01 	strb.w	r3, [r7, #-1]!
  406266:	d1f1      	bne.n	40624c <_vfiprintf_r+0x55c>
  406268:	07f4      	lsls	r4, r6, #31
  40626a:	d5ba      	bpl.n	4061e2 <_vfiprintf_r+0x4f2>
  40626c:	2b30      	cmp	r3, #48	; 0x30
  40626e:	d0b8      	beq.n	4061e2 <_vfiprintf_r+0x4f2>
  406270:	2230      	movs	r2, #48	; 0x30
  406272:	1e7b      	subs	r3, r7, #1
  406274:	f807 2c01 	strb.w	r2, [r7, #-1]
  406278:	ebc3 020b 	rsb	r2, r3, fp
  40627c:	9203      	str	r2, [sp, #12]
  40627e:	461f      	mov	r7, r3
  406280:	e656      	b.n	405f30 <_vfiprintf_r+0x240>
  406282:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  406286:	2400      	movs	r4, #0
  406288:	f818 3b01 	ldrb.w	r3, [r8], #1
  40628c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406290:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  406294:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  406298:	2a09      	cmp	r2, #9
  40629a:	d9f5      	bls.n	406288 <_vfiprintf_r+0x598>
  40629c:	e591      	b.n	405dc2 <_vfiprintf_r+0xd2>
  40629e:	f898 3000 	ldrb.w	r3, [r8]
  4062a2:	2101      	movs	r1, #1
  4062a4:	202b      	movs	r0, #43	; 0x2b
  4062a6:	e58a      	b.n	405dbe <_vfiprintf_r+0xce>
  4062a8:	f898 3000 	ldrb.w	r3, [r8]
  4062ac:	2b2a      	cmp	r3, #42	; 0x2a
  4062ae:	f108 0501 	add.w	r5, r8, #1
  4062b2:	f000 83dd 	beq.w	406a70 <_vfiprintf_r+0xd80>
  4062b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4062ba:	2a09      	cmp	r2, #9
  4062bc:	46a8      	mov	r8, r5
  4062be:	bf98      	it	ls
  4062c0:	2500      	movls	r5, #0
  4062c2:	f200 83ce 	bhi.w	406a62 <_vfiprintf_r+0xd72>
  4062c6:	f818 3b01 	ldrb.w	r3, [r8], #1
  4062ca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4062ce:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4062d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4062d6:	2a09      	cmp	r2, #9
  4062d8:	d9f5      	bls.n	4062c6 <_vfiprintf_r+0x5d6>
  4062da:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  4062de:	9201      	str	r2, [sp, #4]
  4062e0:	e56f      	b.n	405dc2 <_vfiprintf_r+0xd2>
  4062e2:	9a04      	ldr	r2, [sp, #16]
  4062e4:	6814      	ldr	r4, [r2, #0]
  4062e6:	4613      	mov	r3, r2
  4062e8:	2c00      	cmp	r4, #0
  4062ea:	f103 0304 	add.w	r3, r3, #4
  4062ee:	f6ff aded 	blt.w	405ecc <_vfiprintf_r+0x1dc>
  4062f2:	9304      	str	r3, [sp, #16]
  4062f4:	f898 3000 	ldrb.w	r3, [r8]
  4062f8:	e561      	b.n	405dbe <_vfiprintf_r+0xce>
  4062fa:	9406      	str	r4, [sp, #24]
  4062fc:	2900      	cmp	r1, #0
  4062fe:	d081      	beq.n	406204 <_vfiprintf_r+0x514>
  406300:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406304:	e77e      	b.n	406204 <_vfiprintf_r+0x514>
  406306:	9a04      	ldr	r2, [sp, #16]
  406308:	9406      	str	r4, [sp, #24]
  40630a:	6817      	ldr	r7, [r2, #0]
  40630c:	f04f 0300 	mov.w	r3, #0
  406310:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406314:	1d14      	adds	r4, r2, #4
  406316:	9b01      	ldr	r3, [sp, #4]
  406318:	2f00      	cmp	r7, #0
  40631a:	f000 8386 	beq.w	406a2a <_vfiprintf_r+0xd3a>
  40631e:	2b00      	cmp	r3, #0
  406320:	f2c0 835f 	blt.w	4069e2 <_vfiprintf_r+0xcf2>
  406324:	461a      	mov	r2, r3
  406326:	2100      	movs	r1, #0
  406328:	4638      	mov	r0, r7
  40632a:	f002 fc21 	bl	408b70 <memchr>
  40632e:	2800      	cmp	r0, #0
  406330:	f000 838f 	beq.w	406a52 <_vfiprintf_r+0xd62>
  406334:	1bc3      	subs	r3, r0, r7
  406336:	9303      	str	r3, [sp, #12]
  406338:	2300      	movs	r3, #0
  40633a:	9404      	str	r4, [sp, #16]
  40633c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  406340:	9301      	str	r3, [sp, #4]
  406342:	e5f5      	b.n	405f30 <_vfiprintf_r+0x240>
  406344:	9406      	str	r4, [sp, #24]
  406346:	2900      	cmp	r1, #0
  406348:	f040 83b9 	bne.w	406abe <_vfiprintf_r+0xdce>
  40634c:	f016 0920 	ands.w	r9, r6, #32
  406350:	d135      	bne.n	4063be <_vfiprintf_r+0x6ce>
  406352:	f016 0310 	ands.w	r3, r6, #16
  406356:	d103      	bne.n	406360 <_vfiprintf_r+0x670>
  406358:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40635c:	f040 832a 	bne.w	4069b4 <_vfiprintf_r+0xcc4>
  406360:	9a04      	ldr	r2, [sp, #16]
  406362:	4613      	mov	r3, r2
  406364:	6814      	ldr	r4, [r2, #0]
  406366:	9a01      	ldr	r2, [sp, #4]
  406368:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40636c:	2a00      	cmp	r2, #0
  40636e:	f103 0304 	add.w	r3, r3, #4
  406372:	f04f 0500 	mov.w	r5, #0
  406376:	f2c0 8332 	blt.w	4069de <_vfiprintf_r+0xcee>
  40637a:	ea54 0205 	orrs.w	r2, r4, r5
  40637e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406382:	9304      	str	r3, [sp, #16]
  406384:	f47f af13 	bne.w	4061ae <_vfiprintf_r+0x4be>
  406388:	9b01      	ldr	r3, [sp, #4]
  40638a:	2b00      	cmp	r3, #0
  40638c:	f43f adcc 	beq.w	405f28 <_vfiprintf_r+0x238>
  406390:	2400      	movs	r4, #0
  406392:	af2a      	add	r7, sp, #168	; 0xa8
  406394:	3430      	adds	r4, #48	; 0x30
  406396:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40639a:	ebc7 030b 	rsb	r3, r7, fp
  40639e:	9303      	str	r3, [sp, #12]
  4063a0:	e5c6      	b.n	405f30 <_vfiprintf_r+0x240>
  4063a2:	f046 0620 	orr.w	r6, r6, #32
  4063a6:	f898 3000 	ldrb.w	r3, [r8]
  4063aa:	e508      	b.n	405dbe <_vfiprintf_r+0xce>
  4063ac:	9406      	str	r4, [sp, #24]
  4063ae:	2900      	cmp	r1, #0
  4063b0:	f040 836e 	bne.w	406a90 <_vfiprintf_r+0xda0>
  4063b4:	f046 0610 	orr.w	r6, r6, #16
  4063b8:	f016 0920 	ands.w	r9, r6, #32
  4063bc:	d0c9      	beq.n	406352 <_vfiprintf_r+0x662>
  4063be:	9b04      	ldr	r3, [sp, #16]
  4063c0:	3307      	adds	r3, #7
  4063c2:	f023 0307 	bic.w	r3, r3, #7
  4063c6:	f04f 0200 	mov.w	r2, #0
  4063ca:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4063ce:	e9d3 4500 	ldrd	r4, r5, [r3]
  4063d2:	f103 0208 	add.w	r2, r3, #8
  4063d6:	9b01      	ldr	r3, [sp, #4]
  4063d8:	9204      	str	r2, [sp, #16]
  4063da:	2b00      	cmp	r3, #0
  4063dc:	f2c0 81f9 	blt.w	4067d2 <_vfiprintf_r+0xae2>
  4063e0:	ea54 0305 	orrs.w	r3, r4, r5
  4063e4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4063e8:	f04f 0900 	mov.w	r9, #0
  4063ec:	f47f aedf 	bne.w	4061ae <_vfiprintf_r+0x4be>
  4063f0:	e7ca      	b.n	406388 <_vfiprintf_r+0x698>
  4063f2:	9406      	str	r4, [sp, #24]
  4063f4:	2900      	cmp	r1, #0
  4063f6:	f040 8351 	bne.w	406a9c <_vfiprintf_r+0xdac>
  4063fa:	06b2      	lsls	r2, r6, #26
  4063fc:	48ae      	ldr	r0, [pc, #696]	; (4066b8 <_vfiprintf_r+0x9c8>)
  4063fe:	d541      	bpl.n	406484 <_vfiprintf_r+0x794>
  406400:	9a04      	ldr	r2, [sp, #16]
  406402:	3207      	adds	r2, #7
  406404:	f022 0207 	bic.w	r2, r2, #7
  406408:	e9d2 4500 	ldrd	r4, r5, [r2]
  40640c:	f102 0108 	add.w	r1, r2, #8
  406410:	9104      	str	r1, [sp, #16]
  406412:	f016 0901 	ands.w	r9, r6, #1
  406416:	f000 8177 	beq.w	406708 <_vfiprintf_r+0xa18>
  40641a:	ea54 0205 	orrs.w	r2, r4, r5
  40641e:	f040 8226 	bne.w	40686e <_vfiprintf_r+0xb7e>
  406422:	f04f 0300 	mov.w	r3, #0
  406426:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40642a:	9b01      	ldr	r3, [sp, #4]
  40642c:	2b00      	cmp	r3, #0
  40642e:	f2c0 8196 	blt.w	40675e <_vfiprintf_r+0xa6e>
  406432:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406436:	e572      	b.n	405f1e <_vfiprintf_r+0x22e>
  406438:	9a04      	ldr	r2, [sp, #16]
  40643a:	9406      	str	r4, [sp, #24]
  40643c:	6813      	ldr	r3, [r2, #0]
  40643e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  406442:	4613      	mov	r3, r2
  406444:	f04f 0100 	mov.w	r1, #0
  406448:	2501      	movs	r5, #1
  40644a:	3304      	adds	r3, #4
  40644c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  406450:	9304      	str	r3, [sp, #16]
  406452:	9503      	str	r5, [sp, #12]
  406454:	af10      	add	r7, sp, #64	; 0x40
  406456:	2300      	movs	r3, #0
  406458:	9301      	str	r3, [sp, #4]
  40645a:	e573      	b.n	405f44 <_vfiprintf_r+0x254>
  40645c:	f898 3000 	ldrb.w	r3, [r8]
  406460:	2800      	cmp	r0, #0
  406462:	f47f acac 	bne.w	405dbe <_vfiprintf_r+0xce>
  406466:	2101      	movs	r1, #1
  406468:	2020      	movs	r0, #32
  40646a:	e4a8      	b.n	405dbe <_vfiprintf_r+0xce>
  40646c:	f046 0601 	orr.w	r6, r6, #1
  406470:	f898 3000 	ldrb.w	r3, [r8]
  406474:	e4a3      	b.n	405dbe <_vfiprintf_r+0xce>
  406476:	9406      	str	r4, [sp, #24]
  406478:	2900      	cmp	r1, #0
  40647a:	f040 830c 	bne.w	406a96 <_vfiprintf_r+0xda6>
  40647e:	06b2      	lsls	r2, r6, #26
  406480:	488e      	ldr	r0, [pc, #568]	; (4066bc <_vfiprintf_r+0x9cc>)
  406482:	d4bd      	bmi.n	406400 <_vfiprintf_r+0x710>
  406484:	9904      	ldr	r1, [sp, #16]
  406486:	06f7      	lsls	r7, r6, #27
  406488:	460a      	mov	r2, r1
  40648a:	f100 819d 	bmi.w	4067c8 <_vfiprintf_r+0xad8>
  40648e:	0675      	lsls	r5, r6, #25
  406490:	f140 819a 	bpl.w	4067c8 <_vfiprintf_r+0xad8>
  406494:	3204      	adds	r2, #4
  406496:	880c      	ldrh	r4, [r1, #0]
  406498:	9204      	str	r2, [sp, #16]
  40649a:	2500      	movs	r5, #0
  40649c:	e7b9      	b.n	406412 <_vfiprintf_r+0x722>
  40649e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4064a2:	f898 3000 	ldrb.w	r3, [r8]
  4064a6:	e48a      	b.n	405dbe <_vfiprintf_r+0xce>
  4064a8:	f898 3000 	ldrb.w	r3, [r8]
  4064ac:	2b6c      	cmp	r3, #108	; 0x6c
  4064ae:	bf03      	ittte	eq
  4064b0:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  4064b4:	f046 0620 	orreq.w	r6, r6, #32
  4064b8:	f108 0801 	addeq.w	r8, r8, #1
  4064bc:	f046 0610 	orrne.w	r6, r6, #16
  4064c0:	e47d      	b.n	405dbe <_vfiprintf_r+0xce>
  4064c2:	2900      	cmp	r1, #0
  4064c4:	f040 8309 	bne.w	406ada <_vfiprintf_r+0xdea>
  4064c8:	06b4      	lsls	r4, r6, #26
  4064ca:	f140 821c 	bpl.w	406906 <_vfiprintf_r+0xc16>
  4064ce:	9a04      	ldr	r2, [sp, #16]
  4064d0:	9902      	ldr	r1, [sp, #8]
  4064d2:	6813      	ldr	r3, [r2, #0]
  4064d4:	17cd      	asrs	r5, r1, #31
  4064d6:	4608      	mov	r0, r1
  4064d8:	3204      	adds	r2, #4
  4064da:	4629      	mov	r1, r5
  4064dc:	9204      	str	r2, [sp, #16]
  4064de:	e9c3 0100 	strd	r0, r1, [r3]
  4064e2:	e436      	b.n	405d52 <_vfiprintf_r+0x62>
  4064e4:	9406      	str	r4, [sp, #24]
  4064e6:	2900      	cmp	r1, #0
  4064e8:	f43f ae43 	beq.w	406172 <_vfiprintf_r+0x482>
  4064ec:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4064f0:	e63f      	b.n	406172 <_vfiprintf_r+0x482>
  4064f2:	9406      	str	r4, [sp, #24]
  4064f4:	2900      	cmp	r1, #0
  4064f6:	f040 82ed 	bne.w	406ad4 <_vfiprintf_r+0xde4>
  4064fa:	2b00      	cmp	r3, #0
  4064fc:	f000 808f 	beq.w	40661e <_vfiprintf_r+0x92e>
  406500:	2501      	movs	r5, #1
  406502:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  406506:	f04f 0300 	mov.w	r3, #0
  40650a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40650e:	9503      	str	r5, [sp, #12]
  406510:	af10      	add	r7, sp, #64	; 0x40
  406512:	e7a0      	b.n	406456 <_vfiprintf_r+0x766>
  406514:	9304      	str	r3, [sp, #16]
  406516:	f04f 0900 	mov.w	r9, #0
  40651a:	e696      	b.n	40624a <_vfiprintf_r+0x55a>
  40651c:	aa0d      	add	r2, sp, #52	; 0x34
  40651e:	9900      	ldr	r1, [sp, #0]
  406520:	9309      	str	r3, [sp, #36]	; 0x24
  406522:	4648      	mov	r0, r9
  406524:	f7ff fba8 	bl	405c78 <__sprint_r.part.0>
  406528:	2800      	cmp	r0, #0
  40652a:	d17f      	bne.n	40662c <_vfiprintf_r+0x93c>
  40652c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40652e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406530:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406532:	f100 0e01 	add.w	lr, r0, #1
  406536:	46dc      	mov	ip, fp
  406538:	e529      	b.n	405f8e <_vfiprintf_r+0x29e>
  40653a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40653c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40653e:	f100 0e01 	add.w	lr, r0, #1
  406542:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  406546:	2b00      	cmp	r3, #0
  406548:	f43f ad50 	beq.w	405fec <_vfiprintf_r+0x2fc>
  40654c:	3201      	adds	r2, #1
  40654e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  406552:	2301      	movs	r3, #1
  406554:	f1be 0f07 	cmp.w	lr, #7
  406558:	920f      	str	r2, [sp, #60]	; 0x3c
  40655a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40655e:	e88a 000a 	stmia.w	sl, {r1, r3}
  406562:	f340 80bf 	ble.w	4066e4 <_vfiprintf_r+0x9f4>
  406566:	2a00      	cmp	r2, #0
  406568:	f040 814e 	bne.w	406808 <_vfiprintf_r+0xb18>
  40656c:	9907      	ldr	r1, [sp, #28]
  40656e:	2900      	cmp	r1, #0
  406570:	f040 80be 	bne.w	4066f0 <_vfiprintf_r+0xa00>
  406574:	469e      	mov	lr, r3
  406576:	4610      	mov	r0, r2
  406578:	46da      	mov	sl, fp
  40657a:	9b08      	ldr	r3, [sp, #32]
  40657c:	2b80      	cmp	r3, #128	; 0x80
  40657e:	f43f ad50 	beq.w	406022 <_vfiprintf_r+0x332>
  406582:	9b01      	ldr	r3, [sp, #4]
  406584:	9903      	ldr	r1, [sp, #12]
  406586:	1a5c      	subs	r4, r3, r1
  406588:	2c00      	cmp	r4, #0
  40658a:	f77f ad93 	ble.w	4060b4 <_vfiprintf_r+0x3c4>
  40658e:	2c10      	cmp	r4, #16
  406590:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4066c0 <_vfiprintf_r+0x9d0>
  406594:	dd25      	ble.n	4065e2 <_vfiprintf_r+0x8f2>
  406596:	46d4      	mov	ip, sl
  406598:	2310      	movs	r3, #16
  40659a:	46c2      	mov	sl, r8
  40659c:	46a8      	mov	r8, r5
  40659e:	464d      	mov	r5, r9
  4065a0:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4065a4:	e007      	b.n	4065b6 <_vfiprintf_r+0x8c6>
  4065a6:	f100 0e02 	add.w	lr, r0, #2
  4065aa:	f10c 0c08 	add.w	ip, ip, #8
  4065ae:	4608      	mov	r0, r1
  4065b0:	3c10      	subs	r4, #16
  4065b2:	2c10      	cmp	r4, #16
  4065b4:	dd11      	ble.n	4065da <_vfiprintf_r+0x8ea>
  4065b6:	1c41      	adds	r1, r0, #1
  4065b8:	3210      	adds	r2, #16
  4065ba:	2907      	cmp	r1, #7
  4065bc:	920f      	str	r2, [sp, #60]	; 0x3c
  4065be:	f8cc 5000 	str.w	r5, [ip]
  4065c2:	f8cc 3004 	str.w	r3, [ip, #4]
  4065c6:	910e      	str	r1, [sp, #56]	; 0x38
  4065c8:	dded      	ble.n	4065a6 <_vfiprintf_r+0x8b6>
  4065ca:	b9d2      	cbnz	r2, 406602 <_vfiprintf_r+0x912>
  4065cc:	3c10      	subs	r4, #16
  4065ce:	2c10      	cmp	r4, #16
  4065d0:	f04f 0e01 	mov.w	lr, #1
  4065d4:	4610      	mov	r0, r2
  4065d6:	46dc      	mov	ip, fp
  4065d8:	dced      	bgt.n	4065b6 <_vfiprintf_r+0x8c6>
  4065da:	46a9      	mov	r9, r5
  4065dc:	4645      	mov	r5, r8
  4065de:	46d0      	mov	r8, sl
  4065e0:	46e2      	mov	sl, ip
  4065e2:	4422      	add	r2, r4
  4065e4:	f1be 0f07 	cmp.w	lr, #7
  4065e8:	920f      	str	r2, [sp, #60]	; 0x3c
  4065ea:	f8ca 9000 	str.w	r9, [sl]
  4065ee:	f8ca 4004 	str.w	r4, [sl, #4]
  4065f2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4065f6:	dc2e      	bgt.n	406656 <_vfiprintf_r+0x966>
  4065f8:	f10a 0a08 	add.w	sl, sl, #8
  4065fc:	f10e 0e01 	add.w	lr, lr, #1
  406600:	e558      	b.n	4060b4 <_vfiprintf_r+0x3c4>
  406602:	aa0d      	add	r2, sp, #52	; 0x34
  406604:	9900      	ldr	r1, [sp, #0]
  406606:	9301      	str	r3, [sp, #4]
  406608:	4648      	mov	r0, r9
  40660a:	f7ff fb35 	bl	405c78 <__sprint_r.part.0>
  40660e:	b968      	cbnz	r0, 40662c <_vfiprintf_r+0x93c>
  406610:	980e      	ldr	r0, [sp, #56]	; 0x38
  406612:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406614:	9b01      	ldr	r3, [sp, #4]
  406616:	f100 0e01 	add.w	lr, r0, #1
  40661a:	46dc      	mov	ip, fp
  40661c:	e7c8      	b.n	4065b0 <_vfiprintf_r+0x8c0>
  40661e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406620:	b123      	cbz	r3, 40662c <_vfiprintf_r+0x93c>
  406622:	9805      	ldr	r0, [sp, #20]
  406624:	9900      	ldr	r1, [sp, #0]
  406626:	aa0d      	add	r2, sp, #52	; 0x34
  406628:	f7ff fb26 	bl	405c78 <__sprint_r.part.0>
  40662c:	9b00      	ldr	r3, [sp, #0]
  40662e:	899b      	ldrh	r3, [r3, #12]
  406630:	065a      	lsls	r2, r3, #25
  406632:	f100 818b 	bmi.w	40694c <_vfiprintf_r+0xc5c>
  406636:	9802      	ldr	r0, [sp, #8]
  406638:	b02b      	add	sp, #172	; 0xac
  40663a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40663e:	aa0d      	add	r2, sp, #52	; 0x34
  406640:	9900      	ldr	r1, [sp, #0]
  406642:	4648      	mov	r0, r9
  406644:	f7ff fb18 	bl	405c78 <__sprint_r.part.0>
  406648:	2800      	cmp	r0, #0
  40664a:	d1ef      	bne.n	40662c <_vfiprintf_r+0x93c>
  40664c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40664e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406650:	1c48      	adds	r0, r1, #1
  406652:	46da      	mov	sl, fp
  406654:	e555      	b.n	406102 <_vfiprintf_r+0x412>
  406656:	2a00      	cmp	r2, #0
  406658:	f040 80fb 	bne.w	406852 <_vfiprintf_r+0xb62>
  40665c:	9a03      	ldr	r2, [sp, #12]
  40665e:	921b      	str	r2, [sp, #108]	; 0x6c
  406660:	2301      	movs	r3, #1
  406662:	920f      	str	r2, [sp, #60]	; 0x3c
  406664:	971a      	str	r7, [sp, #104]	; 0x68
  406666:	930e      	str	r3, [sp, #56]	; 0x38
  406668:	46da      	mov	sl, fp
  40666a:	f10a 0a08 	add.w	sl, sl, #8
  40666e:	0771      	lsls	r1, r6, #29
  406670:	d504      	bpl.n	40667c <_vfiprintf_r+0x98c>
  406672:	9b06      	ldr	r3, [sp, #24]
  406674:	1b5c      	subs	r4, r3, r5
  406676:	2c00      	cmp	r4, #0
  406678:	f73f ad34 	bgt.w	4060e4 <_vfiprintf_r+0x3f4>
  40667c:	9b02      	ldr	r3, [sp, #8]
  40667e:	9906      	ldr	r1, [sp, #24]
  406680:	42a9      	cmp	r1, r5
  406682:	bfac      	ite	ge
  406684:	185b      	addge	r3, r3, r1
  406686:	195b      	addlt	r3, r3, r5
  406688:	9302      	str	r3, [sp, #8]
  40668a:	2a00      	cmp	r2, #0
  40668c:	f040 80b3 	bne.w	4067f6 <_vfiprintf_r+0xb06>
  406690:	2300      	movs	r3, #0
  406692:	930e      	str	r3, [sp, #56]	; 0x38
  406694:	46da      	mov	sl, fp
  406696:	f7ff bb5c 	b.w	405d52 <_vfiprintf_r+0x62>
  40669a:	aa0d      	add	r2, sp, #52	; 0x34
  40669c:	9900      	ldr	r1, [sp, #0]
  40669e:	9307      	str	r3, [sp, #28]
  4066a0:	4648      	mov	r0, r9
  4066a2:	f7ff fae9 	bl	405c78 <__sprint_r.part.0>
  4066a6:	2800      	cmp	r0, #0
  4066a8:	d1c0      	bne.n	40662c <_vfiprintf_r+0x93c>
  4066aa:	980e      	ldr	r0, [sp, #56]	; 0x38
  4066ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4066ae:	9b07      	ldr	r3, [sp, #28]
  4066b0:	f100 0c01 	add.w	ip, r0, #1
  4066b4:	46de      	mov	lr, fp
  4066b6:	e4cb      	b.n	406050 <_vfiprintf_r+0x360>
  4066b8:	0040bae0 	.word	0x0040bae0
  4066bc:	0040baf4 	.word	0x0040baf4
  4066c0:	0040bb24 	.word	0x0040bb24
  4066c4:	2a00      	cmp	r2, #0
  4066c6:	f040 8133 	bne.w	406930 <_vfiprintf_r+0xc40>
  4066ca:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4066ce:	2b00      	cmp	r3, #0
  4066d0:	f000 80f5 	beq.w	4068be <_vfiprintf_r+0xbce>
  4066d4:	2301      	movs	r3, #1
  4066d6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4066da:	461a      	mov	r2, r3
  4066dc:	931b      	str	r3, [sp, #108]	; 0x6c
  4066de:	469e      	mov	lr, r3
  4066e0:	911a      	str	r1, [sp, #104]	; 0x68
  4066e2:	46da      	mov	sl, fp
  4066e4:	4670      	mov	r0, lr
  4066e6:	f10a 0a08 	add.w	sl, sl, #8
  4066ea:	f10e 0e01 	add.w	lr, lr, #1
  4066ee:	e47d      	b.n	405fec <_vfiprintf_r+0x2fc>
  4066f0:	a90c      	add	r1, sp, #48	; 0x30
  4066f2:	2202      	movs	r2, #2
  4066f4:	469e      	mov	lr, r3
  4066f6:	911a      	str	r1, [sp, #104]	; 0x68
  4066f8:	921b      	str	r2, [sp, #108]	; 0x6c
  4066fa:	46da      	mov	sl, fp
  4066fc:	4670      	mov	r0, lr
  4066fe:	f10a 0a08 	add.w	sl, sl, #8
  406702:	f10e 0e01 	add.w	lr, lr, #1
  406706:	e738      	b.n	40657a <_vfiprintf_r+0x88a>
  406708:	9b01      	ldr	r3, [sp, #4]
  40670a:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40670e:	2b00      	cmp	r3, #0
  406710:	f2c0 812a 	blt.w	406968 <_vfiprintf_r+0xc78>
  406714:	ea54 0305 	orrs.w	r3, r4, r5
  406718:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40671c:	f43f abff 	beq.w	405f1e <_vfiprintf_r+0x22e>
  406720:	465f      	mov	r7, fp
  406722:	0923      	lsrs	r3, r4, #4
  406724:	f004 010f 	and.w	r1, r4, #15
  406728:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40672c:	092a      	lsrs	r2, r5, #4
  40672e:	461c      	mov	r4, r3
  406730:	4615      	mov	r5, r2
  406732:	5c43      	ldrb	r3, [r0, r1]
  406734:	f807 3d01 	strb.w	r3, [r7, #-1]!
  406738:	ea54 0305 	orrs.w	r3, r4, r5
  40673c:	d1f1      	bne.n	406722 <_vfiprintf_r+0xa32>
  40673e:	ebc7 030b 	rsb	r3, r7, fp
  406742:	9303      	str	r3, [sp, #12]
  406744:	f7ff bbf4 	b.w	405f30 <_vfiprintf_r+0x240>
  406748:	aa0d      	add	r2, sp, #52	; 0x34
  40674a:	9900      	ldr	r1, [sp, #0]
  40674c:	9805      	ldr	r0, [sp, #20]
  40674e:	f7ff fa93 	bl	405c78 <__sprint_r.part.0>
  406752:	2800      	cmp	r0, #0
  406754:	f47f af6a 	bne.w	40662c <_vfiprintf_r+0x93c>
  406758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40675a:	46da      	mov	sl, fp
  40675c:	e787      	b.n	40666e <_vfiprintf_r+0x97e>
  40675e:	f04f 0900 	mov.w	r9, #0
  406762:	2400      	movs	r4, #0
  406764:	2500      	movs	r5, #0
  406766:	e7db      	b.n	406720 <_vfiprintf_r+0xa30>
  406768:	f016 0210 	ands.w	r2, r6, #16
  40676c:	f000 80b2 	beq.w	4068d4 <_vfiprintf_r+0xbe4>
  406770:	9904      	ldr	r1, [sp, #16]
  406772:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406776:	460a      	mov	r2, r1
  406778:	680c      	ldr	r4, [r1, #0]
  40677a:	9901      	ldr	r1, [sp, #4]
  40677c:	2900      	cmp	r1, #0
  40677e:	f102 0204 	add.w	r2, r2, #4
  406782:	f04f 0500 	mov.w	r5, #0
  406786:	f2c0 8159 	blt.w	406a3c <_vfiprintf_r+0xd4c>
  40678a:	ea54 0105 	orrs.w	r1, r4, r5
  40678e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406792:	9204      	str	r2, [sp, #16]
  406794:	f43f ad51 	beq.w	40623a <_vfiprintf_r+0x54a>
  406798:	4699      	mov	r9, r3
  40679a:	e556      	b.n	40624a <_vfiprintf_r+0x55a>
  40679c:	06f7      	lsls	r7, r6, #27
  40679e:	d40a      	bmi.n	4067b6 <_vfiprintf_r+0xac6>
  4067a0:	0675      	lsls	r5, r6, #25
  4067a2:	d508      	bpl.n	4067b6 <_vfiprintf_r+0xac6>
  4067a4:	9904      	ldr	r1, [sp, #16]
  4067a6:	f9b1 4000 	ldrsh.w	r4, [r1]
  4067aa:	3104      	adds	r1, #4
  4067ac:	17e5      	asrs	r5, r4, #31
  4067ae:	4622      	mov	r2, r4
  4067b0:	462b      	mov	r3, r5
  4067b2:	9104      	str	r1, [sp, #16]
  4067b4:	e4ea      	b.n	40618c <_vfiprintf_r+0x49c>
  4067b6:	9a04      	ldr	r2, [sp, #16]
  4067b8:	6814      	ldr	r4, [r2, #0]
  4067ba:	4613      	mov	r3, r2
  4067bc:	3304      	adds	r3, #4
  4067be:	17e5      	asrs	r5, r4, #31
  4067c0:	9304      	str	r3, [sp, #16]
  4067c2:	4622      	mov	r2, r4
  4067c4:	462b      	mov	r3, r5
  4067c6:	e4e1      	b.n	40618c <_vfiprintf_r+0x49c>
  4067c8:	6814      	ldr	r4, [r2, #0]
  4067ca:	3204      	adds	r2, #4
  4067cc:	9204      	str	r2, [sp, #16]
  4067ce:	2500      	movs	r5, #0
  4067d0:	e61f      	b.n	406412 <_vfiprintf_r+0x722>
  4067d2:	f04f 0900 	mov.w	r9, #0
  4067d6:	ea54 0305 	orrs.w	r3, r4, r5
  4067da:	f47f ace8 	bne.w	4061ae <_vfiprintf_r+0x4be>
  4067de:	e5d8      	b.n	406392 <_vfiprintf_r+0x6a2>
  4067e0:	aa0d      	add	r2, sp, #52	; 0x34
  4067e2:	9900      	ldr	r1, [sp, #0]
  4067e4:	9805      	ldr	r0, [sp, #20]
  4067e6:	f7ff fa47 	bl	405c78 <__sprint_r.part.0>
  4067ea:	2800      	cmp	r0, #0
  4067ec:	f47f af1e 	bne.w	40662c <_vfiprintf_r+0x93c>
  4067f0:	46da      	mov	sl, fp
  4067f2:	f7ff bb48 	b.w	405e86 <_vfiprintf_r+0x196>
  4067f6:	aa0d      	add	r2, sp, #52	; 0x34
  4067f8:	9900      	ldr	r1, [sp, #0]
  4067fa:	9805      	ldr	r0, [sp, #20]
  4067fc:	f7ff fa3c 	bl	405c78 <__sprint_r.part.0>
  406800:	2800      	cmp	r0, #0
  406802:	f43f af45 	beq.w	406690 <_vfiprintf_r+0x9a0>
  406806:	e711      	b.n	40662c <_vfiprintf_r+0x93c>
  406808:	aa0d      	add	r2, sp, #52	; 0x34
  40680a:	9900      	ldr	r1, [sp, #0]
  40680c:	9805      	ldr	r0, [sp, #20]
  40680e:	f7ff fa33 	bl	405c78 <__sprint_r.part.0>
  406812:	2800      	cmp	r0, #0
  406814:	f47f af0a 	bne.w	40662c <_vfiprintf_r+0x93c>
  406818:	980e      	ldr	r0, [sp, #56]	; 0x38
  40681a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40681c:	f100 0e01 	add.w	lr, r0, #1
  406820:	46da      	mov	sl, fp
  406822:	f7ff bbe3 	b.w	405fec <_vfiprintf_r+0x2fc>
  406826:	aa0d      	add	r2, sp, #52	; 0x34
  406828:	9900      	ldr	r1, [sp, #0]
  40682a:	9805      	ldr	r0, [sp, #20]
  40682c:	f7ff fa24 	bl	405c78 <__sprint_r.part.0>
  406830:	2800      	cmp	r0, #0
  406832:	f47f aefb 	bne.w	40662c <_vfiprintf_r+0x93c>
  406836:	980e      	ldr	r0, [sp, #56]	; 0x38
  406838:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40683a:	f100 0e01 	add.w	lr, r0, #1
  40683e:	46da      	mov	sl, fp
  406840:	e69b      	b.n	40657a <_vfiprintf_r+0x88a>
  406842:	2a00      	cmp	r2, #0
  406844:	f040 80d8 	bne.w	4069f8 <_vfiprintf_r+0xd08>
  406848:	f04f 0e01 	mov.w	lr, #1
  40684c:	4610      	mov	r0, r2
  40684e:	46da      	mov	sl, fp
  406850:	e697      	b.n	406582 <_vfiprintf_r+0x892>
  406852:	aa0d      	add	r2, sp, #52	; 0x34
  406854:	9900      	ldr	r1, [sp, #0]
  406856:	9805      	ldr	r0, [sp, #20]
  406858:	f7ff fa0e 	bl	405c78 <__sprint_r.part.0>
  40685c:	2800      	cmp	r0, #0
  40685e:	f47f aee5 	bne.w	40662c <_vfiprintf_r+0x93c>
  406862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406864:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406866:	f103 0e01 	add.w	lr, r3, #1
  40686a:	46da      	mov	sl, fp
  40686c:	e422      	b.n	4060b4 <_vfiprintf_r+0x3c4>
  40686e:	2230      	movs	r2, #48	; 0x30
  406870:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  406874:	9a01      	ldr	r2, [sp, #4]
  406876:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40687a:	2a00      	cmp	r2, #0
  40687c:	f04f 0300 	mov.w	r3, #0
  406880:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406884:	f046 0302 	orr.w	r3, r6, #2
  406888:	f2c0 80cb 	blt.w	406a22 <_vfiprintf_r+0xd32>
  40688c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406890:	f046 0602 	orr.w	r6, r6, #2
  406894:	f04f 0900 	mov.w	r9, #0
  406898:	e742      	b.n	406720 <_vfiprintf_r+0xa30>
  40689a:	f04f 0900 	mov.w	r9, #0
  40689e:	4890      	ldr	r0, [pc, #576]	; (406ae0 <_vfiprintf_r+0xdf0>)
  4068a0:	e73e      	b.n	406720 <_vfiprintf_r+0xa30>
  4068a2:	9b01      	ldr	r3, [sp, #4]
  4068a4:	4264      	negs	r4, r4
  4068a6:	f04f 092d 	mov.w	r9, #45	; 0x2d
  4068aa:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4068ae:	2b00      	cmp	r3, #0
  4068b0:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4068b4:	f6ff ac7b 	blt.w	4061ae <_vfiprintf_r+0x4be>
  4068b8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4068bc:	e477      	b.n	4061ae <_vfiprintf_r+0x4be>
  4068be:	9b07      	ldr	r3, [sp, #28]
  4068c0:	2b00      	cmp	r3, #0
  4068c2:	d072      	beq.n	4069aa <_vfiprintf_r+0xcba>
  4068c4:	ab0c      	add	r3, sp, #48	; 0x30
  4068c6:	2202      	movs	r2, #2
  4068c8:	931a      	str	r3, [sp, #104]	; 0x68
  4068ca:	921b      	str	r2, [sp, #108]	; 0x6c
  4068cc:	f04f 0e01 	mov.w	lr, #1
  4068d0:	46da      	mov	sl, fp
  4068d2:	e713      	b.n	4066fc <_vfiprintf_r+0xa0c>
  4068d4:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4068d8:	d048      	beq.n	40696c <_vfiprintf_r+0xc7c>
  4068da:	9904      	ldr	r1, [sp, #16]
  4068dc:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4068e0:	460b      	mov	r3, r1
  4068e2:	880c      	ldrh	r4, [r1, #0]
  4068e4:	9901      	ldr	r1, [sp, #4]
  4068e6:	2900      	cmp	r1, #0
  4068e8:	f103 0304 	add.w	r3, r3, #4
  4068ec:	f04f 0500 	mov.w	r5, #0
  4068f0:	f6ff ae10 	blt.w	406514 <_vfiprintf_r+0x824>
  4068f4:	ea54 0105 	orrs.w	r1, r4, r5
  4068f8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4068fc:	9304      	str	r3, [sp, #16]
  4068fe:	f43f ac9c 	beq.w	40623a <_vfiprintf_r+0x54a>
  406902:	4691      	mov	r9, r2
  406904:	e4a1      	b.n	40624a <_vfiprintf_r+0x55a>
  406906:	06f0      	lsls	r0, r6, #27
  406908:	d40a      	bmi.n	406920 <_vfiprintf_r+0xc30>
  40690a:	0671      	lsls	r1, r6, #25
  40690c:	d508      	bpl.n	406920 <_vfiprintf_r+0xc30>
  40690e:	9a04      	ldr	r2, [sp, #16]
  406910:	6813      	ldr	r3, [r2, #0]
  406912:	3204      	adds	r2, #4
  406914:	9204      	str	r2, [sp, #16]
  406916:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40691a:	801a      	strh	r2, [r3, #0]
  40691c:	f7ff ba19 	b.w	405d52 <_vfiprintf_r+0x62>
  406920:	9a04      	ldr	r2, [sp, #16]
  406922:	6813      	ldr	r3, [r2, #0]
  406924:	3204      	adds	r2, #4
  406926:	9204      	str	r2, [sp, #16]
  406928:	9a02      	ldr	r2, [sp, #8]
  40692a:	601a      	str	r2, [r3, #0]
  40692c:	f7ff ba11 	b.w	405d52 <_vfiprintf_r+0x62>
  406930:	aa0d      	add	r2, sp, #52	; 0x34
  406932:	9900      	ldr	r1, [sp, #0]
  406934:	9805      	ldr	r0, [sp, #20]
  406936:	f7ff f99f 	bl	405c78 <__sprint_r.part.0>
  40693a:	2800      	cmp	r0, #0
  40693c:	f47f ae76 	bne.w	40662c <_vfiprintf_r+0x93c>
  406940:	980e      	ldr	r0, [sp, #56]	; 0x38
  406942:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406944:	f100 0e01 	add.w	lr, r0, #1
  406948:	46da      	mov	sl, fp
  40694a:	e5fa      	b.n	406542 <_vfiprintf_r+0x852>
  40694c:	f04f 30ff 	mov.w	r0, #4294967295
  406950:	f7ff bab6 	b.w	405ec0 <_vfiprintf_r+0x1d0>
  406954:	4862      	ldr	r0, [pc, #392]	; (406ae0 <_vfiprintf_r+0xdf0>)
  406956:	4616      	mov	r6, r2
  406958:	ea54 0205 	orrs.w	r2, r4, r5
  40695c:	9304      	str	r3, [sp, #16]
  40695e:	f04f 0900 	mov.w	r9, #0
  406962:	f47f aedd 	bne.w	406720 <_vfiprintf_r+0xa30>
  406966:	e6fc      	b.n	406762 <_vfiprintf_r+0xa72>
  406968:	9b04      	ldr	r3, [sp, #16]
  40696a:	e7f5      	b.n	406958 <_vfiprintf_r+0xc68>
  40696c:	9a04      	ldr	r2, [sp, #16]
  40696e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  406972:	4613      	mov	r3, r2
  406974:	6814      	ldr	r4, [r2, #0]
  406976:	9a01      	ldr	r2, [sp, #4]
  406978:	2a00      	cmp	r2, #0
  40697a:	f103 0304 	add.w	r3, r3, #4
  40697e:	f04f 0500 	mov.w	r5, #0
  406982:	f6ff adc7 	blt.w	406514 <_vfiprintf_r+0x824>
  406986:	ea54 0205 	orrs.w	r2, r4, r5
  40698a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40698e:	9304      	str	r3, [sp, #16]
  406990:	f47f ac5b 	bne.w	40624a <_vfiprintf_r+0x55a>
  406994:	e451      	b.n	40623a <_vfiprintf_r+0x54a>
  406996:	aa0d      	add	r2, sp, #52	; 0x34
  406998:	9900      	ldr	r1, [sp, #0]
  40699a:	9805      	ldr	r0, [sp, #20]
  40699c:	f7ff f96c 	bl	405c78 <__sprint_r.part.0>
  4069a0:	2800      	cmp	r0, #0
  4069a2:	f47f ae43 	bne.w	40662c <_vfiprintf_r+0x93c>
  4069a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4069a8:	e668      	b.n	40667c <_vfiprintf_r+0x98c>
  4069aa:	4610      	mov	r0, r2
  4069ac:	f04f 0e01 	mov.w	lr, #1
  4069b0:	46da      	mov	sl, fp
  4069b2:	e5e6      	b.n	406582 <_vfiprintf_r+0x892>
  4069b4:	9904      	ldr	r1, [sp, #16]
  4069b6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4069ba:	460a      	mov	r2, r1
  4069bc:	880c      	ldrh	r4, [r1, #0]
  4069be:	9901      	ldr	r1, [sp, #4]
  4069c0:	2900      	cmp	r1, #0
  4069c2:	f102 0204 	add.w	r2, r2, #4
  4069c6:	f04f 0500 	mov.w	r5, #0
  4069ca:	db4e      	blt.n	406a6a <_vfiprintf_r+0xd7a>
  4069cc:	ea54 0105 	orrs.w	r1, r4, r5
  4069d0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4069d4:	9204      	str	r2, [sp, #16]
  4069d6:	4699      	mov	r9, r3
  4069d8:	f47f abe9 	bne.w	4061ae <_vfiprintf_r+0x4be>
  4069dc:	e4d4      	b.n	406388 <_vfiprintf_r+0x698>
  4069de:	9304      	str	r3, [sp, #16]
  4069e0:	e6f9      	b.n	4067d6 <_vfiprintf_r+0xae6>
  4069e2:	4638      	mov	r0, r7
  4069e4:	9404      	str	r4, [sp, #16]
  4069e6:	f7fd fd8b 	bl	404500 <strlen>
  4069ea:	2300      	movs	r3, #0
  4069ec:	9003      	str	r0, [sp, #12]
  4069ee:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4069f2:	9301      	str	r3, [sp, #4]
  4069f4:	f7ff ba9c 	b.w	405f30 <_vfiprintf_r+0x240>
  4069f8:	aa0d      	add	r2, sp, #52	; 0x34
  4069fa:	9900      	ldr	r1, [sp, #0]
  4069fc:	9805      	ldr	r0, [sp, #20]
  4069fe:	f7ff f93b 	bl	405c78 <__sprint_r.part.0>
  406a02:	2800      	cmp	r0, #0
  406a04:	f47f ae12 	bne.w	40662c <_vfiprintf_r+0x93c>
  406a08:	980e      	ldr	r0, [sp, #56]	; 0x38
  406a0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406a0c:	f100 0e01 	add.w	lr, r0, #1
  406a10:	46da      	mov	sl, fp
  406a12:	e5b6      	b.n	406582 <_vfiprintf_r+0x892>
  406a14:	980e      	ldr	r0, [sp, #56]	; 0x38
  406a16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406a18:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 406ae8 <_vfiprintf_r+0xdf8>
  406a1c:	3001      	adds	r0, #1
  406a1e:	f7ff bad2 	b.w	405fc6 <_vfiprintf_r+0x2d6>
  406a22:	461e      	mov	r6, r3
  406a24:	f04f 0900 	mov.w	r9, #0
  406a28:	e67a      	b.n	406720 <_vfiprintf_r+0xa30>
  406a2a:	2b06      	cmp	r3, #6
  406a2c:	bf28      	it	cs
  406a2e:	2306      	movcs	r3, #6
  406a30:	9303      	str	r3, [sp, #12]
  406a32:	9404      	str	r4, [sp, #16]
  406a34:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  406a38:	4f2a      	ldr	r7, [pc, #168]	; (406ae4 <_vfiprintf_r+0xdf4>)
  406a3a:	e50c      	b.n	406456 <_vfiprintf_r+0x766>
  406a3c:	9204      	str	r2, [sp, #16]
  406a3e:	e56a      	b.n	406516 <_vfiprintf_r+0x826>
  406a40:	980e      	ldr	r0, [sp, #56]	; 0x38
  406a42:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 406ae8 <_vfiprintf_r+0xdf8>
  406a46:	3001      	adds	r0, #1
  406a48:	f7ff bb73 	b.w	406132 <_vfiprintf_r+0x442>
  406a4c:	46f4      	mov	ip, lr
  406a4e:	f7ff bb1a 	b.w	406086 <_vfiprintf_r+0x396>
  406a52:	9b01      	ldr	r3, [sp, #4]
  406a54:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  406a58:	9303      	str	r3, [sp, #12]
  406a5a:	9404      	str	r4, [sp, #16]
  406a5c:	9001      	str	r0, [sp, #4]
  406a5e:	f7ff ba67 	b.w	405f30 <_vfiprintf_r+0x240>
  406a62:	2200      	movs	r2, #0
  406a64:	9201      	str	r2, [sp, #4]
  406a66:	f7ff b9ac 	b.w	405dc2 <_vfiprintf_r+0xd2>
  406a6a:	9204      	str	r2, [sp, #16]
  406a6c:	4699      	mov	r9, r3
  406a6e:	e6b2      	b.n	4067d6 <_vfiprintf_r+0xae6>
  406a70:	9a04      	ldr	r2, [sp, #16]
  406a72:	6813      	ldr	r3, [r2, #0]
  406a74:	9301      	str	r3, [sp, #4]
  406a76:	3204      	adds	r2, #4
  406a78:	2b00      	cmp	r3, #0
  406a7a:	9204      	str	r2, [sp, #16]
  406a7c:	f898 3001 	ldrb.w	r3, [r8, #1]
  406a80:	46a8      	mov	r8, r5
  406a82:	f6bf a99c 	bge.w	405dbe <_vfiprintf_r+0xce>
  406a86:	f04f 32ff 	mov.w	r2, #4294967295
  406a8a:	9201      	str	r2, [sp, #4]
  406a8c:	f7ff b997 	b.w	405dbe <_vfiprintf_r+0xce>
  406a90:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406a94:	e48e      	b.n	4063b4 <_vfiprintf_r+0x6c4>
  406a96:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406a9a:	e4f0      	b.n	40647e <_vfiprintf_r+0x78e>
  406a9c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406aa0:	e4ab      	b.n	4063fa <_vfiprintf_r+0x70a>
  406aa2:	4699      	mov	r9, r3
  406aa4:	07f3      	lsls	r3, r6, #31
  406aa6:	d505      	bpl.n	406ab4 <_vfiprintf_r+0xdc4>
  406aa8:	af2a      	add	r7, sp, #168	; 0xa8
  406aaa:	2330      	movs	r3, #48	; 0x30
  406aac:	f807 3d41 	strb.w	r3, [r7, #-65]!
  406ab0:	f7ff bb97 	b.w	4061e2 <_vfiprintf_r+0x4f2>
  406ab4:	9b01      	ldr	r3, [sp, #4]
  406ab6:	9303      	str	r3, [sp, #12]
  406ab8:	465f      	mov	r7, fp
  406aba:	f7ff ba39 	b.w	405f30 <_vfiprintf_r+0x240>
  406abe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406ac2:	e443      	b.n	40634c <_vfiprintf_r+0x65c>
  406ac4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406ac8:	f7ff bb9a 	b.w	406200 <_vfiprintf_r+0x510>
  406acc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406ad0:	f7ff bb4d 	b.w	40616e <_vfiprintf_r+0x47e>
  406ad4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406ad8:	e50f      	b.n	4064fa <_vfiprintf_r+0x80a>
  406ada:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406ade:	e4f3      	b.n	4064c8 <_vfiprintf_r+0x7d8>
  406ae0:	0040baf4 	.word	0x0040baf4
  406ae4:	0040bb08 	.word	0x0040bb08
  406ae8:	0040bb34 	.word	0x0040bb34

00406aec <__sbprintf>:
  406aec:	b5f0      	push	{r4, r5, r6, r7, lr}
  406aee:	460c      	mov	r4, r1
  406af0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  406af4:	8989      	ldrh	r1, [r1, #12]
  406af6:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406af8:	89e5      	ldrh	r5, [r4, #14]
  406afa:	9619      	str	r6, [sp, #100]	; 0x64
  406afc:	f021 0102 	bic.w	r1, r1, #2
  406b00:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406b02:	f8ad 500e 	strh.w	r5, [sp, #14]
  406b06:	2500      	movs	r5, #0
  406b08:	69e7      	ldr	r7, [r4, #28]
  406b0a:	f8ad 100c 	strh.w	r1, [sp, #12]
  406b0e:	9609      	str	r6, [sp, #36]	; 0x24
  406b10:	9506      	str	r5, [sp, #24]
  406b12:	ae1a      	add	r6, sp, #104	; 0x68
  406b14:	f44f 6580 	mov.w	r5, #1024	; 0x400
  406b18:	4669      	mov	r1, sp
  406b1a:	9600      	str	r6, [sp, #0]
  406b1c:	9604      	str	r6, [sp, #16]
  406b1e:	9502      	str	r5, [sp, #8]
  406b20:	9505      	str	r5, [sp, #20]
  406b22:	9707      	str	r7, [sp, #28]
  406b24:	4606      	mov	r6, r0
  406b26:	f7ff f8e3 	bl	405cf0 <_vfiprintf_r>
  406b2a:	1e05      	subs	r5, r0, #0
  406b2c:	db07      	blt.n	406b3e <__sbprintf+0x52>
  406b2e:	4630      	mov	r0, r6
  406b30:	4669      	mov	r1, sp
  406b32:	f001 f8e9 	bl	407d08 <_fflush_r>
  406b36:	2800      	cmp	r0, #0
  406b38:	bf18      	it	ne
  406b3a:	f04f 35ff 	movne.w	r5, #4294967295
  406b3e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406b42:	065b      	lsls	r3, r3, #25
  406b44:	d503      	bpl.n	406b4e <__sbprintf+0x62>
  406b46:	89a3      	ldrh	r3, [r4, #12]
  406b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406b4c:	81a3      	strh	r3, [r4, #12]
  406b4e:	4628      	mov	r0, r5
  406b50:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  406b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b56:	bf00      	nop

00406b58 <__swsetup_r>:
  406b58:	b538      	push	{r3, r4, r5, lr}
  406b5a:	4b30      	ldr	r3, [pc, #192]	; (406c1c <__swsetup_r+0xc4>)
  406b5c:	681b      	ldr	r3, [r3, #0]
  406b5e:	4605      	mov	r5, r0
  406b60:	460c      	mov	r4, r1
  406b62:	b113      	cbz	r3, 406b6a <__swsetup_r+0x12>
  406b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406b66:	2a00      	cmp	r2, #0
  406b68:	d038      	beq.n	406bdc <__swsetup_r+0x84>
  406b6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406b6e:	b293      	uxth	r3, r2
  406b70:	0718      	lsls	r0, r3, #28
  406b72:	d50c      	bpl.n	406b8e <__swsetup_r+0x36>
  406b74:	6920      	ldr	r0, [r4, #16]
  406b76:	b1a8      	cbz	r0, 406ba4 <__swsetup_r+0x4c>
  406b78:	f013 0201 	ands.w	r2, r3, #1
  406b7c:	d01e      	beq.n	406bbc <__swsetup_r+0x64>
  406b7e:	6963      	ldr	r3, [r4, #20]
  406b80:	2200      	movs	r2, #0
  406b82:	425b      	negs	r3, r3
  406b84:	61a3      	str	r3, [r4, #24]
  406b86:	60a2      	str	r2, [r4, #8]
  406b88:	b1f0      	cbz	r0, 406bc8 <__swsetup_r+0x70>
  406b8a:	2000      	movs	r0, #0
  406b8c:	bd38      	pop	{r3, r4, r5, pc}
  406b8e:	06d9      	lsls	r1, r3, #27
  406b90:	d53c      	bpl.n	406c0c <__swsetup_r+0xb4>
  406b92:	0758      	lsls	r0, r3, #29
  406b94:	d426      	bmi.n	406be4 <__swsetup_r+0x8c>
  406b96:	6920      	ldr	r0, [r4, #16]
  406b98:	f042 0308 	orr.w	r3, r2, #8
  406b9c:	81a3      	strh	r3, [r4, #12]
  406b9e:	b29b      	uxth	r3, r3
  406ba0:	2800      	cmp	r0, #0
  406ba2:	d1e9      	bne.n	406b78 <__swsetup_r+0x20>
  406ba4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406ba8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406bac:	d0e4      	beq.n	406b78 <__swsetup_r+0x20>
  406bae:	4628      	mov	r0, r5
  406bb0:	4621      	mov	r1, r4
  406bb2:	f001 fcd9 	bl	408568 <__smakebuf_r>
  406bb6:	89a3      	ldrh	r3, [r4, #12]
  406bb8:	6920      	ldr	r0, [r4, #16]
  406bba:	e7dd      	b.n	406b78 <__swsetup_r+0x20>
  406bbc:	0799      	lsls	r1, r3, #30
  406bbe:	bf58      	it	pl
  406bc0:	6962      	ldrpl	r2, [r4, #20]
  406bc2:	60a2      	str	r2, [r4, #8]
  406bc4:	2800      	cmp	r0, #0
  406bc6:	d1e0      	bne.n	406b8a <__swsetup_r+0x32>
  406bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406bcc:	061a      	lsls	r2, r3, #24
  406bce:	d5dd      	bpl.n	406b8c <__swsetup_r+0x34>
  406bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406bd4:	81a3      	strh	r3, [r4, #12]
  406bd6:	f04f 30ff 	mov.w	r0, #4294967295
  406bda:	bd38      	pop	{r3, r4, r5, pc}
  406bdc:	4618      	mov	r0, r3
  406bde:	f001 f927 	bl	407e30 <__sinit>
  406be2:	e7c2      	b.n	406b6a <__swsetup_r+0x12>
  406be4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406be6:	b151      	cbz	r1, 406bfe <__swsetup_r+0xa6>
  406be8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406bec:	4299      	cmp	r1, r3
  406bee:	d004      	beq.n	406bfa <__swsetup_r+0xa2>
  406bf0:	4628      	mov	r0, r5
  406bf2:	f001 f9e7 	bl	407fc4 <_free_r>
  406bf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406bfa:	2300      	movs	r3, #0
  406bfc:	6323      	str	r3, [r4, #48]	; 0x30
  406bfe:	2300      	movs	r3, #0
  406c00:	6920      	ldr	r0, [r4, #16]
  406c02:	6063      	str	r3, [r4, #4]
  406c04:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406c08:	6020      	str	r0, [r4, #0]
  406c0a:	e7c5      	b.n	406b98 <__swsetup_r+0x40>
  406c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406c10:	2309      	movs	r3, #9
  406c12:	602b      	str	r3, [r5, #0]
  406c14:	f04f 30ff 	mov.w	r0, #4294967295
  406c18:	81a2      	strh	r2, [r4, #12]
  406c1a:	bd38      	pop	{r3, r4, r5, pc}
  406c1c:	20400448 	.word	0x20400448

00406c20 <register_fini>:
  406c20:	4b02      	ldr	r3, [pc, #8]	; (406c2c <register_fini+0xc>)
  406c22:	b113      	cbz	r3, 406c2a <register_fini+0xa>
  406c24:	4802      	ldr	r0, [pc, #8]	; (406c30 <register_fini+0x10>)
  406c26:	f000 b805 	b.w	406c34 <atexit>
  406c2a:	4770      	bx	lr
  406c2c:	00000000 	.word	0x00000000
  406c30:	00407e45 	.word	0x00407e45

00406c34 <atexit>:
  406c34:	2300      	movs	r3, #0
  406c36:	4601      	mov	r1, r0
  406c38:	461a      	mov	r2, r3
  406c3a:	4618      	mov	r0, r3
  406c3c:	f002 bf62 	b.w	409b04 <__register_exitproc>

00406c40 <quorem>:
  406c40:	6902      	ldr	r2, [r0, #16]
  406c42:	690b      	ldr	r3, [r1, #16]
  406c44:	4293      	cmp	r3, r2
  406c46:	f300 808d 	bgt.w	406d64 <quorem+0x124>
  406c4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c4e:	f103 38ff 	add.w	r8, r3, #4294967295
  406c52:	f101 0714 	add.w	r7, r1, #20
  406c56:	f100 0b14 	add.w	fp, r0, #20
  406c5a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  406c5e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  406c62:	ea4f 0488 	mov.w	r4, r8, lsl #2
  406c66:	b083      	sub	sp, #12
  406c68:	3201      	adds	r2, #1
  406c6a:	fbb3 f9f2 	udiv	r9, r3, r2
  406c6e:	eb0b 0304 	add.w	r3, fp, r4
  406c72:	9400      	str	r4, [sp, #0]
  406c74:	eb07 0a04 	add.w	sl, r7, r4
  406c78:	9301      	str	r3, [sp, #4]
  406c7a:	f1b9 0f00 	cmp.w	r9, #0
  406c7e:	d039      	beq.n	406cf4 <quorem+0xb4>
  406c80:	2500      	movs	r5, #0
  406c82:	46bc      	mov	ip, r7
  406c84:	46de      	mov	lr, fp
  406c86:	462b      	mov	r3, r5
  406c88:	f85c 6b04 	ldr.w	r6, [ip], #4
  406c8c:	f8de 2000 	ldr.w	r2, [lr]
  406c90:	b2b4      	uxth	r4, r6
  406c92:	fb09 5504 	mla	r5, r9, r4, r5
  406c96:	0c36      	lsrs	r6, r6, #16
  406c98:	0c2c      	lsrs	r4, r5, #16
  406c9a:	fb09 4406 	mla	r4, r9, r6, r4
  406c9e:	b2ad      	uxth	r5, r5
  406ca0:	1b5b      	subs	r3, r3, r5
  406ca2:	b2a6      	uxth	r6, r4
  406ca4:	fa13 f382 	uxtah	r3, r3, r2
  406ca8:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  406cac:	eb06 4623 	add.w	r6, r6, r3, asr #16
  406cb0:	b29b      	uxth	r3, r3
  406cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  406cb6:	45e2      	cmp	sl, ip
  406cb8:	f84e 3b04 	str.w	r3, [lr], #4
  406cbc:	ea4f 4514 	mov.w	r5, r4, lsr #16
  406cc0:	ea4f 4326 	mov.w	r3, r6, asr #16
  406cc4:	d2e0      	bcs.n	406c88 <quorem+0x48>
  406cc6:	9b00      	ldr	r3, [sp, #0]
  406cc8:	f85b 3003 	ldr.w	r3, [fp, r3]
  406ccc:	b993      	cbnz	r3, 406cf4 <quorem+0xb4>
  406cce:	9c01      	ldr	r4, [sp, #4]
  406cd0:	1f23      	subs	r3, r4, #4
  406cd2:	459b      	cmp	fp, r3
  406cd4:	d20c      	bcs.n	406cf0 <quorem+0xb0>
  406cd6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406cda:	b94b      	cbnz	r3, 406cf0 <quorem+0xb0>
  406cdc:	f1a4 0308 	sub.w	r3, r4, #8
  406ce0:	e002      	b.n	406ce8 <quorem+0xa8>
  406ce2:	681a      	ldr	r2, [r3, #0]
  406ce4:	3b04      	subs	r3, #4
  406ce6:	b91a      	cbnz	r2, 406cf0 <quorem+0xb0>
  406ce8:	459b      	cmp	fp, r3
  406cea:	f108 38ff 	add.w	r8, r8, #4294967295
  406cee:	d3f8      	bcc.n	406ce2 <quorem+0xa2>
  406cf0:	f8c0 8010 	str.w	r8, [r0, #16]
  406cf4:	4604      	mov	r4, r0
  406cf6:	f002 fa95 	bl	409224 <__mcmp>
  406cfa:	2800      	cmp	r0, #0
  406cfc:	db2e      	blt.n	406d5c <quorem+0x11c>
  406cfe:	f109 0901 	add.w	r9, r9, #1
  406d02:	465d      	mov	r5, fp
  406d04:	2300      	movs	r3, #0
  406d06:	f857 1b04 	ldr.w	r1, [r7], #4
  406d0a:	6828      	ldr	r0, [r5, #0]
  406d0c:	b28a      	uxth	r2, r1
  406d0e:	1a9a      	subs	r2, r3, r2
  406d10:	0c09      	lsrs	r1, r1, #16
  406d12:	fa12 f280 	uxtah	r2, r2, r0
  406d16:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  406d1a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406d1e:	b291      	uxth	r1, r2
  406d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  406d24:	45ba      	cmp	sl, r7
  406d26:	f845 1b04 	str.w	r1, [r5], #4
  406d2a:	ea4f 4323 	mov.w	r3, r3, asr #16
  406d2e:	d2ea      	bcs.n	406d06 <quorem+0xc6>
  406d30:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  406d34:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  406d38:	b982      	cbnz	r2, 406d5c <quorem+0x11c>
  406d3a:	1f1a      	subs	r2, r3, #4
  406d3c:	4593      	cmp	fp, r2
  406d3e:	d20b      	bcs.n	406d58 <quorem+0x118>
  406d40:	f853 2c04 	ldr.w	r2, [r3, #-4]
  406d44:	b942      	cbnz	r2, 406d58 <quorem+0x118>
  406d46:	3b08      	subs	r3, #8
  406d48:	e002      	b.n	406d50 <quorem+0x110>
  406d4a:	681a      	ldr	r2, [r3, #0]
  406d4c:	3b04      	subs	r3, #4
  406d4e:	b91a      	cbnz	r2, 406d58 <quorem+0x118>
  406d50:	459b      	cmp	fp, r3
  406d52:	f108 38ff 	add.w	r8, r8, #4294967295
  406d56:	d3f8      	bcc.n	406d4a <quorem+0x10a>
  406d58:	f8c4 8010 	str.w	r8, [r4, #16]
  406d5c:	4648      	mov	r0, r9
  406d5e:	b003      	add	sp, #12
  406d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d64:	2000      	movs	r0, #0
  406d66:	4770      	bx	lr

00406d68 <_dtoa_r>:
  406d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  406d6e:	b097      	sub	sp, #92	; 0x5c
  406d70:	4681      	mov	r9, r0
  406d72:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  406d74:	4692      	mov	sl, r2
  406d76:	469b      	mov	fp, r3
  406d78:	b149      	cbz	r1, 406d8e <_dtoa_r+0x26>
  406d7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  406d7c:	604a      	str	r2, [r1, #4]
  406d7e:	2301      	movs	r3, #1
  406d80:	4093      	lsls	r3, r2
  406d82:	608b      	str	r3, [r1, #8]
  406d84:	f002 f86c 	bl	408e60 <_Bfree>
  406d88:	2300      	movs	r3, #0
  406d8a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  406d8e:	f1bb 0f00 	cmp.w	fp, #0
  406d92:	46d8      	mov	r8, fp
  406d94:	db33      	blt.n	406dfe <_dtoa_r+0x96>
  406d96:	2300      	movs	r3, #0
  406d98:	6023      	str	r3, [r4, #0]
  406d9a:	4ba5      	ldr	r3, [pc, #660]	; (407030 <_dtoa_r+0x2c8>)
  406d9c:	461a      	mov	r2, r3
  406d9e:	ea08 0303 	and.w	r3, r8, r3
  406da2:	4293      	cmp	r3, r2
  406da4:	d014      	beq.n	406dd0 <_dtoa_r+0x68>
  406da6:	4650      	mov	r0, sl
  406da8:	4659      	mov	r1, fp
  406daa:	2200      	movs	r2, #0
  406dac:	2300      	movs	r3, #0
  406dae:	f003 fbf1 	bl	40a594 <__aeabi_dcmpeq>
  406db2:	4605      	mov	r5, r0
  406db4:	b348      	cbz	r0, 406e0a <_dtoa_r+0xa2>
  406db6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  406db8:	2301      	movs	r3, #1
  406dba:	6013      	str	r3, [r2, #0]
  406dbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406dbe:	2b00      	cmp	r3, #0
  406dc0:	f000 80c5 	beq.w	406f4e <_dtoa_r+0x1e6>
  406dc4:	489b      	ldr	r0, [pc, #620]	; (407034 <_dtoa_r+0x2cc>)
  406dc6:	6018      	str	r0, [r3, #0]
  406dc8:	3801      	subs	r0, #1
  406dca:	b017      	add	sp, #92	; 0x5c
  406dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dd0:	9a22      	ldr	r2, [sp, #136]	; 0x88
  406dd2:	f242 730f 	movw	r3, #9999	; 0x270f
  406dd6:	6013      	str	r3, [r2, #0]
  406dd8:	f1ba 0f00 	cmp.w	sl, #0
  406ddc:	f000 80a2 	beq.w	406f24 <_dtoa_r+0x1bc>
  406de0:	4895      	ldr	r0, [pc, #596]	; (407038 <_dtoa_r+0x2d0>)
  406de2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406de4:	2b00      	cmp	r3, #0
  406de6:	d0f0      	beq.n	406dca <_dtoa_r+0x62>
  406de8:	78c3      	ldrb	r3, [r0, #3]
  406dea:	2b00      	cmp	r3, #0
  406dec:	f000 80b1 	beq.w	406f52 <_dtoa_r+0x1ea>
  406df0:	f100 0308 	add.w	r3, r0, #8
  406df4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406df6:	6013      	str	r3, [r2, #0]
  406df8:	b017      	add	sp, #92	; 0x5c
  406dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dfe:	2301      	movs	r3, #1
  406e00:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  406e04:	6023      	str	r3, [r4, #0]
  406e06:	46c3      	mov	fp, r8
  406e08:	e7c7      	b.n	406d9a <_dtoa_r+0x32>
  406e0a:	aa14      	add	r2, sp, #80	; 0x50
  406e0c:	ab15      	add	r3, sp, #84	; 0x54
  406e0e:	9201      	str	r2, [sp, #4]
  406e10:	9300      	str	r3, [sp, #0]
  406e12:	4652      	mov	r2, sl
  406e14:	465b      	mov	r3, fp
  406e16:	4648      	mov	r0, r9
  406e18:	f002 faae 	bl	409378 <__d2b>
  406e1c:	ea5f 5418 	movs.w	r4, r8, lsr #20
  406e20:	9008      	str	r0, [sp, #32]
  406e22:	f040 8088 	bne.w	406f36 <_dtoa_r+0x1ce>
  406e26:	9d14      	ldr	r5, [sp, #80]	; 0x50
  406e28:	9c15      	ldr	r4, [sp, #84]	; 0x54
  406e2a:	442c      	add	r4, r5
  406e2c:	f204 4332 	addw	r3, r4, #1074	; 0x432
  406e30:	2b20      	cmp	r3, #32
  406e32:	f340 8291 	ble.w	407358 <_dtoa_r+0x5f0>
  406e36:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  406e3a:	f204 4012 	addw	r0, r4, #1042	; 0x412
  406e3e:	fa08 f803 	lsl.w	r8, r8, r3
  406e42:	fa2a f000 	lsr.w	r0, sl, r0
  406e46:	ea40 0008 	orr.w	r0, r0, r8
  406e4a:	f003 f8c5 	bl	409fd8 <__aeabi_ui2d>
  406e4e:	2301      	movs	r3, #1
  406e50:	3c01      	subs	r4, #1
  406e52:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  406e56:	9310      	str	r3, [sp, #64]	; 0x40
  406e58:	2200      	movs	r2, #0
  406e5a:	4b78      	ldr	r3, [pc, #480]	; (40703c <_dtoa_r+0x2d4>)
  406e5c:	f002 ff7e 	bl	409d5c <__aeabi_dsub>
  406e60:	a36d      	add	r3, pc, #436	; (adr r3, 407018 <_dtoa_r+0x2b0>)
  406e62:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e66:	f003 f92d 	bl	40a0c4 <__aeabi_dmul>
  406e6a:	a36d      	add	r3, pc, #436	; (adr r3, 407020 <_dtoa_r+0x2b8>)
  406e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e70:	f002 ff76 	bl	409d60 <__adddf3>
  406e74:	4606      	mov	r6, r0
  406e76:	4620      	mov	r0, r4
  406e78:	460f      	mov	r7, r1
  406e7a:	f003 f8bd 	bl	409ff8 <__aeabi_i2d>
  406e7e:	a36a      	add	r3, pc, #424	; (adr r3, 407028 <_dtoa_r+0x2c0>)
  406e80:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e84:	f003 f91e 	bl	40a0c4 <__aeabi_dmul>
  406e88:	4602      	mov	r2, r0
  406e8a:	460b      	mov	r3, r1
  406e8c:	4630      	mov	r0, r6
  406e8e:	4639      	mov	r1, r7
  406e90:	f002 ff66 	bl	409d60 <__adddf3>
  406e94:	4606      	mov	r6, r0
  406e96:	460f      	mov	r7, r1
  406e98:	f003 fbc4 	bl	40a624 <__aeabi_d2iz>
  406e9c:	2200      	movs	r2, #0
  406e9e:	9004      	str	r0, [sp, #16]
  406ea0:	2300      	movs	r3, #0
  406ea2:	4630      	mov	r0, r6
  406ea4:	4639      	mov	r1, r7
  406ea6:	f003 fb7f 	bl	40a5a8 <__aeabi_dcmplt>
  406eaa:	2800      	cmp	r0, #0
  406eac:	f040 8230 	bne.w	407310 <_dtoa_r+0x5a8>
  406eb0:	9e04      	ldr	r6, [sp, #16]
  406eb2:	2e16      	cmp	r6, #22
  406eb4:	f200 8229 	bhi.w	40730a <_dtoa_r+0x5a2>
  406eb8:	4b61      	ldr	r3, [pc, #388]	; (407040 <_dtoa_r+0x2d8>)
  406eba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  406ebe:	e9d3 0100 	ldrd	r0, r1, [r3]
  406ec2:	4652      	mov	r2, sl
  406ec4:	465b      	mov	r3, fp
  406ec6:	f003 fb8d 	bl	40a5e4 <__aeabi_dcmpgt>
  406eca:	2800      	cmp	r0, #0
  406ecc:	f000 8249 	beq.w	407362 <_dtoa_r+0x5fa>
  406ed0:	1e73      	subs	r3, r6, #1
  406ed2:	9304      	str	r3, [sp, #16]
  406ed4:	2300      	movs	r3, #0
  406ed6:	930c      	str	r3, [sp, #48]	; 0x30
  406ed8:	1b2c      	subs	r4, r5, r4
  406eda:	1e63      	subs	r3, r4, #1
  406edc:	9302      	str	r3, [sp, #8]
  406ede:	f100 8232 	bmi.w	407346 <_dtoa_r+0x5de>
  406ee2:	2300      	movs	r3, #0
  406ee4:	9305      	str	r3, [sp, #20]
  406ee6:	9b04      	ldr	r3, [sp, #16]
  406ee8:	2b00      	cmp	r3, #0
  406eea:	f2c0 8223 	blt.w	407334 <_dtoa_r+0x5cc>
  406eee:	9a02      	ldr	r2, [sp, #8]
  406ef0:	930b      	str	r3, [sp, #44]	; 0x2c
  406ef2:	4611      	mov	r1, r2
  406ef4:	4419      	add	r1, r3
  406ef6:	2300      	movs	r3, #0
  406ef8:	9102      	str	r1, [sp, #8]
  406efa:	930a      	str	r3, [sp, #40]	; 0x28
  406efc:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406efe:	2b09      	cmp	r3, #9
  406f00:	d829      	bhi.n	406f56 <_dtoa_r+0x1ee>
  406f02:	2b05      	cmp	r3, #5
  406f04:	f340 8658 	ble.w	407bb8 <_dtoa_r+0xe50>
  406f08:	3b04      	subs	r3, #4
  406f0a:	9320      	str	r3, [sp, #128]	; 0x80
  406f0c:	2500      	movs	r5, #0
  406f0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406f10:	3b02      	subs	r3, #2
  406f12:	2b03      	cmp	r3, #3
  406f14:	f200 8635 	bhi.w	407b82 <_dtoa_r+0xe1a>
  406f18:	e8df f013 	tbh	[pc, r3, lsl #1]
  406f1c:	0228032c 	.word	0x0228032c
  406f20:	04590337 	.word	0x04590337
  406f24:	4b44      	ldr	r3, [pc, #272]	; (407038 <_dtoa_r+0x2d0>)
  406f26:	4a47      	ldr	r2, [pc, #284]	; (407044 <_dtoa_r+0x2dc>)
  406f28:	f3c8 0013 	ubfx	r0, r8, #0, #20
  406f2c:	2800      	cmp	r0, #0
  406f2e:	bf14      	ite	ne
  406f30:	4618      	movne	r0, r3
  406f32:	4610      	moveq	r0, r2
  406f34:	e755      	b.n	406de2 <_dtoa_r+0x7a>
  406f36:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406f3a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  406f3e:	9510      	str	r5, [sp, #64]	; 0x40
  406f40:	4650      	mov	r0, sl
  406f42:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  406f46:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  406f4a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  406f4c:	e784      	b.n	406e58 <_dtoa_r+0xf0>
  406f4e:	483e      	ldr	r0, [pc, #248]	; (407048 <_dtoa_r+0x2e0>)
  406f50:	e73b      	b.n	406dca <_dtoa_r+0x62>
  406f52:	1cc3      	adds	r3, r0, #3
  406f54:	e74e      	b.n	406df4 <_dtoa_r+0x8c>
  406f56:	2100      	movs	r1, #0
  406f58:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  406f5c:	4648      	mov	r0, r9
  406f5e:	9120      	str	r1, [sp, #128]	; 0x80
  406f60:	f001 ff58 	bl	408e14 <_Balloc>
  406f64:	f04f 33ff 	mov.w	r3, #4294967295
  406f68:	9306      	str	r3, [sp, #24]
  406f6a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  406f6c:	930d      	str	r3, [sp, #52]	; 0x34
  406f6e:	2301      	movs	r3, #1
  406f70:	9007      	str	r0, [sp, #28]
  406f72:	9221      	str	r2, [sp, #132]	; 0x84
  406f74:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  406f78:	9309      	str	r3, [sp, #36]	; 0x24
  406f7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406f7c:	2b00      	cmp	r3, #0
  406f7e:	f2c0 80d1 	blt.w	407124 <_dtoa_r+0x3bc>
  406f82:	9a04      	ldr	r2, [sp, #16]
  406f84:	2a0e      	cmp	r2, #14
  406f86:	f300 80cd 	bgt.w	407124 <_dtoa_r+0x3bc>
  406f8a:	4b2d      	ldr	r3, [pc, #180]	; (407040 <_dtoa_r+0x2d8>)
  406f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406f90:	e9d3 3400 	ldrd	r3, r4, [r3]
  406f94:	e9cd 3402 	strd	r3, r4, [sp, #8]
  406f98:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406f9a:	2b00      	cmp	r3, #0
  406f9c:	f2c0 8300 	blt.w	4075a0 <_dtoa_r+0x838>
  406fa0:	4656      	mov	r6, sl
  406fa2:	465f      	mov	r7, fp
  406fa4:	4650      	mov	r0, sl
  406fa6:	4659      	mov	r1, fp
  406fa8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  406fac:	4652      	mov	r2, sl
  406fae:	465b      	mov	r3, fp
  406fb0:	f003 f9b2 	bl	40a318 <__aeabi_ddiv>
  406fb4:	f003 fb36 	bl	40a624 <__aeabi_d2iz>
  406fb8:	4604      	mov	r4, r0
  406fba:	f003 f81d 	bl	409ff8 <__aeabi_i2d>
  406fbe:	4652      	mov	r2, sl
  406fc0:	465b      	mov	r3, fp
  406fc2:	f003 f87f 	bl	40a0c4 <__aeabi_dmul>
  406fc6:	460b      	mov	r3, r1
  406fc8:	4602      	mov	r2, r0
  406fca:	4639      	mov	r1, r7
  406fcc:	4630      	mov	r0, r6
  406fce:	f002 fec5 	bl	409d5c <__aeabi_dsub>
  406fd2:	9d07      	ldr	r5, [sp, #28]
  406fd4:	f104 0330 	add.w	r3, r4, #48	; 0x30
  406fd8:	702b      	strb	r3, [r5, #0]
  406fda:	9b06      	ldr	r3, [sp, #24]
  406fdc:	2b01      	cmp	r3, #1
  406fde:	4606      	mov	r6, r0
  406fe0:	460f      	mov	r7, r1
  406fe2:	f105 0501 	add.w	r5, r5, #1
  406fe6:	d062      	beq.n	4070ae <_dtoa_r+0x346>
  406fe8:	2200      	movs	r2, #0
  406fea:	4b18      	ldr	r3, [pc, #96]	; (40704c <_dtoa_r+0x2e4>)
  406fec:	f003 f86a 	bl	40a0c4 <__aeabi_dmul>
  406ff0:	2200      	movs	r2, #0
  406ff2:	2300      	movs	r3, #0
  406ff4:	4606      	mov	r6, r0
  406ff6:	460f      	mov	r7, r1
  406ff8:	f003 facc 	bl	40a594 <__aeabi_dcmpeq>
  406ffc:	2800      	cmp	r0, #0
  406ffe:	d17e      	bne.n	4070fe <_dtoa_r+0x396>
  407000:	f8cd 9014 	str.w	r9, [sp, #20]
  407004:	f8dd a018 	ldr.w	sl, [sp, #24]
  407008:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40700c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  407010:	e029      	b.n	407066 <_dtoa_r+0x2fe>
  407012:	bf00      	nop
  407014:	f3af 8000 	nop.w
  407018:	636f4361 	.word	0x636f4361
  40701c:	3fd287a7 	.word	0x3fd287a7
  407020:	8b60c8b3 	.word	0x8b60c8b3
  407024:	3fc68a28 	.word	0x3fc68a28
  407028:	509f79fb 	.word	0x509f79fb
  40702c:	3fd34413 	.word	0x3fd34413
  407030:	7ff00000 	.word	0x7ff00000
  407034:	0040bb11 	.word	0x0040bb11
  407038:	0040bb50 	.word	0x0040bb50
  40703c:	3ff80000 	.word	0x3ff80000
  407040:	0040bb60 	.word	0x0040bb60
  407044:	0040bb44 	.word	0x0040bb44
  407048:	0040bb10 	.word	0x0040bb10
  40704c:	40240000 	.word	0x40240000
  407050:	f003 f838 	bl	40a0c4 <__aeabi_dmul>
  407054:	2200      	movs	r2, #0
  407056:	2300      	movs	r3, #0
  407058:	4606      	mov	r6, r0
  40705a:	460f      	mov	r7, r1
  40705c:	f003 fa9a 	bl	40a594 <__aeabi_dcmpeq>
  407060:	2800      	cmp	r0, #0
  407062:	f040 83b7 	bne.w	4077d4 <_dtoa_r+0xa6c>
  407066:	4642      	mov	r2, r8
  407068:	464b      	mov	r3, r9
  40706a:	4630      	mov	r0, r6
  40706c:	4639      	mov	r1, r7
  40706e:	f003 f953 	bl	40a318 <__aeabi_ddiv>
  407072:	f003 fad7 	bl	40a624 <__aeabi_d2iz>
  407076:	4604      	mov	r4, r0
  407078:	f002 ffbe 	bl	409ff8 <__aeabi_i2d>
  40707c:	4642      	mov	r2, r8
  40707e:	464b      	mov	r3, r9
  407080:	f003 f820 	bl	40a0c4 <__aeabi_dmul>
  407084:	4602      	mov	r2, r0
  407086:	460b      	mov	r3, r1
  407088:	4630      	mov	r0, r6
  40708a:	4639      	mov	r1, r7
  40708c:	f002 fe66 	bl	409d5c <__aeabi_dsub>
  407090:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  407094:	f805 eb01 	strb.w	lr, [r5], #1
  407098:	ebcb 0e05 	rsb	lr, fp, r5
  40709c:	45d6      	cmp	lr, sl
  40709e:	4606      	mov	r6, r0
  4070a0:	460f      	mov	r7, r1
  4070a2:	f04f 0200 	mov.w	r2, #0
  4070a6:	4bb0      	ldr	r3, [pc, #704]	; (407368 <_dtoa_r+0x600>)
  4070a8:	d1d2      	bne.n	407050 <_dtoa_r+0x2e8>
  4070aa:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4070ae:	4632      	mov	r2, r6
  4070b0:	463b      	mov	r3, r7
  4070b2:	4630      	mov	r0, r6
  4070b4:	4639      	mov	r1, r7
  4070b6:	f002 fe53 	bl	409d60 <__adddf3>
  4070ba:	4606      	mov	r6, r0
  4070bc:	460f      	mov	r7, r1
  4070be:	4602      	mov	r2, r0
  4070c0:	460b      	mov	r3, r1
  4070c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4070c6:	f003 fa6f 	bl	40a5a8 <__aeabi_dcmplt>
  4070ca:	b940      	cbnz	r0, 4070de <_dtoa_r+0x376>
  4070cc:	4632      	mov	r2, r6
  4070ce:	463b      	mov	r3, r7
  4070d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4070d4:	f003 fa5e 	bl	40a594 <__aeabi_dcmpeq>
  4070d8:	b188      	cbz	r0, 4070fe <_dtoa_r+0x396>
  4070da:	07e3      	lsls	r3, r4, #31
  4070dc:	d50f      	bpl.n	4070fe <_dtoa_r+0x396>
  4070de:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  4070e2:	9a07      	ldr	r2, [sp, #28]
  4070e4:	1e6b      	subs	r3, r5, #1
  4070e6:	e004      	b.n	4070f2 <_dtoa_r+0x38a>
  4070e8:	429a      	cmp	r2, r3
  4070ea:	f000 842c 	beq.w	407946 <_dtoa_r+0xbde>
  4070ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4070f2:	2c39      	cmp	r4, #57	; 0x39
  4070f4:	f103 0501 	add.w	r5, r3, #1
  4070f8:	d0f6      	beq.n	4070e8 <_dtoa_r+0x380>
  4070fa:	3401      	adds	r4, #1
  4070fc:	701c      	strb	r4, [r3, #0]
  4070fe:	9908      	ldr	r1, [sp, #32]
  407100:	4648      	mov	r0, r9
  407102:	f001 fead 	bl	408e60 <_Bfree>
  407106:	2200      	movs	r2, #0
  407108:	9b04      	ldr	r3, [sp, #16]
  40710a:	702a      	strb	r2, [r5, #0]
  40710c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40710e:	3301      	adds	r3, #1
  407110:	6013      	str	r3, [r2, #0]
  407112:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407114:	2b00      	cmp	r3, #0
  407116:	f000 83a7 	beq.w	407868 <_dtoa_r+0xb00>
  40711a:	9807      	ldr	r0, [sp, #28]
  40711c:	601d      	str	r5, [r3, #0]
  40711e:	b017      	add	sp, #92	; 0x5c
  407120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407124:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407126:	2a00      	cmp	r2, #0
  407128:	f000 8112 	beq.w	407350 <_dtoa_r+0x5e8>
  40712c:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40712e:	2a01      	cmp	r2, #1
  407130:	f340 8258 	ble.w	4075e4 <_dtoa_r+0x87c>
  407134:	9b06      	ldr	r3, [sp, #24]
  407136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407138:	1e5f      	subs	r7, r3, #1
  40713a:	42ba      	cmp	r2, r7
  40713c:	f2c0 8397 	blt.w	40786e <_dtoa_r+0xb06>
  407140:	1bd7      	subs	r7, r2, r7
  407142:	9b06      	ldr	r3, [sp, #24]
  407144:	2b00      	cmp	r3, #0
  407146:	f2c0 848a 	blt.w	407a5e <_dtoa_r+0xcf6>
  40714a:	9d05      	ldr	r5, [sp, #20]
  40714c:	9b06      	ldr	r3, [sp, #24]
  40714e:	9a05      	ldr	r2, [sp, #20]
  407150:	441a      	add	r2, r3
  407152:	9205      	str	r2, [sp, #20]
  407154:	9a02      	ldr	r2, [sp, #8]
  407156:	2101      	movs	r1, #1
  407158:	441a      	add	r2, r3
  40715a:	4648      	mov	r0, r9
  40715c:	9202      	str	r2, [sp, #8]
  40715e:	f001 ff17 	bl	408f90 <__i2b>
  407162:	4606      	mov	r6, r0
  407164:	b165      	cbz	r5, 407180 <_dtoa_r+0x418>
  407166:	9902      	ldr	r1, [sp, #8]
  407168:	2900      	cmp	r1, #0
  40716a:	460b      	mov	r3, r1
  40716c:	dd08      	ble.n	407180 <_dtoa_r+0x418>
  40716e:	42a9      	cmp	r1, r5
  407170:	9a05      	ldr	r2, [sp, #20]
  407172:	bfa8      	it	ge
  407174:	462b      	movge	r3, r5
  407176:	1ad2      	subs	r2, r2, r3
  407178:	1aed      	subs	r5, r5, r3
  40717a:	1acb      	subs	r3, r1, r3
  40717c:	9205      	str	r2, [sp, #20]
  40717e:	9302      	str	r3, [sp, #8]
  407180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407182:	2b00      	cmp	r3, #0
  407184:	f340 82fc 	ble.w	407780 <_dtoa_r+0xa18>
  407188:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40718a:	2a00      	cmp	r2, #0
  40718c:	f000 8201 	beq.w	407592 <_dtoa_r+0x82a>
  407190:	2f00      	cmp	r7, #0
  407192:	f000 81fe 	beq.w	407592 <_dtoa_r+0x82a>
  407196:	4631      	mov	r1, r6
  407198:	463a      	mov	r2, r7
  40719a:	4648      	mov	r0, r9
  40719c:	f001 ff9a 	bl	4090d4 <__pow5mult>
  4071a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4071a4:	4601      	mov	r1, r0
  4071a6:	4642      	mov	r2, r8
  4071a8:	4606      	mov	r6, r0
  4071aa:	4648      	mov	r0, r9
  4071ac:	f001 fefa 	bl	408fa4 <__multiply>
  4071b0:	4641      	mov	r1, r8
  4071b2:	4604      	mov	r4, r0
  4071b4:	4648      	mov	r0, r9
  4071b6:	f001 fe53 	bl	408e60 <_Bfree>
  4071ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4071bc:	1bdb      	subs	r3, r3, r7
  4071be:	930a      	str	r3, [sp, #40]	; 0x28
  4071c0:	f040 81e6 	bne.w	407590 <_dtoa_r+0x828>
  4071c4:	2101      	movs	r1, #1
  4071c6:	4648      	mov	r0, r9
  4071c8:	f001 fee2 	bl	408f90 <__i2b>
  4071cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4071ce:	4680      	mov	r8, r0
  4071d0:	2b00      	cmp	r3, #0
  4071d2:	f000 8219 	beq.w	407608 <_dtoa_r+0x8a0>
  4071d6:	4601      	mov	r1, r0
  4071d8:	461a      	mov	r2, r3
  4071da:	4648      	mov	r0, r9
  4071dc:	f001 ff7a 	bl	4090d4 <__pow5mult>
  4071e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4071e2:	2b01      	cmp	r3, #1
  4071e4:	4680      	mov	r8, r0
  4071e6:	f340 82f8 	ble.w	4077da <_dtoa_r+0xa72>
  4071ea:	2700      	movs	r7, #0
  4071ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4071f0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4071f4:	6918      	ldr	r0, [r3, #16]
  4071f6:	f001 fe7d 	bl	408ef4 <__hi0bits>
  4071fa:	f1c0 0020 	rsb	r0, r0, #32
  4071fe:	9a02      	ldr	r2, [sp, #8]
  407200:	4410      	add	r0, r2
  407202:	f010 001f 	ands.w	r0, r0, #31
  407206:	f000 81f6 	beq.w	4075f6 <_dtoa_r+0x88e>
  40720a:	f1c0 0320 	rsb	r3, r0, #32
  40720e:	2b04      	cmp	r3, #4
  407210:	f340 84ca 	ble.w	407ba8 <_dtoa_r+0xe40>
  407214:	9b05      	ldr	r3, [sp, #20]
  407216:	f1c0 001c 	rsb	r0, r0, #28
  40721a:	4403      	add	r3, r0
  40721c:	9305      	str	r3, [sp, #20]
  40721e:	4613      	mov	r3, r2
  407220:	4403      	add	r3, r0
  407222:	4405      	add	r5, r0
  407224:	9302      	str	r3, [sp, #8]
  407226:	9b05      	ldr	r3, [sp, #20]
  407228:	2b00      	cmp	r3, #0
  40722a:	dd05      	ble.n	407238 <_dtoa_r+0x4d0>
  40722c:	4621      	mov	r1, r4
  40722e:	461a      	mov	r2, r3
  407230:	4648      	mov	r0, r9
  407232:	f001 ff9f 	bl	409174 <__lshift>
  407236:	4604      	mov	r4, r0
  407238:	9b02      	ldr	r3, [sp, #8]
  40723a:	2b00      	cmp	r3, #0
  40723c:	dd05      	ble.n	40724a <_dtoa_r+0x4e2>
  40723e:	4641      	mov	r1, r8
  407240:	461a      	mov	r2, r3
  407242:	4648      	mov	r0, r9
  407244:	f001 ff96 	bl	409174 <__lshift>
  407248:	4680      	mov	r8, r0
  40724a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40724c:	2b00      	cmp	r3, #0
  40724e:	f040 827c 	bne.w	40774a <_dtoa_r+0x9e2>
  407252:	9b06      	ldr	r3, [sp, #24]
  407254:	2b00      	cmp	r3, #0
  407256:	f340 8295 	ble.w	407784 <_dtoa_r+0xa1c>
  40725a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40725c:	2b00      	cmp	r3, #0
  40725e:	f040 81f5 	bne.w	40764c <_dtoa_r+0x8e4>
  407262:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407266:	9f06      	ldr	r7, [sp, #24]
  407268:	465d      	mov	r5, fp
  40726a:	e002      	b.n	407272 <_dtoa_r+0x50a>
  40726c:	f001 fe02 	bl	408e74 <__multadd>
  407270:	4604      	mov	r4, r0
  407272:	4641      	mov	r1, r8
  407274:	4620      	mov	r0, r4
  407276:	f7ff fce3 	bl	406c40 <quorem>
  40727a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40727e:	f805 ab01 	strb.w	sl, [r5], #1
  407282:	ebcb 0305 	rsb	r3, fp, r5
  407286:	42bb      	cmp	r3, r7
  407288:	f04f 020a 	mov.w	r2, #10
  40728c:	f04f 0300 	mov.w	r3, #0
  407290:	4621      	mov	r1, r4
  407292:	4648      	mov	r0, r9
  407294:	dbea      	blt.n	40726c <_dtoa_r+0x504>
  407296:	9b07      	ldr	r3, [sp, #28]
  407298:	9a06      	ldr	r2, [sp, #24]
  40729a:	2a01      	cmp	r2, #1
  40729c:	bfac      	ite	ge
  40729e:	189b      	addge	r3, r3, r2
  4072a0:	3301      	addlt	r3, #1
  4072a2:	461d      	mov	r5, r3
  4072a4:	f04f 0b00 	mov.w	fp, #0
  4072a8:	4621      	mov	r1, r4
  4072aa:	2201      	movs	r2, #1
  4072ac:	4648      	mov	r0, r9
  4072ae:	f001 ff61 	bl	409174 <__lshift>
  4072b2:	4641      	mov	r1, r8
  4072b4:	9008      	str	r0, [sp, #32]
  4072b6:	f001 ffb5 	bl	409224 <__mcmp>
  4072ba:	2800      	cmp	r0, #0
  4072bc:	f340 830d 	ble.w	4078da <_dtoa_r+0xb72>
  4072c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4072c4:	9907      	ldr	r1, [sp, #28]
  4072c6:	1e6b      	subs	r3, r5, #1
  4072c8:	e004      	b.n	4072d4 <_dtoa_r+0x56c>
  4072ca:	428b      	cmp	r3, r1
  4072cc:	f000 8278 	beq.w	4077c0 <_dtoa_r+0xa58>
  4072d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4072d4:	2a39      	cmp	r2, #57	; 0x39
  4072d6:	f103 0501 	add.w	r5, r3, #1
  4072da:	d0f6      	beq.n	4072ca <_dtoa_r+0x562>
  4072dc:	3201      	adds	r2, #1
  4072de:	701a      	strb	r2, [r3, #0]
  4072e0:	4641      	mov	r1, r8
  4072e2:	4648      	mov	r0, r9
  4072e4:	f001 fdbc 	bl	408e60 <_Bfree>
  4072e8:	2e00      	cmp	r6, #0
  4072ea:	f43f af08 	beq.w	4070fe <_dtoa_r+0x396>
  4072ee:	f1bb 0f00 	cmp.w	fp, #0
  4072f2:	d005      	beq.n	407300 <_dtoa_r+0x598>
  4072f4:	45b3      	cmp	fp, r6
  4072f6:	d003      	beq.n	407300 <_dtoa_r+0x598>
  4072f8:	4659      	mov	r1, fp
  4072fa:	4648      	mov	r0, r9
  4072fc:	f001 fdb0 	bl	408e60 <_Bfree>
  407300:	4631      	mov	r1, r6
  407302:	4648      	mov	r0, r9
  407304:	f001 fdac 	bl	408e60 <_Bfree>
  407308:	e6f9      	b.n	4070fe <_dtoa_r+0x396>
  40730a:	2301      	movs	r3, #1
  40730c:	930c      	str	r3, [sp, #48]	; 0x30
  40730e:	e5e3      	b.n	406ed8 <_dtoa_r+0x170>
  407310:	f8dd 8010 	ldr.w	r8, [sp, #16]
  407314:	4640      	mov	r0, r8
  407316:	f002 fe6f 	bl	409ff8 <__aeabi_i2d>
  40731a:	4602      	mov	r2, r0
  40731c:	460b      	mov	r3, r1
  40731e:	4630      	mov	r0, r6
  407320:	4639      	mov	r1, r7
  407322:	f003 f937 	bl	40a594 <__aeabi_dcmpeq>
  407326:	2800      	cmp	r0, #0
  407328:	f47f adc2 	bne.w	406eb0 <_dtoa_r+0x148>
  40732c:	f108 33ff 	add.w	r3, r8, #4294967295
  407330:	9304      	str	r3, [sp, #16]
  407332:	e5bd      	b.n	406eb0 <_dtoa_r+0x148>
  407334:	9a05      	ldr	r2, [sp, #20]
  407336:	9b04      	ldr	r3, [sp, #16]
  407338:	1ad2      	subs	r2, r2, r3
  40733a:	425b      	negs	r3, r3
  40733c:	930a      	str	r3, [sp, #40]	; 0x28
  40733e:	2300      	movs	r3, #0
  407340:	9205      	str	r2, [sp, #20]
  407342:	930b      	str	r3, [sp, #44]	; 0x2c
  407344:	e5da      	b.n	406efc <_dtoa_r+0x194>
  407346:	425b      	negs	r3, r3
  407348:	9305      	str	r3, [sp, #20]
  40734a:	2300      	movs	r3, #0
  40734c:	9302      	str	r3, [sp, #8]
  40734e:	e5ca      	b.n	406ee6 <_dtoa_r+0x17e>
  407350:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407352:	9d05      	ldr	r5, [sp, #20]
  407354:	9e09      	ldr	r6, [sp, #36]	; 0x24
  407356:	e705      	b.n	407164 <_dtoa_r+0x3fc>
  407358:	f1c3 0820 	rsb	r8, r3, #32
  40735c:	fa0a f008 	lsl.w	r0, sl, r8
  407360:	e573      	b.n	406e4a <_dtoa_r+0xe2>
  407362:	900c      	str	r0, [sp, #48]	; 0x30
  407364:	e5b8      	b.n	406ed8 <_dtoa_r+0x170>
  407366:	bf00      	nop
  407368:	40240000 	.word	0x40240000
  40736c:	2300      	movs	r3, #0
  40736e:	9309      	str	r3, [sp, #36]	; 0x24
  407370:	9b04      	ldr	r3, [sp, #16]
  407372:	9a21      	ldr	r2, [sp, #132]	; 0x84
  407374:	4413      	add	r3, r2
  407376:	930d      	str	r3, [sp, #52]	; 0x34
  407378:	3301      	adds	r3, #1
  40737a:	2b00      	cmp	r3, #0
  40737c:	9306      	str	r3, [sp, #24]
  40737e:	f340 8283 	ble.w	407888 <_dtoa_r+0xb20>
  407382:	9c06      	ldr	r4, [sp, #24]
  407384:	4626      	mov	r6, r4
  407386:	2100      	movs	r1, #0
  407388:	2e17      	cmp	r6, #23
  40738a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40738e:	d90b      	bls.n	4073a8 <_dtoa_r+0x640>
  407390:	2201      	movs	r2, #1
  407392:	2304      	movs	r3, #4
  407394:	005b      	lsls	r3, r3, #1
  407396:	f103 0014 	add.w	r0, r3, #20
  40739a:	42b0      	cmp	r0, r6
  40739c:	4611      	mov	r1, r2
  40739e:	f102 0201 	add.w	r2, r2, #1
  4073a2:	d9f7      	bls.n	407394 <_dtoa_r+0x62c>
  4073a4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4073a8:	4648      	mov	r0, r9
  4073aa:	f001 fd33 	bl	408e14 <_Balloc>
  4073ae:	2c0e      	cmp	r4, #14
  4073b0:	9007      	str	r0, [sp, #28]
  4073b2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4073b6:	f63f ade0 	bhi.w	406f7a <_dtoa_r+0x212>
  4073ba:	2d00      	cmp	r5, #0
  4073bc:	f43f addd 	beq.w	406f7a <_dtoa_r+0x212>
  4073c0:	9904      	ldr	r1, [sp, #16]
  4073c2:	4657      	mov	r7, sl
  4073c4:	46d8      	mov	r8, fp
  4073c6:	2900      	cmp	r1, #0
  4073c8:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  4073cc:	f340 8292 	ble.w	4078f4 <_dtoa_r+0xb8c>
  4073d0:	4b91      	ldr	r3, [pc, #580]	; (407618 <_dtoa_r+0x8b0>)
  4073d2:	f001 020f 	and.w	r2, r1, #15
  4073d6:	110e      	asrs	r6, r1, #4
  4073d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4073dc:	06f0      	lsls	r0, r6, #27
  4073de:	e9d3 4500 	ldrd	r4, r5, [r3]
  4073e2:	f140 824c 	bpl.w	40787e <_dtoa_r+0xb16>
  4073e6:	4b8d      	ldr	r3, [pc, #564]	; (40761c <_dtoa_r+0x8b4>)
  4073e8:	4650      	mov	r0, sl
  4073ea:	4659      	mov	r1, fp
  4073ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4073f0:	f002 ff92 	bl	40a318 <__aeabi_ddiv>
  4073f4:	f006 060f 	and.w	r6, r6, #15
  4073f8:	4682      	mov	sl, r0
  4073fa:	468b      	mov	fp, r1
  4073fc:	f04f 0803 	mov.w	r8, #3
  407400:	b186      	cbz	r6, 407424 <_dtoa_r+0x6bc>
  407402:	4f86      	ldr	r7, [pc, #536]	; (40761c <_dtoa_r+0x8b4>)
  407404:	07f1      	lsls	r1, r6, #31
  407406:	d509      	bpl.n	40741c <_dtoa_r+0x6b4>
  407408:	4620      	mov	r0, r4
  40740a:	4629      	mov	r1, r5
  40740c:	e9d7 2300 	ldrd	r2, r3, [r7]
  407410:	f002 fe58 	bl	40a0c4 <__aeabi_dmul>
  407414:	f108 0801 	add.w	r8, r8, #1
  407418:	4604      	mov	r4, r0
  40741a:	460d      	mov	r5, r1
  40741c:	1076      	asrs	r6, r6, #1
  40741e:	f107 0708 	add.w	r7, r7, #8
  407422:	d1ef      	bne.n	407404 <_dtoa_r+0x69c>
  407424:	4622      	mov	r2, r4
  407426:	462b      	mov	r3, r5
  407428:	4650      	mov	r0, sl
  40742a:	4659      	mov	r1, fp
  40742c:	f002 ff74 	bl	40a318 <__aeabi_ddiv>
  407430:	4606      	mov	r6, r0
  407432:	460f      	mov	r7, r1
  407434:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407436:	b143      	cbz	r3, 40744a <_dtoa_r+0x6e2>
  407438:	2200      	movs	r2, #0
  40743a:	4b79      	ldr	r3, [pc, #484]	; (407620 <_dtoa_r+0x8b8>)
  40743c:	4630      	mov	r0, r6
  40743e:	4639      	mov	r1, r7
  407440:	f003 f8b2 	bl	40a5a8 <__aeabi_dcmplt>
  407444:	2800      	cmp	r0, #0
  407446:	f040 8320 	bne.w	407a8a <_dtoa_r+0xd22>
  40744a:	4640      	mov	r0, r8
  40744c:	f002 fdd4 	bl	409ff8 <__aeabi_i2d>
  407450:	4632      	mov	r2, r6
  407452:	463b      	mov	r3, r7
  407454:	f002 fe36 	bl	40a0c4 <__aeabi_dmul>
  407458:	4b72      	ldr	r3, [pc, #456]	; (407624 <_dtoa_r+0x8bc>)
  40745a:	2200      	movs	r2, #0
  40745c:	f002 fc80 	bl	409d60 <__adddf3>
  407460:	9b06      	ldr	r3, [sp, #24]
  407462:	4604      	mov	r4, r0
  407464:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  407468:	2b00      	cmp	r3, #0
  40746a:	f000 81df 	beq.w	40782c <_dtoa_r+0xac4>
  40746e:	9b04      	ldr	r3, [sp, #16]
  407470:	f8dd 8018 	ldr.w	r8, [sp, #24]
  407474:	9311      	str	r3, [sp, #68]	; 0x44
  407476:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407478:	2b00      	cmp	r3, #0
  40747a:	f000 8297 	beq.w	4079ac <_dtoa_r+0xc44>
  40747e:	4b66      	ldr	r3, [pc, #408]	; (407618 <_dtoa_r+0x8b0>)
  407480:	4969      	ldr	r1, [pc, #420]	; (407628 <_dtoa_r+0x8c0>)
  407482:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  407486:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40748a:	2000      	movs	r0, #0
  40748c:	f002 ff44 	bl	40a318 <__aeabi_ddiv>
  407490:	4622      	mov	r2, r4
  407492:	462b      	mov	r3, r5
  407494:	f002 fc62 	bl	409d5c <__aeabi_dsub>
  407498:	4682      	mov	sl, r0
  40749a:	468b      	mov	fp, r1
  40749c:	4630      	mov	r0, r6
  40749e:	4639      	mov	r1, r7
  4074a0:	f003 f8c0 	bl	40a624 <__aeabi_d2iz>
  4074a4:	4604      	mov	r4, r0
  4074a6:	f002 fda7 	bl	409ff8 <__aeabi_i2d>
  4074aa:	4602      	mov	r2, r0
  4074ac:	460b      	mov	r3, r1
  4074ae:	4630      	mov	r0, r6
  4074b0:	4639      	mov	r1, r7
  4074b2:	f002 fc53 	bl	409d5c <__aeabi_dsub>
  4074b6:	3430      	adds	r4, #48	; 0x30
  4074b8:	9d07      	ldr	r5, [sp, #28]
  4074ba:	b2e4      	uxtb	r4, r4
  4074bc:	4606      	mov	r6, r0
  4074be:	460f      	mov	r7, r1
  4074c0:	702c      	strb	r4, [r5, #0]
  4074c2:	4602      	mov	r2, r0
  4074c4:	460b      	mov	r3, r1
  4074c6:	4650      	mov	r0, sl
  4074c8:	4659      	mov	r1, fp
  4074ca:	3501      	adds	r5, #1
  4074cc:	f003 f88a 	bl	40a5e4 <__aeabi_dcmpgt>
  4074d0:	2800      	cmp	r0, #0
  4074d2:	d14c      	bne.n	40756e <_dtoa_r+0x806>
  4074d4:	4632      	mov	r2, r6
  4074d6:	463b      	mov	r3, r7
  4074d8:	2000      	movs	r0, #0
  4074da:	4951      	ldr	r1, [pc, #324]	; (407620 <_dtoa_r+0x8b8>)
  4074dc:	f002 fc3e 	bl	409d5c <__aeabi_dsub>
  4074e0:	4602      	mov	r2, r0
  4074e2:	460b      	mov	r3, r1
  4074e4:	4650      	mov	r0, sl
  4074e6:	4659      	mov	r1, fp
  4074e8:	f003 f87c 	bl	40a5e4 <__aeabi_dcmpgt>
  4074ec:	2800      	cmp	r0, #0
  4074ee:	f040 830d 	bne.w	407b0c <_dtoa_r+0xda4>
  4074f2:	f1b8 0f01 	cmp.w	r8, #1
  4074f6:	f340 81b3 	ble.w	407860 <_dtoa_r+0xaf8>
  4074fa:	9b07      	ldr	r3, [sp, #28]
  4074fc:	4498      	add	r8, r3
  4074fe:	e00d      	b.n	40751c <_dtoa_r+0x7b4>
  407500:	2000      	movs	r0, #0
  407502:	4947      	ldr	r1, [pc, #284]	; (407620 <_dtoa_r+0x8b8>)
  407504:	f002 fc2a 	bl	409d5c <__aeabi_dsub>
  407508:	4652      	mov	r2, sl
  40750a:	465b      	mov	r3, fp
  40750c:	f003 f84c 	bl	40a5a8 <__aeabi_dcmplt>
  407510:	2800      	cmp	r0, #0
  407512:	f040 82fb 	bne.w	407b0c <_dtoa_r+0xda4>
  407516:	4545      	cmp	r5, r8
  407518:	f000 81a2 	beq.w	407860 <_dtoa_r+0xaf8>
  40751c:	4650      	mov	r0, sl
  40751e:	4659      	mov	r1, fp
  407520:	2200      	movs	r2, #0
  407522:	4b42      	ldr	r3, [pc, #264]	; (40762c <_dtoa_r+0x8c4>)
  407524:	f002 fdce 	bl	40a0c4 <__aeabi_dmul>
  407528:	2200      	movs	r2, #0
  40752a:	4b40      	ldr	r3, [pc, #256]	; (40762c <_dtoa_r+0x8c4>)
  40752c:	4682      	mov	sl, r0
  40752e:	468b      	mov	fp, r1
  407530:	4630      	mov	r0, r6
  407532:	4639      	mov	r1, r7
  407534:	f002 fdc6 	bl	40a0c4 <__aeabi_dmul>
  407538:	460f      	mov	r7, r1
  40753a:	4606      	mov	r6, r0
  40753c:	f003 f872 	bl	40a624 <__aeabi_d2iz>
  407540:	4604      	mov	r4, r0
  407542:	f002 fd59 	bl	409ff8 <__aeabi_i2d>
  407546:	4602      	mov	r2, r0
  407548:	460b      	mov	r3, r1
  40754a:	4630      	mov	r0, r6
  40754c:	4639      	mov	r1, r7
  40754e:	f002 fc05 	bl	409d5c <__aeabi_dsub>
  407552:	3430      	adds	r4, #48	; 0x30
  407554:	b2e4      	uxtb	r4, r4
  407556:	4652      	mov	r2, sl
  407558:	465b      	mov	r3, fp
  40755a:	f805 4b01 	strb.w	r4, [r5], #1
  40755e:	4606      	mov	r6, r0
  407560:	460f      	mov	r7, r1
  407562:	f003 f821 	bl	40a5a8 <__aeabi_dcmplt>
  407566:	4632      	mov	r2, r6
  407568:	463b      	mov	r3, r7
  40756a:	2800      	cmp	r0, #0
  40756c:	d0c8      	beq.n	407500 <_dtoa_r+0x798>
  40756e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407570:	9304      	str	r3, [sp, #16]
  407572:	e5c4      	b.n	4070fe <_dtoa_r+0x396>
  407574:	2300      	movs	r3, #0
  407576:	9309      	str	r3, [sp, #36]	; 0x24
  407578:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40757a:	2b00      	cmp	r3, #0
  40757c:	f340 8189 	ble.w	407892 <_dtoa_r+0xb2a>
  407580:	461e      	mov	r6, r3
  407582:	461c      	mov	r4, r3
  407584:	930d      	str	r3, [sp, #52]	; 0x34
  407586:	9306      	str	r3, [sp, #24]
  407588:	e6fd      	b.n	407386 <_dtoa_r+0x61e>
  40758a:	2301      	movs	r3, #1
  40758c:	9309      	str	r3, [sp, #36]	; 0x24
  40758e:	e7f3      	b.n	407578 <_dtoa_r+0x810>
  407590:	9408      	str	r4, [sp, #32]
  407592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407594:	9908      	ldr	r1, [sp, #32]
  407596:	4648      	mov	r0, r9
  407598:	f001 fd9c 	bl	4090d4 <__pow5mult>
  40759c:	4604      	mov	r4, r0
  40759e:	e611      	b.n	4071c4 <_dtoa_r+0x45c>
  4075a0:	9b06      	ldr	r3, [sp, #24]
  4075a2:	2b00      	cmp	r3, #0
  4075a4:	f73f acfc 	bgt.w	406fa0 <_dtoa_r+0x238>
  4075a8:	f040 82da 	bne.w	407b60 <_dtoa_r+0xdf8>
  4075ac:	2200      	movs	r2, #0
  4075ae:	4b20      	ldr	r3, [pc, #128]	; (407630 <_dtoa_r+0x8c8>)
  4075b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4075b4:	f002 fd86 	bl	40a0c4 <__aeabi_dmul>
  4075b8:	4652      	mov	r2, sl
  4075ba:	465b      	mov	r3, fp
  4075bc:	f003 f808 	bl	40a5d0 <__aeabi_dcmpge>
  4075c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4075c4:	4646      	mov	r6, r8
  4075c6:	2800      	cmp	r0, #0
  4075c8:	f000 80f2 	beq.w	4077b0 <_dtoa_r+0xa48>
  4075cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4075ce:	9d07      	ldr	r5, [sp, #28]
  4075d0:	43db      	mvns	r3, r3
  4075d2:	9304      	str	r3, [sp, #16]
  4075d4:	4641      	mov	r1, r8
  4075d6:	4648      	mov	r0, r9
  4075d8:	f001 fc42 	bl	408e60 <_Bfree>
  4075dc:	2e00      	cmp	r6, #0
  4075de:	f43f ad8e 	beq.w	4070fe <_dtoa_r+0x396>
  4075e2:	e68d      	b.n	407300 <_dtoa_r+0x598>
  4075e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4075e6:	2a00      	cmp	r2, #0
  4075e8:	f000 8241 	beq.w	407a6e <_dtoa_r+0xd06>
  4075ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4075f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4075f2:	9d05      	ldr	r5, [sp, #20]
  4075f4:	e5ab      	b.n	40714e <_dtoa_r+0x3e6>
  4075f6:	201c      	movs	r0, #28
  4075f8:	9b05      	ldr	r3, [sp, #20]
  4075fa:	4403      	add	r3, r0
  4075fc:	9305      	str	r3, [sp, #20]
  4075fe:	9b02      	ldr	r3, [sp, #8]
  407600:	4403      	add	r3, r0
  407602:	4405      	add	r5, r0
  407604:	9302      	str	r3, [sp, #8]
  407606:	e60e      	b.n	407226 <_dtoa_r+0x4be>
  407608:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40760a:	2b01      	cmp	r3, #1
  40760c:	f340 8282 	ble.w	407b14 <_dtoa_r+0xdac>
  407610:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  407612:	2001      	movs	r0, #1
  407614:	e5f3      	b.n	4071fe <_dtoa_r+0x496>
  407616:	bf00      	nop
  407618:	0040bb60 	.word	0x0040bb60
  40761c:	0040bc28 	.word	0x0040bc28
  407620:	3ff00000 	.word	0x3ff00000
  407624:	401c0000 	.word	0x401c0000
  407628:	3fe00000 	.word	0x3fe00000
  40762c:	40240000 	.word	0x40240000
  407630:	40140000 	.word	0x40140000
  407634:	4631      	mov	r1, r6
  407636:	2300      	movs	r3, #0
  407638:	220a      	movs	r2, #10
  40763a:	4648      	mov	r0, r9
  40763c:	f001 fc1a 	bl	408e74 <__multadd>
  407640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407642:	2b00      	cmp	r3, #0
  407644:	4606      	mov	r6, r0
  407646:	f340 8297 	ble.w	407b78 <_dtoa_r+0xe10>
  40764a:	9306      	str	r3, [sp, #24]
  40764c:	2d00      	cmp	r5, #0
  40764e:	dd05      	ble.n	40765c <_dtoa_r+0x8f4>
  407650:	4631      	mov	r1, r6
  407652:	462a      	mov	r2, r5
  407654:	4648      	mov	r0, r9
  407656:	f001 fd8d 	bl	409174 <__lshift>
  40765a:	4606      	mov	r6, r0
  40765c:	2f00      	cmp	r7, #0
  40765e:	f040 817c 	bne.w	40795a <_dtoa_r+0xbf2>
  407662:	9605      	str	r6, [sp, #20]
  407664:	9b06      	ldr	r3, [sp, #24]
  407666:	9a07      	ldr	r2, [sp, #28]
  407668:	f8dd b014 	ldr.w	fp, [sp, #20]
  40766c:	3b01      	subs	r3, #1
  40766e:	18d3      	adds	r3, r2, r3
  407670:	9308      	str	r3, [sp, #32]
  407672:	f00a 0301 	and.w	r3, sl, #1
  407676:	9309      	str	r3, [sp, #36]	; 0x24
  407678:	4617      	mov	r7, r2
  40767a:	46c2      	mov	sl, r8
  40767c:	4651      	mov	r1, sl
  40767e:	4620      	mov	r0, r4
  407680:	f7ff fade 	bl	406c40 <quorem>
  407684:	4631      	mov	r1, r6
  407686:	4605      	mov	r5, r0
  407688:	4620      	mov	r0, r4
  40768a:	f001 fdcb 	bl	409224 <__mcmp>
  40768e:	465a      	mov	r2, fp
  407690:	9002      	str	r0, [sp, #8]
  407692:	4651      	mov	r1, sl
  407694:	4648      	mov	r0, r9
  407696:	f001 fde5 	bl	409264 <__mdiff>
  40769a:	68c2      	ldr	r2, [r0, #12]
  40769c:	4680      	mov	r8, r0
  40769e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4076a2:	2a00      	cmp	r2, #0
  4076a4:	d149      	bne.n	40773a <_dtoa_r+0x9d2>
  4076a6:	4601      	mov	r1, r0
  4076a8:	4620      	mov	r0, r4
  4076aa:	9306      	str	r3, [sp, #24]
  4076ac:	f001 fdba 	bl	409224 <__mcmp>
  4076b0:	4641      	mov	r1, r8
  4076b2:	9005      	str	r0, [sp, #20]
  4076b4:	4648      	mov	r0, r9
  4076b6:	f001 fbd3 	bl	408e60 <_Bfree>
  4076ba:	9a05      	ldr	r2, [sp, #20]
  4076bc:	9b06      	ldr	r3, [sp, #24]
  4076be:	b92a      	cbnz	r2, 4076cc <_dtoa_r+0x964>
  4076c0:	9920      	ldr	r1, [sp, #128]	; 0x80
  4076c2:	b919      	cbnz	r1, 4076cc <_dtoa_r+0x964>
  4076c4:	9909      	ldr	r1, [sp, #36]	; 0x24
  4076c6:	2900      	cmp	r1, #0
  4076c8:	f000 8236 	beq.w	407b38 <_dtoa_r+0xdd0>
  4076cc:	9902      	ldr	r1, [sp, #8]
  4076ce:	2900      	cmp	r1, #0
  4076d0:	f2c0 80e4 	blt.w	40789c <_dtoa_r+0xb34>
  4076d4:	d105      	bne.n	4076e2 <_dtoa_r+0x97a>
  4076d6:	9920      	ldr	r1, [sp, #128]	; 0x80
  4076d8:	b919      	cbnz	r1, 4076e2 <_dtoa_r+0x97a>
  4076da:	9909      	ldr	r1, [sp, #36]	; 0x24
  4076dc:	2900      	cmp	r1, #0
  4076de:	f000 80dd 	beq.w	40789c <_dtoa_r+0xb34>
  4076e2:	2a00      	cmp	r2, #0
  4076e4:	f300 814d 	bgt.w	407982 <_dtoa_r+0xc1a>
  4076e8:	9a08      	ldr	r2, [sp, #32]
  4076ea:	703b      	strb	r3, [r7, #0]
  4076ec:	f107 0801 	add.w	r8, r7, #1
  4076f0:	4297      	cmp	r7, r2
  4076f2:	4645      	mov	r5, r8
  4076f4:	f000 8154 	beq.w	4079a0 <_dtoa_r+0xc38>
  4076f8:	4621      	mov	r1, r4
  4076fa:	2300      	movs	r3, #0
  4076fc:	220a      	movs	r2, #10
  4076fe:	4648      	mov	r0, r9
  407700:	f001 fbb8 	bl	408e74 <__multadd>
  407704:	455e      	cmp	r6, fp
  407706:	4604      	mov	r4, r0
  407708:	4631      	mov	r1, r6
  40770a:	f04f 0300 	mov.w	r3, #0
  40770e:	f04f 020a 	mov.w	r2, #10
  407712:	4648      	mov	r0, r9
  407714:	d00b      	beq.n	40772e <_dtoa_r+0x9c6>
  407716:	f001 fbad 	bl	408e74 <__multadd>
  40771a:	4659      	mov	r1, fp
  40771c:	4606      	mov	r6, r0
  40771e:	2300      	movs	r3, #0
  407720:	220a      	movs	r2, #10
  407722:	4648      	mov	r0, r9
  407724:	f001 fba6 	bl	408e74 <__multadd>
  407728:	4647      	mov	r7, r8
  40772a:	4683      	mov	fp, r0
  40772c:	e7a6      	b.n	40767c <_dtoa_r+0x914>
  40772e:	f001 fba1 	bl	408e74 <__multadd>
  407732:	4647      	mov	r7, r8
  407734:	4606      	mov	r6, r0
  407736:	4683      	mov	fp, r0
  407738:	e7a0      	b.n	40767c <_dtoa_r+0x914>
  40773a:	4601      	mov	r1, r0
  40773c:	4648      	mov	r0, r9
  40773e:	9305      	str	r3, [sp, #20]
  407740:	f001 fb8e 	bl	408e60 <_Bfree>
  407744:	2201      	movs	r2, #1
  407746:	9b05      	ldr	r3, [sp, #20]
  407748:	e7c0      	b.n	4076cc <_dtoa_r+0x964>
  40774a:	4641      	mov	r1, r8
  40774c:	4620      	mov	r0, r4
  40774e:	f001 fd69 	bl	409224 <__mcmp>
  407752:	2800      	cmp	r0, #0
  407754:	f6bf ad7d 	bge.w	407252 <_dtoa_r+0x4ea>
  407758:	4621      	mov	r1, r4
  40775a:	9c04      	ldr	r4, [sp, #16]
  40775c:	2300      	movs	r3, #0
  40775e:	3c01      	subs	r4, #1
  407760:	220a      	movs	r2, #10
  407762:	4648      	mov	r0, r9
  407764:	9404      	str	r4, [sp, #16]
  407766:	f001 fb85 	bl	408e74 <__multadd>
  40776a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40776c:	4604      	mov	r4, r0
  40776e:	2b00      	cmp	r3, #0
  407770:	f47f af60 	bne.w	407634 <_dtoa_r+0x8cc>
  407774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407776:	2b00      	cmp	r3, #0
  407778:	f340 81f6 	ble.w	407b68 <_dtoa_r+0xe00>
  40777c:	9306      	str	r3, [sp, #24]
  40777e:	e570      	b.n	407262 <_dtoa_r+0x4fa>
  407780:	9c08      	ldr	r4, [sp, #32]
  407782:	e51f      	b.n	4071c4 <_dtoa_r+0x45c>
  407784:	9b20      	ldr	r3, [sp, #128]	; 0x80
  407786:	2b02      	cmp	r3, #2
  407788:	f77f ad67 	ble.w	40725a <_dtoa_r+0x4f2>
  40778c:	9b06      	ldr	r3, [sp, #24]
  40778e:	2b00      	cmp	r3, #0
  407790:	f040 8179 	bne.w	407a86 <_dtoa_r+0xd1e>
  407794:	4641      	mov	r1, r8
  407796:	2205      	movs	r2, #5
  407798:	4648      	mov	r0, r9
  40779a:	f001 fb6b 	bl	408e74 <__multadd>
  40779e:	4601      	mov	r1, r0
  4077a0:	4680      	mov	r8, r0
  4077a2:	4620      	mov	r0, r4
  4077a4:	f001 fd3e 	bl	409224 <__mcmp>
  4077a8:	2800      	cmp	r0, #0
  4077aa:	9408      	str	r4, [sp, #32]
  4077ac:	f77f af0e 	ble.w	4075cc <_dtoa_r+0x864>
  4077b0:	9a04      	ldr	r2, [sp, #16]
  4077b2:	9907      	ldr	r1, [sp, #28]
  4077b4:	2331      	movs	r3, #49	; 0x31
  4077b6:	3201      	adds	r2, #1
  4077b8:	9204      	str	r2, [sp, #16]
  4077ba:	700b      	strb	r3, [r1, #0]
  4077bc:	1c4d      	adds	r5, r1, #1
  4077be:	e709      	b.n	4075d4 <_dtoa_r+0x86c>
  4077c0:	9a04      	ldr	r2, [sp, #16]
  4077c2:	3201      	adds	r2, #1
  4077c4:	9204      	str	r2, [sp, #16]
  4077c6:	9a07      	ldr	r2, [sp, #28]
  4077c8:	2331      	movs	r3, #49	; 0x31
  4077ca:	7013      	strb	r3, [r2, #0]
  4077cc:	e588      	b.n	4072e0 <_dtoa_r+0x578>
  4077ce:	2301      	movs	r3, #1
  4077d0:	9309      	str	r3, [sp, #36]	; 0x24
  4077d2:	e5cd      	b.n	407370 <_dtoa_r+0x608>
  4077d4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4077d8:	e491      	b.n	4070fe <_dtoa_r+0x396>
  4077da:	f1ba 0f00 	cmp.w	sl, #0
  4077de:	f47f ad04 	bne.w	4071ea <_dtoa_r+0x482>
  4077e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4077e6:	2b00      	cmp	r3, #0
  4077e8:	f040 813f 	bne.w	407a6a <_dtoa_r+0xd02>
  4077ec:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4077f0:	0d3f      	lsrs	r7, r7, #20
  4077f2:	053f      	lsls	r7, r7, #20
  4077f4:	b137      	cbz	r7, 407804 <_dtoa_r+0xa9c>
  4077f6:	9b05      	ldr	r3, [sp, #20]
  4077f8:	3301      	adds	r3, #1
  4077fa:	9305      	str	r3, [sp, #20]
  4077fc:	9b02      	ldr	r3, [sp, #8]
  4077fe:	3301      	adds	r3, #1
  407800:	9302      	str	r3, [sp, #8]
  407802:	2701      	movs	r7, #1
  407804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407806:	2001      	movs	r0, #1
  407808:	2b00      	cmp	r3, #0
  40780a:	f43f acf8 	beq.w	4071fe <_dtoa_r+0x496>
  40780e:	e4ed      	b.n	4071ec <_dtoa_r+0x484>
  407810:	4640      	mov	r0, r8
  407812:	f002 fbf1 	bl	409ff8 <__aeabi_i2d>
  407816:	4632      	mov	r2, r6
  407818:	463b      	mov	r3, r7
  40781a:	f002 fc53 	bl	40a0c4 <__aeabi_dmul>
  40781e:	2200      	movs	r2, #0
  407820:	4bbf      	ldr	r3, [pc, #764]	; (407b20 <_dtoa_r+0xdb8>)
  407822:	f002 fa9d 	bl	409d60 <__adddf3>
  407826:	4604      	mov	r4, r0
  407828:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40782c:	4630      	mov	r0, r6
  40782e:	4639      	mov	r1, r7
  407830:	2200      	movs	r2, #0
  407832:	4bbc      	ldr	r3, [pc, #752]	; (407b24 <_dtoa_r+0xdbc>)
  407834:	f002 fa92 	bl	409d5c <__aeabi_dsub>
  407838:	4622      	mov	r2, r4
  40783a:	462b      	mov	r3, r5
  40783c:	4606      	mov	r6, r0
  40783e:	460f      	mov	r7, r1
  407840:	f002 fed0 	bl	40a5e4 <__aeabi_dcmpgt>
  407844:	4680      	mov	r8, r0
  407846:	2800      	cmp	r0, #0
  407848:	f040 8105 	bne.w	407a56 <_dtoa_r+0xcee>
  40784c:	4622      	mov	r2, r4
  40784e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  407852:	4630      	mov	r0, r6
  407854:	4639      	mov	r1, r7
  407856:	f002 fea7 	bl	40a5a8 <__aeabi_dcmplt>
  40785a:	b108      	cbz	r0, 407860 <_dtoa_r+0xaf8>
  40785c:	4646      	mov	r6, r8
  40785e:	e6b5      	b.n	4075cc <_dtoa_r+0x864>
  407860:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  407864:	f7ff bb89 	b.w	406f7a <_dtoa_r+0x212>
  407868:	9807      	ldr	r0, [sp, #28]
  40786a:	f7ff baae 	b.w	406dca <_dtoa_r+0x62>
  40786e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407872:	970a      	str	r7, [sp, #40]	; 0x28
  407874:	1afb      	subs	r3, r7, r3
  407876:	441a      	add	r2, r3
  407878:	920b      	str	r2, [sp, #44]	; 0x2c
  40787a:	2700      	movs	r7, #0
  40787c:	e461      	b.n	407142 <_dtoa_r+0x3da>
  40787e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  407882:	f04f 0802 	mov.w	r8, #2
  407886:	e5bb      	b.n	407400 <_dtoa_r+0x698>
  407888:	461c      	mov	r4, r3
  40788a:	2100      	movs	r1, #0
  40788c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  407890:	e58a      	b.n	4073a8 <_dtoa_r+0x640>
  407892:	2401      	movs	r4, #1
  407894:	9421      	str	r4, [sp, #132]	; 0x84
  407896:	940d      	str	r4, [sp, #52]	; 0x34
  407898:	9406      	str	r4, [sp, #24]
  40789a:	e7f6      	b.n	40788a <_dtoa_r+0xb22>
  40789c:	2a00      	cmp	r2, #0
  40789e:	46d0      	mov	r8, sl
  4078a0:	f8cd b014 	str.w	fp, [sp, #20]
  4078a4:	469a      	mov	sl, r3
  4078a6:	dd11      	ble.n	4078cc <_dtoa_r+0xb64>
  4078a8:	4621      	mov	r1, r4
  4078aa:	2201      	movs	r2, #1
  4078ac:	4648      	mov	r0, r9
  4078ae:	f001 fc61 	bl	409174 <__lshift>
  4078b2:	4641      	mov	r1, r8
  4078b4:	4604      	mov	r4, r0
  4078b6:	f001 fcb5 	bl	409224 <__mcmp>
  4078ba:	2800      	cmp	r0, #0
  4078bc:	f340 8149 	ble.w	407b52 <_dtoa_r+0xdea>
  4078c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4078c4:	f000 8106 	beq.w	407ad4 <_dtoa_r+0xd6c>
  4078c8:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4078cc:	46b3      	mov	fp, r6
  4078ce:	f887 a000 	strb.w	sl, [r7]
  4078d2:	1c7d      	adds	r5, r7, #1
  4078d4:	9e05      	ldr	r6, [sp, #20]
  4078d6:	9408      	str	r4, [sp, #32]
  4078d8:	e502      	b.n	4072e0 <_dtoa_r+0x578>
  4078da:	d104      	bne.n	4078e6 <_dtoa_r+0xb7e>
  4078dc:	f01a 0f01 	tst.w	sl, #1
  4078e0:	d001      	beq.n	4078e6 <_dtoa_r+0xb7e>
  4078e2:	e4ed      	b.n	4072c0 <_dtoa_r+0x558>
  4078e4:	4615      	mov	r5, r2
  4078e6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4078ea:	2b30      	cmp	r3, #48	; 0x30
  4078ec:	f105 32ff 	add.w	r2, r5, #4294967295
  4078f0:	d0f8      	beq.n	4078e4 <_dtoa_r+0xb7c>
  4078f2:	e4f5      	b.n	4072e0 <_dtoa_r+0x578>
  4078f4:	9b04      	ldr	r3, [sp, #16]
  4078f6:	425c      	negs	r4, r3
  4078f8:	2c00      	cmp	r4, #0
  4078fa:	f000 80bf 	beq.w	407a7c <_dtoa_r+0xd14>
  4078fe:	4b8a      	ldr	r3, [pc, #552]	; (407b28 <_dtoa_r+0xdc0>)
  407900:	f004 020f 	and.w	r2, r4, #15
  407904:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407908:	e9d3 2300 	ldrd	r2, r3, [r3]
  40790c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  407910:	f002 fbd8 	bl	40a0c4 <__aeabi_dmul>
  407914:	1124      	asrs	r4, r4, #4
  407916:	4606      	mov	r6, r0
  407918:	460f      	mov	r7, r1
  40791a:	f000 812a 	beq.w	407b72 <_dtoa_r+0xe0a>
  40791e:	4d83      	ldr	r5, [pc, #524]	; (407b2c <_dtoa_r+0xdc4>)
  407920:	f04f 0802 	mov.w	r8, #2
  407924:	07e2      	lsls	r2, r4, #31
  407926:	d509      	bpl.n	40793c <_dtoa_r+0xbd4>
  407928:	4630      	mov	r0, r6
  40792a:	4639      	mov	r1, r7
  40792c:	e9d5 2300 	ldrd	r2, r3, [r5]
  407930:	f002 fbc8 	bl	40a0c4 <__aeabi_dmul>
  407934:	f108 0801 	add.w	r8, r8, #1
  407938:	4606      	mov	r6, r0
  40793a:	460f      	mov	r7, r1
  40793c:	1064      	asrs	r4, r4, #1
  40793e:	f105 0508 	add.w	r5, r5, #8
  407942:	d1ef      	bne.n	407924 <_dtoa_r+0xbbc>
  407944:	e576      	b.n	407434 <_dtoa_r+0x6cc>
  407946:	9907      	ldr	r1, [sp, #28]
  407948:	2230      	movs	r2, #48	; 0x30
  40794a:	700a      	strb	r2, [r1, #0]
  40794c:	9a04      	ldr	r2, [sp, #16]
  40794e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  407952:	3201      	adds	r2, #1
  407954:	9204      	str	r2, [sp, #16]
  407956:	f7ff bbd0 	b.w	4070fa <_dtoa_r+0x392>
  40795a:	6871      	ldr	r1, [r6, #4]
  40795c:	4648      	mov	r0, r9
  40795e:	f001 fa59 	bl	408e14 <_Balloc>
  407962:	6933      	ldr	r3, [r6, #16]
  407964:	1c9a      	adds	r2, r3, #2
  407966:	4605      	mov	r5, r0
  407968:	0092      	lsls	r2, r2, #2
  40796a:	f106 010c 	add.w	r1, r6, #12
  40796e:	300c      	adds	r0, #12
  407970:	f001 f94e 	bl	408c10 <memcpy>
  407974:	4629      	mov	r1, r5
  407976:	2201      	movs	r2, #1
  407978:	4648      	mov	r0, r9
  40797a:	f001 fbfb 	bl	409174 <__lshift>
  40797e:	9005      	str	r0, [sp, #20]
  407980:	e670      	b.n	407664 <_dtoa_r+0x8fc>
  407982:	2b39      	cmp	r3, #57	; 0x39
  407984:	f8cd b014 	str.w	fp, [sp, #20]
  407988:	46d0      	mov	r8, sl
  40798a:	f000 80a3 	beq.w	407ad4 <_dtoa_r+0xd6c>
  40798e:	f103 0a01 	add.w	sl, r3, #1
  407992:	46b3      	mov	fp, r6
  407994:	f887 a000 	strb.w	sl, [r7]
  407998:	1c7d      	adds	r5, r7, #1
  40799a:	9e05      	ldr	r6, [sp, #20]
  40799c:	9408      	str	r4, [sp, #32]
  40799e:	e49f      	b.n	4072e0 <_dtoa_r+0x578>
  4079a0:	465a      	mov	r2, fp
  4079a2:	46d0      	mov	r8, sl
  4079a4:	46b3      	mov	fp, r6
  4079a6:	469a      	mov	sl, r3
  4079a8:	4616      	mov	r6, r2
  4079aa:	e47d      	b.n	4072a8 <_dtoa_r+0x540>
  4079ac:	495e      	ldr	r1, [pc, #376]	; (407b28 <_dtoa_r+0xdc0>)
  4079ae:	f108 3aff 	add.w	sl, r8, #4294967295
  4079b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  4079b6:	4622      	mov	r2, r4
  4079b8:	462b      	mov	r3, r5
  4079ba:	e9d1 0100 	ldrd	r0, r1, [r1]
  4079be:	f002 fb81 	bl	40a0c4 <__aeabi_dmul>
  4079c2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4079c6:	4639      	mov	r1, r7
  4079c8:	4630      	mov	r0, r6
  4079ca:	f002 fe2b 	bl	40a624 <__aeabi_d2iz>
  4079ce:	4604      	mov	r4, r0
  4079d0:	f002 fb12 	bl	409ff8 <__aeabi_i2d>
  4079d4:	4602      	mov	r2, r0
  4079d6:	460b      	mov	r3, r1
  4079d8:	4630      	mov	r0, r6
  4079da:	4639      	mov	r1, r7
  4079dc:	f002 f9be 	bl	409d5c <__aeabi_dsub>
  4079e0:	9a07      	ldr	r2, [sp, #28]
  4079e2:	3430      	adds	r4, #48	; 0x30
  4079e4:	f1b8 0f01 	cmp.w	r8, #1
  4079e8:	4606      	mov	r6, r0
  4079ea:	460f      	mov	r7, r1
  4079ec:	7014      	strb	r4, [r2, #0]
  4079ee:	f102 0501 	add.w	r5, r2, #1
  4079f2:	d01e      	beq.n	407a32 <_dtoa_r+0xcca>
  4079f4:	9b07      	ldr	r3, [sp, #28]
  4079f6:	eb03 0b08 	add.w	fp, r3, r8
  4079fa:	46a8      	mov	r8, r5
  4079fc:	2200      	movs	r2, #0
  4079fe:	4b4c      	ldr	r3, [pc, #304]	; (407b30 <_dtoa_r+0xdc8>)
  407a00:	4630      	mov	r0, r6
  407a02:	4639      	mov	r1, r7
  407a04:	f002 fb5e 	bl	40a0c4 <__aeabi_dmul>
  407a08:	460f      	mov	r7, r1
  407a0a:	4606      	mov	r6, r0
  407a0c:	f002 fe0a 	bl	40a624 <__aeabi_d2iz>
  407a10:	4604      	mov	r4, r0
  407a12:	f002 faf1 	bl	409ff8 <__aeabi_i2d>
  407a16:	3430      	adds	r4, #48	; 0x30
  407a18:	4602      	mov	r2, r0
  407a1a:	460b      	mov	r3, r1
  407a1c:	4630      	mov	r0, r6
  407a1e:	4639      	mov	r1, r7
  407a20:	f002 f99c 	bl	409d5c <__aeabi_dsub>
  407a24:	f808 4b01 	strb.w	r4, [r8], #1
  407a28:	45c3      	cmp	fp, r8
  407a2a:	4606      	mov	r6, r0
  407a2c:	460f      	mov	r7, r1
  407a2e:	d1e5      	bne.n	4079fc <_dtoa_r+0xc94>
  407a30:	4455      	add	r5, sl
  407a32:	2200      	movs	r2, #0
  407a34:	4b3f      	ldr	r3, [pc, #252]	; (407b34 <_dtoa_r+0xdcc>)
  407a36:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407a3a:	f002 f991 	bl	409d60 <__adddf3>
  407a3e:	4632      	mov	r2, r6
  407a40:	463b      	mov	r3, r7
  407a42:	f002 fdb1 	bl	40a5a8 <__aeabi_dcmplt>
  407a46:	2800      	cmp	r0, #0
  407a48:	d04c      	beq.n	407ae4 <_dtoa_r+0xd7c>
  407a4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407a4c:	9304      	str	r3, [sp, #16]
  407a4e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  407a52:	f7ff bb46 	b.w	4070e2 <_dtoa_r+0x37a>
  407a56:	f04f 0800 	mov.w	r8, #0
  407a5a:	4646      	mov	r6, r8
  407a5c:	e6a8      	b.n	4077b0 <_dtoa_r+0xa48>
  407a5e:	9b05      	ldr	r3, [sp, #20]
  407a60:	9a06      	ldr	r2, [sp, #24]
  407a62:	1a9d      	subs	r5, r3, r2
  407a64:	2300      	movs	r3, #0
  407a66:	f7ff bb72 	b.w	40714e <_dtoa_r+0x3e6>
  407a6a:	2700      	movs	r7, #0
  407a6c:	e6ca      	b.n	407804 <_dtoa_r+0xa9c>
  407a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407a70:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407a72:	9d05      	ldr	r5, [sp, #20]
  407a74:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  407a78:	f7ff bb69 	b.w	40714e <_dtoa_r+0x3e6>
  407a7c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  407a80:	f04f 0802 	mov.w	r8, #2
  407a84:	e4d6      	b.n	407434 <_dtoa_r+0x6cc>
  407a86:	9408      	str	r4, [sp, #32]
  407a88:	e5a0      	b.n	4075cc <_dtoa_r+0x864>
  407a8a:	9b06      	ldr	r3, [sp, #24]
  407a8c:	2b00      	cmp	r3, #0
  407a8e:	f43f aebf 	beq.w	407810 <_dtoa_r+0xaa8>
  407a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407a94:	2b00      	cmp	r3, #0
  407a96:	f77f aee3 	ble.w	407860 <_dtoa_r+0xaf8>
  407a9a:	2200      	movs	r2, #0
  407a9c:	4b24      	ldr	r3, [pc, #144]	; (407b30 <_dtoa_r+0xdc8>)
  407a9e:	4630      	mov	r0, r6
  407aa0:	4639      	mov	r1, r7
  407aa2:	f002 fb0f 	bl	40a0c4 <__aeabi_dmul>
  407aa6:	4606      	mov	r6, r0
  407aa8:	460f      	mov	r7, r1
  407aaa:	f108 0001 	add.w	r0, r8, #1
  407aae:	f002 faa3 	bl	409ff8 <__aeabi_i2d>
  407ab2:	4632      	mov	r2, r6
  407ab4:	463b      	mov	r3, r7
  407ab6:	f002 fb05 	bl	40a0c4 <__aeabi_dmul>
  407aba:	2200      	movs	r2, #0
  407abc:	4b18      	ldr	r3, [pc, #96]	; (407b20 <_dtoa_r+0xdb8>)
  407abe:	f002 f94f 	bl	409d60 <__adddf3>
  407ac2:	9a04      	ldr	r2, [sp, #16]
  407ac4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  407ac8:	3a01      	subs	r2, #1
  407aca:	4604      	mov	r4, r0
  407acc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  407ad0:	9211      	str	r2, [sp, #68]	; 0x44
  407ad2:	e4d0      	b.n	407476 <_dtoa_r+0x70e>
  407ad4:	2239      	movs	r2, #57	; 0x39
  407ad6:	46b3      	mov	fp, r6
  407ad8:	9408      	str	r4, [sp, #32]
  407ada:	9e05      	ldr	r6, [sp, #20]
  407adc:	703a      	strb	r2, [r7, #0]
  407ade:	1c7d      	adds	r5, r7, #1
  407ae0:	f7ff bbf0 	b.w	4072c4 <_dtoa_r+0x55c>
  407ae4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  407ae8:	2000      	movs	r0, #0
  407aea:	4912      	ldr	r1, [pc, #72]	; (407b34 <_dtoa_r+0xdcc>)
  407aec:	f002 f936 	bl	409d5c <__aeabi_dsub>
  407af0:	4632      	mov	r2, r6
  407af2:	463b      	mov	r3, r7
  407af4:	f002 fd76 	bl	40a5e4 <__aeabi_dcmpgt>
  407af8:	b908      	cbnz	r0, 407afe <_dtoa_r+0xd96>
  407afa:	e6b1      	b.n	407860 <_dtoa_r+0xaf8>
  407afc:	4615      	mov	r5, r2
  407afe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407b02:	2b30      	cmp	r3, #48	; 0x30
  407b04:	f105 32ff 	add.w	r2, r5, #4294967295
  407b08:	d0f8      	beq.n	407afc <_dtoa_r+0xd94>
  407b0a:	e530      	b.n	40756e <_dtoa_r+0x806>
  407b0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407b0e:	9304      	str	r3, [sp, #16]
  407b10:	f7ff bae7 	b.w	4070e2 <_dtoa_r+0x37a>
  407b14:	f1ba 0f00 	cmp.w	sl, #0
  407b18:	f47f ad7a 	bne.w	407610 <_dtoa_r+0x8a8>
  407b1c:	e661      	b.n	4077e2 <_dtoa_r+0xa7a>
  407b1e:	bf00      	nop
  407b20:	401c0000 	.word	0x401c0000
  407b24:	40140000 	.word	0x40140000
  407b28:	0040bb60 	.word	0x0040bb60
  407b2c:	0040bc28 	.word	0x0040bc28
  407b30:	40240000 	.word	0x40240000
  407b34:	3fe00000 	.word	0x3fe00000
  407b38:	2b39      	cmp	r3, #57	; 0x39
  407b3a:	f8cd b014 	str.w	fp, [sp, #20]
  407b3e:	46d0      	mov	r8, sl
  407b40:	f8dd b008 	ldr.w	fp, [sp, #8]
  407b44:	469a      	mov	sl, r3
  407b46:	d0c5      	beq.n	407ad4 <_dtoa_r+0xd6c>
  407b48:	f1bb 0f00 	cmp.w	fp, #0
  407b4c:	f73f aebc 	bgt.w	4078c8 <_dtoa_r+0xb60>
  407b50:	e6bc      	b.n	4078cc <_dtoa_r+0xb64>
  407b52:	f47f aebb 	bne.w	4078cc <_dtoa_r+0xb64>
  407b56:	f01a 0f01 	tst.w	sl, #1
  407b5a:	f43f aeb7 	beq.w	4078cc <_dtoa_r+0xb64>
  407b5e:	e6af      	b.n	4078c0 <_dtoa_r+0xb58>
  407b60:	f04f 0800 	mov.w	r8, #0
  407b64:	4646      	mov	r6, r8
  407b66:	e531      	b.n	4075cc <_dtoa_r+0x864>
  407b68:	9b20      	ldr	r3, [sp, #128]	; 0x80
  407b6a:	2b02      	cmp	r3, #2
  407b6c:	dc21      	bgt.n	407bb2 <_dtoa_r+0xe4a>
  407b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407b70:	e604      	b.n	40777c <_dtoa_r+0xa14>
  407b72:	f04f 0802 	mov.w	r8, #2
  407b76:	e45d      	b.n	407434 <_dtoa_r+0x6cc>
  407b78:	9b20      	ldr	r3, [sp, #128]	; 0x80
  407b7a:	2b02      	cmp	r3, #2
  407b7c:	dc19      	bgt.n	407bb2 <_dtoa_r+0xe4a>
  407b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407b80:	e563      	b.n	40764a <_dtoa_r+0x8e2>
  407b82:	2400      	movs	r4, #0
  407b84:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  407b88:	4621      	mov	r1, r4
  407b8a:	4648      	mov	r0, r9
  407b8c:	f001 f942 	bl	408e14 <_Balloc>
  407b90:	f04f 33ff 	mov.w	r3, #4294967295
  407b94:	9306      	str	r3, [sp, #24]
  407b96:	930d      	str	r3, [sp, #52]	; 0x34
  407b98:	2301      	movs	r3, #1
  407b9a:	9007      	str	r0, [sp, #28]
  407b9c:	9421      	str	r4, [sp, #132]	; 0x84
  407b9e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  407ba2:	9309      	str	r3, [sp, #36]	; 0x24
  407ba4:	f7ff b9e9 	b.w	406f7a <_dtoa_r+0x212>
  407ba8:	f43f ab3d 	beq.w	407226 <_dtoa_r+0x4be>
  407bac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407bb0:	e522      	b.n	4075f8 <_dtoa_r+0x890>
  407bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407bb4:	9306      	str	r3, [sp, #24]
  407bb6:	e5e9      	b.n	40778c <_dtoa_r+0xa24>
  407bb8:	2501      	movs	r5, #1
  407bba:	f7ff b9a8 	b.w	406f0e <_dtoa_r+0x1a6>
  407bbe:	bf00      	nop

00407bc0 <__sflush_r>:
  407bc0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407bc4:	b29a      	uxth	r2, r3
  407bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407bca:	460d      	mov	r5, r1
  407bcc:	0711      	lsls	r1, r2, #28
  407bce:	4680      	mov	r8, r0
  407bd0:	d43c      	bmi.n	407c4c <__sflush_r+0x8c>
  407bd2:	686a      	ldr	r2, [r5, #4]
  407bd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407bd8:	2a00      	cmp	r2, #0
  407bda:	81ab      	strh	r3, [r5, #12]
  407bdc:	dd73      	ble.n	407cc6 <__sflush_r+0x106>
  407bde:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407be0:	2c00      	cmp	r4, #0
  407be2:	d04b      	beq.n	407c7c <__sflush_r+0xbc>
  407be4:	b29b      	uxth	r3, r3
  407be6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  407bea:	2100      	movs	r1, #0
  407bec:	b292      	uxth	r2, r2
  407bee:	f8d8 6000 	ldr.w	r6, [r8]
  407bf2:	f8c8 1000 	str.w	r1, [r8]
  407bf6:	2a00      	cmp	r2, #0
  407bf8:	d069      	beq.n	407cce <__sflush_r+0x10e>
  407bfa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407bfc:	075f      	lsls	r7, r3, #29
  407bfe:	d505      	bpl.n	407c0c <__sflush_r+0x4c>
  407c00:	6869      	ldr	r1, [r5, #4]
  407c02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407c04:	1a52      	subs	r2, r2, r1
  407c06:	b10b      	cbz	r3, 407c0c <__sflush_r+0x4c>
  407c08:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407c0a:	1ad2      	subs	r2, r2, r3
  407c0c:	2300      	movs	r3, #0
  407c0e:	69e9      	ldr	r1, [r5, #28]
  407c10:	4640      	mov	r0, r8
  407c12:	47a0      	blx	r4
  407c14:	1c44      	adds	r4, r0, #1
  407c16:	d03c      	beq.n	407c92 <__sflush_r+0xd2>
  407c18:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407c1c:	692a      	ldr	r2, [r5, #16]
  407c1e:	602a      	str	r2, [r5, #0]
  407c20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407c24:	2200      	movs	r2, #0
  407c26:	81ab      	strh	r3, [r5, #12]
  407c28:	04db      	lsls	r3, r3, #19
  407c2a:	606a      	str	r2, [r5, #4]
  407c2c:	d449      	bmi.n	407cc2 <__sflush_r+0x102>
  407c2e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407c30:	f8c8 6000 	str.w	r6, [r8]
  407c34:	b311      	cbz	r1, 407c7c <__sflush_r+0xbc>
  407c36:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407c3a:	4299      	cmp	r1, r3
  407c3c:	d002      	beq.n	407c44 <__sflush_r+0x84>
  407c3e:	4640      	mov	r0, r8
  407c40:	f000 f9c0 	bl	407fc4 <_free_r>
  407c44:	2000      	movs	r0, #0
  407c46:	6328      	str	r0, [r5, #48]	; 0x30
  407c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c4c:	692e      	ldr	r6, [r5, #16]
  407c4e:	b1ae      	cbz	r6, 407c7c <__sflush_r+0xbc>
  407c50:	682c      	ldr	r4, [r5, #0]
  407c52:	602e      	str	r6, [r5, #0]
  407c54:	0790      	lsls	r0, r2, #30
  407c56:	bf0c      	ite	eq
  407c58:	696b      	ldreq	r3, [r5, #20]
  407c5a:	2300      	movne	r3, #0
  407c5c:	1ba4      	subs	r4, r4, r6
  407c5e:	60ab      	str	r3, [r5, #8]
  407c60:	e00a      	b.n	407c78 <__sflush_r+0xb8>
  407c62:	4623      	mov	r3, r4
  407c64:	4632      	mov	r2, r6
  407c66:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407c68:	69e9      	ldr	r1, [r5, #28]
  407c6a:	4640      	mov	r0, r8
  407c6c:	47b8      	blx	r7
  407c6e:	2800      	cmp	r0, #0
  407c70:	eba4 0400 	sub.w	r4, r4, r0
  407c74:	4406      	add	r6, r0
  407c76:	dd04      	ble.n	407c82 <__sflush_r+0xc2>
  407c78:	2c00      	cmp	r4, #0
  407c7a:	dcf2      	bgt.n	407c62 <__sflush_r+0xa2>
  407c7c:	2000      	movs	r0, #0
  407c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c82:	89ab      	ldrh	r3, [r5, #12]
  407c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407c88:	81ab      	strh	r3, [r5, #12]
  407c8a:	f04f 30ff 	mov.w	r0, #4294967295
  407c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c92:	f8d8 2000 	ldr.w	r2, [r8]
  407c96:	2a1d      	cmp	r2, #29
  407c98:	d8f3      	bhi.n	407c82 <__sflush_r+0xc2>
  407c9a:	4b1a      	ldr	r3, [pc, #104]	; (407d04 <__sflush_r+0x144>)
  407c9c:	40d3      	lsrs	r3, r2
  407c9e:	f003 0301 	and.w	r3, r3, #1
  407ca2:	f083 0401 	eor.w	r4, r3, #1
  407ca6:	2b00      	cmp	r3, #0
  407ca8:	d0eb      	beq.n	407c82 <__sflush_r+0xc2>
  407caa:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407cae:	6929      	ldr	r1, [r5, #16]
  407cb0:	6029      	str	r1, [r5, #0]
  407cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407cb6:	04d9      	lsls	r1, r3, #19
  407cb8:	606c      	str	r4, [r5, #4]
  407cba:	81ab      	strh	r3, [r5, #12]
  407cbc:	d5b7      	bpl.n	407c2e <__sflush_r+0x6e>
  407cbe:	2a00      	cmp	r2, #0
  407cc0:	d1b5      	bne.n	407c2e <__sflush_r+0x6e>
  407cc2:	6528      	str	r0, [r5, #80]	; 0x50
  407cc4:	e7b3      	b.n	407c2e <__sflush_r+0x6e>
  407cc6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407cc8:	2a00      	cmp	r2, #0
  407cca:	dc88      	bgt.n	407bde <__sflush_r+0x1e>
  407ccc:	e7d6      	b.n	407c7c <__sflush_r+0xbc>
  407cce:	2301      	movs	r3, #1
  407cd0:	69e9      	ldr	r1, [r5, #28]
  407cd2:	4640      	mov	r0, r8
  407cd4:	47a0      	blx	r4
  407cd6:	1c43      	adds	r3, r0, #1
  407cd8:	4602      	mov	r2, r0
  407cda:	d002      	beq.n	407ce2 <__sflush_r+0x122>
  407cdc:	89ab      	ldrh	r3, [r5, #12]
  407cde:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407ce0:	e78c      	b.n	407bfc <__sflush_r+0x3c>
  407ce2:	f8d8 3000 	ldr.w	r3, [r8]
  407ce6:	2b00      	cmp	r3, #0
  407ce8:	d0f8      	beq.n	407cdc <__sflush_r+0x11c>
  407cea:	2b1d      	cmp	r3, #29
  407cec:	d001      	beq.n	407cf2 <__sflush_r+0x132>
  407cee:	2b16      	cmp	r3, #22
  407cf0:	d102      	bne.n	407cf8 <__sflush_r+0x138>
  407cf2:	f8c8 6000 	str.w	r6, [r8]
  407cf6:	e7c1      	b.n	407c7c <__sflush_r+0xbc>
  407cf8:	89ab      	ldrh	r3, [r5, #12]
  407cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407cfe:	81ab      	strh	r3, [r5, #12]
  407d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407d04:	20400001 	.word	0x20400001

00407d08 <_fflush_r>:
  407d08:	b510      	push	{r4, lr}
  407d0a:	4604      	mov	r4, r0
  407d0c:	b082      	sub	sp, #8
  407d0e:	b108      	cbz	r0, 407d14 <_fflush_r+0xc>
  407d10:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407d12:	b153      	cbz	r3, 407d2a <_fflush_r+0x22>
  407d14:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  407d18:	b908      	cbnz	r0, 407d1e <_fflush_r+0x16>
  407d1a:	b002      	add	sp, #8
  407d1c:	bd10      	pop	{r4, pc}
  407d1e:	4620      	mov	r0, r4
  407d20:	b002      	add	sp, #8
  407d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407d26:	f7ff bf4b 	b.w	407bc0 <__sflush_r>
  407d2a:	9101      	str	r1, [sp, #4]
  407d2c:	f000 f880 	bl	407e30 <__sinit>
  407d30:	9901      	ldr	r1, [sp, #4]
  407d32:	e7ef      	b.n	407d14 <_fflush_r+0xc>

00407d34 <_cleanup_r>:
  407d34:	4901      	ldr	r1, [pc, #4]	; (407d3c <_cleanup_r+0x8>)
  407d36:	f000 bbaf 	b.w	408498 <_fwalk_reent>
  407d3a:	bf00      	nop
  407d3c:	00409c2d 	.word	0x00409c2d

00407d40 <__sinit.part.1>:
  407d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d44:	4b35      	ldr	r3, [pc, #212]	; (407e1c <__sinit.part.1+0xdc>)
  407d46:	6845      	ldr	r5, [r0, #4]
  407d48:	63c3      	str	r3, [r0, #60]	; 0x3c
  407d4a:	2400      	movs	r4, #0
  407d4c:	4607      	mov	r7, r0
  407d4e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  407d52:	2304      	movs	r3, #4
  407d54:	2103      	movs	r1, #3
  407d56:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  407d5a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  407d5e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  407d62:	b083      	sub	sp, #12
  407d64:	602c      	str	r4, [r5, #0]
  407d66:	606c      	str	r4, [r5, #4]
  407d68:	60ac      	str	r4, [r5, #8]
  407d6a:	666c      	str	r4, [r5, #100]	; 0x64
  407d6c:	81ec      	strh	r4, [r5, #14]
  407d6e:	612c      	str	r4, [r5, #16]
  407d70:	616c      	str	r4, [r5, #20]
  407d72:	61ac      	str	r4, [r5, #24]
  407d74:	81ab      	strh	r3, [r5, #12]
  407d76:	4621      	mov	r1, r4
  407d78:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  407d7c:	2208      	movs	r2, #8
  407d7e:	f7fc f91f 	bl	403fc0 <memset>
  407d82:	68be      	ldr	r6, [r7, #8]
  407d84:	f8df b098 	ldr.w	fp, [pc, #152]	; 407e20 <__sinit.part.1+0xe0>
  407d88:	f8df a098 	ldr.w	sl, [pc, #152]	; 407e24 <__sinit.part.1+0xe4>
  407d8c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 407e28 <__sinit.part.1+0xe8>
  407d90:	f8df 8098 	ldr.w	r8, [pc, #152]	; 407e2c <__sinit.part.1+0xec>
  407d94:	f8c5 b020 	str.w	fp, [r5, #32]
  407d98:	2301      	movs	r3, #1
  407d9a:	2209      	movs	r2, #9
  407d9c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  407da0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  407da4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  407da8:	61ed      	str	r5, [r5, #28]
  407daa:	4621      	mov	r1, r4
  407dac:	81f3      	strh	r3, [r6, #14]
  407dae:	81b2      	strh	r2, [r6, #12]
  407db0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  407db4:	6034      	str	r4, [r6, #0]
  407db6:	6074      	str	r4, [r6, #4]
  407db8:	60b4      	str	r4, [r6, #8]
  407dba:	6674      	str	r4, [r6, #100]	; 0x64
  407dbc:	6134      	str	r4, [r6, #16]
  407dbe:	6174      	str	r4, [r6, #20]
  407dc0:	61b4      	str	r4, [r6, #24]
  407dc2:	2208      	movs	r2, #8
  407dc4:	9301      	str	r3, [sp, #4]
  407dc6:	f7fc f8fb 	bl	403fc0 <memset>
  407dca:	68fd      	ldr	r5, [r7, #12]
  407dcc:	61f6      	str	r6, [r6, #28]
  407dce:	2012      	movs	r0, #18
  407dd0:	2202      	movs	r2, #2
  407dd2:	f8c6 b020 	str.w	fp, [r6, #32]
  407dd6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  407dda:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  407dde:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  407de2:	4621      	mov	r1, r4
  407de4:	81a8      	strh	r0, [r5, #12]
  407de6:	81ea      	strh	r2, [r5, #14]
  407de8:	602c      	str	r4, [r5, #0]
  407dea:	606c      	str	r4, [r5, #4]
  407dec:	60ac      	str	r4, [r5, #8]
  407dee:	666c      	str	r4, [r5, #100]	; 0x64
  407df0:	612c      	str	r4, [r5, #16]
  407df2:	616c      	str	r4, [r5, #20]
  407df4:	61ac      	str	r4, [r5, #24]
  407df6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  407dfa:	2208      	movs	r2, #8
  407dfc:	f7fc f8e0 	bl	403fc0 <memset>
  407e00:	9b01      	ldr	r3, [sp, #4]
  407e02:	61ed      	str	r5, [r5, #28]
  407e04:	f8c5 b020 	str.w	fp, [r5, #32]
  407e08:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  407e0c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  407e10:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  407e14:	63bb      	str	r3, [r7, #56]	; 0x38
  407e16:	b003      	add	sp, #12
  407e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e1c:	00407d35 	.word	0x00407d35
  407e20:	00409835 	.word	0x00409835
  407e24:	00409859 	.word	0x00409859
  407e28:	00409895 	.word	0x00409895
  407e2c:	004098b5 	.word	0x004098b5

00407e30 <__sinit>:
  407e30:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407e32:	b103      	cbz	r3, 407e36 <__sinit+0x6>
  407e34:	4770      	bx	lr
  407e36:	f7ff bf83 	b.w	407d40 <__sinit.part.1>
  407e3a:	bf00      	nop

00407e3c <__sfp_lock_acquire>:
  407e3c:	4770      	bx	lr
  407e3e:	bf00      	nop

00407e40 <__sfp_lock_release>:
  407e40:	4770      	bx	lr
  407e42:	bf00      	nop

00407e44 <__libc_fini_array>:
  407e44:	b538      	push	{r3, r4, r5, lr}
  407e46:	4d07      	ldr	r5, [pc, #28]	; (407e64 <__libc_fini_array+0x20>)
  407e48:	4c07      	ldr	r4, [pc, #28]	; (407e68 <__libc_fini_array+0x24>)
  407e4a:	1b2c      	subs	r4, r5, r4
  407e4c:	10a4      	asrs	r4, r4, #2
  407e4e:	d005      	beq.n	407e5c <__libc_fini_array+0x18>
  407e50:	3c01      	subs	r4, #1
  407e52:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  407e56:	4798      	blx	r3
  407e58:	2c00      	cmp	r4, #0
  407e5a:	d1f9      	bne.n	407e50 <__libc_fini_array+0xc>
  407e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407e60:	f003 bf06 	b.w	40bc70 <_fini>
  407e64:	0040bc80 	.word	0x0040bc80
  407e68:	0040bc7c 	.word	0x0040bc7c

00407e6c <__fputwc>:
  407e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407e70:	b082      	sub	sp, #8
  407e72:	4680      	mov	r8, r0
  407e74:	4689      	mov	r9, r1
  407e76:	4614      	mov	r4, r2
  407e78:	f000 fb3c 	bl	4084f4 <__locale_mb_cur_max>
  407e7c:	2801      	cmp	r0, #1
  407e7e:	d033      	beq.n	407ee8 <__fputwc+0x7c>
  407e80:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407e84:	464a      	mov	r2, r9
  407e86:	a901      	add	r1, sp, #4
  407e88:	4640      	mov	r0, r8
  407e8a:	f001 fded 	bl	409a68 <_wcrtomb_r>
  407e8e:	f1b0 3fff 	cmp.w	r0, #4294967295
  407e92:	4682      	mov	sl, r0
  407e94:	d021      	beq.n	407eda <__fputwc+0x6e>
  407e96:	b388      	cbz	r0, 407efc <__fputwc+0x90>
  407e98:	f89d 6004 	ldrb.w	r6, [sp, #4]
  407e9c:	2500      	movs	r5, #0
  407e9e:	e008      	b.n	407eb2 <__fputwc+0x46>
  407ea0:	6823      	ldr	r3, [r4, #0]
  407ea2:	1c5a      	adds	r2, r3, #1
  407ea4:	6022      	str	r2, [r4, #0]
  407ea6:	701e      	strb	r6, [r3, #0]
  407ea8:	3501      	adds	r5, #1
  407eaa:	4555      	cmp	r5, sl
  407eac:	d226      	bcs.n	407efc <__fputwc+0x90>
  407eae:	ab01      	add	r3, sp, #4
  407eb0:	5d5e      	ldrb	r6, [r3, r5]
  407eb2:	68a3      	ldr	r3, [r4, #8]
  407eb4:	3b01      	subs	r3, #1
  407eb6:	2b00      	cmp	r3, #0
  407eb8:	60a3      	str	r3, [r4, #8]
  407eba:	daf1      	bge.n	407ea0 <__fputwc+0x34>
  407ebc:	69a7      	ldr	r7, [r4, #24]
  407ebe:	42bb      	cmp	r3, r7
  407ec0:	4631      	mov	r1, r6
  407ec2:	4622      	mov	r2, r4
  407ec4:	4640      	mov	r0, r8
  407ec6:	db01      	blt.n	407ecc <__fputwc+0x60>
  407ec8:	2e0a      	cmp	r6, #10
  407eca:	d1e9      	bne.n	407ea0 <__fputwc+0x34>
  407ecc:	f001 fd76 	bl	4099bc <__swbuf_r>
  407ed0:	1c43      	adds	r3, r0, #1
  407ed2:	d1e9      	bne.n	407ea8 <__fputwc+0x3c>
  407ed4:	b002      	add	sp, #8
  407ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407eda:	89a3      	ldrh	r3, [r4, #12]
  407edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407ee0:	81a3      	strh	r3, [r4, #12]
  407ee2:	b002      	add	sp, #8
  407ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ee8:	f109 33ff 	add.w	r3, r9, #4294967295
  407eec:	2bfe      	cmp	r3, #254	; 0xfe
  407eee:	d8c7      	bhi.n	407e80 <__fputwc+0x14>
  407ef0:	fa5f f689 	uxtb.w	r6, r9
  407ef4:	4682      	mov	sl, r0
  407ef6:	f88d 6004 	strb.w	r6, [sp, #4]
  407efa:	e7cf      	b.n	407e9c <__fputwc+0x30>
  407efc:	4648      	mov	r0, r9
  407efe:	b002      	add	sp, #8
  407f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00407f04 <_fputwc_r>:
  407f04:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407f08:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  407f0c:	d10a      	bne.n	407f24 <_fputwc_r+0x20>
  407f0e:	b410      	push	{r4}
  407f10:	6e54      	ldr	r4, [r2, #100]	; 0x64
  407f12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407f16:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  407f1a:	6654      	str	r4, [r2, #100]	; 0x64
  407f1c:	8193      	strh	r3, [r2, #12]
  407f1e:	bc10      	pop	{r4}
  407f20:	f7ff bfa4 	b.w	407e6c <__fputwc>
  407f24:	f7ff bfa2 	b.w	407e6c <__fputwc>

00407f28 <_malloc_trim_r>:
  407f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407f2a:	4f23      	ldr	r7, [pc, #140]	; (407fb8 <_malloc_trim_r+0x90>)
  407f2c:	460c      	mov	r4, r1
  407f2e:	4606      	mov	r6, r0
  407f30:	f000 ff6c 	bl	408e0c <__malloc_lock>
  407f34:	68bb      	ldr	r3, [r7, #8]
  407f36:	685d      	ldr	r5, [r3, #4]
  407f38:	f025 0503 	bic.w	r5, r5, #3
  407f3c:	1b29      	subs	r1, r5, r4
  407f3e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  407f42:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407f46:	f021 010f 	bic.w	r1, r1, #15
  407f4a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407f4e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407f52:	db07      	blt.n	407f64 <_malloc_trim_r+0x3c>
  407f54:	2100      	movs	r1, #0
  407f56:	4630      	mov	r0, r6
  407f58:	f001 fc5a 	bl	409810 <_sbrk_r>
  407f5c:	68bb      	ldr	r3, [r7, #8]
  407f5e:	442b      	add	r3, r5
  407f60:	4298      	cmp	r0, r3
  407f62:	d004      	beq.n	407f6e <_malloc_trim_r+0x46>
  407f64:	4630      	mov	r0, r6
  407f66:	f000 ff53 	bl	408e10 <__malloc_unlock>
  407f6a:	2000      	movs	r0, #0
  407f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407f6e:	4261      	negs	r1, r4
  407f70:	4630      	mov	r0, r6
  407f72:	f001 fc4d 	bl	409810 <_sbrk_r>
  407f76:	3001      	adds	r0, #1
  407f78:	d00d      	beq.n	407f96 <_malloc_trim_r+0x6e>
  407f7a:	4b10      	ldr	r3, [pc, #64]	; (407fbc <_malloc_trim_r+0x94>)
  407f7c:	68ba      	ldr	r2, [r7, #8]
  407f7e:	6819      	ldr	r1, [r3, #0]
  407f80:	1b2d      	subs	r5, r5, r4
  407f82:	f045 0501 	orr.w	r5, r5, #1
  407f86:	4630      	mov	r0, r6
  407f88:	1b09      	subs	r1, r1, r4
  407f8a:	6055      	str	r5, [r2, #4]
  407f8c:	6019      	str	r1, [r3, #0]
  407f8e:	f000 ff3f 	bl	408e10 <__malloc_unlock>
  407f92:	2001      	movs	r0, #1
  407f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407f96:	2100      	movs	r1, #0
  407f98:	4630      	mov	r0, r6
  407f9a:	f001 fc39 	bl	409810 <_sbrk_r>
  407f9e:	68ba      	ldr	r2, [r7, #8]
  407fa0:	1a83      	subs	r3, r0, r2
  407fa2:	2b0f      	cmp	r3, #15
  407fa4:	ddde      	ble.n	407f64 <_malloc_trim_r+0x3c>
  407fa6:	4c06      	ldr	r4, [pc, #24]	; (407fc0 <_malloc_trim_r+0x98>)
  407fa8:	4904      	ldr	r1, [pc, #16]	; (407fbc <_malloc_trim_r+0x94>)
  407faa:	6824      	ldr	r4, [r4, #0]
  407fac:	f043 0301 	orr.w	r3, r3, #1
  407fb0:	1b00      	subs	r0, r0, r4
  407fb2:	6053      	str	r3, [r2, #4]
  407fb4:	6008      	str	r0, [r1, #0]
  407fb6:	e7d5      	b.n	407f64 <_malloc_trim_r+0x3c>
  407fb8:	204004a8 	.word	0x204004a8
  407fbc:	20401508 	.word	0x20401508
  407fc0:	204008b4 	.word	0x204008b4

00407fc4 <_free_r>:
  407fc4:	2900      	cmp	r1, #0
  407fc6:	d045      	beq.n	408054 <_free_r+0x90>
  407fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407fcc:	460d      	mov	r5, r1
  407fce:	4680      	mov	r8, r0
  407fd0:	f000 ff1c 	bl	408e0c <__malloc_lock>
  407fd4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407fd8:	496a      	ldr	r1, [pc, #424]	; (408184 <_free_r+0x1c0>)
  407fda:	f027 0301 	bic.w	r3, r7, #1
  407fde:	f1a5 0408 	sub.w	r4, r5, #8
  407fe2:	18e2      	adds	r2, r4, r3
  407fe4:	688e      	ldr	r6, [r1, #8]
  407fe6:	6850      	ldr	r0, [r2, #4]
  407fe8:	42b2      	cmp	r2, r6
  407fea:	f020 0003 	bic.w	r0, r0, #3
  407fee:	d062      	beq.n	4080b6 <_free_r+0xf2>
  407ff0:	07fe      	lsls	r6, r7, #31
  407ff2:	6050      	str	r0, [r2, #4]
  407ff4:	d40b      	bmi.n	40800e <_free_r+0x4a>
  407ff6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407ffa:	1be4      	subs	r4, r4, r7
  407ffc:	f101 0e08 	add.w	lr, r1, #8
  408000:	68a5      	ldr	r5, [r4, #8]
  408002:	4575      	cmp	r5, lr
  408004:	443b      	add	r3, r7
  408006:	d06f      	beq.n	4080e8 <_free_r+0x124>
  408008:	68e7      	ldr	r7, [r4, #12]
  40800a:	60ef      	str	r7, [r5, #12]
  40800c:	60bd      	str	r5, [r7, #8]
  40800e:	1815      	adds	r5, r2, r0
  408010:	686d      	ldr	r5, [r5, #4]
  408012:	07ed      	lsls	r5, r5, #31
  408014:	d542      	bpl.n	40809c <_free_r+0xd8>
  408016:	f043 0201 	orr.w	r2, r3, #1
  40801a:	6062      	str	r2, [r4, #4]
  40801c:	50e3      	str	r3, [r4, r3]
  40801e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408022:	d218      	bcs.n	408056 <_free_r+0x92>
  408024:	08db      	lsrs	r3, r3, #3
  408026:	1c5a      	adds	r2, r3, #1
  408028:	684d      	ldr	r5, [r1, #4]
  40802a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  40802e:	60a7      	str	r7, [r4, #8]
  408030:	2001      	movs	r0, #1
  408032:	109b      	asrs	r3, r3, #2
  408034:	fa00 f303 	lsl.w	r3, r0, r3
  408038:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  40803c:	431d      	orrs	r5, r3
  40803e:	3808      	subs	r0, #8
  408040:	60e0      	str	r0, [r4, #12]
  408042:	604d      	str	r5, [r1, #4]
  408044:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  408048:	60fc      	str	r4, [r7, #12]
  40804a:	4640      	mov	r0, r8
  40804c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408050:	f000 bede 	b.w	408e10 <__malloc_unlock>
  408054:	4770      	bx	lr
  408056:	0a5a      	lsrs	r2, r3, #9
  408058:	2a04      	cmp	r2, #4
  40805a:	d853      	bhi.n	408104 <_free_r+0x140>
  40805c:	099a      	lsrs	r2, r3, #6
  40805e:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408062:	007f      	lsls	r7, r7, #1
  408064:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408068:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  40806c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  408070:	4944      	ldr	r1, [pc, #272]	; (408184 <_free_r+0x1c0>)
  408072:	3808      	subs	r0, #8
  408074:	4290      	cmp	r0, r2
  408076:	d04d      	beq.n	408114 <_free_r+0x150>
  408078:	6851      	ldr	r1, [r2, #4]
  40807a:	f021 0103 	bic.w	r1, r1, #3
  40807e:	428b      	cmp	r3, r1
  408080:	d202      	bcs.n	408088 <_free_r+0xc4>
  408082:	6892      	ldr	r2, [r2, #8]
  408084:	4290      	cmp	r0, r2
  408086:	d1f7      	bne.n	408078 <_free_r+0xb4>
  408088:	68d0      	ldr	r0, [r2, #12]
  40808a:	60e0      	str	r0, [r4, #12]
  40808c:	60a2      	str	r2, [r4, #8]
  40808e:	6084      	str	r4, [r0, #8]
  408090:	60d4      	str	r4, [r2, #12]
  408092:	4640      	mov	r0, r8
  408094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408098:	f000 beba 	b.w	408e10 <__malloc_unlock>
  40809c:	6895      	ldr	r5, [r2, #8]
  40809e:	4f3a      	ldr	r7, [pc, #232]	; (408188 <_free_r+0x1c4>)
  4080a0:	42bd      	cmp	r5, r7
  4080a2:	4403      	add	r3, r0
  4080a4:	d03f      	beq.n	408126 <_free_r+0x162>
  4080a6:	68d0      	ldr	r0, [r2, #12]
  4080a8:	60e8      	str	r0, [r5, #12]
  4080aa:	f043 0201 	orr.w	r2, r3, #1
  4080ae:	6085      	str	r5, [r0, #8]
  4080b0:	6062      	str	r2, [r4, #4]
  4080b2:	50e3      	str	r3, [r4, r3]
  4080b4:	e7b3      	b.n	40801e <_free_r+0x5a>
  4080b6:	07ff      	lsls	r7, r7, #31
  4080b8:	4403      	add	r3, r0
  4080ba:	d407      	bmi.n	4080cc <_free_r+0x108>
  4080bc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4080c0:	1aa4      	subs	r4, r4, r2
  4080c2:	4413      	add	r3, r2
  4080c4:	68a0      	ldr	r0, [r4, #8]
  4080c6:	68e2      	ldr	r2, [r4, #12]
  4080c8:	60c2      	str	r2, [r0, #12]
  4080ca:	6090      	str	r0, [r2, #8]
  4080cc:	4a2f      	ldr	r2, [pc, #188]	; (40818c <_free_r+0x1c8>)
  4080ce:	6812      	ldr	r2, [r2, #0]
  4080d0:	f043 0001 	orr.w	r0, r3, #1
  4080d4:	4293      	cmp	r3, r2
  4080d6:	6060      	str	r0, [r4, #4]
  4080d8:	608c      	str	r4, [r1, #8]
  4080da:	d3b6      	bcc.n	40804a <_free_r+0x86>
  4080dc:	4b2c      	ldr	r3, [pc, #176]	; (408190 <_free_r+0x1cc>)
  4080de:	4640      	mov	r0, r8
  4080e0:	6819      	ldr	r1, [r3, #0]
  4080e2:	f7ff ff21 	bl	407f28 <_malloc_trim_r>
  4080e6:	e7b0      	b.n	40804a <_free_r+0x86>
  4080e8:	1811      	adds	r1, r2, r0
  4080ea:	6849      	ldr	r1, [r1, #4]
  4080ec:	07c9      	lsls	r1, r1, #31
  4080ee:	d444      	bmi.n	40817a <_free_r+0x1b6>
  4080f0:	6891      	ldr	r1, [r2, #8]
  4080f2:	68d2      	ldr	r2, [r2, #12]
  4080f4:	60ca      	str	r2, [r1, #12]
  4080f6:	4403      	add	r3, r0
  4080f8:	f043 0001 	orr.w	r0, r3, #1
  4080fc:	6091      	str	r1, [r2, #8]
  4080fe:	6060      	str	r0, [r4, #4]
  408100:	50e3      	str	r3, [r4, r3]
  408102:	e7a2      	b.n	40804a <_free_r+0x86>
  408104:	2a14      	cmp	r2, #20
  408106:	d817      	bhi.n	408138 <_free_r+0x174>
  408108:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40810c:	007f      	lsls	r7, r7, #1
  40810e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  408112:	e7a9      	b.n	408068 <_free_r+0xa4>
  408114:	10aa      	asrs	r2, r5, #2
  408116:	684b      	ldr	r3, [r1, #4]
  408118:	2501      	movs	r5, #1
  40811a:	fa05 f202 	lsl.w	r2, r5, r2
  40811e:	4313      	orrs	r3, r2
  408120:	604b      	str	r3, [r1, #4]
  408122:	4602      	mov	r2, r0
  408124:	e7b1      	b.n	40808a <_free_r+0xc6>
  408126:	f043 0201 	orr.w	r2, r3, #1
  40812a:	614c      	str	r4, [r1, #20]
  40812c:	610c      	str	r4, [r1, #16]
  40812e:	60e5      	str	r5, [r4, #12]
  408130:	60a5      	str	r5, [r4, #8]
  408132:	6062      	str	r2, [r4, #4]
  408134:	50e3      	str	r3, [r4, r3]
  408136:	e788      	b.n	40804a <_free_r+0x86>
  408138:	2a54      	cmp	r2, #84	; 0x54
  40813a:	d806      	bhi.n	40814a <_free_r+0x186>
  40813c:	0b1a      	lsrs	r2, r3, #12
  40813e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408142:	007f      	lsls	r7, r7, #1
  408144:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408148:	e78e      	b.n	408068 <_free_r+0xa4>
  40814a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40814e:	d806      	bhi.n	40815e <_free_r+0x19a>
  408150:	0bda      	lsrs	r2, r3, #15
  408152:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408156:	007f      	lsls	r7, r7, #1
  408158:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40815c:	e784      	b.n	408068 <_free_r+0xa4>
  40815e:	f240 5054 	movw	r0, #1364	; 0x554
  408162:	4282      	cmp	r2, r0
  408164:	d806      	bhi.n	408174 <_free_r+0x1b0>
  408166:	0c9a      	lsrs	r2, r3, #18
  408168:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40816c:	007f      	lsls	r7, r7, #1
  40816e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408172:	e779      	b.n	408068 <_free_r+0xa4>
  408174:	27fe      	movs	r7, #254	; 0xfe
  408176:	257e      	movs	r5, #126	; 0x7e
  408178:	e776      	b.n	408068 <_free_r+0xa4>
  40817a:	f043 0201 	orr.w	r2, r3, #1
  40817e:	6062      	str	r2, [r4, #4]
  408180:	50e3      	str	r3, [r4, r3]
  408182:	e762      	b.n	40804a <_free_r+0x86>
  408184:	204004a8 	.word	0x204004a8
  408188:	204004b0 	.word	0x204004b0
  40818c:	204008b0 	.word	0x204008b0
  408190:	20401504 	.word	0x20401504

00408194 <__sfvwrite_r>:
  408194:	6893      	ldr	r3, [r2, #8]
  408196:	2b00      	cmp	r3, #0
  408198:	d076      	beq.n	408288 <__sfvwrite_r+0xf4>
  40819a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40819e:	898b      	ldrh	r3, [r1, #12]
  4081a0:	b085      	sub	sp, #20
  4081a2:	460c      	mov	r4, r1
  4081a4:	0719      	lsls	r1, r3, #28
  4081a6:	9001      	str	r0, [sp, #4]
  4081a8:	4616      	mov	r6, r2
  4081aa:	d529      	bpl.n	408200 <__sfvwrite_r+0x6c>
  4081ac:	6922      	ldr	r2, [r4, #16]
  4081ae:	b33a      	cbz	r2, 408200 <__sfvwrite_r+0x6c>
  4081b0:	f003 0802 	and.w	r8, r3, #2
  4081b4:	fa1f f088 	uxth.w	r0, r8
  4081b8:	6835      	ldr	r5, [r6, #0]
  4081ba:	2800      	cmp	r0, #0
  4081bc:	d02f      	beq.n	40821e <__sfvwrite_r+0x8a>
  4081be:	f04f 0900 	mov.w	r9, #0
  4081c2:	4fb4      	ldr	r7, [pc, #720]	; (408494 <__sfvwrite_r+0x300>)
  4081c4:	46c8      	mov	r8, r9
  4081c6:	46b2      	mov	sl, r6
  4081c8:	45b8      	cmp	r8, r7
  4081ca:	4643      	mov	r3, r8
  4081cc:	464a      	mov	r2, r9
  4081ce:	bf28      	it	cs
  4081d0:	463b      	movcs	r3, r7
  4081d2:	9801      	ldr	r0, [sp, #4]
  4081d4:	f1b8 0f00 	cmp.w	r8, #0
  4081d8:	d050      	beq.n	40827c <__sfvwrite_r+0xe8>
  4081da:	69e1      	ldr	r1, [r4, #28]
  4081dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4081de:	47b0      	blx	r6
  4081e0:	2800      	cmp	r0, #0
  4081e2:	dd71      	ble.n	4082c8 <__sfvwrite_r+0x134>
  4081e4:	f8da 3008 	ldr.w	r3, [sl, #8]
  4081e8:	1a1b      	subs	r3, r3, r0
  4081ea:	4481      	add	r9, r0
  4081ec:	ebc0 0808 	rsb	r8, r0, r8
  4081f0:	f8ca 3008 	str.w	r3, [sl, #8]
  4081f4:	2b00      	cmp	r3, #0
  4081f6:	d1e7      	bne.n	4081c8 <__sfvwrite_r+0x34>
  4081f8:	2000      	movs	r0, #0
  4081fa:	b005      	add	sp, #20
  4081fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408200:	4621      	mov	r1, r4
  408202:	9801      	ldr	r0, [sp, #4]
  408204:	f7fe fca8 	bl	406b58 <__swsetup_r>
  408208:	2800      	cmp	r0, #0
  40820a:	f040 813a 	bne.w	408482 <__sfvwrite_r+0x2ee>
  40820e:	89a3      	ldrh	r3, [r4, #12]
  408210:	6835      	ldr	r5, [r6, #0]
  408212:	f003 0802 	and.w	r8, r3, #2
  408216:	fa1f f088 	uxth.w	r0, r8
  40821a:	2800      	cmp	r0, #0
  40821c:	d1cf      	bne.n	4081be <__sfvwrite_r+0x2a>
  40821e:	f013 0901 	ands.w	r9, r3, #1
  408222:	d15b      	bne.n	4082dc <__sfvwrite_r+0x148>
  408224:	464f      	mov	r7, r9
  408226:	9602      	str	r6, [sp, #8]
  408228:	b31f      	cbz	r7, 408272 <__sfvwrite_r+0xde>
  40822a:	059a      	lsls	r2, r3, #22
  40822c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408230:	d52c      	bpl.n	40828c <__sfvwrite_r+0xf8>
  408232:	4547      	cmp	r7, r8
  408234:	46c2      	mov	sl, r8
  408236:	f0c0 80a4 	bcc.w	408382 <__sfvwrite_r+0x1ee>
  40823a:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40823e:	f040 80b1 	bne.w	4083a4 <__sfvwrite_r+0x210>
  408242:	6820      	ldr	r0, [r4, #0]
  408244:	4652      	mov	r2, sl
  408246:	4649      	mov	r1, r9
  408248:	f000 fd7c 	bl	408d44 <memmove>
  40824c:	68a0      	ldr	r0, [r4, #8]
  40824e:	6823      	ldr	r3, [r4, #0]
  408250:	ebc8 0000 	rsb	r0, r8, r0
  408254:	4453      	add	r3, sl
  408256:	60a0      	str	r0, [r4, #8]
  408258:	6023      	str	r3, [r4, #0]
  40825a:	4638      	mov	r0, r7
  40825c:	9a02      	ldr	r2, [sp, #8]
  40825e:	6893      	ldr	r3, [r2, #8]
  408260:	1a1b      	subs	r3, r3, r0
  408262:	4481      	add	r9, r0
  408264:	1a3f      	subs	r7, r7, r0
  408266:	6093      	str	r3, [r2, #8]
  408268:	2b00      	cmp	r3, #0
  40826a:	d0c5      	beq.n	4081f8 <__sfvwrite_r+0x64>
  40826c:	89a3      	ldrh	r3, [r4, #12]
  40826e:	2f00      	cmp	r7, #0
  408270:	d1db      	bne.n	40822a <__sfvwrite_r+0x96>
  408272:	f8d5 9000 	ldr.w	r9, [r5]
  408276:	686f      	ldr	r7, [r5, #4]
  408278:	3508      	adds	r5, #8
  40827a:	e7d5      	b.n	408228 <__sfvwrite_r+0x94>
  40827c:	f8d5 9000 	ldr.w	r9, [r5]
  408280:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408284:	3508      	adds	r5, #8
  408286:	e79f      	b.n	4081c8 <__sfvwrite_r+0x34>
  408288:	2000      	movs	r0, #0
  40828a:	4770      	bx	lr
  40828c:	6820      	ldr	r0, [r4, #0]
  40828e:	6923      	ldr	r3, [r4, #16]
  408290:	4298      	cmp	r0, r3
  408292:	d803      	bhi.n	40829c <__sfvwrite_r+0x108>
  408294:	6961      	ldr	r1, [r4, #20]
  408296:	428f      	cmp	r7, r1
  408298:	f080 80b7 	bcs.w	40840a <__sfvwrite_r+0x276>
  40829c:	45b8      	cmp	r8, r7
  40829e:	bf28      	it	cs
  4082a0:	46b8      	movcs	r8, r7
  4082a2:	4642      	mov	r2, r8
  4082a4:	4649      	mov	r1, r9
  4082a6:	f000 fd4d 	bl	408d44 <memmove>
  4082aa:	68a3      	ldr	r3, [r4, #8]
  4082ac:	6822      	ldr	r2, [r4, #0]
  4082ae:	ebc8 0303 	rsb	r3, r8, r3
  4082b2:	4442      	add	r2, r8
  4082b4:	60a3      	str	r3, [r4, #8]
  4082b6:	6022      	str	r2, [r4, #0]
  4082b8:	2b00      	cmp	r3, #0
  4082ba:	d149      	bne.n	408350 <__sfvwrite_r+0x1bc>
  4082bc:	4621      	mov	r1, r4
  4082be:	9801      	ldr	r0, [sp, #4]
  4082c0:	f7ff fd22 	bl	407d08 <_fflush_r>
  4082c4:	2800      	cmp	r0, #0
  4082c6:	d043      	beq.n	408350 <__sfvwrite_r+0x1bc>
  4082c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4082cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4082d0:	f04f 30ff 	mov.w	r0, #4294967295
  4082d4:	81a3      	strh	r3, [r4, #12]
  4082d6:	b005      	add	sp, #20
  4082d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4082dc:	4680      	mov	r8, r0
  4082de:	9002      	str	r0, [sp, #8]
  4082e0:	4682      	mov	sl, r0
  4082e2:	4681      	mov	r9, r0
  4082e4:	f1b9 0f00 	cmp.w	r9, #0
  4082e8:	d02a      	beq.n	408340 <__sfvwrite_r+0x1ac>
  4082ea:	9b02      	ldr	r3, [sp, #8]
  4082ec:	2b00      	cmp	r3, #0
  4082ee:	d04c      	beq.n	40838a <__sfvwrite_r+0x1f6>
  4082f0:	6820      	ldr	r0, [r4, #0]
  4082f2:	6923      	ldr	r3, [r4, #16]
  4082f4:	6962      	ldr	r2, [r4, #20]
  4082f6:	45c8      	cmp	r8, r9
  4082f8:	46c3      	mov	fp, r8
  4082fa:	bf28      	it	cs
  4082fc:	46cb      	movcs	fp, r9
  4082fe:	4298      	cmp	r0, r3
  408300:	465f      	mov	r7, fp
  408302:	d904      	bls.n	40830e <__sfvwrite_r+0x17a>
  408304:	68a3      	ldr	r3, [r4, #8]
  408306:	4413      	add	r3, r2
  408308:	459b      	cmp	fp, r3
  40830a:	f300 8090 	bgt.w	40842e <__sfvwrite_r+0x29a>
  40830e:	4593      	cmp	fp, r2
  408310:	db20      	blt.n	408354 <__sfvwrite_r+0x1c0>
  408312:	4613      	mov	r3, r2
  408314:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408316:	69e1      	ldr	r1, [r4, #28]
  408318:	9801      	ldr	r0, [sp, #4]
  40831a:	4652      	mov	r2, sl
  40831c:	47b8      	blx	r7
  40831e:	1e07      	subs	r7, r0, #0
  408320:	ddd2      	ble.n	4082c8 <__sfvwrite_r+0x134>
  408322:	ebb8 0807 	subs.w	r8, r8, r7
  408326:	d023      	beq.n	408370 <__sfvwrite_r+0x1dc>
  408328:	68b3      	ldr	r3, [r6, #8]
  40832a:	1bdb      	subs	r3, r3, r7
  40832c:	44ba      	add	sl, r7
  40832e:	ebc7 0909 	rsb	r9, r7, r9
  408332:	60b3      	str	r3, [r6, #8]
  408334:	2b00      	cmp	r3, #0
  408336:	f43f af5f 	beq.w	4081f8 <__sfvwrite_r+0x64>
  40833a:	f1b9 0f00 	cmp.w	r9, #0
  40833e:	d1d4      	bne.n	4082ea <__sfvwrite_r+0x156>
  408340:	2300      	movs	r3, #0
  408342:	f8d5 a000 	ldr.w	sl, [r5]
  408346:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40834a:	9302      	str	r3, [sp, #8]
  40834c:	3508      	adds	r5, #8
  40834e:	e7c9      	b.n	4082e4 <__sfvwrite_r+0x150>
  408350:	4640      	mov	r0, r8
  408352:	e783      	b.n	40825c <__sfvwrite_r+0xc8>
  408354:	465a      	mov	r2, fp
  408356:	4651      	mov	r1, sl
  408358:	f000 fcf4 	bl	408d44 <memmove>
  40835c:	68a2      	ldr	r2, [r4, #8]
  40835e:	6823      	ldr	r3, [r4, #0]
  408360:	ebcb 0202 	rsb	r2, fp, r2
  408364:	445b      	add	r3, fp
  408366:	ebb8 0807 	subs.w	r8, r8, r7
  40836a:	60a2      	str	r2, [r4, #8]
  40836c:	6023      	str	r3, [r4, #0]
  40836e:	d1db      	bne.n	408328 <__sfvwrite_r+0x194>
  408370:	4621      	mov	r1, r4
  408372:	9801      	ldr	r0, [sp, #4]
  408374:	f7ff fcc8 	bl	407d08 <_fflush_r>
  408378:	2800      	cmp	r0, #0
  40837a:	d1a5      	bne.n	4082c8 <__sfvwrite_r+0x134>
  40837c:	f8cd 8008 	str.w	r8, [sp, #8]
  408380:	e7d2      	b.n	408328 <__sfvwrite_r+0x194>
  408382:	6820      	ldr	r0, [r4, #0]
  408384:	46b8      	mov	r8, r7
  408386:	46ba      	mov	sl, r7
  408388:	e75c      	b.n	408244 <__sfvwrite_r+0xb0>
  40838a:	464a      	mov	r2, r9
  40838c:	210a      	movs	r1, #10
  40838e:	4650      	mov	r0, sl
  408390:	f000 fbee 	bl	408b70 <memchr>
  408394:	2800      	cmp	r0, #0
  408396:	d06f      	beq.n	408478 <__sfvwrite_r+0x2e4>
  408398:	3001      	adds	r0, #1
  40839a:	2301      	movs	r3, #1
  40839c:	ebca 0800 	rsb	r8, sl, r0
  4083a0:	9302      	str	r3, [sp, #8]
  4083a2:	e7a5      	b.n	4082f0 <__sfvwrite_r+0x15c>
  4083a4:	6962      	ldr	r2, [r4, #20]
  4083a6:	6820      	ldr	r0, [r4, #0]
  4083a8:	6921      	ldr	r1, [r4, #16]
  4083aa:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4083ae:	ebc1 0a00 	rsb	sl, r1, r0
  4083b2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4083b6:	f10a 0001 	add.w	r0, sl, #1
  4083ba:	ea4f 0868 	mov.w	r8, r8, asr #1
  4083be:	4438      	add	r0, r7
  4083c0:	4540      	cmp	r0, r8
  4083c2:	4642      	mov	r2, r8
  4083c4:	bf84      	itt	hi
  4083c6:	4680      	movhi	r8, r0
  4083c8:	4642      	movhi	r2, r8
  4083ca:	055b      	lsls	r3, r3, #21
  4083cc:	d542      	bpl.n	408454 <__sfvwrite_r+0x2c0>
  4083ce:	4611      	mov	r1, r2
  4083d0:	9801      	ldr	r0, [sp, #4]
  4083d2:	f000 f915 	bl	408600 <_malloc_r>
  4083d6:	4683      	mov	fp, r0
  4083d8:	2800      	cmp	r0, #0
  4083da:	d055      	beq.n	408488 <__sfvwrite_r+0x2f4>
  4083dc:	4652      	mov	r2, sl
  4083de:	6921      	ldr	r1, [r4, #16]
  4083e0:	f000 fc16 	bl	408c10 <memcpy>
  4083e4:	89a3      	ldrh	r3, [r4, #12]
  4083e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4083ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4083ee:	81a3      	strh	r3, [r4, #12]
  4083f0:	ebca 0308 	rsb	r3, sl, r8
  4083f4:	eb0b 000a 	add.w	r0, fp, sl
  4083f8:	f8c4 8014 	str.w	r8, [r4, #20]
  4083fc:	f8c4 b010 	str.w	fp, [r4, #16]
  408400:	6020      	str	r0, [r4, #0]
  408402:	60a3      	str	r3, [r4, #8]
  408404:	46b8      	mov	r8, r7
  408406:	46ba      	mov	sl, r7
  408408:	e71c      	b.n	408244 <__sfvwrite_r+0xb0>
  40840a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40840e:	42bb      	cmp	r3, r7
  408410:	bf28      	it	cs
  408412:	463b      	movcs	r3, r7
  408414:	464a      	mov	r2, r9
  408416:	fb93 f3f1 	sdiv	r3, r3, r1
  40841a:	9801      	ldr	r0, [sp, #4]
  40841c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40841e:	fb01 f303 	mul.w	r3, r1, r3
  408422:	69e1      	ldr	r1, [r4, #28]
  408424:	47b0      	blx	r6
  408426:	2800      	cmp	r0, #0
  408428:	f73f af18 	bgt.w	40825c <__sfvwrite_r+0xc8>
  40842c:	e74c      	b.n	4082c8 <__sfvwrite_r+0x134>
  40842e:	461a      	mov	r2, r3
  408430:	4651      	mov	r1, sl
  408432:	9303      	str	r3, [sp, #12]
  408434:	f000 fc86 	bl	408d44 <memmove>
  408438:	6822      	ldr	r2, [r4, #0]
  40843a:	9b03      	ldr	r3, [sp, #12]
  40843c:	9801      	ldr	r0, [sp, #4]
  40843e:	441a      	add	r2, r3
  408440:	6022      	str	r2, [r4, #0]
  408442:	4621      	mov	r1, r4
  408444:	f7ff fc60 	bl	407d08 <_fflush_r>
  408448:	9b03      	ldr	r3, [sp, #12]
  40844a:	2800      	cmp	r0, #0
  40844c:	f47f af3c 	bne.w	4082c8 <__sfvwrite_r+0x134>
  408450:	461f      	mov	r7, r3
  408452:	e766      	b.n	408322 <__sfvwrite_r+0x18e>
  408454:	9801      	ldr	r0, [sp, #4]
  408456:	f000 ffeb 	bl	409430 <_realloc_r>
  40845a:	4683      	mov	fp, r0
  40845c:	2800      	cmp	r0, #0
  40845e:	d1c7      	bne.n	4083f0 <__sfvwrite_r+0x25c>
  408460:	9d01      	ldr	r5, [sp, #4]
  408462:	6921      	ldr	r1, [r4, #16]
  408464:	4628      	mov	r0, r5
  408466:	f7ff fdad 	bl	407fc4 <_free_r>
  40846a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40846e:	220c      	movs	r2, #12
  408470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408474:	602a      	str	r2, [r5, #0]
  408476:	e729      	b.n	4082cc <__sfvwrite_r+0x138>
  408478:	2301      	movs	r3, #1
  40847a:	f109 0801 	add.w	r8, r9, #1
  40847e:	9302      	str	r3, [sp, #8]
  408480:	e736      	b.n	4082f0 <__sfvwrite_r+0x15c>
  408482:	f04f 30ff 	mov.w	r0, #4294967295
  408486:	e6b8      	b.n	4081fa <__sfvwrite_r+0x66>
  408488:	9a01      	ldr	r2, [sp, #4]
  40848a:	230c      	movs	r3, #12
  40848c:	6013      	str	r3, [r2, #0]
  40848e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408492:	e71b      	b.n	4082cc <__sfvwrite_r+0x138>
  408494:	7ffffc00 	.word	0x7ffffc00

00408498 <_fwalk_reent>:
  408498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40849c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4084a0:	d01f      	beq.n	4084e2 <_fwalk_reent+0x4a>
  4084a2:	4688      	mov	r8, r1
  4084a4:	4606      	mov	r6, r0
  4084a6:	f04f 0900 	mov.w	r9, #0
  4084aa:	687d      	ldr	r5, [r7, #4]
  4084ac:	68bc      	ldr	r4, [r7, #8]
  4084ae:	3d01      	subs	r5, #1
  4084b0:	d411      	bmi.n	4084d6 <_fwalk_reent+0x3e>
  4084b2:	89a3      	ldrh	r3, [r4, #12]
  4084b4:	2b01      	cmp	r3, #1
  4084b6:	f105 35ff 	add.w	r5, r5, #4294967295
  4084ba:	d908      	bls.n	4084ce <_fwalk_reent+0x36>
  4084bc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4084c0:	3301      	adds	r3, #1
  4084c2:	4621      	mov	r1, r4
  4084c4:	4630      	mov	r0, r6
  4084c6:	d002      	beq.n	4084ce <_fwalk_reent+0x36>
  4084c8:	47c0      	blx	r8
  4084ca:	ea49 0900 	orr.w	r9, r9, r0
  4084ce:	1c6b      	adds	r3, r5, #1
  4084d0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4084d4:	d1ed      	bne.n	4084b2 <_fwalk_reent+0x1a>
  4084d6:	683f      	ldr	r7, [r7, #0]
  4084d8:	2f00      	cmp	r7, #0
  4084da:	d1e6      	bne.n	4084aa <_fwalk_reent+0x12>
  4084dc:	4648      	mov	r0, r9
  4084de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4084e2:	46b9      	mov	r9, r7
  4084e4:	4648      	mov	r0, r9
  4084e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4084ea:	bf00      	nop

004084ec <__locale_charset>:
  4084ec:	4800      	ldr	r0, [pc, #0]	; (4084f0 <__locale_charset+0x4>)
  4084ee:	4770      	bx	lr
  4084f0:	20400484 	.word	0x20400484

004084f4 <__locale_mb_cur_max>:
  4084f4:	4b01      	ldr	r3, [pc, #4]	; (4084fc <__locale_mb_cur_max+0x8>)
  4084f6:	6818      	ldr	r0, [r3, #0]
  4084f8:	4770      	bx	lr
  4084fa:	bf00      	nop
  4084fc:	204004a4 	.word	0x204004a4

00408500 <_localeconv_r>:
  408500:	4800      	ldr	r0, [pc, #0]	; (408504 <_localeconv_r+0x4>)
  408502:	4770      	bx	lr
  408504:	2040044c 	.word	0x2040044c

00408508 <__swhatbuf_r>:
  408508:	b570      	push	{r4, r5, r6, lr}
  40850a:	460d      	mov	r5, r1
  40850c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408510:	2900      	cmp	r1, #0
  408512:	b090      	sub	sp, #64	; 0x40
  408514:	4614      	mov	r4, r2
  408516:	461e      	mov	r6, r3
  408518:	db14      	blt.n	408544 <__swhatbuf_r+0x3c>
  40851a:	aa01      	add	r2, sp, #4
  40851c:	f001 fbc8 	bl	409cb0 <_fstat_r>
  408520:	2800      	cmp	r0, #0
  408522:	db0f      	blt.n	408544 <__swhatbuf_r+0x3c>
  408524:	9a02      	ldr	r2, [sp, #8]
  408526:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40852a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40852e:	fab2 f282 	clz	r2, r2
  408532:	0952      	lsrs	r2, r2, #5
  408534:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408538:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40853c:	6032      	str	r2, [r6, #0]
  40853e:	6023      	str	r3, [r4, #0]
  408540:	b010      	add	sp, #64	; 0x40
  408542:	bd70      	pop	{r4, r5, r6, pc}
  408544:	89a8      	ldrh	r0, [r5, #12]
  408546:	f000 0080 	and.w	r0, r0, #128	; 0x80
  40854a:	b282      	uxth	r2, r0
  40854c:	2000      	movs	r0, #0
  40854e:	6030      	str	r0, [r6, #0]
  408550:	b11a      	cbz	r2, 40855a <__swhatbuf_r+0x52>
  408552:	2340      	movs	r3, #64	; 0x40
  408554:	6023      	str	r3, [r4, #0]
  408556:	b010      	add	sp, #64	; 0x40
  408558:	bd70      	pop	{r4, r5, r6, pc}
  40855a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40855e:	4610      	mov	r0, r2
  408560:	6023      	str	r3, [r4, #0]
  408562:	b010      	add	sp, #64	; 0x40
  408564:	bd70      	pop	{r4, r5, r6, pc}
  408566:	bf00      	nop

00408568 <__smakebuf_r>:
  408568:	898a      	ldrh	r2, [r1, #12]
  40856a:	0792      	lsls	r2, r2, #30
  40856c:	460b      	mov	r3, r1
  40856e:	d506      	bpl.n	40857e <__smakebuf_r+0x16>
  408570:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408574:	2101      	movs	r1, #1
  408576:	601a      	str	r2, [r3, #0]
  408578:	611a      	str	r2, [r3, #16]
  40857a:	6159      	str	r1, [r3, #20]
  40857c:	4770      	bx	lr
  40857e:	b5f0      	push	{r4, r5, r6, r7, lr}
  408580:	b083      	sub	sp, #12
  408582:	ab01      	add	r3, sp, #4
  408584:	466a      	mov	r2, sp
  408586:	460c      	mov	r4, r1
  408588:	4605      	mov	r5, r0
  40858a:	f7ff ffbd 	bl	408508 <__swhatbuf_r>
  40858e:	9900      	ldr	r1, [sp, #0]
  408590:	4606      	mov	r6, r0
  408592:	4628      	mov	r0, r5
  408594:	f000 f834 	bl	408600 <_malloc_r>
  408598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40859c:	b1d0      	cbz	r0, 4085d4 <__smakebuf_r+0x6c>
  40859e:	9a01      	ldr	r2, [sp, #4]
  4085a0:	4f12      	ldr	r7, [pc, #72]	; (4085ec <__smakebuf_r+0x84>)
  4085a2:	9900      	ldr	r1, [sp, #0]
  4085a4:	63ef      	str	r7, [r5, #60]	; 0x3c
  4085a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4085aa:	81a3      	strh	r3, [r4, #12]
  4085ac:	6020      	str	r0, [r4, #0]
  4085ae:	6120      	str	r0, [r4, #16]
  4085b0:	6161      	str	r1, [r4, #20]
  4085b2:	b91a      	cbnz	r2, 4085bc <__smakebuf_r+0x54>
  4085b4:	4333      	orrs	r3, r6
  4085b6:	81a3      	strh	r3, [r4, #12]
  4085b8:	b003      	add	sp, #12
  4085ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4085bc:	4628      	mov	r0, r5
  4085be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4085c2:	f001 fb89 	bl	409cd8 <_isatty_r>
  4085c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4085ca:	2800      	cmp	r0, #0
  4085cc:	d0f2      	beq.n	4085b4 <__smakebuf_r+0x4c>
  4085ce:	f043 0301 	orr.w	r3, r3, #1
  4085d2:	e7ef      	b.n	4085b4 <__smakebuf_r+0x4c>
  4085d4:	059a      	lsls	r2, r3, #22
  4085d6:	d4ef      	bmi.n	4085b8 <__smakebuf_r+0x50>
  4085d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4085dc:	f043 0302 	orr.w	r3, r3, #2
  4085e0:	2101      	movs	r1, #1
  4085e2:	81a3      	strh	r3, [r4, #12]
  4085e4:	6022      	str	r2, [r4, #0]
  4085e6:	6122      	str	r2, [r4, #16]
  4085e8:	6161      	str	r1, [r4, #20]
  4085ea:	e7e5      	b.n	4085b8 <__smakebuf_r+0x50>
  4085ec:	00407d35 	.word	0x00407d35

004085f0 <malloc>:
  4085f0:	4b02      	ldr	r3, [pc, #8]	; (4085fc <malloc+0xc>)
  4085f2:	4601      	mov	r1, r0
  4085f4:	6818      	ldr	r0, [r3, #0]
  4085f6:	f000 b803 	b.w	408600 <_malloc_r>
  4085fa:	bf00      	nop
  4085fc:	20400448 	.word	0x20400448

00408600 <_malloc_r>:
  408600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408604:	f101 050b 	add.w	r5, r1, #11
  408608:	2d16      	cmp	r5, #22
  40860a:	b083      	sub	sp, #12
  40860c:	4606      	mov	r6, r0
  40860e:	f240 809f 	bls.w	408750 <_malloc_r+0x150>
  408612:	f035 0507 	bics.w	r5, r5, #7
  408616:	f100 80bf 	bmi.w	408798 <_malloc_r+0x198>
  40861a:	42a9      	cmp	r1, r5
  40861c:	f200 80bc 	bhi.w	408798 <_malloc_r+0x198>
  408620:	f000 fbf4 	bl	408e0c <__malloc_lock>
  408624:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  408628:	f0c0 829c 	bcc.w	408b64 <_malloc_r+0x564>
  40862c:	0a6b      	lsrs	r3, r5, #9
  40862e:	f000 80ba 	beq.w	4087a6 <_malloc_r+0x1a6>
  408632:	2b04      	cmp	r3, #4
  408634:	f200 8183 	bhi.w	40893e <_malloc_r+0x33e>
  408638:	09a8      	lsrs	r0, r5, #6
  40863a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40863e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408642:	3038      	adds	r0, #56	; 0x38
  408644:	4fc4      	ldr	r7, [pc, #784]	; (408958 <_malloc_r+0x358>)
  408646:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40864a:	f1a3 0108 	sub.w	r1, r3, #8
  40864e:	685c      	ldr	r4, [r3, #4]
  408650:	42a1      	cmp	r1, r4
  408652:	d107      	bne.n	408664 <_malloc_r+0x64>
  408654:	e0ac      	b.n	4087b0 <_malloc_r+0x1b0>
  408656:	2a00      	cmp	r2, #0
  408658:	f280 80ac 	bge.w	4087b4 <_malloc_r+0x1b4>
  40865c:	68e4      	ldr	r4, [r4, #12]
  40865e:	42a1      	cmp	r1, r4
  408660:	f000 80a6 	beq.w	4087b0 <_malloc_r+0x1b0>
  408664:	6863      	ldr	r3, [r4, #4]
  408666:	f023 0303 	bic.w	r3, r3, #3
  40866a:	1b5a      	subs	r2, r3, r5
  40866c:	2a0f      	cmp	r2, #15
  40866e:	ddf2      	ble.n	408656 <_malloc_r+0x56>
  408670:	49b9      	ldr	r1, [pc, #740]	; (408958 <_malloc_r+0x358>)
  408672:	693c      	ldr	r4, [r7, #16]
  408674:	f101 0e08 	add.w	lr, r1, #8
  408678:	4574      	cmp	r4, lr
  40867a:	f000 81b3 	beq.w	4089e4 <_malloc_r+0x3e4>
  40867e:	6863      	ldr	r3, [r4, #4]
  408680:	f023 0303 	bic.w	r3, r3, #3
  408684:	1b5a      	subs	r2, r3, r5
  408686:	2a0f      	cmp	r2, #15
  408688:	f300 8199 	bgt.w	4089be <_malloc_r+0x3be>
  40868c:	2a00      	cmp	r2, #0
  40868e:	f8c1 e014 	str.w	lr, [r1, #20]
  408692:	f8c1 e010 	str.w	lr, [r1, #16]
  408696:	f280 809e 	bge.w	4087d6 <_malloc_r+0x1d6>
  40869a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40869e:	f080 8167 	bcs.w	408970 <_malloc_r+0x370>
  4086a2:	08db      	lsrs	r3, r3, #3
  4086a4:	f103 0c01 	add.w	ip, r3, #1
  4086a8:	2201      	movs	r2, #1
  4086aa:	109b      	asrs	r3, r3, #2
  4086ac:	fa02 f303 	lsl.w	r3, r2, r3
  4086b0:	684a      	ldr	r2, [r1, #4]
  4086b2:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4086b6:	f8c4 8008 	str.w	r8, [r4, #8]
  4086ba:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  4086be:	431a      	orrs	r2, r3
  4086c0:	f1a9 0308 	sub.w	r3, r9, #8
  4086c4:	60e3      	str	r3, [r4, #12]
  4086c6:	604a      	str	r2, [r1, #4]
  4086c8:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  4086cc:	f8c8 400c 	str.w	r4, [r8, #12]
  4086d0:	1083      	asrs	r3, r0, #2
  4086d2:	2401      	movs	r4, #1
  4086d4:	409c      	lsls	r4, r3
  4086d6:	4294      	cmp	r4, r2
  4086d8:	f200 808a 	bhi.w	4087f0 <_malloc_r+0x1f0>
  4086dc:	4214      	tst	r4, r2
  4086de:	d106      	bne.n	4086ee <_malloc_r+0xee>
  4086e0:	f020 0003 	bic.w	r0, r0, #3
  4086e4:	0064      	lsls	r4, r4, #1
  4086e6:	4214      	tst	r4, r2
  4086e8:	f100 0004 	add.w	r0, r0, #4
  4086ec:	d0fa      	beq.n	4086e4 <_malloc_r+0xe4>
  4086ee:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4086f2:	46cc      	mov	ip, r9
  4086f4:	4680      	mov	r8, r0
  4086f6:	f8dc 100c 	ldr.w	r1, [ip, #12]
  4086fa:	458c      	cmp	ip, r1
  4086fc:	d107      	bne.n	40870e <_malloc_r+0x10e>
  4086fe:	e173      	b.n	4089e8 <_malloc_r+0x3e8>
  408700:	2a00      	cmp	r2, #0
  408702:	f280 8181 	bge.w	408a08 <_malloc_r+0x408>
  408706:	68c9      	ldr	r1, [r1, #12]
  408708:	458c      	cmp	ip, r1
  40870a:	f000 816d 	beq.w	4089e8 <_malloc_r+0x3e8>
  40870e:	684b      	ldr	r3, [r1, #4]
  408710:	f023 0303 	bic.w	r3, r3, #3
  408714:	1b5a      	subs	r2, r3, r5
  408716:	2a0f      	cmp	r2, #15
  408718:	ddf2      	ble.n	408700 <_malloc_r+0x100>
  40871a:	460c      	mov	r4, r1
  40871c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  408720:	f854 8f08 	ldr.w	r8, [r4, #8]!
  408724:	194b      	adds	r3, r1, r5
  408726:	f045 0501 	orr.w	r5, r5, #1
  40872a:	604d      	str	r5, [r1, #4]
  40872c:	f042 0101 	orr.w	r1, r2, #1
  408730:	f8c8 c00c 	str.w	ip, [r8, #12]
  408734:	4630      	mov	r0, r6
  408736:	f8cc 8008 	str.w	r8, [ip, #8]
  40873a:	617b      	str	r3, [r7, #20]
  40873c:	613b      	str	r3, [r7, #16]
  40873e:	f8c3 e00c 	str.w	lr, [r3, #12]
  408742:	f8c3 e008 	str.w	lr, [r3, #8]
  408746:	6059      	str	r1, [r3, #4]
  408748:	509a      	str	r2, [r3, r2]
  40874a:	f000 fb61 	bl	408e10 <__malloc_unlock>
  40874e:	e01f      	b.n	408790 <_malloc_r+0x190>
  408750:	2910      	cmp	r1, #16
  408752:	d821      	bhi.n	408798 <_malloc_r+0x198>
  408754:	f000 fb5a 	bl	408e0c <__malloc_lock>
  408758:	2510      	movs	r5, #16
  40875a:	2306      	movs	r3, #6
  40875c:	2002      	movs	r0, #2
  40875e:	4f7e      	ldr	r7, [pc, #504]	; (408958 <_malloc_r+0x358>)
  408760:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  408764:	f1a3 0208 	sub.w	r2, r3, #8
  408768:	685c      	ldr	r4, [r3, #4]
  40876a:	4294      	cmp	r4, r2
  40876c:	f000 8145 	beq.w	4089fa <_malloc_r+0x3fa>
  408770:	6863      	ldr	r3, [r4, #4]
  408772:	68e1      	ldr	r1, [r4, #12]
  408774:	68a5      	ldr	r5, [r4, #8]
  408776:	f023 0303 	bic.w	r3, r3, #3
  40877a:	4423      	add	r3, r4
  40877c:	4630      	mov	r0, r6
  40877e:	685a      	ldr	r2, [r3, #4]
  408780:	60e9      	str	r1, [r5, #12]
  408782:	f042 0201 	orr.w	r2, r2, #1
  408786:	608d      	str	r5, [r1, #8]
  408788:	605a      	str	r2, [r3, #4]
  40878a:	f000 fb41 	bl	408e10 <__malloc_unlock>
  40878e:	3408      	adds	r4, #8
  408790:	4620      	mov	r0, r4
  408792:	b003      	add	sp, #12
  408794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408798:	2400      	movs	r4, #0
  40879a:	230c      	movs	r3, #12
  40879c:	4620      	mov	r0, r4
  40879e:	6033      	str	r3, [r6, #0]
  4087a0:	b003      	add	sp, #12
  4087a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4087a6:	2380      	movs	r3, #128	; 0x80
  4087a8:	f04f 0e40 	mov.w	lr, #64	; 0x40
  4087ac:	203f      	movs	r0, #63	; 0x3f
  4087ae:	e749      	b.n	408644 <_malloc_r+0x44>
  4087b0:	4670      	mov	r0, lr
  4087b2:	e75d      	b.n	408670 <_malloc_r+0x70>
  4087b4:	4423      	add	r3, r4
  4087b6:	68e1      	ldr	r1, [r4, #12]
  4087b8:	685a      	ldr	r2, [r3, #4]
  4087ba:	68a5      	ldr	r5, [r4, #8]
  4087bc:	f042 0201 	orr.w	r2, r2, #1
  4087c0:	60e9      	str	r1, [r5, #12]
  4087c2:	4630      	mov	r0, r6
  4087c4:	608d      	str	r5, [r1, #8]
  4087c6:	605a      	str	r2, [r3, #4]
  4087c8:	f000 fb22 	bl	408e10 <__malloc_unlock>
  4087cc:	3408      	adds	r4, #8
  4087ce:	4620      	mov	r0, r4
  4087d0:	b003      	add	sp, #12
  4087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4087d6:	4423      	add	r3, r4
  4087d8:	4630      	mov	r0, r6
  4087da:	685a      	ldr	r2, [r3, #4]
  4087dc:	f042 0201 	orr.w	r2, r2, #1
  4087e0:	605a      	str	r2, [r3, #4]
  4087e2:	f000 fb15 	bl	408e10 <__malloc_unlock>
  4087e6:	3408      	adds	r4, #8
  4087e8:	4620      	mov	r0, r4
  4087ea:	b003      	add	sp, #12
  4087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4087f0:	68bc      	ldr	r4, [r7, #8]
  4087f2:	6863      	ldr	r3, [r4, #4]
  4087f4:	f023 0803 	bic.w	r8, r3, #3
  4087f8:	45a8      	cmp	r8, r5
  4087fa:	d304      	bcc.n	408806 <_malloc_r+0x206>
  4087fc:	ebc5 0308 	rsb	r3, r5, r8
  408800:	2b0f      	cmp	r3, #15
  408802:	f300 808c 	bgt.w	40891e <_malloc_r+0x31e>
  408806:	4b55      	ldr	r3, [pc, #340]	; (40895c <_malloc_r+0x35c>)
  408808:	f8df 9160 	ldr.w	r9, [pc, #352]	; 40896c <_malloc_r+0x36c>
  40880c:	681a      	ldr	r2, [r3, #0]
  40880e:	f8d9 3000 	ldr.w	r3, [r9]
  408812:	3301      	adds	r3, #1
  408814:	442a      	add	r2, r5
  408816:	eb04 0a08 	add.w	sl, r4, r8
  40881a:	f000 8160 	beq.w	408ade <_malloc_r+0x4de>
  40881e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  408822:	320f      	adds	r2, #15
  408824:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  408828:	f022 020f 	bic.w	r2, r2, #15
  40882c:	4611      	mov	r1, r2
  40882e:	4630      	mov	r0, r6
  408830:	9201      	str	r2, [sp, #4]
  408832:	f000 ffed 	bl	409810 <_sbrk_r>
  408836:	f1b0 3fff 	cmp.w	r0, #4294967295
  40883a:	4683      	mov	fp, r0
  40883c:	9a01      	ldr	r2, [sp, #4]
  40883e:	f000 8158 	beq.w	408af2 <_malloc_r+0x4f2>
  408842:	4582      	cmp	sl, r0
  408844:	f200 80fc 	bhi.w	408a40 <_malloc_r+0x440>
  408848:	4b45      	ldr	r3, [pc, #276]	; (408960 <_malloc_r+0x360>)
  40884a:	6819      	ldr	r1, [r3, #0]
  40884c:	45da      	cmp	sl, fp
  40884e:	4411      	add	r1, r2
  408850:	6019      	str	r1, [r3, #0]
  408852:	f000 8153 	beq.w	408afc <_malloc_r+0x4fc>
  408856:	f8d9 0000 	ldr.w	r0, [r9]
  40885a:	f8df e110 	ldr.w	lr, [pc, #272]	; 40896c <_malloc_r+0x36c>
  40885e:	3001      	adds	r0, #1
  408860:	bf1b      	ittet	ne
  408862:	ebca 0a0b 	rsbne	sl, sl, fp
  408866:	4451      	addne	r1, sl
  408868:	f8ce b000 	streq.w	fp, [lr]
  40886c:	6019      	strne	r1, [r3, #0]
  40886e:	f01b 0107 	ands.w	r1, fp, #7
  408872:	f000 8117 	beq.w	408aa4 <_malloc_r+0x4a4>
  408876:	f1c1 0008 	rsb	r0, r1, #8
  40887a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40887e:	4483      	add	fp, r0
  408880:	3108      	adds	r1, #8
  408882:	445a      	add	r2, fp
  408884:	f3c2 020b 	ubfx	r2, r2, #0, #12
  408888:	ebc2 0901 	rsb	r9, r2, r1
  40888c:	4649      	mov	r1, r9
  40888e:	4630      	mov	r0, r6
  408890:	9301      	str	r3, [sp, #4]
  408892:	f000 ffbd 	bl	409810 <_sbrk_r>
  408896:	1c43      	adds	r3, r0, #1
  408898:	9b01      	ldr	r3, [sp, #4]
  40889a:	f000 813f 	beq.w	408b1c <_malloc_r+0x51c>
  40889e:	ebcb 0200 	rsb	r2, fp, r0
  4088a2:	444a      	add	r2, r9
  4088a4:	f042 0201 	orr.w	r2, r2, #1
  4088a8:	6819      	ldr	r1, [r3, #0]
  4088aa:	f8c7 b008 	str.w	fp, [r7, #8]
  4088ae:	4449      	add	r1, r9
  4088b0:	42bc      	cmp	r4, r7
  4088b2:	f8cb 2004 	str.w	r2, [fp, #4]
  4088b6:	6019      	str	r1, [r3, #0]
  4088b8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 408960 <_malloc_r+0x360>
  4088bc:	d016      	beq.n	4088ec <_malloc_r+0x2ec>
  4088be:	f1b8 0f0f 	cmp.w	r8, #15
  4088c2:	f240 80fd 	bls.w	408ac0 <_malloc_r+0x4c0>
  4088c6:	6862      	ldr	r2, [r4, #4]
  4088c8:	f1a8 030c 	sub.w	r3, r8, #12
  4088cc:	f023 0307 	bic.w	r3, r3, #7
  4088d0:	18e0      	adds	r0, r4, r3
  4088d2:	f002 0201 	and.w	r2, r2, #1
  4088d6:	f04f 0e05 	mov.w	lr, #5
  4088da:	431a      	orrs	r2, r3
  4088dc:	2b0f      	cmp	r3, #15
  4088de:	6062      	str	r2, [r4, #4]
  4088e0:	f8c0 e004 	str.w	lr, [r0, #4]
  4088e4:	f8c0 e008 	str.w	lr, [r0, #8]
  4088e8:	f200 811c 	bhi.w	408b24 <_malloc_r+0x524>
  4088ec:	4b1d      	ldr	r3, [pc, #116]	; (408964 <_malloc_r+0x364>)
  4088ee:	68bc      	ldr	r4, [r7, #8]
  4088f0:	681a      	ldr	r2, [r3, #0]
  4088f2:	4291      	cmp	r1, r2
  4088f4:	bf88      	it	hi
  4088f6:	6019      	strhi	r1, [r3, #0]
  4088f8:	4b1b      	ldr	r3, [pc, #108]	; (408968 <_malloc_r+0x368>)
  4088fa:	681a      	ldr	r2, [r3, #0]
  4088fc:	4291      	cmp	r1, r2
  4088fe:	6862      	ldr	r2, [r4, #4]
  408900:	bf88      	it	hi
  408902:	6019      	strhi	r1, [r3, #0]
  408904:	f022 0203 	bic.w	r2, r2, #3
  408908:	4295      	cmp	r5, r2
  40890a:	eba2 0305 	sub.w	r3, r2, r5
  40890e:	d801      	bhi.n	408914 <_malloc_r+0x314>
  408910:	2b0f      	cmp	r3, #15
  408912:	dc04      	bgt.n	40891e <_malloc_r+0x31e>
  408914:	4630      	mov	r0, r6
  408916:	f000 fa7b 	bl	408e10 <__malloc_unlock>
  40891a:	2400      	movs	r4, #0
  40891c:	e738      	b.n	408790 <_malloc_r+0x190>
  40891e:	1962      	adds	r2, r4, r5
  408920:	f043 0301 	orr.w	r3, r3, #1
  408924:	f045 0501 	orr.w	r5, r5, #1
  408928:	6065      	str	r5, [r4, #4]
  40892a:	4630      	mov	r0, r6
  40892c:	60ba      	str	r2, [r7, #8]
  40892e:	6053      	str	r3, [r2, #4]
  408930:	f000 fa6e 	bl	408e10 <__malloc_unlock>
  408934:	3408      	adds	r4, #8
  408936:	4620      	mov	r0, r4
  408938:	b003      	add	sp, #12
  40893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40893e:	2b14      	cmp	r3, #20
  408940:	d971      	bls.n	408a26 <_malloc_r+0x426>
  408942:	2b54      	cmp	r3, #84	; 0x54
  408944:	f200 80a4 	bhi.w	408a90 <_malloc_r+0x490>
  408948:	0b28      	lsrs	r0, r5, #12
  40894a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40894e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408952:	306e      	adds	r0, #110	; 0x6e
  408954:	e676      	b.n	408644 <_malloc_r+0x44>
  408956:	bf00      	nop
  408958:	204004a8 	.word	0x204004a8
  40895c:	20401504 	.word	0x20401504
  408960:	20401508 	.word	0x20401508
  408964:	20401500 	.word	0x20401500
  408968:	204014fc 	.word	0x204014fc
  40896c:	204008b4 	.word	0x204008b4
  408970:	0a5a      	lsrs	r2, r3, #9
  408972:	2a04      	cmp	r2, #4
  408974:	d95e      	bls.n	408a34 <_malloc_r+0x434>
  408976:	2a14      	cmp	r2, #20
  408978:	f200 80b3 	bhi.w	408ae2 <_malloc_r+0x4e2>
  40897c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  408980:	0049      	lsls	r1, r1, #1
  408982:	325b      	adds	r2, #91	; 0x5b
  408984:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  408988:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  40898c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 408b6c <_malloc_r+0x56c>
  408990:	f1ac 0c08 	sub.w	ip, ip, #8
  408994:	458c      	cmp	ip, r1
  408996:	f000 8088 	beq.w	408aaa <_malloc_r+0x4aa>
  40899a:	684a      	ldr	r2, [r1, #4]
  40899c:	f022 0203 	bic.w	r2, r2, #3
  4089a0:	4293      	cmp	r3, r2
  4089a2:	d202      	bcs.n	4089aa <_malloc_r+0x3aa>
  4089a4:	6889      	ldr	r1, [r1, #8]
  4089a6:	458c      	cmp	ip, r1
  4089a8:	d1f7      	bne.n	40899a <_malloc_r+0x39a>
  4089aa:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4089ae:	687a      	ldr	r2, [r7, #4]
  4089b0:	f8c4 c00c 	str.w	ip, [r4, #12]
  4089b4:	60a1      	str	r1, [r4, #8]
  4089b6:	f8cc 4008 	str.w	r4, [ip, #8]
  4089ba:	60cc      	str	r4, [r1, #12]
  4089bc:	e688      	b.n	4086d0 <_malloc_r+0xd0>
  4089be:	1963      	adds	r3, r4, r5
  4089c0:	f042 0701 	orr.w	r7, r2, #1
  4089c4:	f045 0501 	orr.w	r5, r5, #1
  4089c8:	6065      	str	r5, [r4, #4]
  4089ca:	4630      	mov	r0, r6
  4089cc:	614b      	str	r3, [r1, #20]
  4089ce:	610b      	str	r3, [r1, #16]
  4089d0:	f8c3 e00c 	str.w	lr, [r3, #12]
  4089d4:	f8c3 e008 	str.w	lr, [r3, #8]
  4089d8:	605f      	str	r7, [r3, #4]
  4089da:	509a      	str	r2, [r3, r2]
  4089dc:	3408      	adds	r4, #8
  4089de:	f000 fa17 	bl	408e10 <__malloc_unlock>
  4089e2:	e6d5      	b.n	408790 <_malloc_r+0x190>
  4089e4:	684a      	ldr	r2, [r1, #4]
  4089e6:	e673      	b.n	4086d0 <_malloc_r+0xd0>
  4089e8:	f108 0801 	add.w	r8, r8, #1
  4089ec:	f018 0f03 	tst.w	r8, #3
  4089f0:	f10c 0c08 	add.w	ip, ip, #8
  4089f4:	f47f ae7f 	bne.w	4086f6 <_malloc_r+0xf6>
  4089f8:	e030      	b.n	408a5c <_malloc_r+0x45c>
  4089fa:	68dc      	ldr	r4, [r3, #12]
  4089fc:	42a3      	cmp	r3, r4
  4089fe:	bf08      	it	eq
  408a00:	3002      	addeq	r0, #2
  408a02:	f43f ae35 	beq.w	408670 <_malloc_r+0x70>
  408a06:	e6b3      	b.n	408770 <_malloc_r+0x170>
  408a08:	440b      	add	r3, r1
  408a0a:	460c      	mov	r4, r1
  408a0c:	685a      	ldr	r2, [r3, #4]
  408a0e:	68c9      	ldr	r1, [r1, #12]
  408a10:	f854 5f08 	ldr.w	r5, [r4, #8]!
  408a14:	f042 0201 	orr.w	r2, r2, #1
  408a18:	605a      	str	r2, [r3, #4]
  408a1a:	4630      	mov	r0, r6
  408a1c:	60e9      	str	r1, [r5, #12]
  408a1e:	608d      	str	r5, [r1, #8]
  408a20:	f000 f9f6 	bl	408e10 <__malloc_unlock>
  408a24:	e6b4      	b.n	408790 <_malloc_r+0x190>
  408a26:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  408a2a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  408a2e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408a32:	e607      	b.n	408644 <_malloc_r+0x44>
  408a34:	099a      	lsrs	r2, r3, #6
  408a36:	f102 0139 	add.w	r1, r2, #57	; 0x39
  408a3a:	0049      	lsls	r1, r1, #1
  408a3c:	3238      	adds	r2, #56	; 0x38
  408a3e:	e7a1      	b.n	408984 <_malloc_r+0x384>
  408a40:	42bc      	cmp	r4, r7
  408a42:	4b4a      	ldr	r3, [pc, #296]	; (408b6c <_malloc_r+0x56c>)
  408a44:	f43f af00 	beq.w	408848 <_malloc_r+0x248>
  408a48:	689c      	ldr	r4, [r3, #8]
  408a4a:	6862      	ldr	r2, [r4, #4]
  408a4c:	f022 0203 	bic.w	r2, r2, #3
  408a50:	e75a      	b.n	408908 <_malloc_r+0x308>
  408a52:	f859 3908 	ldr.w	r3, [r9], #-8
  408a56:	4599      	cmp	r9, r3
  408a58:	f040 8082 	bne.w	408b60 <_malloc_r+0x560>
  408a5c:	f010 0f03 	tst.w	r0, #3
  408a60:	f100 30ff 	add.w	r0, r0, #4294967295
  408a64:	d1f5      	bne.n	408a52 <_malloc_r+0x452>
  408a66:	687b      	ldr	r3, [r7, #4]
  408a68:	ea23 0304 	bic.w	r3, r3, r4
  408a6c:	607b      	str	r3, [r7, #4]
  408a6e:	0064      	lsls	r4, r4, #1
  408a70:	429c      	cmp	r4, r3
  408a72:	f63f aebd 	bhi.w	4087f0 <_malloc_r+0x1f0>
  408a76:	2c00      	cmp	r4, #0
  408a78:	f43f aeba 	beq.w	4087f0 <_malloc_r+0x1f0>
  408a7c:	421c      	tst	r4, r3
  408a7e:	4640      	mov	r0, r8
  408a80:	f47f ae35 	bne.w	4086ee <_malloc_r+0xee>
  408a84:	0064      	lsls	r4, r4, #1
  408a86:	421c      	tst	r4, r3
  408a88:	f100 0004 	add.w	r0, r0, #4
  408a8c:	d0fa      	beq.n	408a84 <_malloc_r+0x484>
  408a8e:	e62e      	b.n	4086ee <_malloc_r+0xee>
  408a90:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  408a94:	d818      	bhi.n	408ac8 <_malloc_r+0x4c8>
  408a96:	0be8      	lsrs	r0, r5, #15
  408a98:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  408a9c:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408aa0:	3077      	adds	r0, #119	; 0x77
  408aa2:	e5cf      	b.n	408644 <_malloc_r+0x44>
  408aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  408aa8:	e6eb      	b.n	408882 <_malloc_r+0x282>
  408aaa:	2101      	movs	r1, #1
  408aac:	f8d8 3004 	ldr.w	r3, [r8, #4]
  408ab0:	1092      	asrs	r2, r2, #2
  408ab2:	fa01 f202 	lsl.w	r2, r1, r2
  408ab6:	431a      	orrs	r2, r3
  408ab8:	f8c8 2004 	str.w	r2, [r8, #4]
  408abc:	4661      	mov	r1, ip
  408abe:	e777      	b.n	4089b0 <_malloc_r+0x3b0>
  408ac0:	2301      	movs	r3, #1
  408ac2:	f8cb 3004 	str.w	r3, [fp, #4]
  408ac6:	e725      	b.n	408914 <_malloc_r+0x314>
  408ac8:	f240 5254 	movw	r2, #1364	; 0x554
  408acc:	4293      	cmp	r3, r2
  408ace:	d820      	bhi.n	408b12 <_malloc_r+0x512>
  408ad0:	0ca8      	lsrs	r0, r5, #18
  408ad2:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  408ad6:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408ada:	307c      	adds	r0, #124	; 0x7c
  408adc:	e5b2      	b.n	408644 <_malloc_r+0x44>
  408ade:	3210      	adds	r2, #16
  408ae0:	e6a4      	b.n	40882c <_malloc_r+0x22c>
  408ae2:	2a54      	cmp	r2, #84	; 0x54
  408ae4:	d826      	bhi.n	408b34 <_malloc_r+0x534>
  408ae6:	0b1a      	lsrs	r2, r3, #12
  408ae8:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  408aec:	0049      	lsls	r1, r1, #1
  408aee:	326e      	adds	r2, #110	; 0x6e
  408af0:	e748      	b.n	408984 <_malloc_r+0x384>
  408af2:	68bc      	ldr	r4, [r7, #8]
  408af4:	6862      	ldr	r2, [r4, #4]
  408af6:	f022 0203 	bic.w	r2, r2, #3
  408afa:	e705      	b.n	408908 <_malloc_r+0x308>
  408afc:	f3ca 000b 	ubfx	r0, sl, #0, #12
  408b00:	2800      	cmp	r0, #0
  408b02:	f47f aea8 	bne.w	408856 <_malloc_r+0x256>
  408b06:	4442      	add	r2, r8
  408b08:	68bb      	ldr	r3, [r7, #8]
  408b0a:	f042 0201 	orr.w	r2, r2, #1
  408b0e:	605a      	str	r2, [r3, #4]
  408b10:	e6ec      	b.n	4088ec <_malloc_r+0x2ec>
  408b12:	23fe      	movs	r3, #254	; 0xfe
  408b14:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  408b18:	207e      	movs	r0, #126	; 0x7e
  408b1a:	e593      	b.n	408644 <_malloc_r+0x44>
  408b1c:	2201      	movs	r2, #1
  408b1e:	f04f 0900 	mov.w	r9, #0
  408b22:	e6c1      	b.n	4088a8 <_malloc_r+0x2a8>
  408b24:	f104 0108 	add.w	r1, r4, #8
  408b28:	4630      	mov	r0, r6
  408b2a:	f7ff fa4b 	bl	407fc4 <_free_r>
  408b2e:	f8d9 1000 	ldr.w	r1, [r9]
  408b32:	e6db      	b.n	4088ec <_malloc_r+0x2ec>
  408b34:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408b38:	d805      	bhi.n	408b46 <_malloc_r+0x546>
  408b3a:	0bda      	lsrs	r2, r3, #15
  408b3c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  408b40:	0049      	lsls	r1, r1, #1
  408b42:	3277      	adds	r2, #119	; 0x77
  408b44:	e71e      	b.n	408984 <_malloc_r+0x384>
  408b46:	f240 5154 	movw	r1, #1364	; 0x554
  408b4a:	428a      	cmp	r2, r1
  408b4c:	d805      	bhi.n	408b5a <_malloc_r+0x55a>
  408b4e:	0c9a      	lsrs	r2, r3, #18
  408b50:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  408b54:	0049      	lsls	r1, r1, #1
  408b56:	327c      	adds	r2, #124	; 0x7c
  408b58:	e714      	b.n	408984 <_malloc_r+0x384>
  408b5a:	21fe      	movs	r1, #254	; 0xfe
  408b5c:	227e      	movs	r2, #126	; 0x7e
  408b5e:	e711      	b.n	408984 <_malloc_r+0x384>
  408b60:	687b      	ldr	r3, [r7, #4]
  408b62:	e784      	b.n	408a6e <_malloc_r+0x46e>
  408b64:	08e8      	lsrs	r0, r5, #3
  408b66:	1c43      	adds	r3, r0, #1
  408b68:	005b      	lsls	r3, r3, #1
  408b6a:	e5f8      	b.n	40875e <_malloc_r+0x15e>
  408b6c:	204004a8 	.word	0x204004a8

00408b70 <memchr>:
  408b70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408b74:	2a10      	cmp	r2, #16
  408b76:	db2b      	blt.n	408bd0 <memchr+0x60>
  408b78:	f010 0f07 	tst.w	r0, #7
  408b7c:	d008      	beq.n	408b90 <memchr+0x20>
  408b7e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408b82:	3a01      	subs	r2, #1
  408b84:	428b      	cmp	r3, r1
  408b86:	d02d      	beq.n	408be4 <memchr+0x74>
  408b88:	f010 0f07 	tst.w	r0, #7
  408b8c:	b342      	cbz	r2, 408be0 <memchr+0x70>
  408b8e:	d1f6      	bne.n	408b7e <memchr+0xe>
  408b90:	b4f0      	push	{r4, r5, r6, r7}
  408b92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408b96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  408b9a:	f022 0407 	bic.w	r4, r2, #7
  408b9e:	f07f 0700 	mvns.w	r7, #0
  408ba2:	2300      	movs	r3, #0
  408ba4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408ba8:	3c08      	subs	r4, #8
  408baa:	ea85 0501 	eor.w	r5, r5, r1
  408bae:	ea86 0601 	eor.w	r6, r6, r1
  408bb2:	fa85 f547 	uadd8	r5, r5, r7
  408bb6:	faa3 f587 	sel	r5, r3, r7
  408bba:	fa86 f647 	uadd8	r6, r6, r7
  408bbe:	faa5 f687 	sel	r6, r5, r7
  408bc2:	b98e      	cbnz	r6, 408be8 <memchr+0x78>
  408bc4:	d1ee      	bne.n	408ba4 <memchr+0x34>
  408bc6:	bcf0      	pop	{r4, r5, r6, r7}
  408bc8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408bcc:	f002 0207 	and.w	r2, r2, #7
  408bd0:	b132      	cbz	r2, 408be0 <memchr+0x70>
  408bd2:	f810 3b01 	ldrb.w	r3, [r0], #1
  408bd6:	3a01      	subs	r2, #1
  408bd8:	ea83 0301 	eor.w	r3, r3, r1
  408bdc:	b113      	cbz	r3, 408be4 <memchr+0x74>
  408bde:	d1f8      	bne.n	408bd2 <memchr+0x62>
  408be0:	2000      	movs	r0, #0
  408be2:	4770      	bx	lr
  408be4:	3801      	subs	r0, #1
  408be6:	4770      	bx	lr
  408be8:	2d00      	cmp	r5, #0
  408bea:	bf06      	itte	eq
  408bec:	4635      	moveq	r5, r6
  408bee:	3803      	subeq	r0, #3
  408bf0:	3807      	subne	r0, #7
  408bf2:	f015 0f01 	tst.w	r5, #1
  408bf6:	d107      	bne.n	408c08 <memchr+0x98>
  408bf8:	3001      	adds	r0, #1
  408bfa:	f415 7f80 	tst.w	r5, #256	; 0x100
  408bfe:	bf02      	ittt	eq
  408c00:	3001      	addeq	r0, #1
  408c02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408c06:	3001      	addeq	r0, #1
  408c08:	bcf0      	pop	{r4, r5, r6, r7}
  408c0a:	3801      	subs	r0, #1
  408c0c:	4770      	bx	lr
  408c0e:	bf00      	nop

00408c10 <memcpy>:
  408c10:	4684      	mov	ip, r0
  408c12:	ea41 0300 	orr.w	r3, r1, r0
  408c16:	f013 0303 	ands.w	r3, r3, #3
  408c1a:	d16d      	bne.n	408cf8 <memcpy+0xe8>
  408c1c:	3a40      	subs	r2, #64	; 0x40
  408c1e:	d341      	bcc.n	408ca4 <memcpy+0x94>
  408c20:	f851 3b04 	ldr.w	r3, [r1], #4
  408c24:	f840 3b04 	str.w	r3, [r0], #4
  408c28:	f851 3b04 	ldr.w	r3, [r1], #4
  408c2c:	f840 3b04 	str.w	r3, [r0], #4
  408c30:	f851 3b04 	ldr.w	r3, [r1], #4
  408c34:	f840 3b04 	str.w	r3, [r0], #4
  408c38:	f851 3b04 	ldr.w	r3, [r1], #4
  408c3c:	f840 3b04 	str.w	r3, [r0], #4
  408c40:	f851 3b04 	ldr.w	r3, [r1], #4
  408c44:	f840 3b04 	str.w	r3, [r0], #4
  408c48:	f851 3b04 	ldr.w	r3, [r1], #4
  408c4c:	f840 3b04 	str.w	r3, [r0], #4
  408c50:	f851 3b04 	ldr.w	r3, [r1], #4
  408c54:	f840 3b04 	str.w	r3, [r0], #4
  408c58:	f851 3b04 	ldr.w	r3, [r1], #4
  408c5c:	f840 3b04 	str.w	r3, [r0], #4
  408c60:	f851 3b04 	ldr.w	r3, [r1], #4
  408c64:	f840 3b04 	str.w	r3, [r0], #4
  408c68:	f851 3b04 	ldr.w	r3, [r1], #4
  408c6c:	f840 3b04 	str.w	r3, [r0], #4
  408c70:	f851 3b04 	ldr.w	r3, [r1], #4
  408c74:	f840 3b04 	str.w	r3, [r0], #4
  408c78:	f851 3b04 	ldr.w	r3, [r1], #4
  408c7c:	f840 3b04 	str.w	r3, [r0], #4
  408c80:	f851 3b04 	ldr.w	r3, [r1], #4
  408c84:	f840 3b04 	str.w	r3, [r0], #4
  408c88:	f851 3b04 	ldr.w	r3, [r1], #4
  408c8c:	f840 3b04 	str.w	r3, [r0], #4
  408c90:	f851 3b04 	ldr.w	r3, [r1], #4
  408c94:	f840 3b04 	str.w	r3, [r0], #4
  408c98:	f851 3b04 	ldr.w	r3, [r1], #4
  408c9c:	f840 3b04 	str.w	r3, [r0], #4
  408ca0:	3a40      	subs	r2, #64	; 0x40
  408ca2:	d2bd      	bcs.n	408c20 <memcpy+0x10>
  408ca4:	3230      	adds	r2, #48	; 0x30
  408ca6:	d311      	bcc.n	408ccc <memcpy+0xbc>
  408ca8:	f851 3b04 	ldr.w	r3, [r1], #4
  408cac:	f840 3b04 	str.w	r3, [r0], #4
  408cb0:	f851 3b04 	ldr.w	r3, [r1], #4
  408cb4:	f840 3b04 	str.w	r3, [r0], #4
  408cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  408cbc:	f840 3b04 	str.w	r3, [r0], #4
  408cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  408cc4:	f840 3b04 	str.w	r3, [r0], #4
  408cc8:	3a10      	subs	r2, #16
  408cca:	d2ed      	bcs.n	408ca8 <memcpy+0x98>
  408ccc:	320c      	adds	r2, #12
  408cce:	d305      	bcc.n	408cdc <memcpy+0xcc>
  408cd0:	f851 3b04 	ldr.w	r3, [r1], #4
  408cd4:	f840 3b04 	str.w	r3, [r0], #4
  408cd8:	3a04      	subs	r2, #4
  408cda:	d2f9      	bcs.n	408cd0 <memcpy+0xc0>
  408cdc:	3204      	adds	r2, #4
  408cde:	d008      	beq.n	408cf2 <memcpy+0xe2>
  408ce0:	07d2      	lsls	r2, r2, #31
  408ce2:	bf1c      	itt	ne
  408ce4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408ce8:	f800 3b01 	strbne.w	r3, [r0], #1
  408cec:	d301      	bcc.n	408cf2 <memcpy+0xe2>
  408cee:	880b      	ldrh	r3, [r1, #0]
  408cf0:	8003      	strh	r3, [r0, #0]
  408cf2:	4660      	mov	r0, ip
  408cf4:	4770      	bx	lr
  408cf6:	bf00      	nop
  408cf8:	2a08      	cmp	r2, #8
  408cfa:	d313      	bcc.n	408d24 <memcpy+0x114>
  408cfc:	078b      	lsls	r3, r1, #30
  408cfe:	d08d      	beq.n	408c1c <memcpy+0xc>
  408d00:	f010 0303 	ands.w	r3, r0, #3
  408d04:	d08a      	beq.n	408c1c <memcpy+0xc>
  408d06:	f1c3 0304 	rsb	r3, r3, #4
  408d0a:	1ad2      	subs	r2, r2, r3
  408d0c:	07db      	lsls	r3, r3, #31
  408d0e:	bf1c      	itt	ne
  408d10:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408d14:	f800 3b01 	strbne.w	r3, [r0], #1
  408d18:	d380      	bcc.n	408c1c <memcpy+0xc>
  408d1a:	f831 3b02 	ldrh.w	r3, [r1], #2
  408d1e:	f820 3b02 	strh.w	r3, [r0], #2
  408d22:	e77b      	b.n	408c1c <memcpy+0xc>
  408d24:	3a04      	subs	r2, #4
  408d26:	d3d9      	bcc.n	408cdc <memcpy+0xcc>
  408d28:	3a01      	subs	r2, #1
  408d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
  408d2e:	f800 3b01 	strb.w	r3, [r0], #1
  408d32:	d2f9      	bcs.n	408d28 <memcpy+0x118>
  408d34:	780b      	ldrb	r3, [r1, #0]
  408d36:	7003      	strb	r3, [r0, #0]
  408d38:	784b      	ldrb	r3, [r1, #1]
  408d3a:	7043      	strb	r3, [r0, #1]
  408d3c:	788b      	ldrb	r3, [r1, #2]
  408d3e:	7083      	strb	r3, [r0, #2]
  408d40:	4660      	mov	r0, ip
  408d42:	4770      	bx	lr

00408d44 <memmove>:
  408d44:	4288      	cmp	r0, r1
  408d46:	b5f0      	push	{r4, r5, r6, r7, lr}
  408d48:	d90d      	bls.n	408d66 <memmove+0x22>
  408d4a:	188b      	adds	r3, r1, r2
  408d4c:	4298      	cmp	r0, r3
  408d4e:	d20a      	bcs.n	408d66 <memmove+0x22>
  408d50:	1881      	adds	r1, r0, r2
  408d52:	2a00      	cmp	r2, #0
  408d54:	d051      	beq.n	408dfa <memmove+0xb6>
  408d56:	1a9a      	subs	r2, r3, r2
  408d58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408d5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  408d60:	4293      	cmp	r3, r2
  408d62:	d1f9      	bne.n	408d58 <memmove+0x14>
  408d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408d66:	2a0f      	cmp	r2, #15
  408d68:	d948      	bls.n	408dfc <memmove+0xb8>
  408d6a:	ea41 0300 	orr.w	r3, r1, r0
  408d6e:	079b      	lsls	r3, r3, #30
  408d70:	d146      	bne.n	408e00 <memmove+0xbc>
  408d72:	f100 0410 	add.w	r4, r0, #16
  408d76:	f101 0310 	add.w	r3, r1, #16
  408d7a:	4615      	mov	r5, r2
  408d7c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  408d80:	f844 6c10 	str.w	r6, [r4, #-16]
  408d84:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408d88:	f844 6c0c 	str.w	r6, [r4, #-12]
  408d8c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  408d90:	f844 6c08 	str.w	r6, [r4, #-8]
  408d94:	3d10      	subs	r5, #16
  408d96:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408d9a:	f844 6c04 	str.w	r6, [r4, #-4]
  408d9e:	2d0f      	cmp	r5, #15
  408da0:	f103 0310 	add.w	r3, r3, #16
  408da4:	f104 0410 	add.w	r4, r4, #16
  408da8:	d8e8      	bhi.n	408d7c <memmove+0x38>
  408daa:	f1a2 0310 	sub.w	r3, r2, #16
  408dae:	f023 030f 	bic.w	r3, r3, #15
  408db2:	f002 0e0f 	and.w	lr, r2, #15
  408db6:	3310      	adds	r3, #16
  408db8:	f1be 0f03 	cmp.w	lr, #3
  408dbc:	4419      	add	r1, r3
  408dbe:	4403      	add	r3, r0
  408dc0:	d921      	bls.n	408e06 <memmove+0xc2>
  408dc2:	1f1e      	subs	r6, r3, #4
  408dc4:	460d      	mov	r5, r1
  408dc6:	4674      	mov	r4, lr
  408dc8:	3c04      	subs	r4, #4
  408dca:	f855 7b04 	ldr.w	r7, [r5], #4
  408dce:	f846 7f04 	str.w	r7, [r6, #4]!
  408dd2:	2c03      	cmp	r4, #3
  408dd4:	d8f8      	bhi.n	408dc8 <memmove+0x84>
  408dd6:	f1ae 0404 	sub.w	r4, lr, #4
  408dda:	f024 0403 	bic.w	r4, r4, #3
  408dde:	3404      	adds	r4, #4
  408de0:	4423      	add	r3, r4
  408de2:	4421      	add	r1, r4
  408de4:	f002 0203 	and.w	r2, r2, #3
  408de8:	b162      	cbz	r2, 408e04 <memmove+0xc0>
  408dea:	3b01      	subs	r3, #1
  408dec:	440a      	add	r2, r1
  408dee:	f811 4b01 	ldrb.w	r4, [r1], #1
  408df2:	f803 4f01 	strb.w	r4, [r3, #1]!
  408df6:	428a      	cmp	r2, r1
  408df8:	d1f9      	bne.n	408dee <memmove+0xaa>
  408dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408dfc:	4603      	mov	r3, r0
  408dfe:	e7f3      	b.n	408de8 <memmove+0xa4>
  408e00:	4603      	mov	r3, r0
  408e02:	e7f2      	b.n	408dea <memmove+0xa6>
  408e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408e06:	4672      	mov	r2, lr
  408e08:	e7ee      	b.n	408de8 <memmove+0xa4>
  408e0a:	bf00      	nop

00408e0c <__malloc_lock>:
  408e0c:	4770      	bx	lr
  408e0e:	bf00      	nop

00408e10 <__malloc_unlock>:
  408e10:	4770      	bx	lr
  408e12:	bf00      	nop

00408e14 <_Balloc>:
  408e14:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408e16:	b570      	push	{r4, r5, r6, lr}
  408e18:	4605      	mov	r5, r0
  408e1a:	460c      	mov	r4, r1
  408e1c:	b14b      	cbz	r3, 408e32 <_Balloc+0x1e>
  408e1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  408e22:	b180      	cbz	r0, 408e46 <_Balloc+0x32>
  408e24:	6802      	ldr	r2, [r0, #0]
  408e26:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  408e2a:	2300      	movs	r3, #0
  408e2c:	6103      	str	r3, [r0, #16]
  408e2e:	60c3      	str	r3, [r0, #12]
  408e30:	bd70      	pop	{r4, r5, r6, pc}
  408e32:	2221      	movs	r2, #33	; 0x21
  408e34:	2104      	movs	r1, #4
  408e36:	f000 feb7 	bl	409ba8 <_calloc_r>
  408e3a:	64e8      	str	r0, [r5, #76]	; 0x4c
  408e3c:	4603      	mov	r3, r0
  408e3e:	2800      	cmp	r0, #0
  408e40:	d1ed      	bne.n	408e1e <_Balloc+0xa>
  408e42:	2000      	movs	r0, #0
  408e44:	bd70      	pop	{r4, r5, r6, pc}
  408e46:	2101      	movs	r1, #1
  408e48:	fa01 f604 	lsl.w	r6, r1, r4
  408e4c:	1d72      	adds	r2, r6, #5
  408e4e:	4628      	mov	r0, r5
  408e50:	0092      	lsls	r2, r2, #2
  408e52:	f000 fea9 	bl	409ba8 <_calloc_r>
  408e56:	2800      	cmp	r0, #0
  408e58:	d0f3      	beq.n	408e42 <_Balloc+0x2e>
  408e5a:	6044      	str	r4, [r0, #4]
  408e5c:	6086      	str	r6, [r0, #8]
  408e5e:	e7e4      	b.n	408e2a <_Balloc+0x16>

00408e60 <_Bfree>:
  408e60:	b131      	cbz	r1, 408e70 <_Bfree+0x10>
  408e62:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408e64:	684a      	ldr	r2, [r1, #4]
  408e66:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  408e6a:	6008      	str	r0, [r1, #0]
  408e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  408e70:	4770      	bx	lr
  408e72:	bf00      	nop

00408e74 <__multadd>:
  408e74:	b5f0      	push	{r4, r5, r6, r7, lr}
  408e76:	690c      	ldr	r4, [r1, #16]
  408e78:	b083      	sub	sp, #12
  408e7a:	460d      	mov	r5, r1
  408e7c:	4606      	mov	r6, r0
  408e7e:	f101 0e14 	add.w	lr, r1, #20
  408e82:	2700      	movs	r7, #0
  408e84:	f8de 0000 	ldr.w	r0, [lr]
  408e88:	b281      	uxth	r1, r0
  408e8a:	fb02 3101 	mla	r1, r2, r1, r3
  408e8e:	0c0b      	lsrs	r3, r1, #16
  408e90:	0c00      	lsrs	r0, r0, #16
  408e92:	fb02 3300 	mla	r3, r2, r0, r3
  408e96:	b289      	uxth	r1, r1
  408e98:	3701      	adds	r7, #1
  408e9a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  408e9e:	42bc      	cmp	r4, r7
  408ea0:	f84e 1b04 	str.w	r1, [lr], #4
  408ea4:	ea4f 4313 	mov.w	r3, r3, lsr #16
  408ea8:	dcec      	bgt.n	408e84 <__multadd+0x10>
  408eaa:	b13b      	cbz	r3, 408ebc <__multadd+0x48>
  408eac:	68aa      	ldr	r2, [r5, #8]
  408eae:	4294      	cmp	r4, r2
  408eb0:	da07      	bge.n	408ec2 <__multadd+0x4e>
  408eb2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  408eb6:	3401      	adds	r4, #1
  408eb8:	6153      	str	r3, [r2, #20]
  408eba:	612c      	str	r4, [r5, #16]
  408ebc:	4628      	mov	r0, r5
  408ebe:	b003      	add	sp, #12
  408ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408ec2:	6869      	ldr	r1, [r5, #4]
  408ec4:	9301      	str	r3, [sp, #4]
  408ec6:	3101      	adds	r1, #1
  408ec8:	4630      	mov	r0, r6
  408eca:	f7ff ffa3 	bl	408e14 <_Balloc>
  408ece:	692a      	ldr	r2, [r5, #16]
  408ed0:	3202      	adds	r2, #2
  408ed2:	f105 010c 	add.w	r1, r5, #12
  408ed6:	4607      	mov	r7, r0
  408ed8:	0092      	lsls	r2, r2, #2
  408eda:	300c      	adds	r0, #12
  408edc:	f7ff fe98 	bl	408c10 <memcpy>
  408ee0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  408ee2:	6869      	ldr	r1, [r5, #4]
  408ee4:	9b01      	ldr	r3, [sp, #4]
  408ee6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  408eea:	6028      	str	r0, [r5, #0]
  408eec:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  408ef0:	463d      	mov	r5, r7
  408ef2:	e7de      	b.n	408eb2 <__multadd+0x3e>

00408ef4 <__hi0bits>:
  408ef4:	0c03      	lsrs	r3, r0, #16
  408ef6:	041b      	lsls	r3, r3, #16
  408ef8:	b9b3      	cbnz	r3, 408f28 <__hi0bits+0x34>
  408efa:	0400      	lsls	r0, r0, #16
  408efc:	2310      	movs	r3, #16
  408efe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  408f02:	bf04      	itt	eq
  408f04:	0200      	lsleq	r0, r0, #8
  408f06:	3308      	addeq	r3, #8
  408f08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  408f0c:	bf04      	itt	eq
  408f0e:	0100      	lsleq	r0, r0, #4
  408f10:	3304      	addeq	r3, #4
  408f12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  408f16:	bf04      	itt	eq
  408f18:	0080      	lsleq	r0, r0, #2
  408f1a:	3302      	addeq	r3, #2
  408f1c:	2800      	cmp	r0, #0
  408f1e:	db07      	blt.n	408f30 <__hi0bits+0x3c>
  408f20:	0042      	lsls	r2, r0, #1
  408f22:	d403      	bmi.n	408f2c <__hi0bits+0x38>
  408f24:	2020      	movs	r0, #32
  408f26:	4770      	bx	lr
  408f28:	2300      	movs	r3, #0
  408f2a:	e7e8      	b.n	408efe <__hi0bits+0xa>
  408f2c:	1c58      	adds	r0, r3, #1
  408f2e:	4770      	bx	lr
  408f30:	4618      	mov	r0, r3
  408f32:	4770      	bx	lr

00408f34 <__lo0bits>:
  408f34:	6803      	ldr	r3, [r0, #0]
  408f36:	f013 0207 	ands.w	r2, r3, #7
  408f3a:	d007      	beq.n	408f4c <__lo0bits+0x18>
  408f3c:	07d9      	lsls	r1, r3, #31
  408f3e:	d420      	bmi.n	408f82 <__lo0bits+0x4e>
  408f40:	079a      	lsls	r2, r3, #30
  408f42:	d420      	bmi.n	408f86 <__lo0bits+0x52>
  408f44:	089b      	lsrs	r3, r3, #2
  408f46:	6003      	str	r3, [r0, #0]
  408f48:	2002      	movs	r0, #2
  408f4a:	4770      	bx	lr
  408f4c:	b299      	uxth	r1, r3
  408f4e:	b909      	cbnz	r1, 408f54 <__lo0bits+0x20>
  408f50:	0c1b      	lsrs	r3, r3, #16
  408f52:	2210      	movs	r2, #16
  408f54:	f013 0fff 	tst.w	r3, #255	; 0xff
  408f58:	bf04      	itt	eq
  408f5a:	0a1b      	lsreq	r3, r3, #8
  408f5c:	3208      	addeq	r2, #8
  408f5e:	0719      	lsls	r1, r3, #28
  408f60:	bf04      	itt	eq
  408f62:	091b      	lsreq	r3, r3, #4
  408f64:	3204      	addeq	r2, #4
  408f66:	0799      	lsls	r1, r3, #30
  408f68:	bf04      	itt	eq
  408f6a:	089b      	lsreq	r3, r3, #2
  408f6c:	3202      	addeq	r2, #2
  408f6e:	07d9      	lsls	r1, r3, #31
  408f70:	d404      	bmi.n	408f7c <__lo0bits+0x48>
  408f72:	085b      	lsrs	r3, r3, #1
  408f74:	d101      	bne.n	408f7a <__lo0bits+0x46>
  408f76:	2020      	movs	r0, #32
  408f78:	4770      	bx	lr
  408f7a:	3201      	adds	r2, #1
  408f7c:	6003      	str	r3, [r0, #0]
  408f7e:	4610      	mov	r0, r2
  408f80:	4770      	bx	lr
  408f82:	2000      	movs	r0, #0
  408f84:	4770      	bx	lr
  408f86:	085b      	lsrs	r3, r3, #1
  408f88:	6003      	str	r3, [r0, #0]
  408f8a:	2001      	movs	r0, #1
  408f8c:	4770      	bx	lr
  408f8e:	bf00      	nop

00408f90 <__i2b>:
  408f90:	b510      	push	{r4, lr}
  408f92:	460c      	mov	r4, r1
  408f94:	2101      	movs	r1, #1
  408f96:	f7ff ff3d 	bl	408e14 <_Balloc>
  408f9a:	2201      	movs	r2, #1
  408f9c:	6144      	str	r4, [r0, #20]
  408f9e:	6102      	str	r2, [r0, #16]
  408fa0:	bd10      	pop	{r4, pc}
  408fa2:	bf00      	nop

00408fa4 <__multiply>:
  408fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408fa8:	690d      	ldr	r5, [r1, #16]
  408faa:	6917      	ldr	r7, [r2, #16]
  408fac:	42bd      	cmp	r5, r7
  408fae:	b083      	sub	sp, #12
  408fb0:	460c      	mov	r4, r1
  408fb2:	4616      	mov	r6, r2
  408fb4:	da04      	bge.n	408fc0 <__multiply+0x1c>
  408fb6:	462a      	mov	r2, r5
  408fb8:	4634      	mov	r4, r6
  408fba:	463d      	mov	r5, r7
  408fbc:	460e      	mov	r6, r1
  408fbe:	4617      	mov	r7, r2
  408fc0:	68a3      	ldr	r3, [r4, #8]
  408fc2:	6861      	ldr	r1, [r4, #4]
  408fc4:	eb05 0807 	add.w	r8, r5, r7
  408fc8:	4598      	cmp	r8, r3
  408fca:	bfc8      	it	gt
  408fcc:	3101      	addgt	r1, #1
  408fce:	f7ff ff21 	bl	408e14 <_Balloc>
  408fd2:	f100 0c14 	add.w	ip, r0, #20
  408fd6:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  408fda:	45cc      	cmp	ip, r9
  408fdc:	9000      	str	r0, [sp, #0]
  408fde:	d205      	bcs.n	408fec <__multiply+0x48>
  408fe0:	4663      	mov	r3, ip
  408fe2:	2100      	movs	r1, #0
  408fe4:	f843 1b04 	str.w	r1, [r3], #4
  408fe8:	4599      	cmp	r9, r3
  408fea:	d8fb      	bhi.n	408fe4 <__multiply+0x40>
  408fec:	f106 0214 	add.w	r2, r6, #20
  408ff0:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  408ff4:	f104 0314 	add.w	r3, r4, #20
  408ff8:	4552      	cmp	r2, sl
  408ffa:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  408ffe:	d254      	bcs.n	4090aa <__multiply+0x106>
  409000:	f8cd 9004 	str.w	r9, [sp, #4]
  409004:	4699      	mov	r9, r3
  409006:	f852 3b04 	ldr.w	r3, [r2], #4
  40900a:	fa1f fb83 	uxth.w	fp, r3
  40900e:	f1bb 0f00 	cmp.w	fp, #0
  409012:	d020      	beq.n	409056 <__multiply+0xb2>
  409014:	2000      	movs	r0, #0
  409016:	464f      	mov	r7, r9
  409018:	4666      	mov	r6, ip
  40901a:	4605      	mov	r5, r0
  40901c:	e000      	b.n	409020 <__multiply+0x7c>
  40901e:	461e      	mov	r6, r3
  409020:	f857 4b04 	ldr.w	r4, [r7], #4
  409024:	6830      	ldr	r0, [r6, #0]
  409026:	b2a1      	uxth	r1, r4
  409028:	b283      	uxth	r3, r0
  40902a:	fb0b 3101 	mla	r1, fp, r1, r3
  40902e:	0c24      	lsrs	r4, r4, #16
  409030:	0c00      	lsrs	r0, r0, #16
  409032:	194b      	adds	r3, r1, r5
  409034:	fb0b 0004 	mla	r0, fp, r4, r0
  409038:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40903c:	b299      	uxth	r1, r3
  40903e:	4633      	mov	r3, r6
  409040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  409044:	45be      	cmp	lr, r7
  409046:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40904a:	f843 1b04 	str.w	r1, [r3], #4
  40904e:	d8e6      	bhi.n	40901e <__multiply+0x7a>
  409050:	6075      	str	r5, [r6, #4]
  409052:	f852 3c04 	ldr.w	r3, [r2, #-4]
  409056:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40905a:	d020      	beq.n	40909e <__multiply+0xfa>
  40905c:	f8dc 3000 	ldr.w	r3, [ip]
  409060:	4667      	mov	r7, ip
  409062:	4618      	mov	r0, r3
  409064:	464d      	mov	r5, r9
  409066:	2100      	movs	r1, #0
  409068:	e000      	b.n	40906c <__multiply+0xc8>
  40906a:	4637      	mov	r7, r6
  40906c:	882c      	ldrh	r4, [r5, #0]
  40906e:	0c00      	lsrs	r0, r0, #16
  409070:	fb0b 0004 	mla	r0, fp, r4, r0
  409074:	4401      	add	r1, r0
  409076:	b29c      	uxth	r4, r3
  409078:	463e      	mov	r6, r7
  40907a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40907e:	f846 3b04 	str.w	r3, [r6], #4
  409082:	6878      	ldr	r0, [r7, #4]
  409084:	f855 4b04 	ldr.w	r4, [r5], #4
  409088:	b283      	uxth	r3, r0
  40908a:	0c24      	lsrs	r4, r4, #16
  40908c:	fb0b 3404 	mla	r4, fp, r4, r3
  409090:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  409094:	45ae      	cmp	lr, r5
  409096:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40909a:	d8e6      	bhi.n	40906a <__multiply+0xc6>
  40909c:	607b      	str	r3, [r7, #4]
  40909e:	4592      	cmp	sl, r2
  4090a0:	f10c 0c04 	add.w	ip, ip, #4
  4090a4:	d8af      	bhi.n	409006 <__multiply+0x62>
  4090a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
  4090aa:	f1b8 0f00 	cmp.w	r8, #0
  4090ae:	dd0b      	ble.n	4090c8 <__multiply+0x124>
  4090b0:	f859 3c04 	ldr.w	r3, [r9, #-4]
  4090b4:	f1a9 0904 	sub.w	r9, r9, #4
  4090b8:	b11b      	cbz	r3, 4090c2 <__multiply+0x11e>
  4090ba:	e005      	b.n	4090c8 <__multiply+0x124>
  4090bc:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  4090c0:	b913      	cbnz	r3, 4090c8 <__multiply+0x124>
  4090c2:	f1b8 0801 	subs.w	r8, r8, #1
  4090c6:	d1f9      	bne.n	4090bc <__multiply+0x118>
  4090c8:	9800      	ldr	r0, [sp, #0]
  4090ca:	f8c0 8010 	str.w	r8, [r0, #16]
  4090ce:	b003      	add	sp, #12
  4090d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004090d4 <__pow5mult>:
  4090d4:	f012 0303 	ands.w	r3, r2, #3
  4090d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4090dc:	4614      	mov	r4, r2
  4090de:	4607      	mov	r7, r0
  4090e0:	d12e      	bne.n	409140 <__pow5mult+0x6c>
  4090e2:	460e      	mov	r6, r1
  4090e4:	10a4      	asrs	r4, r4, #2
  4090e6:	d01c      	beq.n	409122 <__pow5mult+0x4e>
  4090e8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  4090ea:	b395      	cbz	r5, 409152 <__pow5mult+0x7e>
  4090ec:	07e3      	lsls	r3, r4, #31
  4090ee:	f04f 0800 	mov.w	r8, #0
  4090f2:	d406      	bmi.n	409102 <__pow5mult+0x2e>
  4090f4:	1064      	asrs	r4, r4, #1
  4090f6:	d014      	beq.n	409122 <__pow5mult+0x4e>
  4090f8:	6828      	ldr	r0, [r5, #0]
  4090fa:	b1a8      	cbz	r0, 409128 <__pow5mult+0x54>
  4090fc:	4605      	mov	r5, r0
  4090fe:	07e3      	lsls	r3, r4, #31
  409100:	d5f8      	bpl.n	4090f4 <__pow5mult+0x20>
  409102:	462a      	mov	r2, r5
  409104:	4631      	mov	r1, r6
  409106:	4638      	mov	r0, r7
  409108:	f7ff ff4c 	bl	408fa4 <__multiply>
  40910c:	b1b6      	cbz	r6, 40913c <__pow5mult+0x68>
  40910e:	6872      	ldr	r2, [r6, #4]
  409110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409112:	1064      	asrs	r4, r4, #1
  409114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409118:	6031      	str	r1, [r6, #0]
  40911a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40911e:	4606      	mov	r6, r0
  409120:	d1ea      	bne.n	4090f8 <__pow5mult+0x24>
  409122:	4630      	mov	r0, r6
  409124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409128:	462a      	mov	r2, r5
  40912a:	4629      	mov	r1, r5
  40912c:	4638      	mov	r0, r7
  40912e:	f7ff ff39 	bl	408fa4 <__multiply>
  409132:	6028      	str	r0, [r5, #0]
  409134:	f8c0 8000 	str.w	r8, [r0]
  409138:	4605      	mov	r5, r0
  40913a:	e7e0      	b.n	4090fe <__pow5mult+0x2a>
  40913c:	4606      	mov	r6, r0
  40913e:	e7d9      	b.n	4090f4 <__pow5mult+0x20>
  409140:	1e5a      	subs	r2, r3, #1
  409142:	4d0b      	ldr	r5, [pc, #44]	; (409170 <__pow5mult+0x9c>)
  409144:	2300      	movs	r3, #0
  409146:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40914a:	f7ff fe93 	bl	408e74 <__multadd>
  40914e:	4606      	mov	r6, r0
  409150:	e7c8      	b.n	4090e4 <__pow5mult+0x10>
  409152:	2101      	movs	r1, #1
  409154:	4638      	mov	r0, r7
  409156:	f7ff fe5d 	bl	408e14 <_Balloc>
  40915a:	f240 2171 	movw	r1, #625	; 0x271
  40915e:	2201      	movs	r2, #1
  409160:	2300      	movs	r3, #0
  409162:	6141      	str	r1, [r0, #20]
  409164:	6102      	str	r2, [r0, #16]
  409166:	4605      	mov	r5, r0
  409168:	64b8      	str	r0, [r7, #72]	; 0x48
  40916a:	6003      	str	r3, [r0, #0]
  40916c:	e7be      	b.n	4090ec <__pow5mult+0x18>
  40916e:	bf00      	nop
  409170:	0040bc50 	.word	0x0040bc50

00409174 <__lshift>:
  409174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409178:	4691      	mov	r9, r2
  40917a:	690a      	ldr	r2, [r1, #16]
  40917c:	688b      	ldr	r3, [r1, #8]
  40917e:	ea4f 1469 	mov.w	r4, r9, asr #5
  409182:	eb04 0802 	add.w	r8, r4, r2
  409186:	f108 0501 	add.w	r5, r8, #1
  40918a:	429d      	cmp	r5, r3
  40918c:	460e      	mov	r6, r1
  40918e:	4682      	mov	sl, r0
  409190:	6849      	ldr	r1, [r1, #4]
  409192:	dd04      	ble.n	40919e <__lshift+0x2a>
  409194:	005b      	lsls	r3, r3, #1
  409196:	429d      	cmp	r5, r3
  409198:	f101 0101 	add.w	r1, r1, #1
  40919c:	dcfa      	bgt.n	409194 <__lshift+0x20>
  40919e:	4650      	mov	r0, sl
  4091a0:	f7ff fe38 	bl	408e14 <_Balloc>
  4091a4:	2c00      	cmp	r4, #0
  4091a6:	f100 0214 	add.w	r2, r0, #20
  4091aa:	dd38      	ble.n	40921e <__lshift+0xaa>
  4091ac:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  4091b0:	2100      	movs	r1, #0
  4091b2:	f842 1b04 	str.w	r1, [r2], #4
  4091b6:	4293      	cmp	r3, r2
  4091b8:	d1fb      	bne.n	4091b2 <__lshift+0x3e>
  4091ba:	6934      	ldr	r4, [r6, #16]
  4091bc:	f106 0114 	add.w	r1, r6, #20
  4091c0:	f019 091f 	ands.w	r9, r9, #31
  4091c4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4091c8:	d021      	beq.n	40920e <__lshift+0x9a>
  4091ca:	f1c9 0220 	rsb	r2, r9, #32
  4091ce:	2400      	movs	r4, #0
  4091d0:	680f      	ldr	r7, [r1, #0]
  4091d2:	fa07 fc09 	lsl.w	ip, r7, r9
  4091d6:	ea4c 0404 	orr.w	r4, ip, r4
  4091da:	469c      	mov	ip, r3
  4091dc:	f843 4b04 	str.w	r4, [r3], #4
  4091e0:	f851 4b04 	ldr.w	r4, [r1], #4
  4091e4:	458e      	cmp	lr, r1
  4091e6:	fa24 f402 	lsr.w	r4, r4, r2
  4091ea:	d8f1      	bhi.n	4091d0 <__lshift+0x5c>
  4091ec:	f8cc 4004 	str.w	r4, [ip, #4]
  4091f0:	b10c      	cbz	r4, 4091f6 <__lshift+0x82>
  4091f2:	f108 0502 	add.w	r5, r8, #2
  4091f6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  4091fa:	6872      	ldr	r2, [r6, #4]
  4091fc:	3d01      	subs	r5, #1
  4091fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409202:	6105      	str	r5, [r0, #16]
  409204:	6031      	str	r1, [r6, #0]
  409206:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40920a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40920e:	3b04      	subs	r3, #4
  409210:	f851 2b04 	ldr.w	r2, [r1], #4
  409214:	f843 2f04 	str.w	r2, [r3, #4]!
  409218:	458e      	cmp	lr, r1
  40921a:	d8f9      	bhi.n	409210 <__lshift+0x9c>
  40921c:	e7eb      	b.n	4091f6 <__lshift+0x82>
  40921e:	4613      	mov	r3, r2
  409220:	e7cb      	b.n	4091ba <__lshift+0x46>
  409222:	bf00      	nop

00409224 <__mcmp>:
  409224:	6902      	ldr	r2, [r0, #16]
  409226:	690b      	ldr	r3, [r1, #16]
  409228:	1ad2      	subs	r2, r2, r3
  40922a:	d112      	bne.n	409252 <__mcmp+0x2e>
  40922c:	009b      	lsls	r3, r3, #2
  40922e:	3014      	adds	r0, #20
  409230:	3114      	adds	r1, #20
  409232:	4419      	add	r1, r3
  409234:	b410      	push	{r4}
  409236:	4403      	add	r3, r0
  409238:	e001      	b.n	40923e <__mcmp+0x1a>
  40923a:	4298      	cmp	r0, r3
  40923c:	d20b      	bcs.n	409256 <__mcmp+0x32>
  40923e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  409242:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  409246:	4294      	cmp	r4, r2
  409248:	d0f7      	beq.n	40923a <__mcmp+0x16>
  40924a:	d307      	bcc.n	40925c <__mcmp+0x38>
  40924c:	2001      	movs	r0, #1
  40924e:	bc10      	pop	{r4}
  409250:	4770      	bx	lr
  409252:	4610      	mov	r0, r2
  409254:	4770      	bx	lr
  409256:	2000      	movs	r0, #0
  409258:	bc10      	pop	{r4}
  40925a:	4770      	bx	lr
  40925c:	f04f 30ff 	mov.w	r0, #4294967295
  409260:	e7f5      	b.n	40924e <__mcmp+0x2a>
  409262:	bf00      	nop

00409264 <__mdiff>:
  409264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409268:	690b      	ldr	r3, [r1, #16]
  40926a:	460f      	mov	r7, r1
  40926c:	6911      	ldr	r1, [r2, #16]
  40926e:	1a5b      	subs	r3, r3, r1
  409270:	2b00      	cmp	r3, #0
  409272:	4690      	mov	r8, r2
  409274:	d117      	bne.n	4092a6 <__mdiff+0x42>
  409276:	0089      	lsls	r1, r1, #2
  409278:	f107 0214 	add.w	r2, r7, #20
  40927c:	f108 0514 	add.w	r5, r8, #20
  409280:	1853      	adds	r3, r2, r1
  409282:	4429      	add	r1, r5
  409284:	e001      	b.n	40928a <__mdiff+0x26>
  409286:	429a      	cmp	r2, r3
  409288:	d25e      	bcs.n	409348 <__mdiff+0xe4>
  40928a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  40928e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  409292:	42a6      	cmp	r6, r4
  409294:	d0f7      	beq.n	409286 <__mdiff+0x22>
  409296:	d260      	bcs.n	40935a <__mdiff+0xf6>
  409298:	463b      	mov	r3, r7
  40929a:	4614      	mov	r4, r2
  40929c:	4647      	mov	r7, r8
  40929e:	f04f 0901 	mov.w	r9, #1
  4092a2:	4698      	mov	r8, r3
  4092a4:	e006      	b.n	4092b4 <__mdiff+0x50>
  4092a6:	db5d      	blt.n	409364 <__mdiff+0x100>
  4092a8:	f107 0514 	add.w	r5, r7, #20
  4092ac:	f102 0414 	add.w	r4, r2, #20
  4092b0:	f04f 0900 	mov.w	r9, #0
  4092b4:	6879      	ldr	r1, [r7, #4]
  4092b6:	f7ff fdad 	bl	408e14 <_Balloc>
  4092ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4092be:	693e      	ldr	r6, [r7, #16]
  4092c0:	f8c0 900c 	str.w	r9, [r0, #12]
  4092c4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4092c8:	46a6      	mov	lr, r4
  4092ca:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4092ce:	f100 0414 	add.w	r4, r0, #20
  4092d2:	2300      	movs	r3, #0
  4092d4:	f85e 1b04 	ldr.w	r1, [lr], #4
  4092d8:	f855 8b04 	ldr.w	r8, [r5], #4
  4092dc:	b28a      	uxth	r2, r1
  4092de:	fa13 f388 	uxtah	r3, r3, r8
  4092e2:	0c09      	lsrs	r1, r1, #16
  4092e4:	1a9a      	subs	r2, r3, r2
  4092e6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4092ea:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4092ee:	b292      	uxth	r2, r2
  4092f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4092f4:	45f4      	cmp	ip, lr
  4092f6:	f844 2b04 	str.w	r2, [r4], #4
  4092fa:	ea4f 4323 	mov.w	r3, r3, asr #16
  4092fe:	d8e9      	bhi.n	4092d4 <__mdiff+0x70>
  409300:	42af      	cmp	r7, r5
  409302:	d917      	bls.n	409334 <__mdiff+0xd0>
  409304:	46a4      	mov	ip, r4
  409306:	4629      	mov	r1, r5
  409308:	f851 eb04 	ldr.w	lr, [r1], #4
  40930c:	fa13 f28e 	uxtah	r2, r3, lr
  409310:	1413      	asrs	r3, r2, #16
  409312:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  409316:	b292      	uxth	r2, r2
  409318:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40931c:	428f      	cmp	r7, r1
  40931e:	f84c 2b04 	str.w	r2, [ip], #4
  409322:	ea4f 4323 	mov.w	r3, r3, asr #16
  409326:	d8ef      	bhi.n	409308 <__mdiff+0xa4>
  409328:	43ed      	mvns	r5, r5
  40932a:	443d      	add	r5, r7
  40932c:	f025 0503 	bic.w	r5, r5, #3
  409330:	3504      	adds	r5, #4
  409332:	442c      	add	r4, r5
  409334:	3c04      	subs	r4, #4
  409336:	b922      	cbnz	r2, 409342 <__mdiff+0xde>
  409338:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40933c:	3e01      	subs	r6, #1
  40933e:	2b00      	cmp	r3, #0
  409340:	d0fa      	beq.n	409338 <__mdiff+0xd4>
  409342:	6106      	str	r6, [r0, #16]
  409344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409348:	2100      	movs	r1, #0
  40934a:	f7ff fd63 	bl	408e14 <_Balloc>
  40934e:	2201      	movs	r2, #1
  409350:	2300      	movs	r3, #0
  409352:	6102      	str	r2, [r0, #16]
  409354:	6143      	str	r3, [r0, #20]
  409356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40935a:	462c      	mov	r4, r5
  40935c:	f04f 0900 	mov.w	r9, #0
  409360:	4615      	mov	r5, r2
  409362:	e7a7      	b.n	4092b4 <__mdiff+0x50>
  409364:	463b      	mov	r3, r7
  409366:	f107 0414 	add.w	r4, r7, #20
  40936a:	f108 0514 	add.w	r5, r8, #20
  40936e:	4647      	mov	r7, r8
  409370:	f04f 0901 	mov.w	r9, #1
  409374:	4698      	mov	r8, r3
  409376:	e79d      	b.n	4092b4 <__mdiff+0x50>

00409378 <__d2b>:
  409378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40937c:	b082      	sub	sp, #8
  40937e:	2101      	movs	r1, #1
  409380:	461c      	mov	r4, r3
  409382:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409386:	4615      	mov	r5, r2
  409388:	9e08      	ldr	r6, [sp, #32]
  40938a:	f7ff fd43 	bl	408e14 <_Balloc>
  40938e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409392:	4680      	mov	r8, r0
  409394:	b10f      	cbz	r7, 40939a <__d2b+0x22>
  409396:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40939a:	9401      	str	r4, [sp, #4]
  40939c:	b31d      	cbz	r5, 4093e6 <__d2b+0x6e>
  40939e:	a802      	add	r0, sp, #8
  4093a0:	f840 5d08 	str.w	r5, [r0, #-8]!
  4093a4:	f7ff fdc6 	bl	408f34 <__lo0bits>
  4093a8:	2800      	cmp	r0, #0
  4093aa:	d134      	bne.n	409416 <__d2b+0x9e>
  4093ac:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4093b0:	f8c8 2014 	str.w	r2, [r8, #20]
  4093b4:	2b00      	cmp	r3, #0
  4093b6:	bf0c      	ite	eq
  4093b8:	2101      	moveq	r1, #1
  4093ba:	2102      	movne	r1, #2
  4093bc:	f8c8 3018 	str.w	r3, [r8, #24]
  4093c0:	f8c8 1010 	str.w	r1, [r8, #16]
  4093c4:	b9df      	cbnz	r7, 4093fe <__d2b+0x86>
  4093c6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4093ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4093ce:	6030      	str	r0, [r6, #0]
  4093d0:	6918      	ldr	r0, [r3, #16]
  4093d2:	f7ff fd8f 	bl	408ef4 <__hi0bits>
  4093d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4093d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4093dc:	6018      	str	r0, [r3, #0]
  4093de:	4640      	mov	r0, r8
  4093e0:	b002      	add	sp, #8
  4093e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4093e6:	a801      	add	r0, sp, #4
  4093e8:	f7ff fda4 	bl	408f34 <__lo0bits>
  4093ec:	9b01      	ldr	r3, [sp, #4]
  4093ee:	f8c8 3014 	str.w	r3, [r8, #20]
  4093f2:	2101      	movs	r1, #1
  4093f4:	3020      	adds	r0, #32
  4093f6:	f8c8 1010 	str.w	r1, [r8, #16]
  4093fa:	2f00      	cmp	r7, #0
  4093fc:	d0e3      	beq.n	4093c6 <__d2b+0x4e>
  4093fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409400:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409404:	4407      	add	r7, r0
  409406:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40940a:	6037      	str	r7, [r6, #0]
  40940c:	6018      	str	r0, [r3, #0]
  40940e:	4640      	mov	r0, r8
  409410:	b002      	add	sp, #8
  409412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409416:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40941a:	f1c0 0120 	rsb	r1, r0, #32
  40941e:	fa03 f101 	lsl.w	r1, r3, r1
  409422:	430a      	orrs	r2, r1
  409424:	40c3      	lsrs	r3, r0
  409426:	9301      	str	r3, [sp, #4]
  409428:	f8c8 2014 	str.w	r2, [r8, #20]
  40942c:	e7c2      	b.n	4093b4 <__d2b+0x3c>
  40942e:	bf00      	nop

00409430 <_realloc_r>:
  409430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409434:	4617      	mov	r7, r2
  409436:	b083      	sub	sp, #12
  409438:	2900      	cmp	r1, #0
  40943a:	f000 80c1 	beq.w	4095c0 <_realloc_r+0x190>
  40943e:	460e      	mov	r6, r1
  409440:	4681      	mov	r9, r0
  409442:	f107 050b 	add.w	r5, r7, #11
  409446:	f7ff fce1 	bl	408e0c <__malloc_lock>
  40944a:	f856 ec04 	ldr.w	lr, [r6, #-4]
  40944e:	2d16      	cmp	r5, #22
  409450:	f02e 0403 	bic.w	r4, lr, #3
  409454:	f1a6 0808 	sub.w	r8, r6, #8
  409458:	d840      	bhi.n	4094dc <_realloc_r+0xac>
  40945a:	2210      	movs	r2, #16
  40945c:	4615      	mov	r5, r2
  40945e:	42af      	cmp	r7, r5
  409460:	d841      	bhi.n	4094e6 <_realloc_r+0xb6>
  409462:	4294      	cmp	r4, r2
  409464:	da75      	bge.n	409552 <_realloc_r+0x122>
  409466:	4bc9      	ldr	r3, [pc, #804]	; (40978c <_realloc_r+0x35c>)
  409468:	6899      	ldr	r1, [r3, #8]
  40946a:	eb08 0004 	add.w	r0, r8, r4
  40946e:	4288      	cmp	r0, r1
  409470:	6841      	ldr	r1, [r0, #4]
  409472:	f000 80d9 	beq.w	409628 <_realloc_r+0x1f8>
  409476:	f021 0301 	bic.w	r3, r1, #1
  40947a:	4403      	add	r3, r0
  40947c:	685b      	ldr	r3, [r3, #4]
  40947e:	07db      	lsls	r3, r3, #31
  409480:	d57d      	bpl.n	40957e <_realloc_r+0x14e>
  409482:	f01e 0f01 	tst.w	lr, #1
  409486:	d035      	beq.n	4094f4 <_realloc_r+0xc4>
  409488:	4639      	mov	r1, r7
  40948a:	4648      	mov	r0, r9
  40948c:	f7ff f8b8 	bl	408600 <_malloc_r>
  409490:	4607      	mov	r7, r0
  409492:	b1e0      	cbz	r0, 4094ce <_realloc_r+0x9e>
  409494:	f856 3c04 	ldr.w	r3, [r6, #-4]
  409498:	f023 0301 	bic.w	r3, r3, #1
  40949c:	4443      	add	r3, r8
  40949e:	f1a0 0208 	sub.w	r2, r0, #8
  4094a2:	429a      	cmp	r2, r3
  4094a4:	f000 8144 	beq.w	409730 <_realloc_r+0x300>
  4094a8:	1f22      	subs	r2, r4, #4
  4094aa:	2a24      	cmp	r2, #36	; 0x24
  4094ac:	f200 8131 	bhi.w	409712 <_realloc_r+0x2e2>
  4094b0:	2a13      	cmp	r2, #19
  4094b2:	f200 8104 	bhi.w	4096be <_realloc_r+0x28e>
  4094b6:	4603      	mov	r3, r0
  4094b8:	4632      	mov	r2, r6
  4094ba:	6811      	ldr	r1, [r2, #0]
  4094bc:	6019      	str	r1, [r3, #0]
  4094be:	6851      	ldr	r1, [r2, #4]
  4094c0:	6059      	str	r1, [r3, #4]
  4094c2:	6892      	ldr	r2, [r2, #8]
  4094c4:	609a      	str	r2, [r3, #8]
  4094c6:	4631      	mov	r1, r6
  4094c8:	4648      	mov	r0, r9
  4094ca:	f7fe fd7b 	bl	407fc4 <_free_r>
  4094ce:	4648      	mov	r0, r9
  4094d0:	f7ff fc9e 	bl	408e10 <__malloc_unlock>
  4094d4:	4638      	mov	r0, r7
  4094d6:	b003      	add	sp, #12
  4094d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4094dc:	f025 0507 	bic.w	r5, r5, #7
  4094e0:	2d00      	cmp	r5, #0
  4094e2:	462a      	mov	r2, r5
  4094e4:	dabb      	bge.n	40945e <_realloc_r+0x2e>
  4094e6:	230c      	movs	r3, #12
  4094e8:	2000      	movs	r0, #0
  4094ea:	f8c9 3000 	str.w	r3, [r9]
  4094ee:	b003      	add	sp, #12
  4094f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4094f4:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4094f8:	ebc3 0a08 	rsb	sl, r3, r8
  4094fc:	f8da 3004 	ldr.w	r3, [sl, #4]
  409500:	f023 0c03 	bic.w	ip, r3, #3
  409504:	eb04 030c 	add.w	r3, r4, ip
  409508:	4293      	cmp	r3, r2
  40950a:	dbbd      	blt.n	409488 <_realloc_r+0x58>
  40950c:	4657      	mov	r7, sl
  40950e:	f8da 100c 	ldr.w	r1, [sl, #12]
  409512:	f857 0f08 	ldr.w	r0, [r7, #8]!
  409516:	1f22      	subs	r2, r4, #4
  409518:	2a24      	cmp	r2, #36	; 0x24
  40951a:	60c1      	str	r1, [r0, #12]
  40951c:	6088      	str	r0, [r1, #8]
  40951e:	f200 8117 	bhi.w	409750 <_realloc_r+0x320>
  409522:	2a13      	cmp	r2, #19
  409524:	f240 8112 	bls.w	40974c <_realloc_r+0x31c>
  409528:	6831      	ldr	r1, [r6, #0]
  40952a:	f8ca 1008 	str.w	r1, [sl, #8]
  40952e:	6871      	ldr	r1, [r6, #4]
  409530:	f8ca 100c 	str.w	r1, [sl, #12]
  409534:	2a1b      	cmp	r2, #27
  409536:	f200 812b 	bhi.w	409790 <_realloc_r+0x360>
  40953a:	3608      	adds	r6, #8
  40953c:	f10a 0210 	add.w	r2, sl, #16
  409540:	6831      	ldr	r1, [r6, #0]
  409542:	6011      	str	r1, [r2, #0]
  409544:	6871      	ldr	r1, [r6, #4]
  409546:	6051      	str	r1, [r2, #4]
  409548:	68b1      	ldr	r1, [r6, #8]
  40954a:	6091      	str	r1, [r2, #8]
  40954c:	463e      	mov	r6, r7
  40954e:	461c      	mov	r4, r3
  409550:	46d0      	mov	r8, sl
  409552:	1b63      	subs	r3, r4, r5
  409554:	2b0f      	cmp	r3, #15
  409556:	d81d      	bhi.n	409594 <_realloc_r+0x164>
  409558:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40955c:	f003 0301 	and.w	r3, r3, #1
  409560:	4323      	orrs	r3, r4
  409562:	4444      	add	r4, r8
  409564:	f8c8 3004 	str.w	r3, [r8, #4]
  409568:	6863      	ldr	r3, [r4, #4]
  40956a:	f043 0301 	orr.w	r3, r3, #1
  40956e:	6063      	str	r3, [r4, #4]
  409570:	4648      	mov	r0, r9
  409572:	f7ff fc4d 	bl	408e10 <__malloc_unlock>
  409576:	4630      	mov	r0, r6
  409578:	b003      	add	sp, #12
  40957a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40957e:	f021 0103 	bic.w	r1, r1, #3
  409582:	4421      	add	r1, r4
  409584:	4291      	cmp	r1, r2
  409586:	db21      	blt.n	4095cc <_realloc_r+0x19c>
  409588:	68c3      	ldr	r3, [r0, #12]
  40958a:	6882      	ldr	r2, [r0, #8]
  40958c:	460c      	mov	r4, r1
  40958e:	60d3      	str	r3, [r2, #12]
  409590:	609a      	str	r2, [r3, #8]
  409592:	e7de      	b.n	409552 <_realloc_r+0x122>
  409594:	f8d8 2004 	ldr.w	r2, [r8, #4]
  409598:	eb08 0105 	add.w	r1, r8, r5
  40959c:	f002 0201 	and.w	r2, r2, #1
  4095a0:	4315      	orrs	r5, r2
  4095a2:	f043 0201 	orr.w	r2, r3, #1
  4095a6:	440b      	add	r3, r1
  4095a8:	f8c8 5004 	str.w	r5, [r8, #4]
  4095ac:	604a      	str	r2, [r1, #4]
  4095ae:	685a      	ldr	r2, [r3, #4]
  4095b0:	f042 0201 	orr.w	r2, r2, #1
  4095b4:	3108      	adds	r1, #8
  4095b6:	605a      	str	r2, [r3, #4]
  4095b8:	4648      	mov	r0, r9
  4095ba:	f7fe fd03 	bl	407fc4 <_free_r>
  4095be:	e7d7      	b.n	409570 <_realloc_r+0x140>
  4095c0:	4611      	mov	r1, r2
  4095c2:	b003      	add	sp, #12
  4095c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4095c8:	f7ff b81a 	b.w	408600 <_malloc_r>
  4095cc:	f01e 0f01 	tst.w	lr, #1
  4095d0:	f47f af5a 	bne.w	409488 <_realloc_r+0x58>
  4095d4:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4095d8:	ebc3 0a08 	rsb	sl, r3, r8
  4095dc:	f8da 3004 	ldr.w	r3, [sl, #4]
  4095e0:	f023 0c03 	bic.w	ip, r3, #3
  4095e4:	eb01 0e0c 	add.w	lr, r1, ip
  4095e8:	4596      	cmp	lr, r2
  4095ea:	db8b      	blt.n	409504 <_realloc_r+0xd4>
  4095ec:	68c3      	ldr	r3, [r0, #12]
  4095ee:	6882      	ldr	r2, [r0, #8]
  4095f0:	4657      	mov	r7, sl
  4095f2:	60d3      	str	r3, [r2, #12]
  4095f4:	609a      	str	r2, [r3, #8]
  4095f6:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4095fa:	f8da 300c 	ldr.w	r3, [sl, #12]
  4095fe:	60cb      	str	r3, [r1, #12]
  409600:	1f22      	subs	r2, r4, #4
  409602:	2a24      	cmp	r2, #36	; 0x24
  409604:	6099      	str	r1, [r3, #8]
  409606:	f200 8099 	bhi.w	40973c <_realloc_r+0x30c>
  40960a:	2a13      	cmp	r2, #19
  40960c:	d962      	bls.n	4096d4 <_realloc_r+0x2a4>
  40960e:	6833      	ldr	r3, [r6, #0]
  409610:	f8ca 3008 	str.w	r3, [sl, #8]
  409614:	6873      	ldr	r3, [r6, #4]
  409616:	f8ca 300c 	str.w	r3, [sl, #12]
  40961a:	2a1b      	cmp	r2, #27
  40961c:	f200 80a0 	bhi.w	409760 <_realloc_r+0x330>
  409620:	3608      	adds	r6, #8
  409622:	f10a 0310 	add.w	r3, sl, #16
  409626:	e056      	b.n	4096d6 <_realloc_r+0x2a6>
  409628:	f021 0b03 	bic.w	fp, r1, #3
  40962c:	44a3      	add	fp, r4
  40962e:	f105 0010 	add.w	r0, r5, #16
  409632:	4583      	cmp	fp, r0
  409634:	da59      	bge.n	4096ea <_realloc_r+0x2ba>
  409636:	f01e 0f01 	tst.w	lr, #1
  40963a:	f47f af25 	bne.w	409488 <_realloc_r+0x58>
  40963e:	f856 1c08 	ldr.w	r1, [r6, #-8]
  409642:	ebc1 0a08 	rsb	sl, r1, r8
  409646:	f8da 1004 	ldr.w	r1, [sl, #4]
  40964a:	f021 0c03 	bic.w	ip, r1, #3
  40964e:	44e3      	add	fp, ip
  409650:	4558      	cmp	r0, fp
  409652:	f73f af57 	bgt.w	409504 <_realloc_r+0xd4>
  409656:	4657      	mov	r7, sl
  409658:	f8da 100c 	ldr.w	r1, [sl, #12]
  40965c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  409660:	1f22      	subs	r2, r4, #4
  409662:	2a24      	cmp	r2, #36	; 0x24
  409664:	60c1      	str	r1, [r0, #12]
  409666:	6088      	str	r0, [r1, #8]
  409668:	f200 80b4 	bhi.w	4097d4 <_realloc_r+0x3a4>
  40966c:	2a13      	cmp	r2, #19
  40966e:	f240 80a5 	bls.w	4097bc <_realloc_r+0x38c>
  409672:	6831      	ldr	r1, [r6, #0]
  409674:	f8ca 1008 	str.w	r1, [sl, #8]
  409678:	6871      	ldr	r1, [r6, #4]
  40967a:	f8ca 100c 	str.w	r1, [sl, #12]
  40967e:	2a1b      	cmp	r2, #27
  409680:	f200 80af 	bhi.w	4097e2 <_realloc_r+0x3b2>
  409684:	3608      	adds	r6, #8
  409686:	f10a 0210 	add.w	r2, sl, #16
  40968a:	6831      	ldr	r1, [r6, #0]
  40968c:	6011      	str	r1, [r2, #0]
  40968e:	6871      	ldr	r1, [r6, #4]
  409690:	6051      	str	r1, [r2, #4]
  409692:	68b1      	ldr	r1, [r6, #8]
  409694:	6091      	str	r1, [r2, #8]
  409696:	eb0a 0105 	add.w	r1, sl, r5
  40969a:	ebc5 020b 	rsb	r2, r5, fp
  40969e:	f042 0201 	orr.w	r2, r2, #1
  4096a2:	6099      	str	r1, [r3, #8]
  4096a4:	604a      	str	r2, [r1, #4]
  4096a6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4096aa:	f003 0301 	and.w	r3, r3, #1
  4096ae:	431d      	orrs	r5, r3
  4096b0:	4648      	mov	r0, r9
  4096b2:	f8ca 5004 	str.w	r5, [sl, #4]
  4096b6:	f7ff fbab 	bl	408e10 <__malloc_unlock>
  4096ba:	4638      	mov	r0, r7
  4096bc:	e75c      	b.n	409578 <_realloc_r+0x148>
  4096be:	6833      	ldr	r3, [r6, #0]
  4096c0:	6003      	str	r3, [r0, #0]
  4096c2:	6873      	ldr	r3, [r6, #4]
  4096c4:	6043      	str	r3, [r0, #4]
  4096c6:	2a1b      	cmp	r2, #27
  4096c8:	d827      	bhi.n	40971a <_realloc_r+0x2ea>
  4096ca:	f100 0308 	add.w	r3, r0, #8
  4096ce:	f106 0208 	add.w	r2, r6, #8
  4096d2:	e6f2      	b.n	4094ba <_realloc_r+0x8a>
  4096d4:	463b      	mov	r3, r7
  4096d6:	6832      	ldr	r2, [r6, #0]
  4096d8:	601a      	str	r2, [r3, #0]
  4096da:	6872      	ldr	r2, [r6, #4]
  4096dc:	605a      	str	r2, [r3, #4]
  4096de:	68b2      	ldr	r2, [r6, #8]
  4096e0:	609a      	str	r2, [r3, #8]
  4096e2:	463e      	mov	r6, r7
  4096e4:	4674      	mov	r4, lr
  4096e6:	46d0      	mov	r8, sl
  4096e8:	e733      	b.n	409552 <_realloc_r+0x122>
  4096ea:	eb08 0105 	add.w	r1, r8, r5
  4096ee:	ebc5 0b0b 	rsb	fp, r5, fp
  4096f2:	f04b 0201 	orr.w	r2, fp, #1
  4096f6:	6099      	str	r1, [r3, #8]
  4096f8:	604a      	str	r2, [r1, #4]
  4096fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4096fe:	f003 0301 	and.w	r3, r3, #1
  409702:	431d      	orrs	r5, r3
  409704:	4648      	mov	r0, r9
  409706:	f846 5c04 	str.w	r5, [r6, #-4]
  40970a:	f7ff fb81 	bl	408e10 <__malloc_unlock>
  40970e:	4630      	mov	r0, r6
  409710:	e732      	b.n	409578 <_realloc_r+0x148>
  409712:	4631      	mov	r1, r6
  409714:	f7ff fb16 	bl	408d44 <memmove>
  409718:	e6d5      	b.n	4094c6 <_realloc_r+0x96>
  40971a:	68b3      	ldr	r3, [r6, #8]
  40971c:	6083      	str	r3, [r0, #8]
  40971e:	68f3      	ldr	r3, [r6, #12]
  409720:	60c3      	str	r3, [r0, #12]
  409722:	2a24      	cmp	r2, #36	; 0x24
  409724:	d028      	beq.n	409778 <_realloc_r+0x348>
  409726:	f100 0310 	add.w	r3, r0, #16
  40972a:	f106 0210 	add.w	r2, r6, #16
  40972e:	e6c4      	b.n	4094ba <_realloc_r+0x8a>
  409730:	f850 3c04 	ldr.w	r3, [r0, #-4]
  409734:	f023 0303 	bic.w	r3, r3, #3
  409738:	441c      	add	r4, r3
  40973a:	e70a      	b.n	409552 <_realloc_r+0x122>
  40973c:	4631      	mov	r1, r6
  40973e:	4638      	mov	r0, r7
  409740:	4674      	mov	r4, lr
  409742:	46d0      	mov	r8, sl
  409744:	f7ff fafe 	bl	408d44 <memmove>
  409748:	463e      	mov	r6, r7
  40974a:	e702      	b.n	409552 <_realloc_r+0x122>
  40974c:	463a      	mov	r2, r7
  40974e:	e6f7      	b.n	409540 <_realloc_r+0x110>
  409750:	4631      	mov	r1, r6
  409752:	4638      	mov	r0, r7
  409754:	461c      	mov	r4, r3
  409756:	46d0      	mov	r8, sl
  409758:	f7ff faf4 	bl	408d44 <memmove>
  40975c:	463e      	mov	r6, r7
  40975e:	e6f8      	b.n	409552 <_realloc_r+0x122>
  409760:	68b3      	ldr	r3, [r6, #8]
  409762:	f8ca 3010 	str.w	r3, [sl, #16]
  409766:	68f3      	ldr	r3, [r6, #12]
  409768:	f8ca 3014 	str.w	r3, [sl, #20]
  40976c:	2a24      	cmp	r2, #36	; 0x24
  40976e:	d01b      	beq.n	4097a8 <_realloc_r+0x378>
  409770:	3610      	adds	r6, #16
  409772:	f10a 0318 	add.w	r3, sl, #24
  409776:	e7ae      	b.n	4096d6 <_realloc_r+0x2a6>
  409778:	6933      	ldr	r3, [r6, #16]
  40977a:	6103      	str	r3, [r0, #16]
  40977c:	6973      	ldr	r3, [r6, #20]
  40977e:	6143      	str	r3, [r0, #20]
  409780:	f106 0218 	add.w	r2, r6, #24
  409784:	f100 0318 	add.w	r3, r0, #24
  409788:	e697      	b.n	4094ba <_realloc_r+0x8a>
  40978a:	bf00      	nop
  40978c:	204004a8 	.word	0x204004a8
  409790:	68b1      	ldr	r1, [r6, #8]
  409792:	f8ca 1010 	str.w	r1, [sl, #16]
  409796:	68f1      	ldr	r1, [r6, #12]
  409798:	f8ca 1014 	str.w	r1, [sl, #20]
  40979c:	2a24      	cmp	r2, #36	; 0x24
  40979e:	d00f      	beq.n	4097c0 <_realloc_r+0x390>
  4097a0:	3610      	adds	r6, #16
  4097a2:	f10a 0218 	add.w	r2, sl, #24
  4097a6:	e6cb      	b.n	409540 <_realloc_r+0x110>
  4097a8:	6933      	ldr	r3, [r6, #16]
  4097aa:	f8ca 3018 	str.w	r3, [sl, #24]
  4097ae:	6973      	ldr	r3, [r6, #20]
  4097b0:	f8ca 301c 	str.w	r3, [sl, #28]
  4097b4:	3618      	adds	r6, #24
  4097b6:	f10a 0320 	add.w	r3, sl, #32
  4097ba:	e78c      	b.n	4096d6 <_realloc_r+0x2a6>
  4097bc:	463a      	mov	r2, r7
  4097be:	e764      	b.n	40968a <_realloc_r+0x25a>
  4097c0:	6932      	ldr	r2, [r6, #16]
  4097c2:	f8ca 2018 	str.w	r2, [sl, #24]
  4097c6:	6972      	ldr	r2, [r6, #20]
  4097c8:	f8ca 201c 	str.w	r2, [sl, #28]
  4097cc:	3618      	adds	r6, #24
  4097ce:	f10a 0220 	add.w	r2, sl, #32
  4097d2:	e6b5      	b.n	409540 <_realloc_r+0x110>
  4097d4:	4631      	mov	r1, r6
  4097d6:	4638      	mov	r0, r7
  4097d8:	9301      	str	r3, [sp, #4]
  4097da:	f7ff fab3 	bl	408d44 <memmove>
  4097de:	9b01      	ldr	r3, [sp, #4]
  4097e0:	e759      	b.n	409696 <_realloc_r+0x266>
  4097e2:	68b1      	ldr	r1, [r6, #8]
  4097e4:	f8ca 1010 	str.w	r1, [sl, #16]
  4097e8:	68f1      	ldr	r1, [r6, #12]
  4097ea:	f8ca 1014 	str.w	r1, [sl, #20]
  4097ee:	2a24      	cmp	r2, #36	; 0x24
  4097f0:	d003      	beq.n	4097fa <_realloc_r+0x3ca>
  4097f2:	3610      	adds	r6, #16
  4097f4:	f10a 0218 	add.w	r2, sl, #24
  4097f8:	e747      	b.n	40968a <_realloc_r+0x25a>
  4097fa:	6932      	ldr	r2, [r6, #16]
  4097fc:	f8ca 2018 	str.w	r2, [sl, #24]
  409800:	6972      	ldr	r2, [r6, #20]
  409802:	f8ca 201c 	str.w	r2, [sl, #28]
  409806:	3618      	adds	r6, #24
  409808:	f10a 0220 	add.w	r2, sl, #32
  40980c:	e73d      	b.n	40968a <_realloc_r+0x25a>
  40980e:	bf00      	nop

00409810 <_sbrk_r>:
  409810:	b538      	push	{r3, r4, r5, lr}
  409812:	4c07      	ldr	r4, [pc, #28]	; (409830 <_sbrk_r+0x20>)
  409814:	2300      	movs	r3, #0
  409816:	4605      	mov	r5, r0
  409818:	4608      	mov	r0, r1
  40981a:	6023      	str	r3, [r4, #0]
  40981c:	f7fa f8ac 	bl	403978 <_sbrk>
  409820:	1c43      	adds	r3, r0, #1
  409822:	d000      	beq.n	409826 <_sbrk_r+0x16>
  409824:	bd38      	pop	{r3, r4, r5, pc}
  409826:	6823      	ldr	r3, [r4, #0]
  409828:	2b00      	cmp	r3, #0
  40982a:	d0fb      	beq.n	409824 <_sbrk_r+0x14>
  40982c:	602b      	str	r3, [r5, #0]
  40982e:	bd38      	pop	{r3, r4, r5, pc}
  409830:	204015fc 	.word	0x204015fc

00409834 <__sread>:
  409834:	b510      	push	{r4, lr}
  409836:	460c      	mov	r4, r1
  409838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40983c:	f000 fa74 	bl	409d28 <_read_r>
  409840:	2800      	cmp	r0, #0
  409842:	db03      	blt.n	40984c <__sread+0x18>
  409844:	6d23      	ldr	r3, [r4, #80]	; 0x50
  409846:	4403      	add	r3, r0
  409848:	6523      	str	r3, [r4, #80]	; 0x50
  40984a:	bd10      	pop	{r4, pc}
  40984c:	89a3      	ldrh	r3, [r4, #12]
  40984e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409852:	81a3      	strh	r3, [r4, #12]
  409854:	bd10      	pop	{r4, pc}
  409856:	bf00      	nop

00409858 <__swrite>:
  409858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40985c:	4616      	mov	r6, r2
  40985e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409862:	461f      	mov	r7, r3
  409864:	05d3      	lsls	r3, r2, #23
  409866:	460c      	mov	r4, r1
  409868:	4605      	mov	r5, r0
  40986a:	d507      	bpl.n	40987c <__swrite+0x24>
  40986c:	2200      	movs	r2, #0
  40986e:	2302      	movs	r3, #2
  409870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409874:	f000 fa42 	bl	409cfc <_lseek_r>
  409878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40987c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409880:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409884:	81a2      	strh	r2, [r4, #12]
  409886:	463b      	mov	r3, r7
  409888:	4632      	mov	r2, r6
  40988a:	4628      	mov	r0, r5
  40988c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409890:	f000 b922 	b.w	409ad8 <_write_r>

00409894 <__sseek>:
  409894:	b510      	push	{r4, lr}
  409896:	460c      	mov	r4, r1
  409898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40989c:	f000 fa2e 	bl	409cfc <_lseek_r>
  4098a0:	89a3      	ldrh	r3, [r4, #12]
  4098a2:	1c42      	adds	r2, r0, #1
  4098a4:	bf0e      	itee	eq
  4098a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4098aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4098ae:	6520      	strne	r0, [r4, #80]	; 0x50
  4098b0:	81a3      	strh	r3, [r4, #12]
  4098b2:	bd10      	pop	{r4, pc}

004098b4 <__sclose>:
  4098b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4098b8:	f000 b9a6 	b.w	409c08 <_close_r>

004098bc <__ssprint_r>:
  4098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4098c0:	6893      	ldr	r3, [r2, #8]
  4098c2:	b083      	sub	sp, #12
  4098c4:	4690      	mov	r8, r2
  4098c6:	2b00      	cmp	r3, #0
  4098c8:	d072      	beq.n	4099b0 <__ssprint_r+0xf4>
  4098ca:	4683      	mov	fp, r0
  4098cc:	f04f 0900 	mov.w	r9, #0
  4098d0:	6816      	ldr	r6, [r2, #0]
  4098d2:	6808      	ldr	r0, [r1, #0]
  4098d4:	688b      	ldr	r3, [r1, #8]
  4098d6:	460d      	mov	r5, r1
  4098d8:	464c      	mov	r4, r9
  4098da:	2c00      	cmp	r4, #0
  4098dc:	d045      	beq.n	40996a <__ssprint_r+0xae>
  4098de:	429c      	cmp	r4, r3
  4098e0:	461f      	mov	r7, r3
  4098e2:	469a      	mov	sl, r3
  4098e4:	d346      	bcc.n	409974 <__ssprint_r+0xb8>
  4098e6:	89ab      	ldrh	r3, [r5, #12]
  4098e8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4098ec:	d02d      	beq.n	40994a <__ssprint_r+0x8e>
  4098ee:	696f      	ldr	r7, [r5, #20]
  4098f0:	6929      	ldr	r1, [r5, #16]
  4098f2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4098f6:	ebc1 0a00 	rsb	sl, r1, r0
  4098fa:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4098fe:	1c60      	adds	r0, r4, #1
  409900:	107f      	asrs	r7, r7, #1
  409902:	4450      	add	r0, sl
  409904:	42b8      	cmp	r0, r7
  409906:	463a      	mov	r2, r7
  409908:	bf84      	itt	hi
  40990a:	4607      	movhi	r7, r0
  40990c:	463a      	movhi	r2, r7
  40990e:	055b      	lsls	r3, r3, #21
  409910:	d533      	bpl.n	40997a <__ssprint_r+0xbe>
  409912:	4611      	mov	r1, r2
  409914:	4658      	mov	r0, fp
  409916:	f7fe fe73 	bl	408600 <_malloc_r>
  40991a:	2800      	cmp	r0, #0
  40991c:	d037      	beq.n	40998e <__ssprint_r+0xd2>
  40991e:	4652      	mov	r2, sl
  409920:	6929      	ldr	r1, [r5, #16]
  409922:	9001      	str	r0, [sp, #4]
  409924:	f7ff f974 	bl	408c10 <memcpy>
  409928:	89aa      	ldrh	r2, [r5, #12]
  40992a:	9b01      	ldr	r3, [sp, #4]
  40992c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  409934:	81aa      	strh	r2, [r5, #12]
  409936:	ebca 0207 	rsb	r2, sl, r7
  40993a:	eb03 000a 	add.w	r0, r3, sl
  40993e:	616f      	str	r7, [r5, #20]
  409940:	612b      	str	r3, [r5, #16]
  409942:	6028      	str	r0, [r5, #0]
  409944:	60aa      	str	r2, [r5, #8]
  409946:	4627      	mov	r7, r4
  409948:	46a2      	mov	sl, r4
  40994a:	4652      	mov	r2, sl
  40994c:	4649      	mov	r1, r9
  40994e:	f7ff f9f9 	bl	408d44 <memmove>
  409952:	f8d8 2008 	ldr.w	r2, [r8, #8]
  409956:	68ab      	ldr	r3, [r5, #8]
  409958:	6828      	ldr	r0, [r5, #0]
  40995a:	1bdb      	subs	r3, r3, r7
  40995c:	4450      	add	r0, sl
  40995e:	1b14      	subs	r4, r2, r4
  409960:	60ab      	str	r3, [r5, #8]
  409962:	6028      	str	r0, [r5, #0]
  409964:	f8c8 4008 	str.w	r4, [r8, #8]
  409968:	b314      	cbz	r4, 4099b0 <__ssprint_r+0xf4>
  40996a:	f8d6 9000 	ldr.w	r9, [r6]
  40996e:	6874      	ldr	r4, [r6, #4]
  409970:	3608      	adds	r6, #8
  409972:	e7b2      	b.n	4098da <__ssprint_r+0x1e>
  409974:	4627      	mov	r7, r4
  409976:	46a2      	mov	sl, r4
  409978:	e7e7      	b.n	40994a <__ssprint_r+0x8e>
  40997a:	4658      	mov	r0, fp
  40997c:	f7ff fd58 	bl	409430 <_realloc_r>
  409980:	4603      	mov	r3, r0
  409982:	2800      	cmp	r0, #0
  409984:	d1d7      	bne.n	409936 <__ssprint_r+0x7a>
  409986:	6929      	ldr	r1, [r5, #16]
  409988:	4658      	mov	r0, fp
  40998a:	f7fe fb1b 	bl	407fc4 <_free_r>
  40998e:	230c      	movs	r3, #12
  409990:	f8cb 3000 	str.w	r3, [fp]
  409994:	89ab      	ldrh	r3, [r5, #12]
  409996:	2200      	movs	r2, #0
  409998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40999c:	f04f 30ff 	mov.w	r0, #4294967295
  4099a0:	81ab      	strh	r3, [r5, #12]
  4099a2:	f8c8 2008 	str.w	r2, [r8, #8]
  4099a6:	f8c8 2004 	str.w	r2, [r8, #4]
  4099aa:	b003      	add	sp, #12
  4099ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4099b0:	2000      	movs	r0, #0
  4099b2:	f8c8 0004 	str.w	r0, [r8, #4]
  4099b6:	b003      	add	sp, #12
  4099b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004099bc <__swbuf_r>:
  4099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4099be:	460e      	mov	r6, r1
  4099c0:	4614      	mov	r4, r2
  4099c2:	4607      	mov	r7, r0
  4099c4:	b110      	cbz	r0, 4099cc <__swbuf_r+0x10>
  4099c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4099c8:	2b00      	cmp	r3, #0
  4099ca:	d04a      	beq.n	409a62 <__swbuf_r+0xa6>
  4099cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4099d0:	69a3      	ldr	r3, [r4, #24]
  4099d2:	60a3      	str	r3, [r4, #8]
  4099d4:	b291      	uxth	r1, r2
  4099d6:	0708      	lsls	r0, r1, #28
  4099d8:	d538      	bpl.n	409a4c <__swbuf_r+0x90>
  4099da:	6923      	ldr	r3, [r4, #16]
  4099dc:	2b00      	cmp	r3, #0
  4099de:	d035      	beq.n	409a4c <__swbuf_r+0x90>
  4099e0:	0489      	lsls	r1, r1, #18
  4099e2:	b2f5      	uxtb	r5, r6
  4099e4:	d515      	bpl.n	409a12 <__swbuf_r+0x56>
  4099e6:	6822      	ldr	r2, [r4, #0]
  4099e8:	6961      	ldr	r1, [r4, #20]
  4099ea:	1ad3      	subs	r3, r2, r3
  4099ec:	428b      	cmp	r3, r1
  4099ee:	da1c      	bge.n	409a2a <__swbuf_r+0x6e>
  4099f0:	3301      	adds	r3, #1
  4099f2:	68a1      	ldr	r1, [r4, #8]
  4099f4:	1c50      	adds	r0, r2, #1
  4099f6:	3901      	subs	r1, #1
  4099f8:	60a1      	str	r1, [r4, #8]
  4099fa:	6020      	str	r0, [r4, #0]
  4099fc:	7016      	strb	r6, [r2, #0]
  4099fe:	6962      	ldr	r2, [r4, #20]
  409a00:	429a      	cmp	r2, r3
  409a02:	d01a      	beq.n	409a3a <__swbuf_r+0x7e>
  409a04:	89a3      	ldrh	r3, [r4, #12]
  409a06:	07db      	lsls	r3, r3, #31
  409a08:	d501      	bpl.n	409a0e <__swbuf_r+0x52>
  409a0a:	2d0a      	cmp	r5, #10
  409a0c:	d015      	beq.n	409a3a <__swbuf_r+0x7e>
  409a0e:	4628      	mov	r0, r5
  409a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409a12:	6e61      	ldr	r1, [r4, #100]	; 0x64
  409a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  409a18:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  409a1c:	81a2      	strh	r2, [r4, #12]
  409a1e:	6822      	ldr	r2, [r4, #0]
  409a20:	6661      	str	r1, [r4, #100]	; 0x64
  409a22:	6961      	ldr	r1, [r4, #20]
  409a24:	1ad3      	subs	r3, r2, r3
  409a26:	428b      	cmp	r3, r1
  409a28:	dbe2      	blt.n	4099f0 <__swbuf_r+0x34>
  409a2a:	4621      	mov	r1, r4
  409a2c:	4638      	mov	r0, r7
  409a2e:	f7fe f96b 	bl	407d08 <_fflush_r>
  409a32:	b940      	cbnz	r0, 409a46 <__swbuf_r+0x8a>
  409a34:	6822      	ldr	r2, [r4, #0]
  409a36:	2301      	movs	r3, #1
  409a38:	e7db      	b.n	4099f2 <__swbuf_r+0x36>
  409a3a:	4621      	mov	r1, r4
  409a3c:	4638      	mov	r0, r7
  409a3e:	f7fe f963 	bl	407d08 <_fflush_r>
  409a42:	2800      	cmp	r0, #0
  409a44:	d0e3      	beq.n	409a0e <__swbuf_r+0x52>
  409a46:	f04f 30ff 	mov.w	r0, #4294967295
  409a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409a4c:	4621      	mov	r1, r4
  409a4e:	4638      	mov	r0, r7
  409a50:	f7fd f882 	bl	406b58 <__swsetup_r>
  409a54:	2800      	cmp	r0, #0
  409a56:	d1f6      	bne.n	409a46 <__swbuf_r+0x8a>
  409a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409a5c:	6923      	ldr	r3, [r4, #16]
  409a5e:	b291      	uxth	r1, r2
  409a60:	e7be      	b.n	4099e0 <__swbuf_r+0x24>
  409a62:	f7fe f9e5 	bl	407e30 <__sinit>
  409a66:	e7b1      	b.n	4099cc <__swbuf_r+0x10>

00409a68 <_wcrtomb_r>:
  409a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409a6c:	4605      	mov	r5, r0
  409a6e:	b086      	sub	sp, #24
  409a70:	461e      	mov	r6, r3
  409a72:	460c      	mov	r4, r1
  409a74:	b1a1      	cbz	r1, 409aa0 <_wcrtomb_r+0x38>
  409a76:	4b10      	ldr	r3, [pc, #64]	; (409ab8 <_wcrtomb_r+0x50>)
  409a78:	4617      	mov	r7, r2
  409a7a:	f8d3 8000 	ldr.w	r8, [r3]
  409a7e:	f7fe fd35 	bl	4084ec <__locale_charset>
  409a82:	9600      	str	r6, [sp, #0]
  409a84:	4603      	mov	r3, r0
  409a86:	463a      	mov	r2, r7
  409a88:	4621      	mov	r1, r4
  409a8a:	4628      	mov	r0, r5
  409a8c:	47c0      	blx	r8
  409a8e:	1c43      	adds	r3, r0, #1
  409a90:	d103      	bne.n	409a9a <_wcrtomb_r+0x32>
  409a92:	2200      	movs	r2, #0
  409a94:	238a      	movs	r3, #138	; 0x8a
  409a96:	6032      	str	r2, [r6, #0]
  409a98:	602b      	str	r3, [r5, #0]
  409a9a:	b006      	add	sp, #24
  409a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409aa0:	4b05      	ldr	r3, [pc, #20]	; (409ab8 <_wcrtomb_r+0x50>)
  409aa2:	681f      	ldr	r7, [r3, #0]
  409aa4:	f7fe fd22 	bl	4084ec <__locale_charset>
  409aa8:	9600      	str	r6, [sp, #0]
  409aaa:	4603      	mov	r3, r0
  409aac:	4622      	mov	r2, r4
  409aae:	a903      	add	r1, sp, #12
  409ab0:	4628      	mov	r0, r5
  409ab2:	47b8      	blx	r7
  409ab4:	e7eb      	b.n	409a8e <_wcrtomb_r+0x26>
  409ab6:	bf00      	nop
  409ab8:	204008b8 	.word	0x204008b8

00409abc <__ascii_wctomb>:
  409abc:	b121      	cbz	r1, 409ac8 <__ascii_wctomb+0xc>
  409abe:	2aff      	cmp	r2, #255	; 0xff
  409ac0:	d804      	bhi.n	409acc <__ascii_wctomb+0x10>
  409ac2:	700a      	strb	r2, [r1, #0]
  409ac4:	2001      	movs	r0, #1
  409ac6:	4770      	bx	lr
  409ac8:	4608      	mov	r0, r1
  409aca:	4770      	bx	lr
  409acc:	238a      	movs	r3, #138	; 0x8a
  409ace:	6003      	str	r3, [r0, #0]
  409ad0:	f04f 30ff 	mov.w	r0, #4294967295
  409ad4:	4770      	bx	lr
  409ad6:	bf00      	nop

00409ad8 <_write_r>:
  409ad8:	b570      	push	{r4, r5, r6, lr}
  409ada:	460d      	mov	r5, r1
  409adc:	4c08      	ldr	r4, [pc, #32]	; (409b00 <_write_r+0x28>)
  409ade:	4611      	mov	r1, r2
  409ae0:	4606      	mov	r6, r0
  409ae2:	461a      	mov	r2, r3
  409ae4:	4628      	mov	r0, r5
  409ae6:	2300      	movs	r3, #0
  409ae8:	6023      	str	r3, [r4, #0]
  409aea:	f7f9 f903 	bl	402cf4 <_write>
  409aee:	1c43      	adds	r3, r0, #1
  409af0:	d000      	beq.n	409af4 <_write_r+0x1c>
  409af2:	bd70      	pop	{r4, r5, r6, pc}
  409af4:	6823      	ldr	r3, [r4, #0]
  409af6:	2b00      	cmp	r3, #0
  409af8:	d0fb      	beq.n	409af2 <_write_r+0x1a>
  409afa:	6033      	str	r3, [r6, #0]
  409afc:	bd70      	pop	{r4, r5, r6, pc}
  409afe:	bf00      	nop
  409b00:	204015fc 	.word	0x204015fc

00409b04 <__register_exitproc>:
  409b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409b08:	4c25      	ldr	r4, [pc, #148]	; (409ba0 <__register_exitproc+0x9c>)
  409b0a:	6825      	ldr	r5, [r4, #0]
  409b0c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  409b10:	4606      	mov	r6, r0
  409b12:	4688      	mov	r8, r1
  409b14:	4692      	mov	sl, r2
  409b16:	4699      	mov	r9, r3
  409b18:	b3c4      	cbz	r4, 409b8c <__register_exitproc+0x88>
  409b1a:	6860      	ldr	r0, [r4, #4]
  409b1c:	281f      	cmp	r0, #31
  409b1e:	dc17      	bgt.n	409b50 <__register_exitproc+0x4c>
  409b20:	1c43      	adds	r3, r0, #1
  409b22:	b176      	cbz	r6, 409b42 <__register_exitproc+0x3e>
  409b24:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  409b28:	2201      	movs	r2, #1
  409b2a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  409b2e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  409b32:	4082      	lsls	r2, r0
  409b34:	4311      	orrs	r1, r2
  409b36:	2e02      	cmp	r6, #2
  409b38:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  409b3c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  409b40:	d01e      	beq.n	409b80 <__register_exitproc+0x7c>
  409b42:	3002      	adds	r0, #2
  409b44:	6063      	str	r3, [r4, #4]
  409b46:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  409b4a:	2000      	movs	r0, #0
  409b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409b50:	4b14      	ldr	r3, [pc, #80]	; (409ba4 <__register_exitproc+0xa0>)
  409b52:	b303      	cbz	r3, 409b96 <__register_exitproc+0x92>
  409b54:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409b58:	f7fe fd4a 	bl	4085f0 <malloc>
  409b5c:	4604      	mov	r4, r0
  409b5e:	b1d0      	cbz	r0, 409b96 <__register_exitproc+0x92>
  409b60:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  409b64:	2700      	movs	r7, #0
  409b66:	e880 0088 	stmia.w	r0, {r3, r7}
  409b6a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  409b6e:	4638      	mov	r0, r7
  409b70:	2301      	movs	r3, #1
  409b72:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  409b76:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  409b7a:	2e00      	cmp	r6, #0
  409b7c:	d0e1      	beq.n	409b42 <__register_exitproc+0x3e>
  409b7e:	e7d1      	b.n	409b24 <__register_exitproc+0x20>
  409b80:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  409b84:	430a      	orrs	r2, r1
  409b86:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  409b8a:	e7da      	b.n	409b42 <__register_exitproc+0x3e>
  409b8c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  409b90:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  409b94:	e7c1      	b.n	409b1a <__register_exitproc+0x16>
  409b96:	f04f 30ff 	mov.w	r0, #4294967295
  409b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409b9e:	bf00      	nop
  409ba0:	0040babc 	.word	0x0040babc
  409ba4:	004085f1 	.word	0x004085f1

00409ba8 <_calloc_r>:
  409ba8:	b510      	push	{r4, lr}
  409baa:	fb02 f101 	mul.w	r1, r2, r1
  409bae:	f7fe fd27 	bl	408600 <_malloc_r>
  409bb2:	4604      	mov	r4, r0
  409bb4:	b1d8      	cbz	r0, 409bee <_calloc_r+0x46>
  409bb6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409bba:	f022 0203 	bic.w	r2, r2, #3
  409bbe:	3a04      	subs	r2, #4
  409bc0:	2a24      	cmp	r2, #36	; 0x24
  409bc2:	d818      	bhi.n	409bf6 <_calloc_r+0x4e>
  409bc4:	2a13      	cmp	r2, #19
  409bc6:	d914      	bls.n	409bf2 <_calloc_r+0x4a>
  409bc8:	2300      	movs	r3, #0
  409bca:	2a1b      	cmp	r2, #27
  409bcc:	6003      	str	r3, [r0, #0]
  409bce:	6043      	str	r3, [r0, #4]
  409bd0:	d916      	bls.n	409c00 <_calloc_r+0x58>
  409bd2:	2a24      	cmp	r2, #36	; 0x24
  409bd4:	6083      	str	r3, [r0, #8]
  409bd6:	60c3      	str	r3, [r0, #12]
  409bd8:	bf11      	iteee	ne
  409bda:	f100 0210 	addne.w	r2, r0, #16
  409bde:	6103      	streq	r3, [r0, #16]
  409be0:	6143      	streq	r3, [r0, #20]
  409be2:	f100 0218 	addeq.w	r2, r0, #24
  409be6:	2300      	movs	r3, #0
  409be8:	6013      	str	r3, [r2, #0]
  409bea:	6053      	str	r3, [r2, #4]
  409bec:	6093      	str	r3, [r2, #8]
  409bee:	4620      	mov	r0, r4
  409bf0:	bd10      	pop	{r4, pc}
  409bf2:	4602      	mov	r2, r0
  409bf4:	e7f7      	b.n	409be6 <_calloc_r+0x3e>
  409bf6:	2100      	movs	r1, #0
  409bf8:	f7fa f9e2 	bl	403fc0 <memset>
  409bfc:	4620      	mov	r0, r4
  409bfe:	bd10      	pop	{r4, pc}
  409c00:	f100 0208 	add.w	r2, r0, #8
  409c04:	e7ef      	b.n	409be6 <_calloc_r+0x3e>
  409c06:	bf00      	nop

00409c08 <_close_r>:
  409c08:	b538      	push	{r3, r4, r5, lr}
  409c0a:	4c07      	ldr	r4, [pc, #28]	; (409c28 <_close_r+0x20>)
  409c0c:	2300      	movs	r3, #0
  409c0e:	4605      	mov	r5, r0
  409c10:	4608      	mov	r0, r1
  409c12:	6023      	str	r3, [r4, #0]
  409c14:	f7f9 feca 	bl	4039ac <_close>
  409c18:	1c43      	adds	r3, r0, #1
  409c1a:	d000      	beq.n	409c1e <_close_r+0x16>
  409c1c:	bd38      	pop	{r3, r4, r5, pc}
  409c1e:	6823      	ldr	r3, [r4, #0]
  409c20:	2b00      	cmp	r3, #0
  409c22:	d0fb      	beq.n	409c1c <_close_r+0x14>
  409c24:	602b      	str	r3, [r5, #0]
  409c26:	bd38      	pop	{r3, r4, r5, pc}
  409c28:	204015fc 	.word	0x204015fc

00409c2c <_fclose_r>:
  409c2c:	2900      	cmp	r1, #0
  409c2e:	d03d      	beq.n	409cac <_fclose_r+0x80>
  409c30:	b570      	push	{r4, r5, r6, lr}
  409c32:	4605      	mov	r5, r0
  409c34:	460c      	mov	r4, r1
  409c36:	b108      	cbz	r0, 409c3c <_fclose_r+0x10>
  409c38:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409c3a:	b37b      	cbz	r3, 409c9c <_fclose_r+0x70>
  409c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409c40:	b90b      	cbnz	r3, 409c46 <_fclose_r+0x1a>
  409c42:	2000      	movs	r0, #0
  409c44:	bd70      	pop	{r4, r5, r6, pc}
  409c46:	4621      	mov	r1, r4
  409c48:	4628      	mov	r0, r5
  409c4a:	f7fd ffb9 	bl	407bc0 <__sflush_r>
  409c4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  409c50:	4606      	mov	r6, r0
  409c52:	b133      	cbz	r3, 409c62 <_fclose_r+0x36>
  409c54:	69e1      	ldr	r1, [r4, #28]
  409c56:	4628      	mov	r0, r5
  409c58:	4798      	blx	r3
  409c5a:	2800      	cmp	r0, #0
  409c5c:	bfb8      	it	lt
  409c5e:	f04f 36ff 	movlt.w	r6, #4294967295
  409c62:	89a3      	ldrh	r3, [r4, #12]
  409c64:	061b      	lsls	r3, r3, #24
  409c66:	d41c      	bmi.n	409ca2 <_fclose_r+0x76>
  409c68:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409c6a:	b141      	cbz	r1, 409c7e <_fclose_r+0x52>
  409c6c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409c70:	4299      	cmp	r1, r3
  409c72:	d002      	beq.n	409c7a <_fclose_r+0x4e>
  409c74:	4628      	mov	r0, r5
  409c76:	f7fe f9a5 	bl	407fc4 <_free_r>
  409c7a:	2300      	movs	r3, #0
  409c7c:	6323      	str	r3, [r4, #48]	; 0x30
  409c7e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409c80:	b121      	cbz	r1, 409c8c <_fclose_r+0x60>
  409c82:	4628      	mov	r0, r5
  409c84:	f7fe f99e 	bl	407fc4 <_free_r>
  409c88:	2300      	movs	r3, #0
  409c8a:	6463      	str	r3, [r4, #68]	; 0x44
  409c8c:	f7fe f8d6 	bl	407e3c <__sfp_lock_acquire>
  409c90:	2300      	movs	r3, #0
  409c92:	81a3      	strh	r3, [r4, #12]
  409c94:	f7fe f8d4 	bl	407e40 <__sfp_lock_release>
  409c98:	4630      	mov	r0, r6
  409c9a:	bd70      	pop	{r4, r5, r6, pc}
  409c9c:	f7fe f8c8 	bl	407e30 <__sinit>
  409ca0:	e7cc      	b.n	409c3c <_fclose_r+0x10>
  409ca2:	6921      	ldr	r1, [r4, #16]
  409ca4:	4628      	mov	r0, r5
  409ca6:	f7fe f98d 	bl	407fc4 <_free_r>
  409caa:	e7dd      	b.n	409c68 <_fclose_r+0x3c>
  409cac:	2000      	movs	r0, #0
  409cae:	4770      	bx	lr

00409cb0 <_fstat_r>:
  409cb0:	b538      	push	{r3, r4, r5, lr}
  409cb2:	460b      	mov	r3, r1
  409cb4:	4c07      	ldr	r4, [pc, #28]	; (409cd4 <_fstat_r+0x24>)
  409cb6:	4605      	mov	r5, r0
  409cb8:	4611      	mov	r1, r2
  409cba:	4618      	mov	r0, r3
  409cbc:	2300      	movs	r3, #0
  409cbe:	6023      	str	r3, [r4, #0]
  409cc0:	f7f9 fe78 	bl	4039b4 <_fstat>
  409cc4:	1c43      	adds	r3, r0, #1
  409cc6:	d000      	beq.n	409cca <_fstat_r+0x1a>
  409cc8:	bd38      	pop	{r3, r4, r5, pc}
  409cca:	6823      	ldr	r3, [r4, #0]
  409ccc:	2b00      	cmp	r3, #0
  409cce:	d0fb      	beq.n	409cc8 <_fstat_r+0x18>
  409cd0:	602b      	str	r3, [r5, #0]
  409cd2:	bd38      	pop	{r3, r4, r5, pc}
  409cd4:	204015fc 	.word	0x204015fc

00409cd8 <_isatty_r>:
  409cd8:	b538      	push	{r3, r4, r5, lr}
  409cda:	4c07      	ldr	r4, [pc, #28]	; (409cf8 <_isatty_r+0x20>)
  409cdc:	2300      	movs	r3, #0
  409cde:	4605      	mov	r5, r0
  409ce0:	4608      	mov	r0, r1
  409ce2:	6023      	str	r3, [r4, #0]
  409ce4:	f7f9 fe6c 	bl	4039c0 <_isatty>
  409ce8:	1c43      	adds	r3, r0, #1
  409cea:	d000      	beq.n	409cee <_isatty_r+0x16>
  409cec:	bd38      	pop	{r3, r4, r5, pc}
  409cee:	6823      	ldr	r3, [r4, #0]
  409cf0:	2b00      	cmp	r3, #0
  409cf2:	d0fb      	beq.n	409cec <_isatty_r+0x14>
  409cf4:	602b      	str	r3, [r5, #0]
  409cf6:	bd38      	pop	{r3, r4, r5, pc}
  409cf8:	204015fc 	.word	0x204015fc

00409cfc <_lseek_r>:
  409cfc:	b570      	push	{r4, r5, r6, lr}
  409cfe:	460d      	mov	r5, r1
  409d00:	4c08      	ldr	r4, [pc, #32]	; (409d24 <_lseek_r+0x28>)
  409d02:	4611      	mov	r1, r2
  409d04:	4606      	mov	r6, r0
  409d06:	461a      	mov	r2, r3
  409d08:	4628      	mov	r0, r5
  409d0a:	2300      	movs	r3, #0
  409d0c:	6023      	str	r3, [r4, #0]
  409d0e:	f7f9 fe59 	bl	4039c4 <_lseek>
  409d12:	1c43      	adds	r3, r0, #1
  409d14:	d000      	beq.n	409d18 <_lseek_r+0x1c>
  409d16:	bd70      	pop	{r4, r5, r6, pc}
  409d18:	6823      	ldr	r3, [r4, #0]
  409d1a:	2b00      	cmp	r3, #0
  409d1c:	d0fb      	beq.n	409d16 <_lseek_r+0x1a>
  409d1e:	6033      	str	r3, [r6, #0]
  409d20:	bd70      	pop	{r4, r5, r6, pc}
  409d22:	bf00      	nop
  409d24:	204015fc 	.word	0x204015fc

00409d28 <_read_r>:
  409d28:	b570      	push	{r4, r5, r6, lr}
  409d2a:	460d      	mov	r5, r1
  409d2c:	4c08      	ldr	r4, [pc, #32]	; (409d50 <_read_r+0x28>)
  409d2e:	4611      	mov	r1, r2
  409d30:	4606      	mov	r6, r0
  409d32:	461a      	mov	r2, r3
  409d34:	4628      	mov	r0, r5
  409d36:	2300      	movs	r3, #0
  409d38:	6023      	str	r3, [r4, #0]
  409d3a:	f7f8 ffbd 	bl	402cb8 <_read>
  409d3e:	1c43      	adds	r3, r0, #1
  409d40:	d000      	beq.n	409d44 <_read_r+0x1c>
  409d42:	bd70      	pop	{r4, r5, r6, pc}
  409d44:	6823      	ldr	r3, [r4, #0]
  409d46:	2b00      	cmp	r3, #0
  409d48:	d0fb      	beq.n	409d42 <_read_r+0x1a>
  409d4a:	6033      	str	r3, [r6, #0]
  409d4c:	bd70      	pop	{r4, r5, r6, pc}
  409d4e:	bf00      	nop
  409d50:	204015fc 	.word	0x204015fc

00409d54 <__aeabi_drsub>:
  409d54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  409d58:	e002      	b.n	409d60 <__adddf3>
  409d5a:	bf00      	nop

00409d5c <__aeabi_dsub>:
  409d5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00409d60 <__adddf3>:
  409d60:	b530      	push	{r4, r5, lr}
  409d62:	ea4f 0441 	mov.w	r4, r1, lsl #1
  409d66:	ea4f 0543 	mov.w	r5, r3, lsl #1
  409d6a:	ea94 0f05 	teq	r4, r5
  409d6e:	bf08      	it	eq
  409d70:	ea90 0f02 	teqeq	r0, r2
  409d74:	bf1f      	itttt	ne
  409d76:	ea54 0c00 	orrsne.w	ip, r4, r0
  409d7a:	ea55 0c02 	orrsne.w	ip, r5, r2
  409d7e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409d82:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  409d86:	f000 80e2 	beq.w	409f4e <__adddf3+0x1ee>
  409d8a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409d8e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409d92:	bfb8      	it	lt
  409d94:	426d      	neglt	r5, r5
  409d96:	dd0c      	ble.n	409db2 <__adddf3+0x52>
  409d98:	442c      	add	r4, r5
  409d9a:	ea80 0202 	eor.w	r2, r0, r2
  409d9e:	ea81 0303 	eor.w	r3, r1, r3
  409da2:	ea82 0000 	eor.w	r0, r2, r0
  409da6:	ea83 0101 	eor.w	r1, r3, r1
  409daa:	ea80 0202 	eor.w	r2, r0, r2
  409dae:	ea81 0303 	eor.w	r3, r1, r3
  409db2:	2d36      	cmp	r5, #54	; 0x36
  409db4:	bf88      	it	hi
  409db6:	bd30      	pophi	{r4, r5, pc}
  409db8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409dbc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409dc0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  409dc4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  409dc8:	d002      	beq.n	409dd0 <__adddf3+0x70>
  409dca:	4240      	negs	r0, r0
  409dcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409dd0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  409dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409dd8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  409ddc:	d002      	beq.n	409de4 <__adddf3+0x84>
  409dde:	4252      	negs	r2, r2
  409de0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409de4:	ea94 0f05 	teq	r4, r5
  409de8:	f000 80a7 	beq.w	409f3a <__adddf3+0x1da>
  409dec:	f1a4 0401 	sub.w	r4, r4, #1
  409df0:	f1d5 0e20 	rsbs	lr, r5, #32
  409df4:	db0d      	blt.n	409e12 <__adddf3+0xb2>
  409df6:	fa02 fc0e 	lsl.w	ip, r2, lr
  409dfa:	fa22 f205 	lsr.w	r2, r2, r5
  409dfe:	1880      	adds	r0, r0, r2
  409e00:	f141 0100 	adc.w	r1, r1, #0
  409e04:	fa03 f20e 	lsl.w	r2, r3, lr
  409e08:	1880      	adds	r0, r0, r2
  409e0a:	fa43 f305 	asr.w	r3, r3, r5
  409e0e:	4159      	adcs	r1, r3
  409e10:	e00e      	b.n	409e30 <__adddf3+0xd0>
  409e12:	f1a5 0520 	sub.w	r5, r5, #32
  409e16:	f10e 0e20 	add.w	lr, lr, #32
  409e1a:	2a01      	cmp	r2, #1
  409e1c:	fa03 fc0e 	lsl.w	ip, r3, lr
  409e20:	bf28      	it	cs
  409e22:	f04c 0c02 	orrcs.w	ip, ip, #2
  409e26:	fa43 f305 	asr.w	r3, r3, r5
  409e2a:	18c0      	adds	r0, r0, r3
  409e2c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  409e30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409e34:	d507      	bpl.n	409e46 <__adddf3+0xe6>
  409e36:	f04f 0e00 	mov.w	lr, #0
  409e3a:	f1dc 0c00 	rsbs	ip, ip, #0
  409e3e:	eb7e 0000 	sbcs.w	r0, lr, r0
  409e42:	eb6e 0101 	sbc.w	r1, lr, r1
  409e46:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  409e4a:	d31b      	bcc.n	409e84 <__adddf3+0x124>
  409e4c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  409e50:	d30c      	bcc.n	409e6c <__adddf3+0x10c>
  409e52:	0849      	lsrs	r1, r1, #1
  409e54:	ea5f 0030 	movs.w	r0, r0, rrx
  409e58:	ea4f 0c3c 	mov.w	ip, ip, rrx
  409e5c:	f104 0401 	add.w	r4, r4, #1
  409e60:	ea4f 5244 	mov.w	r2, r4, lsl #21
  409e64:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  409e68:	f080 809a 	bcs.w	409fa0 <__adddf3+0x240>
  409e6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  409e70:	bf08      	it	eq
  409e72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  409e76:	f150 0000 	adcs.w	r0, r0, #0
  409e7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409e7e:	ea41 0105 	orr.w	r1, r1, r5
  409e82:	bd30      	pop	{r4, r5, pc}
  409e84:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  409e88:	4140      	adcs	r0, r0
  409e8a:	eb41 0101 	adc.w	r1, r1, r1
  409e8e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409e92:	f1a4 0401 	sub.w	r4, r4, #1
  409e96:	d1e9      	bne.n	409e6c <__adddf3+0x10c>
  409e98:	f091 0f00 	teq	r1, #0
  409e9c:	bf04      	itt	eq
  409e9e:	4601      	moveq	r1, r0
  409ea0:	2000      	moveq	r0, #0
  409ea2:	fab1 f381 	clz	r3, r1
  409ea6:	bf08      	it	eq
  409ea8:	3320      	addeq	r3, #32
  409eaa:	f1a3 030b 	sub.w	r3, r3, #11
  409eae:	f1b3 0220 	subs.w	r2, r3, #32
  409eb2:	da0c      	bge.n	409ece <__adddf3+0x16e>
  409eb4:	320c      	adds	r2, #12
  409eb6:	dd08      	ble.n	409eca <__adddf3+0x16a>
  409eb8:	f102 0c14 	add.w	ip, r2, #20
  409ebc:	f1c2 020c 	rsb	r2, r2, #12
  409ec0:	fa01 f00c 	lsl.w	r0, r1, ip
  409ec4:	fa21 f102 	lsr.w	r1, r1, r2
  409ec8:	e00c      	b.n	409ee4 <__adddf3+0x184>
  409eca:	f102 0214 	add.w	r2, r2, #20
  409ece:	bfd8      	it	le
  409ed0:	f1c2 0c20 	rsble	ip, r2, #32
  409ed4:	fa01 f102 	lsl.w	r1, r1, r2
  409ed8:	fa20 fc0c 	lsr.w	ip, r0, ip
  409edc:	bfdc      	itt	le
  409ede:	ea41 010c 	orrle.w	r1, r1, ip
  409ee2:	4090      	lslle	r0, r2
  409ee4:	1ae4      	subs	r4, r4, r3
  409ee6:	bfa2      	ittt	ge
  409ee8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  409eec:	4329      	orrge	r1, r5
  409eee:	bd30      	popge	{r4, r5, pc}
  409ef0:	ea6f 0404 	mvn.w	r4, r4
  409ef4:	3c1f      	subs	r4, #31
  409ef6:	da1c      	bge.n	409f32 <__adddf3+0x1d2>
  409ef8:	340c      	adds	r4, #12
  409efa:	dc0e      	bgt.n	409f1a <__adddf3+0x1ba>
  409efc:	f104 0414 	add.w	r4, r4, #20
  409f00:	f1c4 0220 	rsb	r2, r4, #32
  409f04:	fa20 f004 	lsr.w	r0, r0, r4
  409f08:	fa01 f302 	lsl.w	r3, r1, r2
  409f0c:	ea40 0003 	orr.w	r0, r0, r3
  409f10:	fa21 f304 	lsr.w	r3, r1, r4
  409f14:	ea45 0103 	orr.w	r1, r5, r3
  409f18:	bd30      	pop	{r4, r5, pc}
  409f1a:	f1c4 040c 	rsb	r4, r4, #12
  409f1e:	f1c4 0220 	rsb	r2, r4, #32
  409f22:	fa20 f002 	lsr.w	r0, r0, r2
  409f26:	fa01 f304 	lsl.w	r3, r1, r4
  409f2a:	ea40 0003 	orr.w	r0, r0, r3
  409f2e:	4629      	mov	r1, r5
  409f30:	bd30      	pop	{r4, r5, pc}
  409f32:	fa21 f004 	lsr.w	r0, r1, r4
  409f36:	4629      	mov	r1, r5
  409f38:	bd30      	pop	{r4, r5, pc}
  409f3a:	f094 0f00 	teq	r4, #0
  409f3e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  409f42:	bf06      	itte	eq
  409f44:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  409f48:	3401      	addeq	r4, #1
  409f4a:	3d01      	subne	r5, #1
  409f4c:	e74e      	b.n	409dec <__adddf3+0x8c>
  409f4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409f52:	bf18      	it	ne
  409f54:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  409f58:	d029      	beq.n	409fae <__adddf3+0x24e>
  409f5a:	ea94 0f05 	teq	r4, r5
  409f5e:	bf08      	it	eq
  409f60:	ea90 0f02 	teqeq	r0, r2
  409f64:	d005      	beq.n	409f72 <__adddf3+0x212>
  409f66:	ea54 0c00 	orrs.w	ip, r4, r0
  409f6a:	bf04      	itt	eq
  409f6c:	4619      	moveq	r1, r3
  409f6e:	4610      	moveq	r0, r2
  409f70:	bd30      	pop	{r4, r5, pc}
  409f72:	ea91 0f03 	teq	r1, r3
  409f76:	bf1e      	ittt	ne
  409f78:	2100      	movne	r1, #0
  409f7a:	2000      	movne	r0, #0
  409f7c:	bd30      	popne	{r4, r5, pc}
  409f7e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  409f82:	d105      	bne.n	409f90 <__adddf3+0x230>
  409f84:	0040      	lsls	r0, r0, #1
  409f86:	4149      	adcs	r1, r1
  409f88:	bf28      	it	cs
  409f8a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  409f8e:	bd30      	pop	{r4, r5, pc}
  409f90:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  409f94:	bf3c      	itt	cc
  409f96:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  409f9a:	bd30      	popcc	{r4, r5, pc}
  409f9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409fa0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  409fa4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  409fa8:	f04f 0000 	mov.w	r0, #0
  409fac:	bd30      	pop	{r4, r5, pc}
  409fae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409fb2:	bf1a      	itte	ne
  409fb4:	4619      	movne	r1, r3
  409fb6:	4610      	movne	r0, r2
  409fb8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  409fbc:	bf1c      	itt	ne
  409fbe:	460b      	movne	r3, r1
  409fc0:	4602      	movne	r2, r0
  409fc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  409fc6:	bf06      	itte	eq
  409fc8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  409fcc:	ea91 0f03 	teqeq	r1, r3
  409fd0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  409fd4:	bd30      	pop	{r4, r5, pc}
  409fd6:	bf00      	nop

00409fd8 <__aeabi_ui2d>:
  409fd8:	f090 0f00 	teq	r0, #0
  409fdc:	bf04      	itt	eq
  409fde:	2100      	moveq	r1, #0
  409fe0:	4770      	bxeq	lr
  409fe2:	b530      	push	{r4, r5, lr}
  409fe4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409fe8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409fec:	f04f 0500 	mov.w	r5, #0
  409ff0:	f04f 0100 	mov.w	r1, #0
  409ff4:	e750      	b.n	409e98 <__adddf3+0x138>
  409ff6:	bf00      	nop

00409ff8 <__aeabi_i2d>:
  409ff8:	f090 0f00 	teq	r0, #0
  409ffc:	bf04      	itt	eq
  409ffe:	2100      	moveq	r1, #0
  40a000:	4770      	bxeq	lr
  40a002:	b530      	push	{r4, r5, lr}
  40a004:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a008:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a00c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a010:	bf48      	it	mi
  40a012:	4240      	negmi	r0, r0
  40a014:	f04f 0100 	mov.w	r1, #0
  40a018:	e73e      	b.n	409e98 <__adddf3+0x138>
  40a01a:	bf00      	nop

0040a01c <__aeabi_f2d>:
  40a01c:	0042      	lsls	r2, r0, #1
  40a01e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a022:	ea4f 0131 	mov.w	r1, r1, rrx
  40a026:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a02a:	bf1f      	itttt	ne
  40a02c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a030:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a034:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a038:	4770      	bxne	lr
  40a03a:	f092 0f00 	teq	r2, #0
  40a03e:	bf14      	ite	ne
  40a040:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a044:	4770      	bxeq	lr
  40a046:	b530      	push	{r4, r5, lr}
  40a048:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a04c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a050:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a054:	e720      	b.n	409e98 <__adddf3+0x138>
  40a056:	bf00      	nop

0040a058 <__aeabi_ul2d>:
  40a058:	ea50 0201 	orrs.w	r2, r0, r1
  40a05c:	bf08      	it	eq
  40a05e:	4770      	bxeq	lr
  40a060:	b530      	push	{r4, r5, lr}
  40a062:	f04f 0500 	mov.w	r5, #0
  40a066:	e00a      	b.n	40a07e <__aeabi_l2d+0x16>

0040a068 <__aeabi_l2d>:
  40a068:	ea50 0201 	orrs.w	r2, r0, r1
  40a06c:	bf08      	it	eq
  40a06e:	4770      	bxeq	lr
  40a070:	b530      	push	{r4, r5, lr}
  40a072:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a076:	d502      	bpl.n	40a07e <__aeabi_l2d+0x16>
  40a078:	4240      	negs	r0, r0
  40a07a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a07e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a082:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a086:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a08a:	f43f aedc 	beq.w	409e46 <__adddf3+0xe6>
  40a08e:	f04f 0203 	mov.w	r2, #3
  40a092:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a096:	bf18      	it	ne
  40a098:	3203      	addne	r2, #3
  40a09a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a09e:	bf18      	it	ne
  40a0a0:	3203      	addne	r2, #3
  40a0a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a0a6:	f1c2 0320 	rsb	r3, r2, #32
  40a0aa:	fa00 fc03 	lsl.w	ip, r0, r3
  40a0ae:	fa20 f002 	lsr.w	r0, r0, r2
  40a0b2:	fa01 fe03 	lsl.w	lr, r1, r3
  40a0b6:	ea40 000e 	orr.w	r0, r0, lr
  40a0ba:	fa21 f102 	lsr.w	r1, r1, r2
  40a0be:	4414      	add	r4, r2
  40a0c0:	e6c1      	b.n	409e46 <__adddf3+0xe6>
  40a0c2:	bf00      	nop

0040a0c4 <__aeabi_dmul>:
  40a0c4:	b570      	push	{r4, r5, r6, lr}
  40a0c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a0ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a0ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a0d2:	bf1d      	ittte	ne
  40a0d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a0d8:	ea94 0f0c 	teqne	r4, ip
  40a0dc:	ea95 0f0c 	teqne	r5, ip
  40a0e0:	f000 f8de 	bleq	40a2a0 <__aeabi_dmul+0x1dc>
  40a0e4:	442c      	add	r4, r5
  40a0e6:	ea81 0603 	eor.w	r6, r1, r3
  40a0ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a0ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a0f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a0f6:	bf18      	it	ne
  40a0f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a0fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a104:	d038      	beq.n	40a178 <__aeabi_dmul+0xb4>
  40a106:	fba0 ce02 	umull	ip, lr, r0, r2
  40a10a:	f04f 0500 	mov.w	r5, #0
  40a10e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a112:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a116:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a11a:	f04f 0600 	mov.w	r6, #0
  40a11e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a122:	f09c 0f00 	teq	ip, #0
  40a126:	bf18      	it	ne
  40a128:	f04e 0e01 	orrne.w	lr, lr, #1
  40a12c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a130:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a134:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a138:	d204      	bcs.n	40a144 <__aeabi_dmul+0x80>
  40a13a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a13e:	416d      	adcs	r5, r5
  40a140:	eb46 0606 	adc.w	r6, r6, r6
  40a144:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a148:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a14c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a150:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a154:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a158:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a15c:	bf88      	it	hi
  40a15e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a162:	d81e      	bhi.n	40a1a2 <__aeabi_dmul+0xde>
  40a164:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a168:	bf08      	it	eq
  40a16a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a16e:	f150 0000 	adcs.w	r0, r0, #0
  40a172:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a176:	bd70      	pop	{r4, r5, r6, pc}
  40a178:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a17c:	ea46 0101 	orr.w	r1, r6, r1
  40a180:	ea40 0002 	orr.w	r0, r0, r2
  40a184:	ea81 0103 	eor.w	r1, r1, r3
  40a188:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a18c:	bfc2      	ittt	gt
  40a18e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a192:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a196:	bd70      	popgt	{r4, r5, r6, pc}
  40a198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a19c:	f04f 0e00 	mov.w	lr, #0
  40a1a0:	3c01      	subs	r4, #1
  40a1a2:	f300 80ab 	bgt.w	40a2fc <__aeabi_dmul+0x238>
  40a1a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a1aa:	bfde      	ittt	le
  40a1ac:	2000      	movle	r0, #0
  40a1ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a1b2:	bd70      	pople	{r4, r5, r6, pc}
  40a1b4:	f1c4 0400 	rsb	r4, r4, #0
  40a1b8:	3c20      	subs	r4, #32
  40a1ba:	da35      	bge.n	40a228 <__aeabi_dmul+0x164>
  40a1bc:	340c      	adds	r4, #12
  40a1be:	dc1b      	bgt.n	40a1f8 <__aeabi_dmul+0x134>
  40a1c0:	f104 0414 	add.w	r4, r4, #20
  40a1c4:	f1c4 0520 	rsb	r5, r4, #32
  40a1c8:	fa00 f305 	lsl.w	r3, r0, r5
  40a1cc:	fa20 f004 	lsr.w	r0, r0, r4
  40a1d0:	fa01 f205 	lsl.w	r2, r1, r5
  40a1d4:	ea40 0002 	orr.w	r0, r0, r2
  40a1d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40a1dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a1e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a1e4:	fa21 f604 	lsr.w	r6, r1, r4
  40a1e8:	eb42 0106 	adc.w	r1, r2, r6
  40a1ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a1f0:	bf08      	it	eq
  40a1f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a1f6:	bd70      	pop	{r4, r5, r6, pc}
  40a1f8:	f1c4 040c 	rsb	r4, r4, #12
  40a1fc:	f1c4 0520 	rsb	r5, r4, #32
  40a200:	fa00 f304 	lsl.w	r3, r0, r4
  40a204:	fa20 f005 	lsr.w	r0, r0, r5
  40a208:	fa01 f204 	lsl.w	r2, r1, r4
  40a20c:	ea40 0002 	orr.w	r0, r0, r2
  40a210:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a214:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a218:	f141 0100 	adc.w	r1, r1, #0
  40a21c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a220:	bf08      	it	eq
  40a222:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a226:	bd70      	pop	{r4, r5, r6, pc}
  40a228:	f1c4 0520 	rsb	r5, r4, #32
  40a22c:	fa00 f205 	lsl.w	r2, r0, r5
  40a230:	ea4e 0e02 	orr.w	lr, lr, r2
  40a234:	fa20 f304 	lsr.w	r3, r0, r4
  40a238:	fa01 f205 	lsl.w	r2, r1, r5
  40a23c:	ea43 0302 	orr.w	r3, r3, r2
  40a240:	fa21 f004 	lsr.w	r0, r1, r4
  40a244:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a248:	fa21 f204 	lsr.w	r2, r1, r4
  40a24c:	ea20 0002 	bic.w	r0, r0, r2
  40a250:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40a254:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a258:	bf08      	it	eq
  40a25a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a25e:	bd70      	pop	{r4, r5, r6, pc}
  40a260:	f094 0f00 	teq	r4, #0
  40a264:	d10f      	bne.n	40a286 <__aeabi_dmul+0x1c2>
  40a266:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40a26a:	0040      	lsls	r0, r0, #1
  40a26c:	eb41 0101 	adc.w	r1, r1, r1
  40a270:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a274:	bf08      	it	eq
  40a276:	3c01      	subeq	r4, #1
  40a278:	d0f7      	beq.n	40a26a <__aeabi_dmul+0x1a6>
  40a27a:	ea41 0106 	orr.w	r1, r1, r6
  40a27e:	f095 0f00 	teq	r5, #0
  40a282:	bf18      	it	ne
  40a284:	4770      	bxne	lr
  40a286:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40a28a:	0052      	lsls	r2, r2, #1
  40a28c:	eb43 0303 	adc.w	r3, r3, r3
  40a290:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40a294:	bf08      	it	eq
  40a296:	3d01      	subeq	r5, #1
  40a298:	d0f7      	beq.n	40a28a <__aeabi_dmul+0x1c6>
  40a29a:	ea43 0306 	orr.w	r3, r3, r6
  40a29e:	4770      	bx	lr
  40a2a0:	ea94 0f0c 	teq	r4, ip
  40a2a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a2a8:	bf18      	it	ne
  40a2aa:	ea95 0f0c 	teqne	r5, ip
  40a2ae:	d00c      	beq.n	40a2ca <__aeabi_dmul+0x206>
  40a2b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a2b4:	bf18      	it	ne
  40a2b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a2ba:	d1d1      	bne.n	40a260 <__aeabi_dmul+0x19c>
  40a2bc:	ea81 0103 	eor.w	r1, r1, r3
  40a2c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a2c4:	f04f 0000 	mov.w	r0, #0
  40a2c8:	bd70      	pop	{r4, r5, r6, pc}
  40a2ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a2ce:	bf06      	itte	eq
  40a2d0:	4610      	moveq	r0, r2
  40a2d2:	4619      	moveq	r1, r3
  40a2d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a2d8:	d019      	beq.n	40a30e <__aeabi_dmul+0x24a>
  40a2da:	ea94 0f0c 	teq	r4, ip
  40a2de:	d102      	bne.n	40a2e6 <__aeabi_dmul+0x222>
  40a2e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40a2e4:	d113      	bne.n	40a30e <__aeabi_dmul+0x24a>
  40a2e6:	ea95 0f0c 	teq	r5, ip
  40a2ea:	d105      	bne.n	40a2f8 <__aeabi_dmul+0x234>
  40a2ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40a2f0:	bf1c      	itt	ne
  40a2f2:	4610      	movne	r0, r2
  40a2f4:	4619      	movne	r1, r3
  40a2f6:	d10a      	bne.n	40a30e <__aeabi_dmul+0x24a>
  40a2f8:	ea81 0103 	eor.w	r1, r1, r3
  40a2fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a300:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a304:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a308:	f04f 0000 	mov.w	r0, #0
  40a30c:	bd70      	pop	{r4, r5, r6, pc}
  40a30e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a312:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40a316:	bd70      	pop	{r4, r5, r6, pc}

0040a318 <__aeabi_ddiv>:
  40a318:	b570      	push	{r4, r5, r6, lr}
  40a31a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a31e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a322:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a326:	bf1d      	ittte	ne
  40a328:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a32c:	ea94 0f0c 	teqne	r4, ip
  40a330:	ea95 0f0c 	teqne	r5, ip
  40a334:	f000 f8a7 	bleq	40a486 <__aeabi_ddiv+0x16e>
  40a338:	eba4 0405 	sub.w	r4, r4, r5
  40a33c:	ea81 0e03 	eor.w	lr, r1, r3
  40a340:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a344:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a348:	f000 8088 	beq.w	40a45c <__aeabi_ddiv+0x144>
  40a34c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a350:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40a354:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40a358:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40a35c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40a360:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40a364:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40a368:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40a36c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40a370:	429d      	cmp	r5, r3
  40a372:	bf08      	it	eq
  40a374:	4296      	cmpeq	r6, r2
  40a376:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40a37a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40a37e:	d202      	bcs.n	40a386 <__aeabi_ddiv+0x6e>
  40a380:	085b      	lsrs	r3, r3, #1
  40a382:	ea4f 0232 	mov.w	r2, r2, rrx
  40a386:	1ab6      	subs	r6, r6, r2
  40a388:	eb65 0503 	sbc.w	r5, r5, r3
  40a38c:	085b      	lsrs	r3, r3, #1
  40a38e:	ea4f 0232 	mov.w	r2, r2, rrx
  40a392:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40a396:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40a39a:	ebb6 0e02 	subs.w	lr, r6, r2
  40a39e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a3a2:	bf22      	ittt	cs
  40a3a4:	1ab6      	subcs	r6, r6, r2
  40a3a6:	4675      	movcs	r5, lr
  40a3a8:	ea40 000c 	orrcs.w	r0, r0, ip
  40a3ac:	085b      	lsrs	r3, r3, #1
  40a3ae:	ea4f 0232 	mov.w	r2, r2, rrx
  40a3b2:	ebb6 0e02 	subs.w	lr, r6, r2
  40a3b6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a3ba:	bf22      	ittt	cs
  40a3bc:	1ab6      	subcs	r6, r6, r2
  40a3be:	4675      	movcs	r5, lr
  40a3c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40a3c4:	085b      	lsrs	r3, r3, #1
  40a3c6:	ea4f 0232 	mov.w	r2, r2, rrx
  40a3ca:	ebb6 0e02 	subs.w	lr, r6, r2
  40a3ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a3d2:	bf22      	ittt	cs
  40a3d4:	1ab6      	subcs	r6, r6, r2
  40a3d6:	4675      	movcs	r5, lr
  40a3d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40a3dc:	085b      	lsrs	r3, r3, #1
  40a3de:	ea4f 0232 	mov.w	r2, r2, rrx
  40a3e2:	ebb6 0e02 	subs.w	lr, r6, r2
  40a3e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a3ea:	bf22      	ittt	cs
  40a3ec:	1ab6      	subcs	r6, r6, r2
  40a3ee:	4675      	movcs	r5, lr
  40a3f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40a3f4:	ea55 0e06 	orrs.w	lr, r5, r6
  40a3f8:	d018      	beq.n	40a42c <__aeabi_ddiv+0x114>
  40a3fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40a3fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40a402:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40a406:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40a40a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40a40e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40a412:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40a416:	d1c0      	bne.n	40a39a <__aeabi_ddiv+0x82>
  40a418:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a41c:	d10b      	bne.n	40a436 <__aeabi_ddiv+0x11e>
  40a41e:	ea41 0100 	orr.w	r1, r1, r0
  40a422:	f04f 0000 	mov.w	r0, #0
  40a426:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40a42a:	e7b6      	b.n	40a39a <__aeabi_ddiv+0x82>
  40a42c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a430:	bf04      	itt	eq
  40a432:	4301      	orreq	r1, r0
  40a434:	2000      	moveq	r0, #0
  40a436:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a43a:	bf88      	it	hi
  40a43c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a440:	f63f aeaf 	bhi.w	40a1a2 <__aeabi_dmul+0xde>
  40a444:	ebb5 0c03 	subs.w	ip, r5, r3
  40a448:	bf04      	itt	eq
  40a44a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40a44e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a452:	f150 0000 	adcs.w	r0, r0, #0
  40a456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a45a:	bd70      	pop	{r4, r5, r6, pc}
  40a45c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40a460:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40a464:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40a468:	bfc2      	ittt	gt
  40a46a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a46e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a472:	bd70      	popgt	{r4, r5, r6, pc}
  40a474:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a478:	f04f 0e00 	mov.w	lr, #0
  40a47c:	3c01      	subs	r4, #1
  40a47e:	e690      	b.n	40a1a2 <__aeabi_dmul+0xde>
  40a480:	ea45 0e06 	orr.w	lr, r5, r6
  40a484:	e68d      	b.n	40a1a2 <__aeabi_dmul+0xde>
  40a486:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a48a:	ea94 0f0c 	teq	r4, ip
  40a48e:	bf08      	it	eq
  40a490:	ea95 0f0c 	teqeq	r5, ip
  40a494:	f43f af3b 	beq.w	40a30e <__aeabi_dmul+0x24a>
  40a498:	ea94 0f0c 	teq	r4, ip
  40a49c:	d10a      	bne.n	40a4b4 <__aeabi_ddiv+0x19c>
  40a49e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a4a2:	f47f af34 	bne.w	40a30e <__aeabi_dmul+0x24a>
  40a4a6:	ea95 0f0c 	teq	r5, ip
  40a4aa:	f47f af25 	bne.w	40a2f8 <__aeabi_dmul+0x234>
  40a4ae:	4610      	mov	r0, r2
  40a4b0:	4619      	mov	r1, r3
  40a4b2:	e72c      	b.n	40a30e <__aeabi_dmul+0x24a>
  40a4b4:	ea95 0f0c 	teq	r5, ip
  40a4b8:	d106      	bne.n	40a4c8 <__aeabi_ddiv+0x1b0>
  40a4ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a4be:	f43f aefd 	beq.w	40a2bc <__aeabi_dmul+0x1f8>
  40a4c2:	4610      	mov	r0, r2
  40a4c4:	4619      	mov	r1, r3
  40a4c6:	e722      	b.n	40a30e <__aeabi_dmul+0x24a>
  40a4c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a4cc:	bf18      	it	ne
  40a4ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a4d2:	f47f aec5 	bne.w	40a260 <__aeabi_dmul+0x19c>
  40a4d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40a4da:	f47f af0d 	bne.w	40a2f8 <__aeabi_dmul+0x234>
  40a4de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40a4e2:	f47f aeeb 	bne.w	40a2bc <__aeabi_dmul+0x1f8>
  40a4e6:	e712      	b.n	40a30e <__aeabi_dmul+0x24a>

0040a4e8 <__gedf2>:
  40a4e8:	f04f 3cff 	mov.w	ip, #4294967295
  40a4ec:	e006      	b.n	40a4fc <__cmpdf2+0x4>
  40a4ee:	bf00      	nop

0040a4f0 <__ledf2>:
  40a4f0:	f04f 0c01 	mov.w	ip, #1
  40a4f4:	e002      	b.n	40a4fc <__cmpdf2+0x4>
  40a4f6:	bf00      	nop

0040a4f8 <__cmpdf2>:
  40a4f8:	f04f 0c01 	mov.w	ip, #1
  40a4fc:	f84d cd04 	str.w	ip, [sp, #-4]!
  40a500:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a504:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a508:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a50c:	bf18      	it	ne
  40a50e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40a512:	d01b      	beq.n	40a54c <__cmpdf2+0x54>
  40a514:	b001      	add	sp, #4
  40a516:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40a51a:	bf0c      	ite	eq
  40a51c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40a520:	ea91 0f03 	teqne	r1, r3
  40a524:	bf02      	ittt	eq
  40a526:	ea90 0f02 	teqeq	r0, r2
  40a52a:	2000      	moveq	r0, #0
  40a52c:	4770      	bxeq	lr
  40a52e:	f110 0f00 	cmn.w	r0, #0
  40a532:	ea91 0f03 	teq	r1, r3
  40a536:	bf58      	it	pl
  40a538:	4299      	cmppl	r1, r3
  40a53a:	bf08      	it	eq
  40a53c:	4290      	cmpeq	r0, r2
  40a53e:	bf2c      	ite	cs
  40a540:	17d8      	asrcs	r0, r3, #31
  40a542:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40a546:	f040 0001 	orr.w	r0, r0, #1
  40a54a:	4770      	bx	lr
  40a54c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a554:	d102      	bne.n	40a55c <__cmpdf2+0x64>
  40a556:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a55a:	d107      	bne.n	40a56c <__cmpdf2+0x74>
  40a55c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a560:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a564:	d1d6      	bne.n	40a514 <__cmpdf2+0x1c>
  40a566:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a56a:	d0d3      	beq.n	40a514 <__cmpdf2+0x1c>
  40a56c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40a570:	4770      	bx	lr
  40a572:	bf00      	nop

0040a574 <__aeabi_cdrcmple>:
  40a574:	4684      	mov	ip, r0
  40a576:	4610      	mov	r0, r2
  40a578:	4662      	mov	r2, ip
  40a57a:	468c      	mov	ip, r1
  40a57c:	4619      	mov	r1, r3
  40a57e:	4663      	mov	r3, ip
  40a580:	e000      	b.n	40a584 <__aeabi_cdcmpeq>
  40a582:	bf00      	nop

0040a584 <__aeabi_cdcmpeq>:
  40a584:	b501      	push	{r0, lr}
  40a586:	f7ff ffb7 	bl	40a4f8 <__cmpdf2>
  40a58a:	2800      	cmp	r0, #0
  40a58c:	bf48      	it	mi
  40a58e:	f110 0f00 	cmnmi.w	r0, #0
  40a592:	bd01      	pop	{r0, pc}

0040a594 <__aeabi_dcmpeq>:
  40a594:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a598:	f7ff fff4 	bl	40a584 <__aeabi_cdcmpeq>
  40a59c:	bf0c      	ite	eq
  40a59e:	2001      	moveq	r0, #1
  40a5a0:	2000      	movne	r0, #0
  40a5a2:	f85d fb08 	ldr.w	pc, [sp], #8
  40a5a6:	bf00      	nop

0040a5a8 <__aeabi_dcmplt>:
  40a5a8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a5ac:	f7ff ffea 	bl	40a584 <__aeabi_cdcmpeq>
  40a5b0:	bf34      	ite	cc
  40a5b2:	2001      	movcc	r0, #1
  40a5b4:	2000      	movcs	r0, #0
  40a5b6:	f85d fb08 	ldr.w	pc, [sp], #8
  40a5ba:	bf00      	nop

0040a5bc <__aeabi_dcmple>:
  40a5bc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a5c0:	f7ff ffe0 	bl	40a584 <__aeabi_cdcmpeq>
  40a5c4:	bf94      	ite	ls
  40a5c6:	2001      	movls	r0, #1
  40a5c8:	2000      	movhi	r0, #0
  40a5ca:	f85d fb08 	ldr.w	pc, [sp], #8
  40a5ce:	bf00      	nop

0040a5d0 <__aeabi_dcmpge>:
  40a5d0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a5d4:	f7ff ffce 	bl	40a574 <__aeabi_cdrcmple>
  40a5d8:	bf94      	ite	ls
  40a5da:	2001      	movls	r0, #1
  40a5dc:	2000      	movhi	r0, #0
  40a5de:	f85d fb08 	ldr.w	pc, [sp], #8
  40a5e2:	bf00      	nop

0040a5e4 <__aeabi_dcmpgt>:
  40a5e4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a5e8:	f7ff ffc4 	bl	40a574 <__aeabi_cdrcmple>
  40a5ec:	bf34      	ite	cc
  40a5ee:	2001      	movcc	r0, #1
  40a5f0:	2000      	movcs	r0, #0
  40a5f2:	f85d fb08 	ldr.w	pc, [sp], #8
  40a5f6:	bf00      	nop

0040a5f8 <__aeabi_dcmpun>:
  40a5f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a5fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a600:	d102      	bne.n	40a608 <__aeabi_dcmpun+0x10>
  40a602:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a606:	d10a      	bne.n	40a61e <__aeabi_dcmpun+0x26>
  40a608:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a60c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a610:	d102      	bne.n	40a618 <__aeabi_dcmpun+0x20>
  40a612:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a616:	d102      	bne.n	40a61e <__aeabi_dcmpun+0x26>
  40a618:	f04f 0000 	mov.w	r0, #0
  40a61c:	4770      	bx	lr
  40a61e:	f04f 0001 	mov.w	r0, #1
  40a622:	4770      	bx	lr

0040a624 <__aeabi_d2iz>:
  40a624:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a628:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40a62c:	d215      	bcs.n	40a65a <__aeabi_d2iz+0x36>
  40a62e:	d511      	bpl.n	40a654 <__aeabi_d2iz+0x30>
  40a630:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40a634:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40a638:	d912      	bls.n	40a660 <__aeabi_d2iz+0x3c>
  40a63a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a63e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a642:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40a646:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a64a:	fa23 f002 	lsr.w	r0, r3, r2
  40a64e:	bf18      	it	ne
  40a650:	4240      	negne	r0, r0
  40a652:	4770      	bx	lr
  40a654:	f04f 0000 	mov.w	r0, #0
  40a658:	4770      	bx	lr
  40a65a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40a65e:	d105      	bne.n	40a66c <__aeabi_d2iz+0x48>
  40a660:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40a664:	bf08      	it	eq
  40a666:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40a66a:	4770      	bx	lr
  40a66c:	f04f 0000 	mov.w	r0, #0
  40a670:	4770      	bx	lr
  40a672:	bf00      	nop

0040a674 <__aeabi_uldivmod>:
  40a674:	b953      	cbnz	r3, 40a68c <__aeabi_uldivmod+0x18>
  40a676:	b94a      	cbnz	r2, 40a68c <__aeabi_uldivmod+0x18>
  40a678:	2900      	cmp	r1, #0
  40a67a:	bf08      	it	eq
  40a67c:	2800      	cmpeq	r0, #0
  40a67e:	bf1c      	itt	ne
  40a680:	f04f 31ff 	movne.w	r1, #4294967295
  40a684:	f04f 30ff 	movne.w	r0, #4294967295
  40a688:	f000 b97e 	b.w	40a988 <__aeabi_idiv0>
  40a68c:	f1ad 0c08 	sub.w	ip, sp, #8
  40a690:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40a694:	f000 f806 	bl	40a6a4 <__udivmoddi4>
  40a698:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a69c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a6a0:	b004      	add	sp, #16
  40a6a2:	4770      	bx	lr

0040a6a4 <__udivmoddi4>:
  40a6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a6a8:	468c      	mov	ip, r1
  40a6aa:	460e      	mov	r6, r1
  40a6ac:	4604      	mov	r4, r0
  40a6ae:	9d08      	ldr	r5, [sp, #32]
  40a6b0:	2b00      	cmp	r3, #0
  40a6b2:	d150      	bne.n	40a756 <__udivmoddi4+0xb2>
  40a6b4:	428a      	cmp	r2, r1
  40a6b6:	4617      	mov	r7, r2
  40a6b8:	d96c      	bls.n	40a794 <__udivmoddi4+0xf0>
  40a6ba:	fab2 fe82 	clz	lr, r2
  40a6be:	f1be 0f00 	cmp.w	lr, #0
  40a6c2:	d00b      	beq.n	40a6dc <__udivmoddi4+0x38>
  40a6c4:	f1ce 0420 	rsb	r4, lr, #32
  40a6c8:	fa20 f404 	lsr.w	r4, r0, r4
  40a6cc:	fa01 f60e 	lsl.w	r6, r1, lr
  40a6d0:	ea44 0c06 	orr.w	ip, r4, r6
  40a6d4:	fa02 f70e 	lsl.w	r7, r2, lr
  40a6d8:	fa00 f40e 	lsl.w	r4, r0, lr
  40a6dc:	ea4f 4917 	mov.w	r9, r7, lsr #16
  40a6e0:	0c22      	lsrs	r2, r4, #16
  40a6e2:	fbbc f0f9 	udiv	r0, ip, r9
  40a6e6:	fa1f f887 	uxth.w	r8, r7
  40a6ea:	fb09 c610 	mls	r6, r9, r0, ip
  40a6ee:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40a6f2:	fb00 f308 	mul.w	r3, r0, r8
  40a6f6:	42b3      	cmp	r3, r6
  40a6f8:	d909      	bls.n	40a70e <__udivmoddi4+0x6a>
  40a6fa:	19f6      	adds	r6, r6, r7
  40a6fc:	f100 32ff 	add.w	r2, r0, #4294967295
  40a700:	f080 8122 	bcs.w	40a948 <__udivmoddi4+0x2a4>
  40a704:	42b3      	cmp	r3, r6
  40a706:	f240 811f 	bls.w	40a948 <__udivmoddi4+0x2a4>
  40a70a:	3802      	subs	r0, #2
  40a70c:	443e      	add	r6, r7
  40a70e:	1af6      	subs	r6, r6, r3
  40a710:	b2a2      	uxth	r2, r4
  40a712:	fbb6 f3f9 	udiv	r3, r6, r9
  40a716:	fb09 6613 	mls	r6, r9, r3, r6
  40a71a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40a71e:	fb03 f808 	mul.w	r8, r3, r8
  40a722:	45a0      	cmp	r8, r4
  40a724:	d909      	bls.n	40a73a <__udivmoddi4+0x96>
  40a726:	19e4      	adds	r4, r4, r7
  40a728:	f103 32ff 	add.w	r2, r3, #4294967295
  40a72c:	f080 810a 	bcs.w	40a944 <__udivmoddi4+0x2a0>
  40a730:	45a0      	cmp	r8, r4
  40a732:	f240 8107 	bls.w	40a944 <__udivmoddi4+0x2a0>
  40a736:	3b02      	subs	r3, #2
  40a738:	443c      	add	r4, r7
  40a73a:	ebc8 0404 	rsb	r4, r8, r4
  40a73e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40a742:	2100      	movs	r1, #0
  40a744:	2d00      	cmp	r5, #0
  40a746:	d062      	beq.n	40a80e <__udivmoddi4+0x16a>
  40a748:	fa24 f40e 	lsr.w	r4, r4, lr
  40a74c:	2300      	movs	r3, #0
  40a74e:	602c      	str	r4, [r5, #0]
  40a750:	606b      	str	r3, [r5, #4]
  40a752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a756:	428b      	cmp	r3, r1
  40a758:	d907      	bls.n	40a76a <__udivmoddi4+0xc6>
  40a75a:	2d00      	cmp	r5, #0
  40a75c:	d055      	beq.n	40a80a <__udivmoddi4+0x166>
  40a75e:	2100      	movs	r1, #0
  40a760:	e885 0041 	stmia.w	r5, {r0, r6}
  40a764:	4608      	mov	r0, r1
  40a766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a76a:	fab3 f183 	clz	r1, r3
  40a76e:	2900      	cmp	r1, #0
  40a770:	f040 8090 	bne.w	40a894 <__udivmoddi4+0x1f0>
  40a774:	42b3      	cmp	r3, r6
  40a776:	d302      	bcc.n	40a77e <__udivmoddi4+0xda>
  40a778:	4282      	cmp	r2, r0
  40a77a:	f200 80f8 	bhi.w	40a96e <__udivmoddi4+0x2ca>
  40a77e:	1a84      	subs	r4, r0, r2
  40a780:	eb66 0603 	sbc.w	r6, r6, r3
  40a784:	2001      	movs	r0, #1
  40a786:	46b4      	mov	ip, r6
  40a788:	2d00      	cmp	r5, #0
  40a78a:	d040      	beq.n	40a80e <__udivmoddi4+0x16a>
  40a78c:	e885 1010 	stmia.w	r5, {r4, ip}
  40a790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a794:	b912      	cbnz	r2, 40a79c <__udivmoddi4+0xf8>
  40a796:	2701      	movs	r7, #1
  40a798:	fbb7 f7f2 	udiv	r7, r7, r2
  40a79c:	fab7 fe87 	clz	lr, r7
  40a7a0:	f1be 0f00 	cmp.w	lr, #0
  40a7a4:	d135      	bne.n	40a812 <__udivmoddi4+0x16e>
  40a7a6:	1bf3      	subs	r3, r6, r7
  40a7a8:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40a7ac:	fa1f fc87 	uxth.w	ip, r7
  40a7b0:	2101      	movs	r1, #1
  40a7b2:	fbb3 f0f8 	udiv	r0, r3, r8
  40a7b6:	0c22      	lsrs	r2, r4, #16
  40a7b8:	fb08 3610 	mls	r6, r8, r0, r3
  40a7bc:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40a7c0:	fb0c f300 	mul.w	r3, ip, r0
  40a7c4:	42b3      	cmp	r3, r6
  40a7c6:	d907      	bls.n	40a7d8 <__udivmoddi4+0x134>
  40a7c8:	19f6      	adds	r6, r6, r7
  40a7ca:	f100 32ff 	add.w	r2, r0, #4294967295
  40a7ce:	d202      	bcs.n	40a7d6 <__udivmoddi4+0x132>
  40a7d0:	42b3      	cmp	r3, r6
  40a7d2:	f200 80ce 	bhi.w	40a972 <__udivmoddi4+0x2ce>
  40a7d6:	4610      	mov	r0, r2
  40a7d8:	1af6      	subs	r6, r6, r3
  40a7da:	b2a2      	uxth	r2, r4
  40a7dc:	fbb6 f3f8 	udiv	r3, r6, r8
  40a7e0:	fb08 6613 	mls	r6, r8, r3, r6
  40a7e4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40a7e8:	fb0c fc03 	mul.w	ip, ip, r3
  40a7ec:	45a4      	cmp	ip, r4
  40a7ee:	d907      	bls.n	40a800 <__udivmoddi4+0x15c>
  40a7f0:	19e4      	adds	r4, r4, r7
  40a7f2:	f103 32ff 	add.w	r2, r3, #4294967295
  40a7f6:	d202      	bcs.n	40a7fe <__udivmoddi4+0x15a>
  40a7f8:	45a4      	cmp	ip, r4
  40a7fa:	f200 80b5 	bhi.w	40a968 <__udivmoddi4+0x2c4>
  40a7fe:	4613      	mov	r3, r2
  40a800:	ebcc 0404 	rsb	r4, ip, r4
  40a804:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40a808:	e79c      	b.n	40a744 <__udivmoddi4+0xa0>
  40a80a:	4629      	mov	r1, r5
  40a80c:	4628      	mov	r0, r5
  40a80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a812:	f1ce 0120 	rsb	r1, lr, #32
  40a816:	fa06 f30e 	lsl.w	r3, r6, lr
  40a81a:	fa07 f70e 	lsl.w	r7, r7, lr
  40a81e:	fa20 f901 	lsr.w	r9, r0, r1
  40a822:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40a826:	40ce      	lsrs	r6, r1
  40a828:	ea49 0903 	orr.w	r9, r9, r3
  40a82c:	fbb6 faf8 	udiv	sl, r6, r8
  40a830:	ea4f 4419 	mov.w	r4, r9, lsr #16
  40a834:	fb08 661a 	mls	r6, r8, sl, r6
  40a838:	fa1f fc87 	uxth.w	ip, r7
  40a83c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  40a840:	fb0a f20c 	mul.w	r2, sl, ip
  40a844:	429a      	cmp	r2, r3
  40a846:	fa00 f40e 	lsl.w	r4, r0, lr
  40a84a:	d90a      	bls.n	40a862 <__udivmoddi4+0x1be>
  40a84c:	19db      	adds	r3, r3, r7
  40a84e:	f10a 31ff 	add.w	r1, sl, #4294967295
  40a852:	f080 8087 	bcs.w	40a964 <__udivmoddi4+0x2c0>
  40a856:	429a      	cmp	r2, r3
  40a858:	f240 8084 	bls.w	40a964 <__udivmoddi4+0x2c0>
  40a85c:	f1aa 0a02 	sub.w	sl, sl, #2
  40a860:	443b      	add	r3, r7
  40a862:	1a9b      	subs	r3, r3, r2
  40a864:	fa1f f989 	uxth.w	r9, r9
  40a868:	fbb3 f1f8 	udiv	r1, r3, r8
  40a86c:	fb08 3311 	mls	r3, r8, r1, r3
  40a870:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  40a874:	fb01 f60c 	mul.w	r6, r1, ip
  40a878:	429e      	cmp	r6, r3
  40a87a:	d907      	bls.n	40a88c <__udivmoddi4+0x1e8>
  40a87c:	19db      	adds	r3, r3, r7
  40a87e:	f101 32ff 	add.w	r2, r1, #4294967295
  40a882:	d26b      	bcs.n	40a95c <__udivmoddi4+0x2b8>
  40a884:	429e      	cmp	r6, r3
  40a886:	d969      	bls.n	40a95c <__udivmoddi4+0x2b8>
  40a888:	3902      	subs	r1, #2
  40a88a:	443b      	add	r3, r7
  40a88c:	1b9b      	subs	r3, r3, r6
  40a88e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40a892:	e78e      	b.n	40a7b2 <__udivmoddi4+0x10e>
  40a894:	f1c1 0e20 	rsb	lr, r1, #32
  40a898:	fa22 f40e 	lsr.w	r4, r2, lr
  40a89c:	408b      	lsls	r3, r1
  40a89e:	4323      	orrs	r3, r4
  40a8a0:	fa20 f70e 	lsr.w	r7, r0, lr
  40a8a4:	fa06 f401 	lsl.w	r4, r6, r1
  40a8a8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40a8ac:	fa26 f60e 	lsr.w	r6, r6, lr
  40a8b0:	433c      	orrs	r4, r7
  40a8b2:	fbb6 f9fc 	udiv	r9, r6, ip
  40a8b6:	0c27      	lsrs	r7, r4, #16
  40a8b8:	fb0c 6619 	mls	r6, ip, r9, r6
  40a8bc:	fa1f f883 	uxth.w	r8, r3
  40a8c0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  40a8c4:	fb09 f708 	mul.w	r7, r9, r8
  40a8c8:	42b7      	cmp	r7, r6
  40a8ca:	fa02 f201 	lsl.w	r2, r2, r1
  40a8ce:	fa00 fa01 	lsl.w	sl, r0, r1
  40a8d2:	d908      	bls.n	40a8e6 <__udivmoddi4+0x242>
  40a8d4:	18f6      	adds	r6, r6, r3
  40a8d6:	f109 30ff 	add.w	r0, r9, #4294967295
  40a8da:	d241      	bcs.n	40a960 <__udivmoddi4+0x2bc>
  40a8dc:	42b7      	cmp	r7, r6
  40a8de:	d93f      	bls.n	40a960 <__udivmoddi4+0x2bc>
  40a8e0:	f1a9 0902 	sub.w	r9, r9, #2
  40a8e4:	441e      	add	r6, r3
  40a8e6:	1bf6      	subs	r6, r6, r7
  40a8e8:	b2a0      	uxth	r0, r4
  40a8ea:	fbb6 f4fc 	udiv	r4, r6, ip
  40a8ee:	fb0c 6614 	mls	r6, ip, r4, r6
  40a8f2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40a8f6:	fb04 f808 	mul.w	r8, r4, r8
  40a8fa:	45b8      	cmp	r8, r7
  40a8fc:	d907      	bls.n	40a90e <__udivmoddi4+0x26a>
  40a8fe:	18ff      	adds	r7, r7, r3
  40a900:	f104 30ff 	add.w	r0, r4, #4294967295
  40a904:	d228      	bcs.n	40a958 <__udivmoddi4+0x2b4>
  40a906:	45b8      	cmp	r8, r7
  40a908:	d926      	bls.n	40a958 <__udivmoddi4+0x2b4>
  40a90a:	3c02      	subs	r4, #2
  40a90c:	441f      	add	r7, r3
  40a90e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  40a912:	ebc8 0707 	rsb	r7, r8, r7
  40a916:	fba0 8902 	umull	r8, r9, r0, r2
  40a91a:	454f      	cmp	r7, r9
  40a91c:	4644      	mov	r4, r8
  40a91e:	464e      	mov	r6, r9
  40a920:	d314      	bcc.n	40a94c <__udivmoddi4+0x2a8>
  40a922:	d029      	beq.n	40a978 <__udivmoddi4+0x2d4>
  40a924:	b365      	cbz	r5, 40a980 <__udivmoddi4+0x2dc>
  40a926:	ebba 0304 	subs.w	r3, sl, r4
  40a92a:	eb67 0706 	sbc.w	r7, r7, r6
  40a92e:	fa07 fe0e 	lsl.w	lr, r7, lr
  40a932:	40cb      	lsrs	r3, r1
  40a934:	40cf      	lsrs	r7, r1
  40a936:	ea4e 0303 	orr.w	r3, lr, r3
  40a93a:	e885 0088 	stmia.w	r5, {r3, r7}
  40a93e:	2100      	movs	r1, #0
  40a940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a944:	4613      	mov	r3, r2
  40a946:	e6f8      	b.n	40a73a <__udivmoddi4+0x96>
  40a948:	4610      	mov	r0, r2
  40a94a:	e6e0      	b.n	40a70e <__udivmoddi4+0x6a>
  40a94c:	ebb8 0402 	subs.w	r4, r8, r2
  40a950:	eb69 0603 	sbc.w	r6, r9, r3
  40a954:	3801      	subs	r0, #1
  40a956:	e7e5      	b.n	40a924 <__udivmoddi4+0x280>
  40a958:	4604      	mov	r4, r0
  40a95a:	e7d8      	b.n	40a90e <__udivmoddi4+0x26a>
  40a95c:	4611      	mov	r1, r2
  40a95e:	e795      	b.n	40a88c <__udivmoddi4+0x1e8>
  40a960:	4681      	mov	r9, r0
  40a962:	e7c0      	b.n	40a8e6 <__udivmoddi4+0x242>
  40a964:	468a      	mov	sl, r1
  40a966:	e77c      	b.n	40a862 <__udivmoddi4+0x1be>
  40a968:	3b02      	subs	r3, #2
  40a96a:	443c      	add	r4, r7
  40a96c:	e748      	b.n	40a800 <__udivmoddi4+0x15c>
  40a96e:	4608      	mov	r0, r1
  40a970:	e70a      	b.n	40a788 <__udivmoddi4+0xe4>
  40a972:	3802      	subs	r0, #2
  40a974:	443e      	add	r6, r7
  40a976:	e72f      	b.n	40a7d8 <__udivmoddi4+0x134>
  40a978:	45c2      	cmp	sl, r8
  40a97a:	d3e7      	bcc.n	40a94c <__udivmoddi4+0x2a8>
  40a97c:	463e      	mov	r6, r7
  40a97e:	e7d1      	b.n	40a924 <__udivmoddi4+0x280>
  40a980:	4629      	mov	r1, r5
  40a982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a986:	bf00      	nop

0040a988 <__aeabi_idiv0>:
  40a988:	4770      	bx	lr
  40a98a:	bf00      	nop
  40a98c:	50504128 	.word	0x50504128
  40a990:	52452829 	.word	0x52452829
  40a994:	255b2952 	.word	0x255b2952
  40a998:	255b5d73 	.word	0x255b5d73
  40a99c:	00005d64 	.word	0x00005d64
  40a9a0:	61766e49 	.word	0x61766e49
  40a9a4:	2064696c 	.word	0x2064696c
  40a9a8:	54434f49 	.word	0x54434f49
  40a9ac:	6f63204c 	.word	0x6f63204c
  40a9b0:	6e616d6d 	.word	0x6e616d6d
  40a9b4:	000a2164 	.word	0x000a2164
  40a9b8:	0000000d 	.word	0x0000000d

0040a9bc <__FUNCTION__.9672>:
  40a9bc:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....

0040a9cc <__FUNCTION__.8784>:
  40a9cc:	5f666968 00727369                       hif_isr.

0040a9d4 <__FUNCTION__.8805>:
  40a9d4:	5f666968 65636572 00657669 46494828     hif_receive.(HIF
  40a9e4:	69614629 6f74206c 6b617720 74207075     )Fail to wakup t
  40a9f4:	63206568 0a706968 00000000 66696828     he chip.....(hif
  40aa04:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
  40aa14:	4c525443 6220315f 66207375 0a6c6961     CTRL_1 bus fail.
  40aa24:	00000000 66696828 64612029 73657264     ....(hif) addres
  40aa34:	75622073 61662073 000a6c69 66696828     s bus fail..(hif
  40aa44:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
  40aa54:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
  40aa64:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
  40aa74:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
  40aa84:	6e692029 696c6176 72672064 2070756f     ) invalid group 
  40aa94:	000a4449 66696828 6f682029 61207473     ID..(hif) host a
  40aaa4:	64207070 276e6469 65732074 58522074     pp didn't set RX
  40aab4:	6e6f4420 00000a65 66696828 72572029      Done...(hif) Wr
  40aac4:	20676e6f 657a6953 0000000a 66696828     ong Size....(hif
  40aad4:	61462029 2065736c 65746e69 70757272     ) False interrup
  40aae4:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
  40aaf4:	74206c69 6552206f 69206461 7265746e     il to Read inter
  40ab04:	74707572 67657220 0000000a 66696828     rupt reg....(hif
  40ab14:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
  40ab24:	65687420 69686320 00000a70 46494828      the chip...(HIF
  40ab34:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
  40ab44:	746e6920 75727265 25207470 72742064      interrupt %d tr
  40ab54:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
  40ab64:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
  40ab74:	72612064 656d7567 000a746e 20505041     d argument..APP 
  40ab84:	75716552 65747365 69532064 6920657a     Requested Size i
  40ab94:	616c2073 72656772 61687420 6874206e     s larger than th
  40aba4:	65722065 65766963 75622064 72656666     e recived buffer
  40abb4:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
  40abc4:	20505041 75716552 65747365 64412064     APP Requested Ad
  40abd4:	73657264 65622073 646e6f79 65687420     dress beyond the
  40abe4:	63657220 64657669 66756220 20726566      recived buffer 
  40abf4:	72646461 20737365 20646e61 676e656c     address and leng
  40ac04:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....

0040ac14 <__FUNCTION__.8820>:
  40ac14:	5f666968 69676572 72657473 0062635f     hif_register_cb.

0040ac24 <__FUNCTION__.8774>:
  40ac24:	5f666968 646e6573 00000000              hif_send....

0040ac30 <__FUNCTION__.8790>:
  40ac30:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0040ac40 <__FUNCTION__.8799>:
  40ac40:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  40ac50:	0063735f                                _sc.

0040ac54 <__FUNCTION__.8747>:
  40ac54:	5f6d326d 69666977 0062635f 50504128     m2m_wifi_cb.(APP
  40ac64:	4e492829 00294f46 666e6f43 7463696c     )(INFO).Conflict
  40ac74:	49206465 20222050 252e7525 75252e75     ed IP " %u.%u.%u
  40ac84:	2075252e 000a2022 20514552 20746f4e     .%u " ..REQ Not 
  40ac94:	69666564 2064656e 000a6425 41564e49     defined %d..INVA
  40aca4:	2044494c 4e494f50 0a524554 00000000     LID POINTER.....
  40acb4:	41564e49 2044494c 44495353 0000000a     INVALID SSID....
  40acc4:	41564e49 2044494c 000a4843 41564e49     INVALID CH..INVA
  40acd4:	2044494c 50434844 52455320 20524556     LID DHCP SERVER 
  40ace4:	000a5049 41564e49 2044494c 2059454b     IP..INVALID KEY 
  40acf4:	45444e49 00000a58 41564e49 2044494c     INDEX...INVALID 
  40ad04:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
  40ad14:	2044494c 20504557 0a59454b 00000000     LID WEP KEY.....
  40ad24:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
  40ad34:	49544143 4d204e4f 0a45444f 00000000     CATION MODE.....
  40ad44:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  40ad54:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  40ad64:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  40ad74:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  40ad84:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  40ad94:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  40ada4:	7277616d 65562065 6f697372 00000a6e     mawre Version...
  40adb4:	2079654b 6e207369 7620746f 64696c61     Key is not valid
  40adc4:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
  40add4:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
  40ade4:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
  40adf4:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
  40ae04:	2079656b 65646e69 64252078 0000000a     key index %d....
  40ae14:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
  40ae24:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
  40ae34:	63657272 53502074 656b204b 656c2079     rrect PSK key le
  40ae44:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
  40ae54:	65732064 79742063 000a6570 41564e49     d sec type..INVA
  40ae64:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
  40ae74:	73746f6c 00000a21 41564e49 2044494c     lots!...INVALID 
  40ae84:	6e616373 6f6c7320 69742074 0a21656d     scan slot time!.
  40ae94:	00000000 41564e49 2044494c 6f206f4e     ....INVALID No o
  40aea4:	72702066 2065626f 75716572 73747365     f probe requests
  40aeb4:	72657020 61637320 6c73206e 000a746f      per scan slot..
  40aec4:	41564e49 2044494c 49535352 72687420     INVALID RSSI thr
  40aed4:	6f687365 2520646c 000a2064 5f53505f     eshold %d .._PS_
  40aee4:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
  40aef4:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
  40af04:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
  40af14:	6220796c 2c312065 6f203620 31312072     ly be 1, 6 or 11
  40af24:	0000000a 45574f50 41532052 25204556     ....POWER SAVE %
  40af34:	00000a64 41564e49 2044494c 414d4f44     d...INVALID DOMA
  40af44:	4e204e49 0a454d41 00000000 474e5250     IN NAME.....PRNG
  40af54:	66754220 20726566 65637865 64656465      Buffer exceeded
  40af64:	78616d20 6d756d69 7a697320 64252065      maximum size %d
  40af74:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
  40af84:	00000000                                ....

0040af88 <__FUNCTION__.8771>:
  40af88:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0040af98 <__FUNCTION__.8678>:
  40af98:	70696863 6965645f 0074696e              chip_deinit.

0040afa4 <__FUNCTION__.8584>:
  40afa4:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.
  40afb4:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  40afc4:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40afd4:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  40afe4:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40aff4:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  40b004:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  40b014:	0000000a 696d6e5b 61747320 3a5d7472     ....[nmi start]:
  40b024:	69616620 6572206c 72206461 30206765      fail read reg 0
  40b034:	31313178 2e2e2038 00000a2e 3a676572     x1118 ......reg:
  40b044:	2f207825 20782520 0000000a 6c696166     %x / %x ....fail
  40b054:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  40b064:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  40b074:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  40b084:	00000000 6f727245 68772072 20656c69     ....Error while 
  40b094:	64616572 20676e69 0a676572 00000000     reading reg.....
  40b0a4:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  40b0b4:	656c6961 6f742064 61657220 00000a64     ailed to read...
  40b0c4:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  40b0d4:	656c6961 6f742064 69727720 000a6574     ailed to write..
  40b0e4:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40b0f4:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  40b104:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
  40b114:	74206465 6e65206f 656c6261 746e6920     ed to enable int
  40b124:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
  40b134:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
  40b144:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
  40b154:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
  40b164:	69642068 6c626173 61662065 000a6c69     h disable fail..
  40b174:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
  40b184:	696e6920 75622074 00000a73               init bus...

0040b190 <__FUNCTION__.8665>:
  40b190:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040b19c <__FUNCTION__.8672>:
  40b19c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0040b1ac <__FUNCTION__.8073>:
  40b1ac:	5f697073 61746164 6165725f 00000064     spi_data_read...

0040b1bc <crc7_syndrome_table>:
  40b1bc:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  40b1cc:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  40b1dc:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  40b1ec:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  40b1fc:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  40b20c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  40b21c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  40b22c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  40b23c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  40b24c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  40b25c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  40b26c:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  40b27c:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  40b28c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  40b29c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  40b2ac:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

0040b2bc <__FUNCTION__.8140>:
  40b2bc:	735f6d6e 695f6970 0074696e              nm_spi_init.

0040b2c8 <__FUNCTION__.8088>:
  40b2c8:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040b2d8 <__FUNCTION__.8123>:
  40b2d8:	735f6d6e 725f6970 00646165 696d6e5b     nm_spi_read.[nmi
  40b2e8:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40b2f8:	65722064 6e6f7073 72206573 2c646165     d response read,
  40b308:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40b318:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40b328:	61642064 72206174 6f707365 2065736e     d data response 
  40b338:	64616572 7562202c 72652073 2e726f72     read, bus error.
  40b348:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40b358:	656c6961 61642064 72206174 6f707365     ailed data respo
  40b368:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  40b378:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  40b388:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40b398:	61657220 62202c64 65207375 726f7272      read, bus error
  40b3a8:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  40b3b8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40b3c8:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  40b3d8:	65207375 726f7272 0a2e2e2e 00000000     us error........
  40b3e8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40b3f8:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  40b408:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  40b418:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40b428:	77202c64 65746972 67657220 30252820     d, write reg (%0
  40b438:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
  40b448:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
  40b458:	6e6f7073 202c6573 74697277 65722065     sponse, write re
  40b468:	25282067 29783830 0a2e2e2e 00000000     g (%08x)........
  40b478:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40b488:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  40b498:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  40b4a8:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40b4b8:	65722064 6e6f7073 202c6573 64616572     d response, read
  40b4c8:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  40b4d8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40b4e8:	61642064 72206174 2e646165 000a2e2e     d data read.....
  40b4f8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40b508:	6e692064 6e726574 72206c61 20646165     d internal read 
  40b518:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  40b528:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  40b538:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  40b548:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40b558:	6e692064 6e726574 72206c61 20646165     d internal read 
  40b568:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  40b578:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40b588:	6e692064 6e726574 77206c61 65746972     d internal write
  40b598:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  40b5a8:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40b5b8:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  40b5c8:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  40b5d8:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40b5e8:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  40b5f8:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  40b608:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40b618:	65722064 6e6f7073 202c6573 64616572     d response, read
  40b628:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  40b638:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40b648:	656c6961 6c622064 206b636f 61746164     ailed block data
  40b658:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  40b668:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40b678:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  40b688:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  40b698:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  40b6a8:	7220646d 6f707365 2c65736e 69727720     md response, wri
  40b6b8:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  40b6c8:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40b6d8:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40b6e8:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  40b6f8:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40b708:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40b718:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  40b728:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40b738:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40b748:	61642064 62206174 6b636f6c 63726320     d data block crc
  40b758:	69727720 202c6574 20737562 6f727265      write, bus erro
  40b768:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  40b778:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40b788:	61746164 69727720 2e2e6574 00000a2e     data write......

0040b798 <__FUNCTION__.8098>:
  40b798:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040b7a8 <__FUNCTION__.8049>:
  40b7a8:	5f697073 00646d63                       spi_cmd.

0040b7b0 <__FUNCTION__.8106>:
  40b7b0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0040b7c0 <__FUNCTION__.8057>:
  40b7c0:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040b7cc <__FUNCTION__.8115>:
  40b7cc:	5f697073 64616572 6765725f 00000000     spi_read_reg....
  40b7dc:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
  40b7ec:	000a3e64 20494e53 65637845 20736465     d>..SNI Exceeds 
  40b7fc:	2078614d 676e654c 000a6874 6e6b6e55     Max Length..Unkn
  40b80c:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
  40b81c:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
  40b82c:	204c5353 6b636f53 000a7465 54544820     SSL Socket.. HTT
  40b83c:	2e312f50 200a0d31 65636341 203a7470     P/1.1.. Accept: 
  40b84c:	0d2a2f2a 000a0d0a 20544547 6e74622f     */*.....GET /btn
  40b85c:	6174735f 2f737574 00000031 73257325     _status/1...%s%s
  40b86c:	00000000 6b636f73 635f7465 63203a62     ....socket_cb: c
  40b87c:	656e6e6f 73207463 65636375 0d217373     onnect success!.
  40b88c:	0000000a 6b636f73 635f7465 63203a62     ....socket_cb: c
  40b89c:	656e6e6f 65207463 726f7272 000a0d21     onnect error!...
  40b8ac:	6b636f73 635f7465 73203a62 20646e65     socket_cb: send 
  40b8bc:	63637573 21737365 00000a0d 00007325     success!....%s..
  40b8cc:	00004646 6b636f73 635f7465 72203a62     FF..socket_cb: r
  40b8dc:	20766365 6f727265 0a0d2172 00000000     ecv error!......
  40b8ec:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
  40b8fc:	45525f49 435f5053 535f4e4f 45544154     I_RESP_CON_STATE
  40b90c:	4148435f 4445474e 4f43203a 43454e4e     _CHANGED: CONNEC
  40b91c:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
  40b92c:	4d324d20 4649575f 45525f49 435f5053      M2M_WIFI_RESP_C
  40b93c:	535f4e4f 45544154 4148435f 4445474e     ON_STATE_CHANGED
  40b94c:	4944203a 4e4f4353 5443454e 0a0d4445     : DISCONNECTED..
  40b95c:	00000000 34333231 38373635 00000000     ....12345678....
  40b96c:	6f72614d 656b7a74 00000000 69666977     Marotzke....wifi
  40b97c:	3a62635f 4d324d20 4649575f 45525f49     _cb: M2M_WIFI_RE
  40b98c:	48445f51 435f5043 3a464e4f 20504920     Q_DHCP_CONF: IP 
  40b99c:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
  40b9ac:	00000000 00000053 2044454c 00004e4f     ....S...LED ON..
  40b9bc:	2044454c 0046464f 57202d2d 31434e49     LED OFF.-- WINC1
  40b9cc:	20303035 20504354 76726573 65207265     500 TCP server e
  40b9dc:	706d6178 2d20656c 2d0a0d2d 4153202d     xample --..-- SA
  40b9ec:	3037454d 4c50582d 2d2d2044 2d2d0a0d     ME70-XPLD --..--
  40b9fc:	6d6f4320 656c6970 4d203a64 31207961      Compiled: May 1
  40ba0c:	30322030 31203731 38353a38 2036353a     0 2017 18:58:56 
  40ba1c:	0a0d2d2d 00000000 6e69616d 326d203a     --......main: m2
  40ba2c:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
  40ba3c:	72726520 2821726f 0d296425 0000000a      error!(%d).....
  40ba4c:	6e69616d 6166203a 64656c69 206f7420     main: failed to 
  40ba5c:	61657263 54206574 63205043 6e65696c     create TCP clien
  40ba6c:	6f732074 74656b63 72726520 0d21726f     t socket error!.
  40ba7c:	0000000a 6e69616d 6166203a 64656c69     ....main: failed
  40ba8c:	206f7420 6e6e6f63 20746365 6b636f73      to connect sock
  40ba9c:	65207465 726f7272 000a0d21 656e6f43     et error!...Cone
  40baac:	64617463 2021206f 0000000a 00000043     ctado ! ....C...

0040babc <_global_impure_ptr>:
  40babc:	20400020                                 .@ 

0040bac0 <zeroes.7035>:
  40bac0:	30303030 30303030 30303030 30303030     0000000000000000
  40bad0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40bae0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40baf0:	00000000 33323130 37363534 62613938     ....0123456789ab
  40bb00:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  40bb10:	00000030                                0...

0040bb14 <blanks.7034>:
  40bb14:	20202020 20202020 20202020 20202020                     

0040bb24 <zeroes.6993>:
  40bb24:	30303030 30303030 30303030 30303030     0000000000000000

0040bb34 <blanks.6992>:
  40bb34:	20202020 20202020 20202020 20202020                     
  40bb44:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40bb54:	49534f50 00000058 0000002e              POSIX.......

0040bb60 <__mprec_tens>:
  40bb60:	00000000 3ff00000 00000000 40240000     .......?......$@
  40bb70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40bb80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40bb90:	00000000 412e8480 00000000 416312d0     .......A......cA
  40bba0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40bbb0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40bbc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40bbd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40bbe0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40bbf0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40bc00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40bc10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40bc20:	79d99db4 44ea7843                       ...yCx.D

0040bc28 <__mprec_bigtens>:
  40bc28:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40bc38:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40bc48:	7f73bf3c 75154fdd                       <.s..O.u

0040bc50 <p05.5373>:
  40bc50:	00000005 00000019 0000007d              ........}...

0040bc5c <_init>:
  40bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bc5e:	bf00      	nop
  40bc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40bc62:	bc08      	pop	{r3}
  40bc64:	469e      	mov	lr, r3
  40bc66:	4770      	bx	lr

0040bc68 <__init_array_start>:
  40bc68:	00406c21 	.word	0x00406c21

0040bc6c <__frame_dummy_init_array_entry>:
  40bc6c:	00400165                                e.@.

0040bc70 <_fini>:
  40bc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bc72:	bf00      	nop
  40bc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40bc76:	bc08      	pop	{r3}
  40bc78:	469e      	mov	lr, r3
  40bc7a:	4770      	bx	lr

0040bc7c <__fini_array_start>:
  40bc7c:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <egstrNmBusCapabilities>:
2040000c:	1000 0000                                   ....

20400010 <clk_status_reg_adr>:
20400010:	000f 0000                                   ....

20400014 <g_interrupt_enabled>:
20400014:	0001 0000                                   ....

20400018 <SystemCoreClock>:
20400018:	0900 003d                                   ..=.

2040001c <tcp_client_socket>:
2040001c:	00ff 0000                                   ....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
20400054:	bab8 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <_impure_ptr>:
20400448:	0020 2040                                    .@ 

2040044c <lconv>:
2040044c:	bb5c 0040 b8e8 0040 b8e8 0040 b8e8 0040     \.@...@...@...@.
2040045c:	b8e8 0040 b8e8 0040 b8e8 0040 b8e8 0040     ..@...@...@...@.
2040046c:	b8e8 0040 b8e8 0040 ffff ffff ffff ffff     ..@...@.........
2040047c:	ffff ffff ffff 0000                         ........

20400484 <lc_ctype_charset>:
20400484:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

204004a4 <__mb_cur_max>:
204004a4:	0001 0000                                   ....

204004a8 <__malloc_av_>:
	...
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 

204008b0 <__malloc_trim_threshold>:
204008b0:	0000 0002                                   ....

204008b4 <__malloc_sbrk_base>:
204008b4:	ffff ffff                                   ....

204008b8 <__wctomb>:
204008b8:	9abd 0040                                   ..@.

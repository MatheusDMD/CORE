
WIFI-SOCKET-HOST-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f1c8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040f1c8  0040f1c8  0001f1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008bc  20400000  0040f1d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001328  204008bc  0040fa8c  000208bc  2**2
                  ALLOC
  4 .stack        00002004  20401be4  00410db4  000208bc  2**0
                  ALLOC
  5 .heap         00000200  20403be8  00412db8  000208bc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000208bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001647a  00000000  00000000  00020943  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000034be  00000000  00000000  00036dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b471  00000000  00000000  0003a27b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001408  00000000  00000000  000456ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001408  00000000  00000000  00046af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024ab8  00000000  00000000  00047efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00016a3b  00000000  00000000  0006c9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000920fa  00000000  00000000  000833ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006494  00000000  00000000  001154ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403be8 	.word	0x20403be8
  400004:	00406339 	.word	0x00406339
  400008:	004063e9 	.word	0x004063e9
  40000c:	004063e9 	.word	0x004063e9
  400010:	004063e9 	.word	0x004063e9
  400014:	004063e9 	.word	0x004063e9
  400018:	004063e9 	.word	0x004063e9
	...
  40002c:	004063e9 	.word	0x004063e9
  400030:	004063e9 	.word	0x004063e9
  400034:	00000000 	.word	0x00000000
  400038:	004063e9 	.word	0x004063e9
  40003c:	004063e9 	.word	0x004063e9
  400040:	004063e9 	.word	0x004063e9
  400044:	004063e9 	.word	0x004063e9
  400048:	004063e9 	.word	0x004063e9
  40004c:	004063e9 	.word	0x004063e9
  400050:	004063e9 	.word	0x004063e9
  400054:	004063e9 	.word	0x004063e9
  400058:	004063e9 	.word	0x004063e9
  40005c:	004063e9 	.word	0x004063e9
  400060:	004063e9 	.word	0x004063e9
  400064:	00000000 	.word	0x00000000
  400068:	00405615 	.word	0x00405615
  40006c:	0040562d 	.word	0x0040562d
  400070:	00405645 	.word	0x00405645
  400074:	004063e9 	.word	0x004063e9
  400078:	004063e9 	.word	0x004063e9
  40007c:	004063e9 	.word	0x004063e9
  400080:	0040565d 	.word	0x0040565d
  400084:	00405675 	.word	0x00405675
  400088:	004063e9 	.word	0x004063e9
  40008c:	004063e9 	.word	0x004063e9
  400090:	004063e9 	.word	0x004063e9
  400094:	004063e9 	.word	0x004063e9
  400098:	004063e9 	.word	0x004063e9
  40009c:	00406ccd 	.word	0x00406ccd
  4000a0:	004063e9 	.word	0x004063e9
  4000a4:	004063e9 	.word	0x004063e9
  4000a8:	004063e9 	.word	0x004063e9
  4000ac:	004063e9 	.word	0x004063e9
  4000b0:	004063e9 	.word	0x004063e9
  4000b4:	004063e9 	.word	0x004063e9
  4000b8:	004063e9 	.word	0x004063e9
  4000bc:	004063e9 	.word	0x004063e9
  4000c0:	004063e9 	.word	0x004063e9
  4000c4:	004063e9 	.word	0x004063e9
  4000c8:	004063e9 	.word	0x004063e9
  4000cc:	004063e9 	.word	0x004063e9
  4000d0:	00000000 	.word	0x00000000
  4000d4:	004063e9 	.word	0x004063e9
  4000d8:	00000000 	.word	0x00000000
  4000dc:	004063e9 	.word	0x004063e9
  4000e0:	004063e9 	.word	0x004063e9
  4000e4:	004063e9 	.word	0x004063e9
  4000e8:	004063e9 	.word	0x004063e9
  4000ec:	004063e9 	.word	0x004063e9
  4000f0:	004063e9 	.word	0x004063e9
  4000f4:	004063e9 	.word	0x004063e9
  4000f8:	004063e9 	.word	0x004063e9
  4000fc:	004063e9 	.word	0x004063e9
  400100:	004063e9 	.word	0x004063e9
  400104:	004063e9 	.word	0x004063e9
  400108:	004063e9 	.word	0x004063e9
  40010c:	004063e9 	.word	0x004063e9
  400110:	004063e9 	.word	0x004063e9
	...
  400120:	004063e9 	.word	0x004063e9
  400124:	004063e9 	.word	0x004063e9
  400128:	004063e9 	.word	0x004063e9
  40012c:	004063e9 	.word	0x004063e9
  400130:	004063e9 	.word	0x004063e9
  400134:	00000000 	.word	0x00000000
  400138:	004063e9 	.word	0x004063e9
  40013c:	004063e9 	.word	0x004063e9

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008bc 	.word	0x204008bc
  40015c:	00000000 	.word	0x00000000
  400160:	0040f1d0 	.word	0x0040f1d0

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	204008c0 	.word	0x204008c0
  400190:	0040f1d0 	.word	0x0040f1d0
  400194:	0040f1d0 	.word	0x0040f1d0
  400198:	00000000 	.word	0x00000000

0040019c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40019c:	b480      	push	{r7}
  40019e:	b083      	sub	sp, #12
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	4603      	mov	r3, r0
  4001a4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4001a6:	4909      	ldr	r1, [pc, #36]	; (4001cc <NVIC_EnableIRQ+0x30>)
  4001a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4001ac:	095b      	lsrs	r3, r3, #5
  4001ae:	79fa      	ldrb	r2, [r7, #7]
  4001b0:	f002 021f 	and.w	r2, r2, #31
  4001b4:	2001      	movs	r0, #1
  4001b6:	fa00 f202 	lsl.w	r2, r0, r2
  4001ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4001be:	bf00      	nop
  4001c0:	370c      	adds	r7, #12
  4001c2:	46bd      	mov	sp, r7
  4001c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001c8:	4770      	bx	lr
  4001ca:	bf00      	nop
  4001cc:	e000e100 	.word	0xe000e100

004001d0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4001d0:	b480      	push	{r7}
  4001d2:	b083      	sub	sp, #12
  4001d4:	af00      	add	r7, sp, #0
  4001d6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001d8:	687b      	ldr	r3, [r7, #4]
  4001da:	2b07      	cmp	r3, #7
  4001dc:	d825      	bhi.n	40022a <osc_get_rate+0x5a>
  4001de:	a201      	add	r2, pc, #4	; (adr r2, 4001e4 <osc_get_rate+0x14>)
  4001e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001e4:	00400205 	.word	0x00400205
  4001e8:	0040020b 	.word	0x0040020b
  4001ec:	00400211 	.word	0x00400211
  4001f0:	00400217 	.word	0x00400217
  4001f4:	0040021b 	.word	0x0040021b
  4001f8:	0040021f 	.word	0x0040021f
  4001fc:	00400223 	.word	0x00400223
  400200:	00400227 	.word	0x00400227
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400204:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400208:	e010      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40020a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40020e:	e00d      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400214:	e00a      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400216:	4b08      	ldr	r3, [pc, #32]	; (400238 <osc_get_rate+0x68>)
  400218:	e008      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40021a:	4b08      	ldr	r3, [pc, #32]	; (40023c <osc_get_rate+0x6c>)
  40021c:	e006      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40021e:	4b08      	ldr	r3, [pc, #32]	; (400240 <osc_get_rate+0x70>)
  400220:	e004      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400222:	4b07      	ldr	r3, [pc, #28]	; (400240 <osc_get_rate+0x70>)
  400224:	e002      	b.n	40022c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400226:	4b06      	ldr	r3, [pc, #24]	; (400240 <osc_get_rate+0x70>)
  400228:	e000      	b.n	40022c <osc_get_rate+0x5c>
	}

	return 0;
  40022a:	2300      	movs	r3, #0
}
  40022c:	4618      	mov	r0, r3
  40022e:	370c      	adds	r7, #12
  400230:	46bd      	mov	sp, r7
  400232:	f85d 7b04 	ldr.w	r7, [sp], #4
  400236:	4770      	bx	lr
  400238:	003d0900 	.word	0x003d0900
  40023c:	007a1200 	.word	0x007a1200
  400240:	00b71b00 	.word	0x00b71b00

00400244 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400244:	b580      	push	{r7, lr}
  400246:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400248:	2006      	movs	r0, #6
  40024a:	4b05      	ldr	r3, [pc, #20]	; (400260 <sysclk_get_main_hz+0x1c>)
  40024c:	4798      	blx	r3
  40024e:	4602      	mov	r2, r0
  400250:	4613      	mov	r3, r2
  400252:	009b      	lsls	r3, r3, #2
  400254:	4413      	add	r3, r2
  400256:	009a      	lsls	r2, r3, #2
  400258:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40025a:	4618      	mov	r0, r3
  40025c:	bd80      	pop	{r7, pc}
  40025e:	bf00      	nop
  400260:	004001d1 	.word	0x004001d1

00400264 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400264:	b580      	push	{r7, lr}
  400266:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400268:	4b02      	ldr	r3, [pc, #8]	; (400274 <sysclk_get_cpu_hz+0x10>)
  40026a:	4798      	blx	r3
  40026c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40026e:	4618      	mov	r0, r3
  400270:	bd80      	pop	{r7, pc}
  400272:	bf00      	nop
  400274:	00400245 	.word	0x00400245

00400278 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400278:	b580      	push	{r7, lr}
  40027a:	b082      	sub	sp, #8
  40027c:	af00      	add	r7, sp, #0
  40027e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400280:	6878      	ldr	r0, [r7, #4]
  400282:	4b03      	ldr	r3, [pc, #12]	; (400290 <sysclk_enable_peripheral_clock+0x18>)
  400284:	4798      	blx	r3
}
  400286:	bf00      	nop
  400288:	3708      	adds	r7, #8
  40028a:	46bd      	mov	sp, r7
  40028c:	bd80      	pop	{r7, pc}
  40028e:	bf00      	nop
  400290:	004059d5 	.word	0x004059d5

00400294 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400294:	b580      	push	{r7, lr}
  400296:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400298:	200a      	movs	r0, #10
  40029a:	4b08      	ldr	r3, [pc, #32]	; (4002bc <ioport_init+0x28>)
  40029c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40029e:	200b      	movs	r0, #11
  4002a0:	4b06      	ldr	r3, [pc, #24]	; (4002bc <ioport_init+0x28>)
  4002a2:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4002a4:	200c      	movs	r0, #12
  4002a6:	4b05      	ldr	r3, [pc, #20]	; (4002bc <ioport_init+0x28>)
  4002a8:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4002aa:	2010      	movs	r0, #16
  4002ac:	4b03      	ldr	r3, [pc, #12]	; (4002bc <ioport_init+0x28>)
  4002ae:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  4002b0:	2011      	movs	r0, #17
  4002b2:	4b02      	ldr	r3, [pc, #8]	; (4002bc <ioport_init+0x28>)
  4002b4:	4798      	blx	r3
	arch_ioport_init();
}
  4002b6:	bf00      	nop
  4002b8:	bd80      	pop	{r7, pc}
  4002ba:	bf00      	nop
  4002bc:	00400279 	.word	0x00400279

004002c0 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4002c0:	b480      	push	{r7}
  4002c2:	b08d      	sub	sp, #52	; 0x34
  4002c4:	af00      	add	r7, sp, #0
  4002c6:	6078      	str	r0, [r7, #4]
  4002c8:	460b      	mov	r3, r1
  4002ca:	70fb      	strb	r3, [r7, #3]
  4002cc:	687b      	ldr	r3, [r7, #4]
  4002ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  4002d0:	78fb      	ldrb	r3, [r7, #3]
  4002d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4002d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4002d8:	627b      	str	r3, [r7, #36]	; 0x24
  4002da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4002dc:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4002de:	6a3b      	ldr	r3, [r7, #32]
  4002e0:	095b      	lsrs	r3, r3, #5
  4002e2:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4002e4:	69fa      	ldr	r2, [r7, #28]
  4002e6:	4b17      	ldr	r3, [pc, #92]	; (400344 <ioport_set_pin_dir+0x84>)
  4002e8:	4413      	add	r3, r2
  4002ea:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4002ec:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4002ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4002f2:	2b01      	cmp	r3, #1
  4002f4:	d109      	bne.n	40030a <ioport_set_pin_dir+0x4a>
  4002f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4002f8:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4002fa:	697b      	ldr	r3, [r7, #20]
  4002fc:	f003 031f 	and.w	r3, r3, #31
  400300:	2201      	movs	r2, #1
  400302:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400304:	69bb      	ldr	r3, [r7, #24]
  400306:	611a      	str	r2, [r3, #16]
  400308:	e00c      	b.n	400324 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40030a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40030e:	2b00      	cmp	r3, #0
  400310:	d108      	bne.n	400324 <ioport_set_pin_dir+0x64>
  400312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400314:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400316:	693b      	ldr	r3, [r7, #16]
  400318:	f003 031f 	and.w	r3, r3, #31
  40031c:	2201      	movs	r2, #1
  40031e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400320:	69bb      	ldr	r3, [r7, #24]
  400322:	615a      	str	r2, [r3, #20]
  400324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400326:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400328:	68fb      	ldr	r3, [r7, #12]
  40032a:	f003 031f 	and.w	r3, r3, #31
  40032e:	2201      	movs	r2, #1
  400330:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400332:	69bb      	ldr	r3, [r7, #24]
  400334:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400338:	bf00      	nop
  40033a:	3734      	adds	r7, #52	; 0x34
  40033c:	46bd      	mov	sp, r7
  40033e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400342:	4770      	bx	lr
  400344:	00200707 	.word	0x00200707

00400348 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400348:	b480      	push	{r7}
  40034a:	b08b      	sub	sp, #44	; 0x2c
  40034c:	af00      	add	r7, sp, #0
  40034e:	6078      	str	r0, [r7, #4]
  400350:	460b      	mov	r3, r1
  400352:	70fb      	strb	r3, [r7, #3]
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	627b      	str	r3, [r7, #36]	; 0x24
  400358:	78fb      	ldrb	r3, [r7, #3]
  40035a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400360:	61fb      	str	r3, [r7, #28]
  400362:	69fb      	ldr	r3, [r7, #28]
  400364:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400366:	69bb      	ldr	r3, [r7, #24]
  400368:	095b      	lsrs	r3, r3, #5
  40036a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40036c:	697a      	ldr	r2, [r7, #20]
  40036e:	4b10      	ldr	r3, [pc, #64]	; (4003b0 <ioport_set_pin_level+0x68>)
  400370:	4413      	add	r3, r2
  400372:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400374:	613b      	str	r3, [r7, #16]

	if (level) {
  400376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40037a:	2b00      	cmp	r3, #0
  40037c:	d009      	beq.n	400392 <ioport_set_pin_level+0x4a>
  40037e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400380:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400382:	68fb      	ldr	r3, [r7, #12]
  400384:	f003 031f 	and.w	r3, r3, #31
  400388:	2201      	movs	r2, #1
  40038a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40038c:	693b      	ldr	r3, [r7, #16]
  40038e:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400390:	e008      	b.n	4003a4 <ioport_set_pin_level+0x5c>
  400392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400394:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400396:	68bb      	ldr	r3, [r7, #8]
  400398:	f003 031f 	and.w	r3, r3, #31
  40039c:	2201      	movs	r2, #1
  40039e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4003a0:	693b      	ldr	r3, [r7, #16]
  4003a2:	635a      	str	r2, [r3, #52]	; 0x34
  4003a4:	bf00      	nop
  4003a6:	372c      	adds	r7, #44	; 0x2c
  4003a8:	46bd      	mov	sp, r7
  4003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003ae:	4770      	bx	lr
  4003b0:	00200707 	.word	0x00200707

004003b4 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  4003b4:	b580      	push	{r7, lr}
  4003b6:	b082      	sub	sp, #8
  4003b8:	af00      	add	r7, sp, #0
  4003ba:	6078      	str	r0, [r7, #4]
  4003bc:	6039      	str	r1, [r7, #0]
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  4003be:	687b      	ldr	r3, [r7, #4]
  4003c0:	2b10      	cmp	r3, #16
  4003c2:	d10a      	bne.n	4003da <chip_isr+0x26>
  4003c4:	683b      	ldr	r3, [r7, #0]
  4003c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4003ca:	d106      	bne.n	4003da <chip_isr+0x26>
		if (gpfIsr) {
  4003cc:	4b05      	ldr	r3, [pc, #20]	; (4003e4 <chip_isr+0x30>)
  4003ce:	681b      	ldr	r3, [r3, #0]
  4003d0:	2b00      	cmp	r3, #0
  4003d2:	d002      	beq.n	4003da <chip_isr+0x26>
			gpfIsr();
  4003d4:	4b03      	ldr	r3, [pc, #12]	; (4003e4 <chip_isr+0x30>)
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	4798      	blx	r3
		}
	}
}
  4003da:	bf00      	nop
  4003dc:	3708      	adds	r7, #8
  4003de:	46bd      	mov	sp, r7
  4003e0:	bd80      	pop	{r7, pc}
  4003e2:	bf00      	nop
  4003e4:	204008d8 	.word	0x204008d8

004003e8 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
  4003e8:	b580      	push	{r7, lr}
  4003ea:	af00      	add	r7, sp, #0
	ioport_init();
  4003ec:	4b0d      	ldr	r3, [pc, #52]	; (400424 <init_chip_pins+0x3c>)
  4003ee:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_PIN_RESET, IOPORT_DIR_OUTPUT);
  4003f0:	2101      	movs	r1, #1
  4003f2:	2023      	movs	r0, #35	; 0x23
  4003f4:	4b0c      	ldr	r3, [pc, #48]	; (400428 <init_chip_pins+0x40>)
  4003f6:	4798      	blx	r3
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
  4003f8:	2101      	movs	r1, #1
  4003fa:	2023      	movs	r0, #35	; 0x23
  4003fc:	4b0b      	ldr	r3, [pc, #44]	; (40042c <init_chip_pins+0x44>)
  4003fe:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_DIR_OUTPUT);
  400400:	2101      	movs	r1, #1
  400402:	2051      	movs	r0, #81	; 0x51
  400404:	4b08      	ldr	r3, [pc, #32]	; (400428 <init_chip_pins+0x40>)
  400406:	4798      	blx	r3
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
  400408:	2101      	movs	r1, #1
  40040a:	2051      	movs	r0, #81	; 0x51
  40040c:	4b07      	ldr	r3, [pc, #28]	; (40042c <init_chip_pins+0x44>)
  40040e:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_PIN_WAKE, IOPORT_DIR_OUTPUT);
  400410:	2101      	movs	r1, #1
  400412:	2022      	movs	r0, #34	; 0x22
  400414:	4b04      	ldr	r3, [pc, #16]	; (400428 <init_chip_pins+0x40>)
  400416:	4798      	blx	r3
	ioport_set_pin_level(CONF_WINC_PIN_WAKE, IOPORT_PIN_LEVEL_HIGH);
  400418:	2101      	movs	r1, #1
  40041a:	2022      	movs	r0, #34	; 0x22
  40041c:	4b03      	ldr	r3, [pc, #12]	; (40042c <init_chip_pins+0x44>)
  40041e:	4798      	blx	r3
}
  400420:	bf00      	nop
  400422:	bd80      	pop	{r7, pc}
  400424:	00400295 	.word	0x00400295
  400428:	004002c1 	.word	0x004002c1
  40042c:	00400349 	.word	0x00400349

00400430 <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  400430:	b580      	push	{r7, lr}
  400432:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
  400434:	4b08      	ldr	r3, [pc, #32]	; (400458 <nm_bsp_init+0x28>)
  400436:	2200      	movs	r2, #0
  400438:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
  40043a:	4b08      	ldr	r3, [pc, #32]	; (40045c <nm_bsp_init+0x2c>)
  40043c:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  40043e:	4b08      	ldr	r3, [pc, #32]	; (400460 <nm_bsp_init+0x30>)
  400440:	681b      	ldr	r3, [r3, #0]
  400442:	f003 0301 	and.w	r3, r3, #1
  400446:	2b00      	cmp	r3, #0
  400448:	d001      	beq.n	40044e <nm_bsp_init+0x1e>
  40044a:	4b05      	ldr	r3, [pc, #20]	; (400460 <nm_bsp_init+0x30>)
  40044c:	681b      	ldr	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  40044e:	4b05      	ldr	r3, [pc, #20]	; (400464 <nm_bsp_init+0x34>)
  400450:	4798      	blx	r3

	return 0;
  400452:	2300      	movs	r3, #0
}
  400454:	4618      	mov	r0, r3
  400456:	bd80      	pop	{r7, pc}
  400458:	204008d8 	.word	0x204008d8
  40045c:	004003e9 	.word	0x004003e9
  400460:	e000e010 	.word	0xe000e010
  400464:	00400469 	.word	0x00400469

00400468 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset WINC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  400468:	b580      	push	{r7, lr}
  40046a:	af00      	add	r7, sp, #0
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
  40046c:	2100      	movs	r1, #0
  40046e:	2051      	movs	r0, #81	; 0x51
  400470:	4b0c      	ldr	r3, [pc, #48]	; (4004a4 <nm_bsp_reset+0x3c>)
  400472:	4798      	blx	r3
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
  400474:	2100      	movs	r1, #0
  400476:	2023      	movs	r0, #35	; 0x23
  400478:	4b0a      	ldr	r3, [pc, #40]	; (4004a4 <nm_bsp_reset+0x3c>)
  40047a:	4798      	blx	r3
	nm_bsp_sleep(100);
  40047c:	2064      	movs	r0, #100	; 0x64
  40047e:	4b0a      	ldr	r3, [pc, #40]	; (4004a8 <nm_bsp_reset+0x40>)
  400480:	4798      	blx	r3
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
  400482:	2101      	movs	r1, #1
  400484:	2051      	movs	r0, #81	; 0x51
  400486:	4b07      	ldr	r3, [pc, #28]	; (4004a4 <nm_bsp_reset+0x3c>)
  400488:	4798      	blx	r3
	nm_bsp_sleep(100);
  40048a:	2064      	movs	r0, #100	; 0x64
  40048c:	4b06      	ldr	r3, [pc, #24]	; (4004a8 <nm_bsp_reset+0x40>)
  40048e:	4798      	blx	r3
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
  400490:	2101      	movs	r1, #1
  400492:	2023      	movs	r0, #35	; 0x23
  400494:	4b03      	ldr	r3, [pc, #12]	; (4004a4 <nm_bsp_reset+0x3c>)
  400496:	4798      	blx	r3
	nm_bsp_sleep(100);
  400498:	2064      	movs	r0, #100	; 0x64
  40049a:	4b03      	ldr	r3, [pc, #12]	; (4004a8 <nm_bsp_reset+0x40>)
  40049c:	4798      	blx	r3
}
  40049e:	bf00      	nop
  4004a0:	bd80      	pop	{r7, pc}
  4004a2:	bf00      	nop
  4004a4:	00400349 	.word	0x00400349
  4004a8:	004004ad 	.word	0x004004ad

004004ac <nm_bsp_sleep>:
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  4004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
  4004b2:	6078      	str	r0, [r7, #4]
	while(u32TimeMsec--) {
  4004b4:	e01c      	b.n	4004f0 <nm_bsp_sleep+0x44>
		delay_ms(4);
  4004b6:	4b13      	ldr	r3, [pc, #76]	; (400504 <nm_bsp_sleep+0x58>)
  4004b8:	4798      	blx	r3
  4004ba:	4603      	mov	r3, r0
  4004bc:	461a      	mov	r2, r3
  4004be:	f04f 0300 	mov.w	r3, #0
  4004c2:	009d      	lsls	r5, r3, #2
  4004c4:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
  4004c8:	0094      	lsls	r4, r2, #2
  4004ca:	f241 722b 	movw	r2, #5931	; 0x172b
  4004ce:	f04f 0300 	mov.w	r3, #0
  4004d2:	18a0      	adds	r0, r4, r2
  4004d4:	eb45 0103 	adc.w	r1, r5, r3
  4004d8:	4e0b      	ldr	r6, [pc, #44]	; (400508 <nm_bsp_sleep+0x5c>)
  4004da:	f241 722c 	movw	r2, #5932	; 0x172c
  4004de:	f04f 0300 	mov.w	r3, #0
  4004e2:	47b0      	blx	r6
  4004e4:	4602      	mov	r2, r0
  4004e6:	460b      	mov	r3, r1
  4004e8:	4613      	mov	r3, r2
  4004ea:	4618      	mov	r0, r3
  4004ec:	4b07      	ldr	r3, [pc, #28]	; (40050c <nm_bsp_sleep+0x60>)
  4004ee:	4798      	blx	r3
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4004f0:	687b      	ldr	r3, [r7, #4]
  4004f2:	1e5a      	subs	r2, r3, #1
  4004f4:	607a      	str	r2, [r7, #4]
  4004f6:	2b00      	cmp	r3, #0
  4004f8:	d1dd      	bne.n	4004b6 <nm_bsp_sleep+0xa>
		delay_ms(4);
	}
}
  4004fa:	bf00      	nop
  4004fc:	370c      	adds	r7, #12
  4004fe:	46bd      	mov	sp, r7
  400500:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400502:	bf00      	nop
  400504:	00400265 	.word	0x00400265
  400508:	0040767d 	.word	0x0040767d
  40050c:	20400001 	.word	0x20400001

00400510 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  400510:	b590      	push	{r4, r7, lr}
  400512:	b085      	sub	sp, #20
  400514:	af02      	add	r7, sp, #8
  400516:	6078      	str	r0, [r7, #4]
	gpfIsr = pfIsr;
  400518:	4a15      	ldr	r2, [pc, #84]	; (400570 <nm_bsp_register_isr+0x60>)
  40051a:	687b      	ldr	r3, [r7, #4]
  40051c:	6013      	str	r3, [r2, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  40051e:	2010      	movs	r0, #16
  400520:	4b14      	ldr	r3, [pc, #80]	; (400574 <nm_bsp_register_isr+0x64>)
  400522:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  400524:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400528:	207c      	movs	r0, #124	; 0x7c
  40052a:	4b13      	ldr	r3, [pc, #76]	; (400578 <nm_bsp_register_isr+0x68>)
  40052c:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  40052e:	2201      	movs	r2, #1
  400530:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400534:	4811      	ldr	r0, [pc, #68]	; (40057c <nm_bsp_register_isr+0x6c>)
  400536:	4b12      	ldr	r3, [pc, #72]	; (400580 <nm_bsp_register_isr+0x70>)
  400538:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  40053a:	4b12      	ldr	r3, [pc, #72]	; (400584 <nm_bsp_register_isr+0x74>)
  40053c:	9300      	str	r3, [sp, #0]
  40053e:	2351      	movs	r3, #81	; 0x51
  400540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400544:	2110      	movs	r1, #16
  400546:	480d      	ldr	r0, [pc, #52]	; (40057c <nm_bsp_register_isr+0x6c>)
  400548:	4c0f      	ldr	r4, [pc, #60]	; (400588 <nm_bsp_register_isr+0x78>)
  40054a:	47a0      	blx	r4
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  40054c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400550:	480a      	ldr	r0, [pc, #40]	; (40057c <nm_bsp_register_isr+0x6c>)
  400552:	4b0e      	ldr	r3, [pc, #56]	; (40058c <nm_bsp_register_isr+0x7c>)
  400554:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
  400556:	2010      	movs	r0, #16
  400558:	4b0d      	ldr	r3, [pc, #52]	; (400590 <nm_bsp_register_isr+0x80>)
  40055a:	4798      	blx	r3
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  40055c:	2200      	movs	r2, #0
  40055e:	2110      	movs	r1, #16
  400560:	4806      	ldr	r0, [pc, #24]	; (40057c <nm_bsp_register_isr+0x6c>)
  400562:	4b0c      	ldr	r3, [pc, #48]	; (400594 <nm_bsp_register_isr+0x84>)
  400564:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  400566:	bf00      	nop
  400568:	370c      	adds	r7, #12
  40056a:	46bd      	mov	sp, r7
  40056c:	bd90      	pop	{r4, r7, pc}
  40056e:	bf00      	nop
  400570:	204008d8 	.word	0x204008d8
  400574:	004059d5 	.word	0x004059d5
  400578:	004051f9 	.word	0x004051f9
  40057c:	400e1400 	.word	0x400e1400
  400580:	00404ecd 	.word	0x00404ecd
  400584:	004003b5 	.word	0x004003b5
  400588:	00405575 	.word	0x00405575
  40058c:	00405191 	.word	0x00405191
  400590:	0040019d 	.word	0x0040019d
  400594:	0040568d 	.word	0x0040568d

00400598 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  400598:	b580      	push	{r7, lr}
  40059a:	b082      	sub	sp, #8
  40059c:	af00      	add	r7, sp, #0
  40059e:	4603      	mov	r3, r0
  4005a0:	71fb      	strb	r3, [r7, #7]
	if (u8Enable) {
  4005a2:	79fb      	ldrb	r3, [r7, #7]
  4005a4:	2b00      	cmp	r3, #0
  4005a6:	d005      	beq.n	4005b4 <nm_bsp_interrupt_ctrl+0x1c>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4005a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005ac:	4806      	ldr	r0, [pc, #24]	; (4005c8 <nm_bsp_interrupt_ctrl+0x30>)
  4005ae:	4b07      	ldr	r3, [pc, #28]	; (4005cc <nm_bsp_interrupt_ctrl+0x34>)
  4005b0:	4798      	blx	r3
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
}
  4005b2:	e004      	b.n	4005be <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4005b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005b8:	4803      	ldr	r0, [pc, #12]	; (4005c8 <nm_bsp_interrupt_ctrl+0x30>)
  4005ba:	4b05      	ldr	r3, [pc, #20]	; (4005d0 <nm_bsp_interrupt_ctrl+0x38>)
  4005bc:	4798      	blx	r3
	}
}
  4005be:	bf00      	nop
  4005c0:	3708      	adds	r7, #8
  4005c2:	46bd      	mov	sp, r7
  4005c4:	bd80      	pop	{r7, pc}
  4005c6:	bf00      	nop
  4005c8:	400e1400 	.word	0x400e1400
  4005cc:	00405191 	.word	0x00405191
  4005d0:	004051ad 	.word	0x004051ad

004005d4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4005d4:	b480      	push	{r7}
  4005d6:	b083      	sub	sp, #12
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4005dc:	687b      	ldr	r3, [r7, #4]
  4005de:	2b07      	cmp	r3, #7
  4005e0:	d825      	bhi.n	40062e <osc_get_rate+0x5a>
  4005e2:	a201      	add	r2, pc, #4	; (adr r2, 4005e8 <osc_get_rate+0x14>)
  4005e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4005e8:	00400609 	.word	0x00400609
  4005ec:	0040060f 	.word	0x0040060f
  4005f0:	00400615 	.word	0x00400615
  4005f4:	0040061b 	.word	0x0040061b
  4005f8:	0040061f 	.word	0x0040061f
  4005fc:	00400623 	.word	0x00400623
  400600:	00400627 	.word	0x00400627
  400604:	0040062b 	.word	0x0040062b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400608:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40060c:	e010      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40060e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400612:	e00d      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400614:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400618:	e00a      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40061a:	4b08      	ldr	r3, [pc, #32]	; (40063c <osc_get_rate+0x68>)
  40061c:	e008      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40061e:	4b08      	ldr	r3, [pc, #32]	; (400640 <osc_get_rate+0x6c>)
  400620:	e006      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400622:	4b08      	ldr	r3, [pc, #32]	; (400644 <osc_get_rate+0x70>)
  400624:	e004      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400626:	4b07      	ldr	r3, [pc, #28]	; (400644 <osc_get_rate+0x70>)
  400628:	e002      	b.n	400630 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40062a:	4b06      	ldr	r3, [pc, #24]	; (400644 <osc_get_rate+0x70>)
  40062c:	e000      	b.n	400630 <osc_get_rate+0x5c>
	}

	return 0;
  40062e:	2300      	movs	r3, #0
}
  400630:	4618      	mov	r0, r3
  400632:	370c      	adds	r7, #12
  400634:	46bd      	mov	sp, r7
  400636:	f85d 7b04 	ldr.w	r7, [sp], #4
  40063a:	4770      	bx	lr
  40063c:	003d0900 	.word	0x003d0900
  400640:	007a1200 	.word	0x007a1200
  400644:	00b71b00 	.word	0x00b71b00

00400648 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400648:	b580      	push	{r7, lr}
  40064a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40064c:	2006      	movs	r0, #6
  40064e:	4b05      	ldr	r3, [pc, #20]	; (400664 <sysclk_get_main_hz+0x1c>)
  400650:	4798      	blx	r3
  400652:	4602      	mov	r2, r0
  400654:	4613      	mov	r3, r2
  400656:	009b      	lsls	r3, r3, #2
  400658:	4413      	add	r3, r2
  40065a:	009a      	lsls	r2, r3, #2
  40065c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40065e:	4618      	mov	r0, r3
  400660:	bd80      	pop	{r7, pc}
  400662:	bf00      	nop
  400664:	004005d5 	.word	0x004005d5

00400668 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400668:	b580      	push	{r7, lr}
  40066a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40066c:	4b02      	ldr	r3, [pc, #8]	; (400678 <sysclk_get_cpu_hz+0x10>)
  40066e:	4798      	blx	r3
  400670:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400672:	4618      	mov	r0, r3
  400674:	bd80      	pop	{r7, pc}
  400676:	bf00      	nop
  400678:	00400649 	.word	0x00400649

0040067c <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  40067c:	b480      	push	{r7}
  40067e:	b089      	sub	sp, #36	; 0x24
  400680:	af00      	add	r7, sp, #0
  400682:	6078      	str	r0, [r7, #4]
  400684:	687b      	ldr	r3, [r7, #4]
  400686:	61fb      	str	r3, [r7, #28]
  400688:	69fb      	ldr	r3, [r7, #28]
  40068a:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40068c:	69bb      	ldr	r3, [r7, #24]
  40068e:	095a      	lsrs	r2, r3, #5
  400690:	69fb      	ldr	r3, [r7, #28]
  400692:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400694:	697b      	ldr	r3, [r7, #20]
  400696:	f003 031f 	and.w	r3, r3, #31
  40069a:	2101      	movs	r1, #1
  40069c:	fa01 f303 	lsl.w	r3, r1, r3
  4006a0:	613a      	str	r2, [r7, #16]
  4006a2:	60fb      	str	r3, [r7, #12]
  4006a4:	693b      	ldr	r3, [r7, #16]
  4006a6:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006a8:	68ba      	ldr	r2, [r7, #8]
  4006aa:	4b06      	ldr	r3, [pc, #24]	; (4006c4 <ioport_disable_pin+0x48>)
  4006ac:	4413      	add	r3, r2
  4006ae:	025b      	lsls	r3, r3, #9
  4006b0:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006b2:	68fb      	ldr	r3, [r7, #12]
  4006b4:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  4006b6:	bf00      	nop
  4006b8:	3724      	adds	r7, #36	; 0x24
  4006ba:	46bd      	mov	sp, r7
  4006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006c0:	4770      	bx	lr
  4006c2:	bf00      	nop
  4006c4:	00200707 	.word	0x00200707

004006c8 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4006c8:	b480      	push	{r7}
  4006ca:	b08d      	sub	sp, #52	; 0x34
  4006cc:	af00      	add	r7, sp, #0
  4006ce:	6078      	str	r0, [r7, #4]
  4006d0:	6039      	str	r1, [r7, #0]
  4006d2:	687b      	ldr	r3, [r7, #4]
  4006d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4006d6:	683b      	ldr	r3, [r7, #0]
  4006d8:	62bb      	str	r3, [r7, #40]	; 0x28
  4006da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006dc:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006e0:	095a      	lsrs	r2, r3, #5
  4006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006e4:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4006e6:	6a3b      	ldr	r3, [r7, #32]
  4006e8:	f003 031f 	and.w	r3, r3, #31
  4006ec:	2101      	movs	r1, #1
  4006ee:	fa01 f303 	lsl.w	r3, r1, r3
  4006f2:	61fa      	str	r2, [r7, #28]
  4006f4:	61bb      	str	r3, [r7, #24]
  4006f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4006f8:	617b      	str	r3, [r7, #20]
  4006fa:	69fb      	ldr	r3, [r7, #28]
  4006fc:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006fe:	693a      	ldr	r2, [r7, #16]
  400700:	4b37      	ldr	r3, [pc, #220]	; (4007e0 <ioport_set_pin_mode+0x118>)
  400702:	4413      	add	r3, r2
  400704:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400706:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400708:	697b      	ldr	r3, [r7, #20]
  40070a:	f003 0308 	and.w	r3, r3, #8
  40070e:	2b00      	cmp	r3, #0
  400710:	d003      	beq.n	40071a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400712:	68fb      	ldr	r3, [r7, #12]
  400714:	69ba      	ldr	r2, [r7, #24]
  400716:	665a      	str	r2, [r3, #100]	; 0x64
  400718:	e002      	b.n	400720 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  40071a:	68fb      	ldr	r3, [r7, #12]
  40071c:	69ba      	ldr	r2, [r7, #24]
  40071e:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400720:	697b      	ldr	r3, [r7, #20]
  400722:	f003 0310 	and.w	r3, r3, #16
  400726:	2b00      	cmp	r3, #0
  400728:	d004      	beq.n	400734 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  40072a:	68fb      	ldr	r3, [r7, #12]
  40072c:	69ba      	ldr	r2, [r7, #24]
  40072e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400732:	e003      	b.n	40073c <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400734:	68fb      	ldr	r3, [r7, #12]
  400736:	69ba      	ldr	r2, [r7, #24]
  400738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40073c:	697b      	ldr	r3, [r7, #20]
  40073e:	f003 0320 	and.w	r3, r3, #32
  400742:	2b00      	cmp	r3, #0
  400744:	d003      	beq.n	40074e <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400746:	68fb      	ldr	r3, [r7, #12]
  400748:	69ba      	ldr	r2, [r7, #24]
  40074a:	651a      	str	r2, [r3, #80]	; 0x50
  40074c:	e002      	b.n	400754 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  40074e:	68fb      	ldr	r3, [r7, #12]
  400750:	69ba      	ldr	r2, [r7, #24]
  400752:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400754:	697b      	ldr	r3, [r7, #20]
  400756:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40075a:	2b00      	cmp	r3, #0
  40075c:	d003      	beq.n	400766 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40075e:	68fb      	ldr	r3, [r7, #12]
  400760:	69ba      	ldr	r2, [r7, #24]
  400762:	621a      	str	r2, [r3, #32]
  400764:	e002      	b.n	40076c <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400766:	68fb      	ldr	r3, [r7, #12]
  400768:	69ba      	ldr	r2, [r7, #24]
  40076a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40076c:	697b      	ldr	r3, [r7, #20]
  40076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400772:	2b00      	cmp	r3, #0
  400774:	d004      	beq.n	400780 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400776:	68fb      	ldr	r3, [r7, #12]
  400778:	69ba      	ldr	r2, [r7, #24]
  40077a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40077e:	e003      	b.n	400788 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400780:	68fb      	ldr	r3, [r7, #12]
  400782:	69ba      	ldr	r2, [r7, #24]
  400784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400788:	697b      	ldr	r3, [r7, #20]
  40078a:	f003 0301 	and.w	r3, r3, #1
  40078e:	2b00      	cmp	r3, #0
  400790:	d006      	beq.n	4007a0 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400792:	68fb      	ldr	r3, [r7, #12]
  400794:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400796:	69bb      	ldr	r3, [r7, #24]
  400798:	431a      	orrs	r2, r3
  40079a:	68fb      	ldr	r3, [r7, #12]
  40079c:	671a      	str	r2, [r3, #112]	; 0x70
  40079e:	e006      	b.n	4007ae <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4007a0:	68fb      	ldr	r3, [r7, #12]
  4007a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007a4:	69bb      	ldr	r3, [r7, #24]
  4007a6:	43db      	mvns	r3, r3
  4007a8:	401a      	ands	r2, r3
  4007aa:	68fb      	ldr	r3, [r7, #12]
  4007ac:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  4007ae:	697b      	ldr	r3, [r7, #20]
  4007b0:	f003 0302 	and.w	r3, r3, #2
  4007b4:	2b00      	cmp	r3, #0
  4007b6:	d006      	beq.n	4007c6 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  4007b8:	68fb      	ldr	r3, [r7, #12]
  4007ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007bc:	69bb      	ldr	r3, [r7, #24]
  4007be:	431a      	orrs	r2, r3
  4007c0:	68fb      	ldr	r3, [r7, #12]
  4007c2:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4007c4:	e006      	b.n	4007d4 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4007c6:	68fb      	ldr	r3, [r7, #12]
  4007c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007ca:	69bb      	ldr	r3, [r7, #24]
  4007cc:	43db      	mvns	r3, r3
  4007ce:	401a      	ands	r2, r3
  4007d0:	68fb      	ldr	r3, [r7, #12]
  4007d2:	675a      	str	r2, [r3, #116]	; 0x74
  4007d4:	bf00      	nop
  4007d6:	3734      	adds	r7, #52	; 0x34
  4007d8:	46bd      	mov	sp, r7
  4007da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007de:	4770      	bx	lr
  4007e0:	00200707 	.word	0x00200707

004007e4 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4007e4:	b480      	push	{r7}
  4007e6:	b08d      	sub	sp, #52	; 0x34
  4007e8:	af00      	add	r7, sp, #0
  4007ea:	6078      	str	r0, [r7, #4]
  4007ec:	460b      	mov	r3, r1
  4007ee:	70fb      	strb	r3, [r7, #3]
  4007f0:	687b      	ldr	r3, [r7, #4]
  4007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4007f4:	78fb      	ldrb	r3, [r7, #3]
  4007f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4007fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007fc:	627b      	str	r3, [r7, #36]	; 0x24
  4007fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400800:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400802:	6a3b      	ldr	r3, [r7, #32]
  400804:	095b      	lsrs	r3, r3, #5
  400806:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400808:	69fa      	ldr	r2, [r7, #28]
  40080a:	4b17      	ldr	r3, [pc, #92]	; (400868 <ioport_set_pin_dir+0x84>)
  40080c:	4413      	add	r3, r2
  40080e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400810:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400816:	2b01      	cmp	r3, #1
  400818:	d109      	bne.n	40082e <ioport_set_pin_dir+0x4a>
  40081a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40081c:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40081e:	697b      	ldr	r3, [r7, #20]
  400820:	f003 031f 	and.w	r3, r3, #31
  400824:	2201      	movs	r2, #1
  400826:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400828:	69bb      	ldr	r3, [r7, #24]
  40082a:	611a      	str	r2, [r3, #16]
  40082c:	e00c      	b.n	400848 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40082e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400832:	2b00      	cmp	r3, #0
  400834:	d108      	bne.n	400848 <ioport_set_pin_dir+0x64>
  400836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400838:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40083a:	693b      	ldr	r3, [r7, #16]
  40083c:	f003 031f 	and.w	r3, r3, #31
  400840:	2201      	movs	r2, #1
  400842:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400844:	69bb      	ldr	r3, [r7, #24]
  400846:	615a      	str	r2, [r3, #20]
  400848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40084a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40084c:	68fb      	ldr	r3, [r7, #12]
  40084e:	f003 031f 	and.w	r3, r3, #31
  400852:	2201      	movs	r2, #1
  400854:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400856:	69bb      	ldr	r3, [r7, #24]
  400858:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40085c:	bf00      	nop
  40085e:	3734      	adds	r7, #52	; 0x34
  400860:	46bd      	mov	sp, r7
  400862:	f85d 7b04 	ldr.w	r7, [sp], #4
  400866:	4770      	bx	lr
  400868:	00200707 	.word	0x00200707

0040086c <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
  40086c:	b480      	push	{r7}
  40086e:	b083      	sub	sp, #12
  400870:	af00      	add	r7, sp, #0
  400872:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400874:	687b      	ldr	r3, [r7, #4]
  400876:	2280      	movs	r2, #128	; 0x80
  400878:	601a      	str	r2, [r3, #0]
}
  40087a:	bf00      	nop
  40087c:	370c      	adds	r7, #12
  40087e:	46bd      	mov	sp, r7
  400880:	f85d 7b04 	ldr.w	r7, [sp], #4
  400884:	4770      	bx	lr
  400886:	bf00      	nop

00400888 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
  400888:	b480      	push	{r7}
  40088a:	b083      	sub	sp, #12
  40088c:	af00      	add	r7, sp, #0
  40088e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400890:	687b      	ldr	r3, [r7, #4]
  400892:	2201      	movs	r2, #1
  400894:	601a      	str	r2, [r3, #0]
}
  400896:	bf00      	nop
  400898:	370c      	adds	r7, #12
  40089a:	46bd      	mov	sp, r7
  40089c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a0:	4770      	bx	lr
  4008a2:	bf00      	nop

004008a4 <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
  4008a4:	b480      	push	{r7}
  4008a6:	b083      	sub	sp, #12
  4008a8:	af00      	add	r7, sp, #0
  4008aa:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4008ac:	687b      	ldr	r3, [r7, #4]
  4008ae:	2202      	movs	r2, #2
  4008b0:	601a      	str	r2, [r3, #0]
}
  4008b2:	bf00      	nop
  4008b4:	370c      	adds	r7, #12
  4008b6:	46bd      	mov	sp, r7
  4008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop

004008c0 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
  4008c0:	b480      	push	{r7}
  4008c2:	b083      	sub	sp, #12
  4008c4:	af00      	add	r7, sp, #0
  4008c6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4008c8:	687b      	ldr	r3, [r7, #4]
  4008ca:	685b      	ldr	r3, [r3, #4]
  4008cc:	f043 0201 	orr.w	r2, r3, #1
  4008d0:	687b      	ldr	r3, [r7, #4]
  4008d2:	605a      	str	r2, [r3, #4]
}
  4008d4:	bf00      	nop
  4008d6:	370c      	adds	r7, #12
  4008d8:	46bd      	mov	sp, r7
  4008da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008de:	4770      	bx	lr

004008e0 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  4008e0:	b480      	push	{r7}
  4008e2:	b083      	sub	sp, #12
  4008e4:	af00      	add	r7, sp, #0
  4008e6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4008e8:	687b      	ldr	r3, [r7, #4]
  4008ea:	685b      	ldr	r3, [r3, #4]
  4008ec:	f043 0210 	orr.w	r2, r3, #16
  4008f0:	687b      	ldr	r3, [r7, #4]
  4008f2:	605a      	str	r2, [r3, #4]
}
  4008f4:	bf00      	nop
  4008f6:	370c      	adds	r7, #12
  4008f8:	46bd      	mov	sp, r7
  4008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008fe:	4770      	bx	lr

00400900 <spi_rw>:
/** Fast CS macro. */
#define SPI_ASSERT_CS()		do {PIOD->PIO_CODR = (1 << 25);} while(0)
#define SPI_DEASSERT_CS()	do {PIOD->PIO_SODR = (1 << 25);} while(0)

static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
  400900:	b590      	push	{r4, r7, lr}
  400902:	b089      	sub	sp, #36	; 0x24
  400904:	af00      	add	r7, sp, #0
  400906:	60f8      	str	r0, [r7, #12]
  400908:	60b9      	str	r1, [r7, #8]
  40090a:	4613      	mov	r3, r2
  40090c:	80fb      	strh	r3, [r7, #6]
	uint16 cpu16Sz		= u16Sz;
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
  40090e:	2300      	movs	r3, #0
  400910:	76fb      	strb	r3, [r7, #27]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  400912:	2300      	movs	r3, #0
  400914:	77fb      	strb	r3, [r7, #31]
  400916:	2300      	movs	r3, #0
  400918:	77bb      	strb	r3, [r7, #30]
	uint16_t txd_data = 0;
  40091a:	2300      	movs	r3, #0
  40091c:	83bb      	strh	r3, [r7, #28]
	uint16_t rxd_data = 0;
  40091e:	2300      	movs	r3, #0
  400920:	833b      	strh	r3, [r7, #24]
	uint8_t uc_pcs;

	if (!pu8Mosi) {
  400922:	68fb      	ldr	r3, [r7, #12]
  400924:	2b00      	cmp	r3, #0
  400926:	d105      	bne.n	400934 <spi_rw+0x34>
		pu8Mosi = &u8Dummy;
  400928:	f107 031b 	add.w	r3, r7, #27
  40092c:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
  40092e:	2301      	movs	r3, #1
  400930:	77fb      	strb	r3, [r7, #31]
  400932:	e00b      	b.n	40094c <spi_rw+0x4c>
	}
	else if(!pu8Miso) {
  400934:	68bb      	ldr	r3, [r7, #8]
  400936:	2b00      	cmp	r3, #0
  400938:	d105      	bne.n	400946 <spi_rw+0x46>
		pu8Miso = &u8Dummy;
  40093a:	f107 031b 	add.w	r3, r7, #27
  40093e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
  400940:	2301      	movs	r3, #1
  400942:	77bb      	strb	r3, [r7, #30]
  400944:	e002      	b.n	40094c <spi_rw+0x4c>
	}
	else {
		return M2M_ERR_BUS_FAIL;
  400946:	f06f 0305 	mvn.w	r3, #5
  40094a:	e030      	b.n	4009ae <spi_rw+0xae>
	}
	
	SPI_ASSERT_CS();
  40094c:	4b1a      	ldr	r3, [pc, #104]	; (4009b8 <spi_rw+0xb8>)
  40094e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400952:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  400954:	e023      	b.n	40099e <spi_rw+0x9e>
		txd_data = *pu8Mosi;
  400956:	68fb      	ldr	r3, [r7, #12]
  400958:	781b      	ldrb	r3, [r3, #0]
  40095a:	83bb      	strh	r3, [r7, #28]
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40095c:	8bb9      	ldrh	r1, [r7, #28]
  40095e:	2300      	movs	r3, #0
  400960:	2200      	movs	r2, #0
  400962:	4816      	ldr	r0, [pc, #88]	; (4009bc <spi_rw+0xbc>)
  400964:	4c16      	ldr	r4, [pc, #88]	; (4009c0 <spi_rw+0xc0>)
  400966:	47a0      	blx	r4
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400968:	f107 0217 	add.w	r2, r7, #23
  40096c:	f107 0318 	add.w	r3, r7, #24
  400970:	4619      	mov	r1, r3
  400972:	4812      	ldr	r0, [pc, #72]	; (4009bc <spi_rw+0xbc>)
  400974:	4b13      	ldr	r3, [pc, #76]	; (4009c4 <spi_rw+0xc4>)
  400976:	4798      	blx	r3
		*pu8Miso = rxd_data;
  400978:	8b3b      	ldrh	r3, [r7, #24]
  40097a:	b2da      	uxtb	r2, r3
  40097c:	68bb      	ldr	r3, [r7, #8]
  40097e:	701a      	strb	r2, [r3, #0]

		u16Sz--;
  400980:	88fb      	ldrh	r3, [r7, #6]
  400982:	3b01      	subs	r3, #1
  400984:	80fb      	strh	r3, [r7, #6]
		if (!u8SkipMiso)
  400986:	7fbb      	ldrb	r3, [r7, #30]
  400988:	2b00      	cmp	r3, #0
  40098a:	d102      	bne.n	400992 <spi_rw+0x92>
			pu8Miso++;
  40098c:	68bb      	ldr	r3, [r7, #8]
  40098e:	3301      	adds	r3, #1
  400990:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
  400992:	7ffb      	ldrb	r3, [r7, #31]
  400994:	2b00      	cmp	r3, #0
  400996:	d102      	bne.n	40099e <spi_rw+0x9e>
			pu8Mosi++;
  400998:	68fb      	ldr	r3, [r7, #12]
  40099a:	3301      	adds	r3, #1
  40099c:	60fb      	str	r3, [r7, #12]
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
  40099e:	88fb      	ldrh	r3, [r7, #6]
  4009a0:	2b00      	cmp	r3, #0
  4009a2:	d1d8      	bne.n	400956 <spi_rw+0x56>
		if (!u8SkipMiso)
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}
	SPI_DEASSERT_CS();
  4009a4:	4b04      	ldr	r3, [pc, #16]	; (4009b8 <spi_rw+0xb8>)
  4009a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4009aa:	631a      	str	r2, [r3, #48]	; 0x30
	printf(" / MISO: 0x");
	for(i = 0; i<cpu16Sz; i++)
		printf("%x", *(cppu8Miso+i) );
	printf(" / Size %d \n", cpu16Sz);
*/
	return M2M_SUCCESS;
  4009ac:	2300      	movs	r3, #0
}
  4009ae:	4618      	mov	r0, r3
  4009b0:	3724      	adds	r7, #36	; 0x24
  4009b2:	46bd      	mov	sp, r7
  4009b4:	bd90      	pop	{r4, r7, pc}
  4009b6:	bf00      	nop
  4009b8:	400e1400 	.word	0x400e1400
  4009bc:	40008000 	.word	0x40008000
  4009c0:	00405b7d 	.word	0x00405b7d
  4009c4:	00405b0d 	.word	0x00405b0d

004009c8 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  4009c8:	b590      	push	{r4, r7, lr}
  4009ca:	b085      	sub	sp, #20
  4009cc:	af00      	add	r7, sp, #0
  4009ce:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
  4009d0:	2300      	movs	r3, #0
  4009d2:	73fb      	strb	r3, [r7, #15]
		}
	}

#elif CONF_WINC_USE_SPI
	/* Configure SPI pins. */
	ioport_set_pin_mode(CONF_WINC_SPI_MISO_GPIO, CONF_WINC_SPI_MISO_FLAGS);
  4009d4:	2101      	movs	r1, #1
  4009d6:	2074      	movs	r0, #116	; 0x74
  4009d8:	4b33      	ldr	r3, [pc, #204]	; (400aa8 <nm_bus_init+0xe0>)
  4009da:	4798      	blx	r3
	ioport_set_pin_mode(CONF_WINC_SPI_MOSI_GPIO, CONF_WINC_SPI_MOSI_FLAGS);
  4009dc:	2101      	movs	r1, #1
  4009de:	2075      	movs	r0, #117	; 0x75
  4009e0:	4b31      	ldr	r3, [pc, #196]	; (400aa8 <nm_bus_init+0xe0>)
  4009e2:	4798      	blx	r3
	ioport_set_pin_mode(CONF_WINC_SPI_CLK_GPIO, CONF_WINC_SPI_CLK_FLAGS);
  4009e4:	2101      	movs	r1, #1
  4009e6:	2076      	movs	r0, #118	; 0x76
  4009e8:	4b2f      	ldr	r3, [pc, #188]	; (400aa8 <nm_bus_init+0xe0>)
  4009ea:	4798      	blx	r3
	//ioport_set_pin_mode(CONF_WINC_SPI_CS_GPIO, CONF_WINC_SPI_CS_FLAGS);

	ioport_disable_pin(CONF_WINC_SPI_MISO_GPIO);
  4009ec:	2074      	movs	r0, #116	; 0x74
  4009ee:	4b2f      	ldr	r3, [pc, #188]	; (400aac <nm_bus_init+0xe4>)
  4009f0:	4798      	blx	r3
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
  4009f2:	2075      	movs	r0, #117	; 0x75
  4009f4:	4b2d      	ldr	r3, [pc, #180]	; (400aac <nm_bus_init+0xe4>)
  4009f6:	4798      	blx	r3
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
  4009f8:	2076      	movs	r0, #118	; 0x76
  4009fa:	4b2c      	ldr	r3, [pc, #176]	; (400aac <nm_bus_init+0xe4>)
  4009fc:	4798      	blx	r3
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
  4009fe:	2079      	movs	r0, #121	; 0x79
  400a00:	4b2a      	ldr	r3, [pc, #168]	; (400aac <nm_bus_init+0xe4>)
  400a02:	4798      	blx	r3
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  400a04:	4b2a      	ldr	r3, [pc, #168]	; (400ab0 <nm_bus_init+0xe8>)
  400a06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a0a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER = (1<<25);
  400a0c:	4b28      	ldr	r3, [pc, #160]	; (400ab0 <nm_bus_init+0xe8>)
  400a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a12:	611a      	str	r2, [r3, #16]
	SPI_DEASSERT_CS();
  400a14:	4b26      	ldr	r3, [pc, #152]	; (400ab0 <nm_bus_init+0xe8>)
  400a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a1a:	631a      	str	r2, [r3, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  400a1c:	4825      	ldr	r0, [pc, #148]	; (400ab4 <nm_bus_init+0xec>)
  400a1e:	4b26      	ldr	r3, [pc, #152]	; (400ab8 <nm_bus_init+0xf0>)
  400a20:	4798      	blx	r3
	spi_disable(CONF_WINC_SPI);
  400a22:	4824      	ldr	r0, [pc, #144]	; (400ab4 <nm_bus_init+0xec>)
  400a24:	4b25      	ldr	r3, [pc, #148]	; (400abc <nm_bus_init+0xf4>)
  400a26:	4798      	blx	r3
	spi_reset(CONF_WINC_SPI);
  400a28:	4822      	ldr	r0, [pc, #136]	; (400ab4 <nm_bus_init+0xec>)
  400a2a:	4b25      	ldr	r3, [pc, #148]	; (400ac0 <nm_bus_init+0xf8>)
  400a2c:	4798      	blx	r3
	spi_set_master_mode(CONF_WINC_SPI);
  400a2e:	4821      	ldr	r0, [pc, #132]	; (400ab4 <nm_bus_init+0xec>)
  400a30:	4b24      	ldr	r3, [pc, #144]	; (400ac4 <nm_bus_init+0xfc>)
  400a32:	4798      	blx	r3
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
  400a34:	481f      	ldr	r0, [pc, #124]	; (400ab4 <nm_bus_init+0xec>)
  400a36:	4b24      	ldr	r3, [pc, #144]	; (400ac8 <nm_bus_init+0x100>)
  400a38:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  400a3a:	2101      	movs	r1, #1
  400a3c:	481d      	ldr	r0, [pc, #116]	; (400ab4 <nm_bus_init+0xec>)
  400a3e:	4b23      	ldr	r3, [pc, #140]	; (400acc <nm_bus_init+0x104>)
  400a40:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  400a42:	2200      	movs	r2, #0
  400a44:	2101      	movs	r1, #1
  400a46:	481b      	ldr	r0, [pc, #108]	; (400ab4 <nm_bus_init+0xec>)
  400a48:	4b21      	ldr	r3, [pc, #132]	; (400ad0 <nm_bus_init+0x108>)
  400a4a:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  400a4c:	2201      	movs	r2, #1
  400a4e:	2101      	movs	r1, #1
  400a50:	4818      	ldr	r0, [pc, #96]	; (400ab4 <nm_bus_init+0xec>)
  400a52:	4b20      	ldr	r3, [pc, #128]	; (400ad4 <nm_bus_init+0x10c>)
  400a54:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  400a56:	2200      	movs	r2, #0
  400a58:	2101      	movs	r1, #1
  400a5a:	4816      	ldr	r0, [pc, #88]	; (400ab4 <nm_bus_init+0xec>)
  400a5c:	4b1e      	ldr	r3, [pc, #120]	; (400ad8 <nm_bus_init+0x110>)
  400a5e:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  400a60:	4b1e      	ldr	r3, [pc, #120]	; (400adc <nm_bus_init+0x114>)
  400a62:	4798      	blx	r3
  400a64:	4603      	mov	r3, r0
  400a66:	4619      	mov	r1, r3
  400a68:	481d      	ldr	r0, [pc, #116]	; (400ae0 <nm_bus_init+0x118>)
  400a6a:	4b1e      	ldr	r3, [pc, #120]	; (400ae4 <nm_bus_init+0x11c>)
  400a6c:	4798      	blx	r3
  400a6e:	4603      	mov	r3, r0
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
	spi_set_clock_polarity(CONF_WINC_SPI,
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  400a70:	b2db      	uxtb	r3, r3
  400a72:	461a      	mov	r2, r3
  400a74:	2101      	movs	r1, #1
  400a76:	480f      	ldr	r0, [pc, #60]	; (400ab4 <nm_bus_init+0xec>)
  400a78:	4b1b      	ldr	r3, [pc, #108]	; (400ae8 <nm_bus_init+0x120>)
  400a7a:	4798      	blx	r3
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  400a7c:	2300      	movs	r3, #0
  400a7e:	2200      	movs	r2, #0
  400a80:	2101      	movs	r1, #1
  400a82:	480c      	ldr	r0, [pc, #48]	; (400ab4 <nm_bus_init+0xec>)
  400a84:	4c19      	ldr	r4, [pc, #100]	; (400aec <nm_bus_init+0x124>)
  400a86:	47a0      	blx	r4
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
  400a88:	480a      	ldr	r0, [pc, #40]	; (400ab4 <nm_bus_init+0xec>)
  400a8a:	4b19      	ldr	r3, [pc, #100]	; (400af0 <nm_bus_init+0x128>)
  400a8c:	4798      	blx	r3
	
	SPI_DEASSERT_CS();
  400a8e:	4b08      	ldr	r3, [pc, #32]	; (400ab0 <nm_bus_init+0xe8>)
  400a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a94:	631a      	str	r2, [r3, #48]	; 0x30
	nm_bsp_reset();
  400a96:	4b17      	ldr	r3, [pc, #92]	; (400af4 <nm_bus_init+0x12c>)
  400a98:	4798      	blx	r3
#endif
	return result;
  400a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  400a9e:	4618      	mov	r0, r3
  400aa0:	3714      	adds	r7, #20
  400aa2:	46bd      	mov	sp, r7
  400aa4:	bd90      	pop	{r4, r7, pc}
  400aa6:	bf00      	nop
  400aa8:	004006c9 	.word	0x004006c9
  400aac:	0040067d 	.word	0x0040067d
  400ab0:	400e1400 	.word	0x400e1400
  400ab4:	40008000 	.word	0x40008000
  400ab8:	00405a9d 	.word	0x00405a9d
  400abc:	004008a5 	.word	0x004008a5
  400ac0:	0040086d 	.word	0x0040086d
  400ac4:	004008c1 	.word	0x004008c1
  400ac8:	004008e1 	.word	0x004008e1
  400acc:	00405ad9 	.word	0x00405ad9
  400ad0:	00405bfd 	.word	0x00405bfd
  400ad4:	00405c4d 	.word	0x00405c4d
  400ad8:	00405c9d 	.word	0x00405c9d
  400adc:	00400669 	.word	0x00400669
  400ae0:	02dc6c00 	.word	0x02dc6c00
  400ae4:	00405ce9 	.word	0x00405ce9
  400ae8:	00405d25 	.word	0x00405d25
  400aec:	00405d85 	.word	0x00405d85
  400af0:	00400889 	.word	0x00400889
  400af4:	00400469 	.word	0x00400469

00400af8 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  400af8:	b580      	push	{r7, lr}
  400afa:	b084      	sub	sp, #16
  400afc:	af00      	add	r7, sp, #0
  400afe:	4603      	mov	r3, r0
  400b00:	6039      	str	r1, [r7, #0]
  400b02:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = 0;
  400b04:	2300      	movs	r3, #0
  400b06:	73fb      	strb	r3, [r7, #15]
	switch(u8Cmd)
  400b08:	79fb      	ldrb	r3, [r7, #7]
  400b0a:	2b03      	cmp	r3, #3
  400b0c:	d10d      	bne.n	400b2a <nm_bus_ioctl+0x32>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
  400b0e:	683b      	ldr	r3, [r7, #0]
  400b10:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  400b12:	68bb      	ldr	r3, [r7, #8]
  400b14:	6818      	ldr	r0, [r3, #0]
  400b16:	68bb      	ldr	r3, [r7, #8]
  400b18:	6859      	ldr	r1, [r3, #4]
  400b1a:	68bb      	ldr	r3, [r7, #8]
  400b1c:	891b      	ldrh	r3, [r3, #8]
  400b1e:	461a      	mov	r2, r3
  400b20:	4b0c      	ldr	r3, [pc, #48]	; (400b54 <nm_bus_ioctl+0x5c>)
  400b22:	4798      	blx	r3
  400b24:	4603      	mov	r3, r0
  400b26:	73fb      	strb	r3, [r7, #15]
		}
		break;
  400b28:	e00e      	b.n	400b48 <nm_bus_ioctl+0x50>
#endif
		default:
			s8Ret = -1;
  400b2a:	23ff      	movs	r3, #255	; 0xff
  400b2c:	73fb      	strb	r3, [r7, #15]
			M2M_ERR("Invalid IOCTL command!\n");
  400b2e:	f240 121f 	movw	r2, #287	; 0x11f
  400b32:	4909      	ldr	r1, [pc, #36]	; (400b58 <nm_bus_ioctl+0x60>)
  400b34:	4809      	ldr	r0, [pc, #36]	; (400b5c <nm_bus_ioctl+0x64>)
  400b36:	4b0a      	ldr	r3, [pc, #40]	; (400b60 <nm_bus_ioctl+0x68>)
  400b38:	4798      	blx	r3
  400b3a:	480a      	ldr	r0, [pc, #40]	; (400b64 <nm_bus_ioctl+0x6c>)
  400b3c:	4b08      	ldr	r3, [pc, #32]	; (400b60 <nm_bus_ioctl+0x68>)
  400b3e:	4798      	blx	r3
  400b40:	4809      	ldr	r0, [pc, #36]	; (400b68 <nm_bus_ioctl+0x70>)
  400b42:	4b07      	ldr	r3, [pc, #28]	; (400b60 <nm_bus_ioctl+0x68>)
  400b44:	4798      	blx	r3
			break;
  400b46:	bf00      	nop
	}

	return s8Ret;
  400b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  400b4c:	4618      	mov	r0, r3
  400b4e:	3710      	adds	r7, #16
  400b50:	46bd      	mov	sp, r7
  400b52:	bd80      	pop	{r7, pc}
  400b54:	00400901 	.word	0x00400901
  400b58:	0040de24 	.word	0x0040de24
  400b5c:	0040ddf4 	.word	0x0040ddf4
  400b60:	004079e5 	.word	0x004079e5
  400b64:	0040de08 	.word	0x0040de08
  400b68:	0040de20 	.word	0x0040de20

00400b6c <nm_bus_deinit>:
/*
 *	@fn		nm_bus_deinit
 *	@brief	De-initialize the bus wrapper
 */
sint8 nm_bus_deinit(void)
{
  400b6c:	b580      	push	{r7, lr}
  400b6e:	af00      	add	r7, sp, #0
	spi_disable(CONF_WINC_SPI);
  400b70:	480a      	ldr	r0, [pc, #40]	; (400b9c <nm_bus_deinit+0x30>)
  400b72:	4b0b      	ldr	r3, [pc, #44]	; (400ba0 <nm_bus_deinit+0x34>)
  400b74:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
  400b76:	2100      	movs	r1, #0
  400b78:	2075      	movs	r0, #117	; 0x75
  400b7a:	4b0a      	ldr	r3, [pc, #40]	; (400ba4 <nm_bus_deinit+0x38>)
  400b7c:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
  400b7e:	2100      	movs	r1, #0
  400b80:	2074      	movs	r0, #116	; 0x74
  400b82:	4b08      	ldr	r3, [pc, #32]	; (400ba4 <nm_bus_deinit+0x38>)
  400b84:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
  400b86:	2100      	movs	r1, #0
  400b88:	2076      	movs	r0, #118	; 0x76
  400b8a:	4b06      	ldr	r3, [pc, #24]	; (400ba4 <nm_bus_deinit+0x38>)
  400b8c:	4798      	blx	r3
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
  400b8e:	2100      	movs	r1, #0
  400b90:	2079      	movs	r0, #121	; 0x79
  400b92:	4b04      	ldr	r3, [pc, #16]	; (400ba4 <nm_bus_deinit+0x38>)
  400b94:	4798      	blx	r3
	return M2M_SUCCESS;
  400b96:	2300      	movs	r3, #0
}
  400b98:	4618      	mov	r0, r3
  400b9a:	bd80      	pop	{r7, pc}
  400b9c:	40008000 	.word	0x40008000
  400ba0:	004008a5 	.word	0x004008a5
  400ba4:	004007e5 	.word	0x004007e5

00400ba8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
  400ba8:	b480      	push	{r7}
  400baa:	b085      	sub	sp, #20
  400bac:	af00      	add	r7, sp, #0
  400bae:	60f8      	str	r0, [r7, #12]
  400bb0:	60b9      	str	r1, [r7, #8]
  400bb2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
  400bb4:	687b      	ldr	r3, [r7, #4]
  400bb6:	2b00      	cmp	r3, #0
  400bb8:	d010      	beq.n	400bdc <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
  400bba:	68bb      	ldr	r3, [r7, #8]
  400bbc:	781a      	ldrb	r2, [r3, #0]
  400bbe:	68fb      	ldr	r3, [r7, #12]
  400bc0:	701a      	strb	r2, [r3, #0]
		pDst++;
  400bc2:	68fb      	ldr	r3, [r7, #12]
  400bc4:	3301      	adds	r3, #1
  400bc6:	60fb      	str	r3, [r7, #12]
		pSrc++;
  400bc8:	68bb      	ldr	r3, [r7, #8]
  400bca:	3301      	adds	r3, #1
  400bcc:	60bb      	str	r3, [r7, #8]
	}while(--sz);
  400bce:	687b      	ldr	r3, [r7, #4]
  400bd0:	3b01      	subs	r3, #1
  400bd2:	607b      	str	r3, [r7, #4]
  400bd4:	687b      	ldr	r3, [r7, #4]
  400bd6:	2b00      	cmp	r3, #0
  400bd8:	d1ef      	bne.n	400bba <m2m_memcpy+0x12>
  400bda:	e000      	b.n	400bde <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  400bdc:	bf00      	nop
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
  400bde:	3714      	adds	r7, #20
  400be0:	46bd      	mov	sp, r7
  400be2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be6:	4770      	bx	lr

00400be8 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
  400be8:	b480      	push	{r7}
  400bea:	b085      	sub	sp, #20
  400bec:	af00      	add	r7, sp, #0
  400bee:	60f8      	str	r0, [r7, #12]
  400bf0:	460b      	mov	r3, r1
  400bf2:	607a      	str	r2, [r7, #4]
  400bf4:	72fb      	strb	r3, [r7, #11]
	if(sz == 0) return;
  400bf6:	687b      	ldr	r3, [r7, #4]
  400bf8:	2b00      	cmp	r3, #0
  400bfa:	d00c      	beq.n	400c16 <m2m_memset+0x2e>
	do
	{
		*pBuf = val;
  400bfc:	68fb      	ldr	r3, [r7, #12]
  400bfe:	7afa      	ldrb	r2, [r7, #11]
  400c00:	701a      	strb	r2, [r3, #0]
		pBuf++;
  400c02:	68fb      	ldr	r3, [r7, #12]
  400c04:	3301      	adds	r3, #1
  400c06:	60fb      	str	r3, [r7, #12]
	}while(--sz);
  400c08:	687b      	ldr	r3, [r7, #4]
  400c0a:	3b01      	subs	r3, #1
  400c0c:	607b      	str	r3, [r7, #4]
  400c0e:	687b      	ldr	r3, [r7, #4]
  400c10:	2b00      	cmp	r3, #0
  400c12:	d1f3      	bne.n	400bfc <m2m_memset+0x14>
  400c14:	e000      	b.n	400c18 <m2m_memset+0x30>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  400c16:	bf00      	nop
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
  400c18:	3714      	adds	r7, #20
  400c1a:	46bd      	mov	sp, r7
  400c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c20:	4770      	bx	lr
  400c22:	bf00      	nop

00400c24 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
  400c24:	b480      	push	{r7}
  400c26:	b085      	sub	sp, #20
  400c28:	af00      	add	r7, sp, #0
  400c2a:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
  400c2c:	2300      	movs	r3, #0
  400c2e:	81fb      	strh	r3, [r7, #14]
	while(*pcStr)
  400c30:	e005      	b.n	400c3e <m2m_strlen+0x1a>
	{
		u16StrLen ++;
  400c32:	89fb      	ldrh	r3, [r7, #14]
  400c34:	3301      	adds	r3, #1
  400c36:	81fb      	strh	r3, [r7, #14]
		pcStr++;
  400c38:	687b      	ldr	r3, [r7, #4]
  400c3a:	3301      	adds	r3, #1
  400c3c:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  400c3e:	687b      	ldr	r3, [r7, #4]
  400c40:	781b      	ldrb	r3, [r3, #0]
  400c42:	2b00      	cmp	r3, #0
  400c44:	d1f5      	bne.n	400c32 <m2m_strlen+0xe>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
  400c46:	89fb      	ldrh	r3, [r7, #14]
}
  400c48:	4618      	mov	r0, r3
  400c4a:	3714      	adds	r7, #20
  400c4c:	46bd      	mov	sp, r7
  400c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c52:	4770      	bx	lr

00400c54 <isr>:
tpfHifCallBack pfSigmaCb = NULL;
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
  400c54:	b480      	push	{r7}
  400c56:	af00      	add	r7, sp, #0
	gu8Interrupt++;
  400c58:	4b05      	ldr	r3, [pc, #20]	; (400c70 <isr+0x1c>)
  400c5a:	781b      	ldrb	r3, [r3, #0]
  400c5c:	b2db      	uxtb	r3, r3
  400c5e:	3301      	adds	r3, #1
  400c60:	b2da      	uxtb	r2, r3
  400c62:	4b03      	ldr	r3, [pc, #12]	; (400c70 <isr+0x1c>)
  400c64:	701a      	strb	r2, [r3, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
  400c66:	bf00      	nop
  400c68:	46bd      	mov	sp, r7
  400c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c6e:	4770      	bx	lr
  400c70:	204008df 	.word	0x204008df

00400c74 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
  400c74:	b580      	push	{r7, lr}
  400c76:	b082      	sub	sp, #8
  400c78:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
  400c7a:	2300      	movs	r3, #0
  400c7c:	71fb      	strb	r3, [r7, #7]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  400c7e:	2001      	movs	r0, #1
  400c80:	4b12      	ldr	r3, [pc, #72]	; (400ccc <hif_set_rx_done+0x58>)
  400c82:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400c84:	463b      	mov	r3, r7
  400c86:	4619      	mov	r1, r3
  400c88:	f241 0070 	movw	r0, #4208	; 0x1070
  400c8c:	4b10      	ldr	r3, [pc, #64]	; (400cd0 <hif_set_rx_done+0x5c>)
  400c8e:	4798      	blx	r3
  400c90:	4603      	mov	r3, r0
  400c92:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
  400c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400c98:	2b00      	cmp	r3, #0
  400c9a:	d10f      	bne.n	400cbc <hif_set_rx_done+0x48>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  400c9c:	683b      	ldr	r3, [r7, #0]
  400c9e:	f043 0302 	orr.w	r3, r3, #2
  400ca2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  400ca4:	683b      	ldr	r3, [r7, #0]
  400ca6:	4619      	mov	r1, r3
  400ca8:	f241 0070 	movw	r0, #4208	; 0x1070
  400cac:	4b09      	ldr	r3, [pc, #36]	; (400cd4 <hif_set_rx_done+0x60>)
  400cae:	4798      	blx	r3
  400cb0:	4603      	mov	r3, r0
  400cb2:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
  400cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400cb8:	2b00      	cmp	r3, #0
  400cba:	e000      	b.n	400cbe <hif_set_rx_done+0x4a>
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
  400cbc:	bf00      	nop
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
  400cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
  400cc2:	4618      	mov	r0, r3
  400cc4:	3708      	adds	r7, #8
  400cc6:	46bd      	mov	sp, r7
  400cc8:	bd80      	pop	{r7, pc}
  400cca:	bf00      	nop
  400ccc:	00400599 	.word	0x00400599
  400cd0:	004026b1 	.word	0x004026b1
  400cd4:	004026d1 	.word	0x004026d1

00400cd8 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400cd8:	b480      	push	{r7}
  400cda:	b083      	sub	sp, #12
  400cdc:	af00      	add	r7, sp, #0
  400cde:	4603      	mov	r3, r0
  400ce0:	603a      	str	r2, [r7, #0]
  400ce2:	71fb      	strb	r3, [r7, #7]
  400ce4:	460b      	mov	r3, r1
  400ce6:	80bb      	strh	r3, [r7, #4]


}
  400ce8:	bf00      	nop
  400cea:	370c      	adds	r7, #12
  400cec:	46bd      	mov	sp, r7
  400cee:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cf2:	4770      	bx	lr

00400cf4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  400cf4:	b580      	push	{r7, lr}
  400cf6:	b082      	sub	sp, #8
  400cf8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
  400cfa:	2300      	movs	r3, #0
  400cfc:	71fb      	strb	r3, [r7, #7]
	if(gu8ChipSleep == 0)
  400cfe:	4b1a      	ldr	r3, [pc, #104]	; (400d68 <hif_chip_wake+0x74>)
  400d00:	781b      	ldrb	r3, [r3, #0]
  400d02:	b2db      	uxtb	r3, r3
  400d04:	2b00      	cmp	r3, #0
  400d06:	d11d      	bne.n	400d44 <hif_chip_wake+0x50>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400d08:	4b18      	ldr	r3, [pc, #96]	; (400d6c <hif_chip_wake+0x78>)
  400d0a:	781b      	ldrb	r3, [r3, #0]
  400d0c:	b2db      	uxtb	r3, r3
  400d0e:	2b03      	cmp	r3, #3
  400d10:	d004      	beq.n	400d1c <hif_chip_wake+0x28>
  400d12:	4b16      	ldr	r3, [pc, #88]	; (400d6c <hif_chip_wake+0x78>)
  400d14:	781b      	ldrb	r3, [r3, #0]
  400d16:	b2db      	uxtb	r3, r3
  400d18:	2b04      	cmp	r3, #4
  400d1a:	d113      	bne.n	400d44 <hif_chip_wake+0x50>
		{
			ret = nm_clkless_wake();
  400d1c:	4b14      	ldr	r3, [pc, #80]	; (400d70 <hif_chip_wake+0x7c>)
  400d1e:	4798      	blx	r3
  400d20:	4603      	mov	r3, r0
  400d22:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
  400d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400d28:	2b00      	cmp	r3, #0
  400d2a:	d113      	bne.n	400d54 <hif_chip_wake+0x60>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  400d2c:	f245 6178 	movw	r1, #22136	; 0x5678
  400d30:	f241 0074 	movw	r0, #4212	; 0x1074
  400d34:	4b0f      	ldr	r3, [pc, #60]	; (400d74 <hif_chip_wake+0x80>)
  400d36:	4798      	blx	r3
  400d38:	4603      	mov	r3, r0
  400d3a:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
  400d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400d40:	2b00      	cmp	r3, #0
  400d42:	d109      	bne.n	400d58 <hif_chip_wake+0x64>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  400d44:	4b08      	ldr	r3, [pc, #32]	; (400d68 <hif_chip_wake+0x74>)
  400d46:	781b      	ldrb	r3, [r3, #0]
  400d48:	b2db      	uxtb	r3, r3
  400d4a:	3301      	adds	r3, #1
  400d4c:	b2da      	uxtb	r2, r3
  400d4e:	4b06      	ldr	r3, [pc, #24]	; (400d68 <hif_chip_wake+0x74>)
  400d50:	701a      	strb	r2, [r3, #0]
  400d52:	e002      	b.n	400d5a <hif_chip_wake+0x66>
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			ret = nm_clkless_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
  400d54:	bf00      	nop
  400d56:	e000      	b.n	400d5a <hif_chip_wake+0x66>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
  400d58:	bf00      	nop
		{
		}
	}
	gu8ChipSleep++;
ERR1:
	return ret;
  400d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
  400d5e:	4618      	mov	r0, r3
  400d60:	3708      	adds	r7, #8
  400d62:	46bd      	mov	sp, r7
  400d64:	bd80      	pop	{r7, pc}
  400d66:	bf00      	nop
  400d68:	204008dd 	.word	0x204008dd
  400d6c:	204008dc 	.word	0x204008dc
  400d70:	00402035 	.word	0x00402035
  400d74:	004026d1 	.word	0x004026d1

00400d78 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  400d78:	b580      	push	{r7, lr}
  400d7a:	b082      	sub	sp, #8
  400d7c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
  400d7e:	2300      	movs	r3, #0
  400d80:	71fb      	strb	r3, [r7, #7]

	if(gu8ChipSleep >= 1)
  400d82:	4b27      	ldr	r3, [pc, #156]	; (400e20 <hif_chip_sleep+0xa8>)
  400d84:	781b      	ldrb	r3, [r3, #0]
  400d86:	b2db      	uxtb	r3, r3
  400d88:	2b00      	cmp	r3, #0
  400d8a:	d006      	beq.n	400d9a <hif_chip_sleep+0x22>
	{
		gu8ChipSleep--;
  400d8c:	4b24      	ldr	r3, [pc, #144]	; (400e20 <hif_chip_sleep+0xa8>)
  400d8e:	781b      	ldrb	r3, [r3, #0]
  400d90:	b2db      	uxtb	r3, r3
  400d92:	3b01      	subs	r3, #1
  400d94:	b2da      	uxtb	r2, r3
  400d96:	4b22      	ldr	r3, [pc, #136]	; (400e20 <hif_chip_sleep+0xa8>)
  400d98:	701a      	strb	r2, [r3, #0]
	}
	
	if(gu8ChipSleep == 0)
  400d9a:	4b21      	ldr	r3, [pc, #132]	; (400e20 <hif_chip_sleep+0xa8>)
  400d9c:	781b      	ldrb	r3, [r3, #0]
  400d9e:	b2db      	uxtb	r3, r3
  400da0:	2b00      	cmp	r3, #0
  400da2:	d136      	bne.n	400e12 <hif_chip_sleep+0x9a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400da4:	4b1f      	ldr	r3, [pc, #124]	; (400e24 <hif_chip_sleep+0xac>)
  400da6:	781b      	ldrb	r3, [r3, #0]
  400da8:	b2db      	uxtb	r3, r3
  400daa:	2b03      	cmp	r3, #3
  400dac:	d004      	beq.n	400db8 <hif_chip_sleep+0x40>
  400dae:	4b1d      	ldr	r3, [pc, #116]	; (400e24 <hif_chip_sleep+0xac>)
  400db0:	781b      	ldrb	r3, [r3, #0]
  400db2:	b2db      	uxtb	r3, r3
  400db4:	2b04      	cmp	r3, #4
  400db6:	d12c      	bne.n	400e12 <hif_chip_sleep+0x9a>
		{
			uint32 reg = 0;
  400db8:	2300      	movs	r3, #0
  400dba:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  400dbc:	f244 3121 	movw	r1, #17185	; 0x4321
  400dc0:	f241 0074 	movw	r0, #4212	; 0x1074
  400dc4:	4b18      	ldr	r3, [pc, #96]	; (400e28 <hif_chip_sleep+0xb0>)
  400dc6:	4798      	blx	r3
  400dc8:	4603      	mov	r3, r0
  400dca:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
  400dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400dd0:	2b00      	cmp	r3, #0
  400dd2:	d11b      	bne.n	400e0c <hif_chip_sleep+0x94>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  400dd4:	463b      	mov	r3, r7
  400dd6:	4619      	mov	r1, r3
  400dd8:	2001      	movs	r0, #1
  400dda:	4b14      	ldr	r3, [pc, #80]	; (400e2c <hif_chip_sleep+0xb4>)
  400ddc:	4798      	blx	r3
  400dde:	4603      	mov	r3, r0
  400de0:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
  400de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400de6:	2b00      	cmp	r3, #0
  400de8:	d112      	bne.n	400e10 <hif_chip_sleep+0x98>
			if(reg&0x2)
  400dea:	683b      	ldr	r3, [r7, #0]
  400dec:	f003 0302 	and.w	r3, r3, #2
  400df0:	2b00      	cmp	r3, #0
  400df2:	d00e      	beq.n	400e12 <hif_chip_sleep+0x9a>
			{
				reg &=~(1 << 1);
  400df4:	683b      	ldr	r3, [r7, #0]
  400df6:	f023 0302 	bic.w	r3, r3, #2
  400dfa:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
  400dfc:	683b      	ldr	r3, [r7, #0]
  400dfe:	4619      	mov	r1, r3
  400e00:	2001      	movs	r0, #1
  400e02:	4b09      	ldr	r3, [pc, #36]	; (400e28 <hif_chip_sleep+0xb0>)
  400e04:	4798      	blx	r3
  400e06:	4603      	mov	r3, r0
  400e08:	71fb      	strb	r3, [r7, #7]
  400e0a:	e002      	b.n	400e12 <hif_chip_sleep+0x9a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			uint32 reg = 0;
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
  400e0c:	bf00      	nop
  400e0e:	e000      	b.n	400e12 <hif_chip_sleep+0x9a>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
			if(ret != M2M_SUCCESS)goto ERR1;
  400e10:	bf00      	nop
		else
		{
		}
	}
ERR1:
	return ret;
  400e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
  400e16:	4618      	mov	r0, r3
  400e18:	3708      	adds	r7, #8
  400e1a:	46bd      	mov	sp, r7
  400e1c:	bd80      	pop	{r7, pc}
  400e1e:	bf00      	nop
  400e20:	204008dd 	.word	0x204008dd
  400e24:	204008dc 	.word	0x204008dc
  400e28:	004026d1 	.word	0x004026d1
  400e2c:	004026b1 	.word	0x004026b1

00400e30 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  400e30:	b580      	push	{r7, lr}
  400e32:	b082      	sub	sp, #8
  400e34:	af00      	add	r7, sp, #0
  400e36:	6078      	str	r0, [r7, #4]
	pfWifiCb = NULL;
  400e38:	4b0d      	ldr	r3, [pc, #52]	; (400e70 <hif_init+0x40>)
  400e3a:	2200      	movs	r2, #0
  400e3c:	601a      	str	r2, [r3, #0]
	pfIpCb = NULL;
  400e3e:	4b0d      	ldr	r3, [pc, #52]	; (400e74 <hif_init+0x44>)
  400e40:	2200      	movs	r2, #0
  400e42:	601a      	str	r2, [r3, #0]

	gu8ChipSleep = 0;
  400e44:	4b0c      	ldr	r3, [pc, #48]	; (400e78 <hif_init+0x48>)
  400e46:	2200      	movs	r2, #0
  400e48:	701a      	strb	r2, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  400e4a:	4b0c      	ldr	r3, [pc, #48]	; (400e7c <hif_init+0x4c>)
  400e4c:	2200      	movs	r2, #0
  400e4e:	701a      	strb	r2, [r3, #0]

	gu8Interrupt = 0;
  400e50:	4b0b      	ldr	r3, [pc, #44]	; (400e80 <hif_init+0x50>)
  400e52:	2200      	movs	r2, #0
  400e54:	701a      	strb	r2, [r3, #0]
	nm_bsp_register_isr(isr);
  400e56:	480b      	ldr	r0, [pc, #44]	; (400e84 <hif_init+0x54>)
  400e58:	4b0b      	ldr	r3, [pc, #44]	; (400e88 <hif_init+0x58>)
  400e5a:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  400e5c:	490b      	ldr	r1, [pc, #44]	; (400e8c <hif_init+0x5c>)
  400e5e:	2003      	movs	r0, #3
  400e60:	4b0b      	ldr	r3, [pc, #44]	; (400e90 <hif_init+0x60>)
  400e62:	4798      	blx	r3

	return M2M_SUCCESS;
  400e64:	2300      	movs	r3, #0
}
  400e66:	4618      	mov	r0, r3
  400e68:	3708      	adds	r7, #8
  400e6a:	46bd      	mov	sp, r7
  400e6c:	bd80      	pop	{r7, pc}
  400e6e:	bf00      	nop
  400e70:	204008e0 	.word	0x204008e0
  400e74:	204008e4 	.word	0x204008e4
  400e78:	204008dd 	.word	0x204008dd
  400e7c:	204008dc 	.word	0x204008dc
  400e80:	204008df 	.word	0x204008df
  400e84:	00400c55 	.word	0x00400c55
  400e88:	00400511 	.word	0x00400511
  400e8c:	00400cd9 	.word	0x00400cd9
  400e90:	0040165d 	.word	0x0040165d

00400e94 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  400e94:	b580      	push	{r7, lr}
  400e96:	b088      	sub	sp, #32
  400e98:	af00      	add	r7, sp, #0
  400e9a:	603a      	str	r2, [r7, #0]
  400e9c:	461a      	mov	r2, r3
  400e9e:	4603      	mov	r3, r0
  400ea0:	71fb      	strb	r3, [r7, #7]
  400ea2:	460b      	mov	r3, r1
  400ea4:	71bb      	strb	r3, [r7, #6]
  400ea6:	4613      	mov	r3, r2
  400ea8:	80bb      	strh	r3, [r7, #4]
	sint8		ret = M2M_ERR_SEND;
  400eaa:	23ff      	movs	r3, #255	; 0xff
  400eac:	77fb      	strb	r3, [r7, #31]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  400eae:	79bb      	ldrb	r3, [r7, #6]
  400eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400eb4:	b2db      	uxtb	r3, r3
  400eb6:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
  400eb8:	79fb      	ldrb	r3, [r7, #7]
  400eba:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  400ebc:	2308      	movs	r3, #8
  400ebe:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
  400ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400ec2:	2b00      	cmp	r3, #0
  400ec4:	d009      	beq.n	400eda <hif_send+0x46>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  400ec6:	8b7b      	ldrh	r3, [r7, #26]
  400ec8:	b29a      	uxth	r2, r3
  400eca:	8e39      	ldrh	r1, [r7, #48]	; 0x30
  400ecc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  400ece:	440b      	add	r3, r1
  400ed0:	b29b      	uxth	r3, r3
  400ed2:	4413      	add	r3, r2
  400ed4:	b29b      	uxth	r3, r3
  400ed6:	837b      	strh	r3, [r7, #26]
  400ed8:	e005      	b.n	400ee6 <hif_send+0x52>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  400eda:	8b7b      	ldrh	r3, [r7, #26]
  400edc:	b29a      	uxth	r2, r3
  400ede:	88bb      	ldrh	r3, [r7, #4]
  400ee0:	4413      	add	r3, r2
  400ee2:	b29b      	uxth	r3, r3
  400ee4:	837b      	strh	r3, [r7, #26]
	}
	ret = hif_chip_wake();
  400ee6:	4b77      	ldr	r3, [pc, #476]	; (4010c4 <hif_send+0x230>)
  400ee8:	4798      	blx	r3
  400eea:	4603      	mov	r3, r0
  400eec:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
  400eee:	f997 301f 	ldrsb.w	r3, [r7, #31]
  400ef2:	2b00      	cmp	r3, #0
  400ef4:	f040 80c5 	bne.w	401082 <hif_send+0x1ee>
	{
		volatile uint32 reg, dma_addr = 0;
  400ef8:	2300      	movs	r3, #0
  400efa:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
  400efc:	2300      	movs	r3, #0
  400efe:	81fb      	strh	r3, [r7, #14]

		reg = 0UL;
  400f00:	2300      	movs	r3, #0
  400f02:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
  400f04:	79fa      	ldrb	r2, [r7, #7]
  400f06:	697b      	ldr	r3, [r7, #20]
  400f08:	4313      	orrs	r3, r2
  400f0a:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
  400f0c:	79bb      	ldrb	r3, [r7, #6]
  400f0e:	021a      	lsls	r2, r3, #8
  400f10:	697b      	ldr	r3, [r7, #20]
  400f12:	4313      	orrs	r3, r2
  400f14:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
  400f16:	8b7b      	ldrh	r3, [r7, #26]
  400f18:	b29b      	uxth	r3, r3
  400f1a:	041a      	lsls	r2, r3, #16
  400f1c:	697b      	ldr	r3, [r7, #20]
  400f1e:	4313      	orrs	r3, r2
  400f20:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  400f22:	697b      	ldr	r3, [r7, #20]
  400f24:	4619      	mov	r1, r3
  400f26:	f241 008c 	movw	r0, #4236	; 0x108c
  400f2a:	4b67      	ldr	r3, [pc, #412]	; (4010c8 <hif_send+0x234>)
  400f2c:	4798      	blx	r3
  400f2e:	4603      	mov	r3, r0
  400f30:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
  400f32:	f997 301f 	ldrsb.w	r3, [r7, #31]
  400f36:	2b00      	cmp	r3, #0
  400f38:	f040 80b5 	bne.w	4010a6 <hif_send+0x212>


		reg = 0;
  400f3c:	2300      	movs	r3, #0
  400f3e:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
  400f40:	697b      	ldr	r3, [r7, #20]
  400f42:	f043 0302 	orr.w	r3, r3, #2
  400f46:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  400f48:	697b      	ldr	r3, [r7, #20]
  400f4a:	4619      	mov	r1, r3
  400f4c:	f241 0078 	movw	r0, #4216	; 0x1078
  400f50:	4b5d      	ldr	r3, [pc, #372]	; (4010c8 <hif_send+0x234>)
  400f52:	4798      	blx	r3
  400f54:	4603      	mov	r3, r0
  400f56:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
  400f58:	f997 301f 	ldrsb.w	r3, [r7, #31]
  400f5c:	2b00      	cmp	r3, #0
  400f5e:	f040 80a4 	bne.w	4010aa <hif_send+0x216>
		dma_addr = 0;
  400f62:	2300      	movs	r3, #0
  400f64:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  400f66:	2300      	movs	r3, #0
  400f68:	81fb      	strh	r3, [r7, #14]
  400f6a:	e025      	b.n	400fb8 <hif_send+0x124>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  400f6c:	f107 0314 	add.w	r3, r7, #20
  400f70:	4619      	mov	r1, r3
  400f72:	f241 0078 	movw	r0, #4216	; 0x1078
  400f76:	4b55      	ldr	r3, [pc, #340]	; (4010cc <hif_send+0x238>)
  400f78:	4798      	blx	r3
  400f7a:	4603      	mov	r3, r0
  400f7c:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
  400f7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
  400f82:	2b00      	cmp	r3, #0
  400f84:	d11e      	bne.n	400fc4 <hif_send+0x130>
			if (!(reg & 0x2))
  400f86:	697b      	ldr	r3, [r7, #20]
  400f88:	f003 0302 	and.w	r3, r3, #2
  400f8c:	2b00      	cmp	r3, #0
  400f8e:	d10e      	bne.n	400fae <hif_send+0x11a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  400f90:	f107 0310 	add.w	r3, r7, #16
  400f94:	4619      	mov	r1, r3
  400f96:	484e      	ldr	r0, [pc, #312]	; (4010d0 <hif_send+0x23c>)
  400f98:	4b4c      	ldr	r3, [pc, #304]	; (4010cc <hif_send+0x238>)
  400f9a:	4798      	blx	r3
  400f9c:	4603      	mov	r3, r0
  400f9e:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
  400fa0:	f997 301f 	ldrsb.w	r3, [r7, #31]
  400fa4:	2b00      	cmp	r3, #0
  400fa6:	d00f      	beq.n	400fc8 <hif_send+0x134>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  400fa8:	2300      	movs	r3, #0
  400faa:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
  400fac:	e00c      	b.n	400fc8 <hif_send+0x134>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  400fae:	89fb      	ldrh	r3, [r7, #14]
  400fb0:	b29b      	uxth	r3, r3
  400fb2:	3301      	adds	r3, #1
  400fb4:	b29b      	uxth	r3, r3
  400fb6:	81fb      	strh	r3, [r7, #14]
  400fb8:	89fb      	ldrh	r3, [r7, #14]
  400fba:	b29b      	uxth	r3, r3
  400fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400fc0:	d3d4      	bcc.n	400f6c <hif_send+0xd8>
  400fc2:	e002      	b.n	400fca <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
  400fc4:	bf00      	nop
  400fc6:	e000      	b.n	400fca <hif_send+0x136>
				if(ret != M2M_SUCCESS) {
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
				}
				/*in case of success break */
				break;
  400fc8:	bf00      	nop
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  400fca:	693b      	ldr	r3, [r7, #16]
  400fcc:	2b00      	cmp	r3, #0
  400fce:	d055      	beq.n	40107c <hif_send+0x1e8>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  400fd0:	693b      	ldr	r3, [r7, #16]
  400fd2:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  400fd4:	8b7b      	ldrh	r3, [r7, #26]
  400fd6:	b29b      	uxth	r3, r3
  400fd8:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  400fda:	68bb      	ldr	r3, [r7, #8]
  400fdc:	f107 0118 	add.w	r1, r7, #24
  400fe0:	2208      	movs	r2, #8
  400fe2:	4618      	mov	r0, r3
  400fe4:	4b3b      	ldr	r3, [pc, #236]	; (4010d4 <hif_send+0x240>)
  400fe6:	4798      	blx	r3
  400fe8:	4603      	mov	r3, r0
  400fea:	77fb      	strb	r3, [r7, #31]
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  400fec:	f997 301f 	ldrsb.w	r3, [r7, #31]
  400ff0:	2b00      	cmp	r3, #0
  400ff2:	d15c      	bne.n	4010ae <hif_send+0x21a>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  400ff4:	68bb      	ldr	r3, [r7, #8]
  400ff6:	3308      	adds	r3, #8
  400ff8:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
  400ffa:	683b      	ldr	r3, [r7, #0]
  400ffc:	2b00      	cmp	r3, #0
  400ffe:	d00f      	beq.n	401020 <hif_send+0x18c>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  401000:	68bb      	ldr	r3, [r7, #8]
  401002:	88ba      	ldrh	r2, [r7, #4]
  401004:	6839      	ldr	r1, [r7, #0]
  401006:	4618      	mov	r0, r3
  401008:	4b32      	ldr	r3, [pc, #200]	; (4010d4 <hif_send+0x240>)
  40100a:	4798      	blx	r3
  40100c:	4603      	mov	r3, r0
  40100e:	77fb      	strb	r3, [r7, #31]
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  401010:	f997 301f 	ldrsb.w	r3, [r7, #31]
  401014:	2b00      	cmp	r3, #0
  401016:	d14c      	bne.n	4010b2 <hif_send+0x21e>
				u32CurrAddr += u16CtrlBufSize;
  401018:	88ba      	ldrh	r2, [r7, #4]
  40101a:	68bb      	ldr	r3, [r7, #8]
  40101c:	4413      	add	r3, r2
  40101e:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
  401020:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401022:	2b00      	cmp	r3, #0
  401024:	d016      	beq.n	401054 <hif_send+0x1c0>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  401026:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
  401028:	88bb      	ldrh	r3, [r7, #4]
  40102a:	1ad3      	subs	r3, r2, r3
  40102c:	461a      	mov	r2, r3
  40102e:	68bb      	ldr	r3, [r7, #8]
  401030:	4413      	add	r3, r2
  401032:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  401034:	68bb      	ldr	r3, [r7, #8]
  401036:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  401038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  40103a:	4618      	mov	r0, r3
  40103c:	4b25      	ldr	r3, [pc, #148]	; (4010d4 <hif_send+0x240>)
  40103e:	4798      	blx	r3
  401040:	4603      	mov	r3, r0
  401042:	77fb      	strb	r3, [r7, #31]
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  401044:	f997 301f 	ldrsb.w	r3, [r7, #31]
  401048:	2b00      	cmp	r3, #0
  40104a:	d134      	bne.n	4010b6 <hif_send+0x222>
				u32CurrAddr += u16DataSize;
  40104c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  40104e:	68bb      	ldr	r3, [r7, #8]
  401050:	4413      	add	r3, r2
  401052:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
  401054:	693b      	ldr	r3, [r7, #16]
  401056:	009b      	lsls	r3, r3, #2
  401058:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
  40105a:	697b      	ldr	r3, [r7, #20]
  40105c:	f043 0302 	orr.w	r3, r3, #2
  401060:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  401062:	697b      	ldr	r3, [r7, #20]
  401064:	4619      	mov	r1, r3
  401066:	f241 006c 	movw	r0, #4204	; 0x106c
  40106a:	4b17      	ldr	r3, [pc, #92]	; (4010c8 <hif_send+0x234>)
  40106c:	4798      	blx	r3
  40106e:	4603      	mov	r3, r0
  401070:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
  401072:	f997 301f 	ldrsb.w	r3, [r7, #31]
  401076:	2b00      	cmp	r3, #0
  401078:	d010      	beq.n	40109c <hif_send+0x208>
  40107a:	e01d      	b.n	4010b8 <hif_send+0x224>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  40107c:	23fd      	movs	r3, #253	; 0xfd
  40107e:	77fb      	strb	r3, [r7, #31]
			goto ERR1;
  401080:	e01a      	b.n	4010b8 <hif_send+0x224>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  401082:	f240 129f 	movw	r2, #415	; 0x19f
  401086:	4914      	ldr	r1, [pc, #80]	; (4010d8 <hif_send+0x244>)
  401088:	4814      	ldr	r0, [pc, #80]	; (4010dc <hif_send+0x248>)
  40108a:	4b15      	ldr	r3, [pc, #84]	; (4010e0 <hif_send+0x24c>)
  40108c:	4798      	blx	r3
  40108e:	4815      	ldr	r0, [pc, #84]	; (4010e4 <hif_send+0x250>)
  401090:	4b13      	ldr	r3, [pc, #76]	; (4010e0 <hif_send+0x24c>)
  401092:	4798      	blx	r3
  401094:	4814      	ldr	r0, [pc, #80]	; (4010e8 <hif_send+0x254>)
  401096:	4b12      	ldr	r3, [pc, #72]	; (4010e0 <hif_send+0x24c>)
  401098:	4798      	blx	r3
		goto ERR1;
  40109a:	e00d      	b.n	4010b8 <hif_send+0x224>
	}
	ret = hif_chip_sleep();
  40109c:	4b13      	ldr	r3, [pc, #76]	; (4010ec <hif_send+0x258>)
  40109e:	4798      	blx	r3
  4010a0:	4603      	mov	r3, r0
  4010a2:	77fb      	strb	r3, [r7, #31]
  4010a4:	e008      	b.n	4010b8 <hif_send+0x224>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
  4010a6:	bf00      	nop
  4010a8:	e006      	b.n	4010b8 <hif_send+0x224>


		reg = 0;
		reg |= (1<<1);
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
  4010aa:	bf00      	nop
  4010ac:	e004      	b.n	4010b8 <hif_send+0x224>
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4010ae:	bf00      	nop
  4010b0:	e002      	b.n	4010b8 <hif_send+0x224>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4010b2:	bf00      	nop
  4010b4:	e000      	b.n	4010b8 <hif_send+0x224>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4010b6:	bf00      	nop
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
  4010b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
  4010bc:	4618      	mov	r0, r3
  4010be:	3720      	adds	r7, #32
  4010c0:	46bd      	mov	sp, r7
  4010c2:	bd80      	pop	{r7, pc}
  4010c4:	00400cf5 	.word	0x00400cf5
  4010c8:	004026d1 	.word	0x004026d1
  4010cc:	004026b1 	.word	0x004026b1
  4010d0:	00150400 	.word	0x00150400
  4010d4:	004027d9 	.word	0x004027d9
  4010d8:	0040e080 	.word	0x0040e080
  4010dc:	0040de34 	.word	0x0040de34
  4010e0:	004079e5 	.word	0x004079e5
  4010e4:	0040de48 	.word	0x0040de48
  4010e8:	0040de68 	.word	0x0040de68
  4010ec:	00400d79 	.word	0x00400d79

004010f0 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
  4010f0:	b590      	push	{r4, r7, lr}
  4010f2:	b087      	sub	sp, #28
  4010f4:	af02      	add	r7, sp, #8
	sint8 ret = M2M_ERR_BUS_FAIL;
  4010f6:	23fa      	movs	r3, #250	; 0xfa
  4010f8:	73fb      	strb	r3, [r7, #15]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  4010fa:	4b9e      	ldr	r3, [pc, #632]	; (401374 <hif_isr+0x284>)
  4010fc:	4798      	blx	r3
  4010fe:	4603      	mov	r3, r0
  401100:	73fb      	strb	r3, [r7, #15]
	if(ret == M2M_SUCCESS)
  401102:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401106:	2b00      	cmp	r3, #0
  401108:	f040 817c 	bne.w	401404 <hif_isr+0x314>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  40110c:	f107 0308 	add.w	r3, r7, #8
  401110:	4619      	mov	r1, r3
  401112:	f241 0070 	movw	r0, #4208	; 0x1070
  401116:	4b98      	ldr	r3, [pc, #608]	; (401378 <hif_isr+0x288>)
  401118:	4798      	blx	r3
  40111a:	4603      	mov	r3, r0
  40111c:	73fb      	strb	r3, [r7, #15]
		if(M2M_SUCCESS == ret)
  40111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401122:	2b00      	cmp	r3, #0
  401124:	f040 8161 	bne.w	4013ea <hif_isr+0x2fa>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  401128:	68bb      	ldr	r3, [r7, #8]
  40112a:	f003 0301 	and.w	r3, r3, #1
  40112e:	2b00      	cmp	r3, #0
  401130:	f000 814c 	beq.w	4013cc <hif_isr+0x2dc>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  401134:	2000      	movs	r0, #0
  401136:	4b91      	ldr	r3, [pc, #580]	; (40137c <hif_isr+0x28c>)
  401138:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  40113a:	68bb      	ldr	r3, [r7, #8]
  40113c:	f023 0301 	bic.w	r3, r3, #1
  401140:	60bb      	str	r3, [r7, #8]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  401142:	68bb      	ldr	r3, [r7, #8]
  401144:	4619      	mov	r1, r3
  401146:	f241 0070 	movw	r0, #4208	; 0x1070
  40114a:	4b8d      	ldr	r3, [pc, #564]	; (401380 <hif_isr+0x290>)
  40114c:	4798      	blx	r3
  40114e:	4603      	mov	r3, r0
  401150:	73fb      	strb	r3, [r7, #15]
				if(ret != M2M_SUCCESS)goto ERR1;
  401152:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401156:	2b00      	cmp	r3, #0
  401158:	f040 8166 	bne.w	401428 <hif_isr+0x338>
				gu8HifSizeDone = 0;
  40115c:	4b89      	ldr	r3, [pc, #548]	; (401384 <hif_isr+0x294>)
  40115e:	2200      	movs	r2, #0
  401160:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  401162:	68bb      	ldr	r3, [r7, #8]
  401164:	089b      	lsrs	r3, r3, #2
  401166:	b29b      	uxth	r3, r3
  401168:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40116c:	81bb      	strh	r3, [r7, #12]
				if (size > 0) {
  40116e:	89bb      	ldrh	r3, [r7, #12]
  401170:	2b00      	cmp	r3, #0
  401172:	f000 80ef 	beq.w	401354 <hif_isr+0x264>
					uint32 address = 0;
  401176:	2300      	movs	r3, #0
  401178:	603b      	str	r3, [r7, #0]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  40117a:	463b      	mov	r3, r7
  40117c:	4619      	mov	r1, r3
  40117e:	f241 0084 	movw	r0, #4228	; 0x1084
  401182:	4b7d      	ldr	r3, [pc, #500]	; (401378 <hif_isr+0x288>)
  401184:	4798      	blx	r3
  401186:	4603      	mov	r3, r0
  401188:	73fb      	strb	r3, [r7, #15]
					if(M2M_SUCCESS != ret)
  40118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40118e:	2b00      	cmp	r3, #0
  401190:	d00f      	beq.n	4011b2 <hif_isr+0xc2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  401192:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  401196:	497c      	ldr	r1, [pc, #496]	; (401388 <hif_isr+0x298>)
  401198:	487c      	ldr	r0, [pc, #496]	; (40138c <hif_isr+0x29c>)
  40119a:	4b7d      	ldr	r3, [pc, #500]	; (401390 <hif_isr+0x2a0>)
  40119c:	4798      	blx	r3
  40119e:	487d      	ldr	r0, [pc, #500]	; (401394 <hif_isr+0x2a4>)
  4011a0:	4b7b      	ldr	r3, [pc, #492]	; (401390 <hif_isr+0x2a0>)
  4011a2:	4798      	blx	r3
  4011a4:	487c      	ldr	r0, [pc, #496]	; (401398 <hif_isr+0x2a8>)
  4011a6:	4b7a      	ldr	r3, [pc, #488]	; (401390 <hif_isr+0x2a0>)
  4011a8:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
  4011aa:	2001      	movs	r0, #1
  4011ac:	4b73      	ldr	r3, [pc, #460]	; (40137c <hif_isr+0x28c>)
  4011ae:	4798      	blx	r3
						goto ERR1;
  4011b0:	e13b      	b.n	40142a <hif_isr+0x33a>
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4011b2:	683b      	ldr	r3, [r7, #0]
  4011b4:	1d39      	adds	r1, r7, #4
  4011b6:	2204      	movs	r2, #4
  4011b8:	4618      	mov	r0, r3
  4011ba:	4b78      	ldr	r3, [pc, #480]	; (40139c <hif_isr+0x2ac>)
  4011bc:	4798      	blx	r3
  4011be:	4603      	mov	r3, r0
  4011c0:	73fb      	strb	r3, [r7, #15]
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4011c2:	88fb      	ldrh	r3, [r7, #6]
  4011c4:	b29b      	uxth	r3, r3
  4011c6:	80fb      	strh	r3, [r7, #6]
					if(M2M_SUCCESS != ret)
  4011c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4011cc:	2b00      	cmp	r3, #0
  4011ce:	d00f      	beq.n	4011f0 <hif_isr+0x100>
					{
						M2M_ERR("(hif) address bus fail\n");
  4011d0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  4011d4:	496c      	ldr	r1, [pc, #432]	; (401388 <hif_isr+0x298>)
  4011d6:	486d      	ldr	r0, [pc, #436]	; (40138c <hif_isr+0x29c>)
  4011d8:	4b6d      	ldr	r3, [pc, #436]	; (401390 <hif_isr+0x2a0>)
  4011da:	4798      	blx	r3
  4011dc:	4870      	ldr	r0, [pc, #448]	; (4013a0 <hif_isr+0x2b0>)
  4011de:	4b6c      	ldr	r3, [pc, #432]	; (401390 <hif_isr+0x2a0>)
  4011e0:	4798      	blx	r3
  4011e2:	486d      	ldr	r0, [pc, #436]	; (401398 <hif_isr+0x2a8>)
  4011e4:	4b6a      	ldr	r3, [pc, #424]	; (401390 <hif_isr+0x2a0>)
  4011e6:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
  4011e8:	2001      	movs	r0, #1
  4011ea:	4b64      	ldr	r3, [pc, #400]	; (40137c <hif_isr+0x28c>)
  4011ec:	4798      	blx	r3
						goto ERR1;
  4011ee:	e11c      	b.n	40142a <hif_isr+0x33a>
					}
					if(strHif.u16Length != size)
  4011f0:	88fb      	ldrh	r3, [r7, #6]
  4011f2:	b29b      	uxth	r3, r3
  4011f4:	89ba      	ldrh	r2, [r7, #12]
  4011f6:	429a      	cmp	r2, r3
  4011f8:	d022      	beq.n	401240 <hif_isr+0x150>
					{
						if((size - strHif.u16Length) > 4)
  4011fa:	89bb      	ldrh	r3, [r7, #12]
  4011fc:	88fa      	ldrh	r2, [r7, #6]
  4011fe:	b292      	uxth	r2, r2
  401200:	1a9b      	subs	r3, r3, r2
  401202:	2b04      	cmp	r3, #4
  401204:	dd1c      	ble.n	401240 <hif_isr+0x150>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  401206:	f240 12df 	movw	r2, #479	; 0x1df
  40120a:	495f      	ldr	r1, [pc, #380]	; (401388 <hif_isr+0x298>)
  40120c:	485f      	ldr	r0, [pc, #380]	; (40138c <hif_isr+0x29c>)
  40120e:	4b60      	ldr	r3, [pc, #384]	; (401390 <hif_isr+0x2a0>)
  401210:	4798      	blx	r3
  401212:	89b9      	ldrh	r1, [r7, #12]
  401214:	88fb      	ldrh	r3, [r7, #6]
  401216:	b29b      	uxth	r3, r3
  401218:	461a      	mov	r2, r3
  40121a:	793b      	ldrb	r3, [r7, #4]
  40121c:	b2db      	uxtb	r3, r3
  40121e:	4618      	mov	r0, r3
  401220:	797b      	ldrb	r3, [r7, #5]
  401222:	b2db      	uxtb	r3, r3
  401224:	9300      	str	r3, [sp, #0]
  401226:	4603      	mov	r3, r0
  401228:	485e      	ldr	r0, [pc, #376]	; (4013a4 <hif_isr+0x2b4>)
  40122a:	4c59      	ldr	r4, [pc, #356]	; (401390 <hif_isr+0x2a0>)
  40122c:	47a0      	blx	r4
  40122e:	485a      	ldr	r0, [pc, #360]	; (401398 <hif_isr+0x2a8>)
  401230:	4b57      	ldr	r3, [pc, #348]	; (401390 <hif_isr+0x2a0>)
  401232:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  401234:	2001      	movs	r0, #1
  401236:	4b51      	ldr	r3, [pc, #324]	; (40137c <hif_isr+0x28c>)
  401238:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  40123a:	23fa      	movs	r3, #250	; 0xfa
  40123c:	73fb      	strb	r3, [r7, #15]
							goto ERR1;
  40123e:	e0f4      	b.n	40142a <hif_isr+0x33a>
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  401240:	793b      	ldrb	r3, [r7, #4]
  401242:	b2db      	uxtb	r3, r3
  401244:	2b01      	cmp	r3, #1
  401246:	d10f      	bne.n	401268 <hif_isr+0x178>
					{
						if(pfWifiCb)
  401248:	4b57      	ldr	r3, [pc, #348]	; (4013a8 <hif_isr+0x2b8>)
  40124a:	681b      	ldr	r3, [r3, #0]
  40124c:	2b00      	cmp	r3, #0
  40124e:	d06b      	beq.n	401328 <hif_isr+0x238>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401250:	4b55      	ldr	r3, [pc, #340]	; (4013a8 <hif_isr+0x2b8>)
  401252:	681b      	ldr	r3, [r3, #0]
  401254:	797a      	ldrb	r2, [r7, #5]
  401256:	b2d0      	uxtb	r0, r2
  401258:	88fa      	ldrh	r2, [r7, #6]
  40125a:	b292      	uxth	r2, r2
  40125c:	3a08      	subs	r2, #8
  40125e:	b291      	uxth	r1, r2
  401260:	683a      	ldr	r2, [r7, #0]
  401262:	3208      	adds	r2, #8
  401264:	4798      	blx	r3
  401266:	e05f      	b.n	401328 <hif_isr+0x238>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  401268:	793b      	ldrb	r3, [r7, #4]
  40126a:	b2db      	uxtb	r3, r3
  40126c:	2b02      	cmp	r3, #2
  40126e:	d10f      	bne.n	401290 <hif_isr+0x1a0>
					{
						if(pfIpCb)
  401270:	4b4e      	ldr	r3, [pc, #312]	; (4013ac <hif_isr+0x2bc>)
  401272:	681b      	ldr	r3, [r3, #0]
  401274:	2b00      	cmp	r3, #0
  401276:	d057      	beq.n	401328 <hif_isr+0x238>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401278:	4b4c      	ldr	r3, [pc, #304]	; (4013ac <hif_isr+0x2bc>)
  40127a:	681b      	ldr	r3, [r3, #0]
  40127c:	797a      	ldrb	r2, [r7, #5]
  40127e:	b2d0      	uxtb	r0, r2
  401280:	88fa      	ldrh	r2, [r7, #6]
  401282:	b292      	uxth	r2, r2
  401284:	3a08      	subs	r2, #8
  401286:	b291      	uxth	r1, r2
  401288:	683a      	ldr	r2, [r7, #0]
  40128a:	3208      	adds	r2, #8
  40128c:	4798      	blx	r3
  40128e:	e04b      	b.n	401328 <hif_isr+0x238>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  401290:	793b      	ldrb	r3, [r7, #4]
  401292:	b2db      	uxtb	r3, r3
  401294:	2b04      	cmp	r3, #4
  401296:	d10f      	bne.n	4012b8 <hif_isr+0x1c8>
					{
						if(pfOtaCb)
  401298:	4b45      	ldr	r3, [pc, #276]	; (4013b0 <hif_isr+0x2c0>)
  40129a:	681b      	ldr	r3, [r3, #0]
  40129c:	2b00      	cmp	r3, #0
  40129e:	d043      	beq.n	401328 <hif_isr+0x238>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4012a0:	4b43      	ldr	r3, [pc, #268]	; (4013b0 <hif_isr+0x2c0>)
  4012a2:	681b      	ldr	r3, [r3, #0]
  4012a4:	797a      	ldrb	r2, [r7, #5]
  4012a6:	b2d0      	uxtb	r0, r2
  4012a8:	88fa      	ldrh	r2, [r7, #6]
  4012aa:	b292      	uxth	r2, r2
  4012ac:	3a08      	subs	r2, #8
  4012ae:	b291      	uxth	r1, r2
  4012b0:	683a      	ldr	r2, [r7, #0]
  4012b2:	3208      	adds	r2, #8
  4012b4:	4798      	blx	r3
  4012b6:	e037      	b.n	401328 <hif_isr+0x238>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4012b8:	793b      	ldrb	r3, [r7, #4]
  4012ba:	b2db      	uxtb	r3, r3
  4012bc:	2b06      	cmp	r3, #6
  4012be:	d10f      	bne.n	4012e0 <hif_isr+0x1f0>
					{
						if(pfCryptoCb)
  4012c0:	4b3c      	ldr	r3, [pc, #240]	; (4013b4 <hif_isr+0x2c4>)
  4012c2:	681b      	ldr	r3, [r3, #0]
  4012c4:	2b00      	cmp	r3, #0
  4012c6:	d02f      	beq.n	401328 <hif_isr+0x238>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4012c8:	4b3a      	ldr	r3, [pc, #232]	; (4013b4 <hif_isr+0x2c4>)
  4012ca:	681b      	ldr	r3, [r3, #0]
  4012cc:	797a      	ldrb	r2, [r7, #5]
  4012ce:	b2d0      	uxtb	r0, r2
  4012d0:	88fa      	ldrh	r2, [r7, #6]
  4012d2:	b292      	uxth	r2, r2
  4012d4:	3a08      	subs	r2, #8
  4012d6:	b291      	uxth	r1, r2
  4012d8:	683a      	ldr	r2, [r7, #0]
  4012da:	3208      	adds	r2, #8
  4012dc:	4798      	blx	r3
  4012de:	e023      	b.n	401328 <hif_isr+0x238>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  4012e0:	793b      	ldrb	r3, [r7, #4]
  4012e2:	b2db      	uxtb	r3, r3
  4012e4:	2b07      	cmp	r3, #7
  4012e6:	d10f      	bne.n	401308 <hif_isr+0x218>
					{
						if(pfSigmaCb)
  4012e8:	4b33      	ldr	r3, [pc, #204]	; (4013b8 <hif_isr+0x2c8>)
  4012ea:	681b      	ldr	r3, [r3, #0]
  4012ec:	2b00      	cmp	r3, #0
  4012ee:	d01b      	beq.n	401328 <hif_isr+0x238>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4012f0:	4b31      	ldr	r3, [pc, #196]	; (4013b8 <hif_isr+0x2c8>)
  4012f2:	681b      	ldr	r3, [r3, #0]
  4012f4:	797a      	ldrb	r2, [r7, #5]
  4012f6:	b2d0      	uxtb	r0, r2
  4012f8:	88fa      	ldrh	r2, [r7, #6]
  4012fa:	b292      	uxth	r2, r2
  4012fc:	3a08      	subs	r2, #8
  4012fe:	b291      	uxth	r1, r2
  401300:	683a      	ldr	r2, [r7, #0]
  401302:	3208      	adds	r2, #8
  401304:	4798      	blx	r3
  401306:	e00f      	b.n	401328 <hif_isr+0x238>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  401308:	f240 2202 	movw	r2, #514	; 0x202
  40130c:	491e      	ldr	r1, [pc, #120]	; (401388 <hif_isr+0x298>)
  40130e:	481f      	ldr	r0, [pc, #124]	; (40138c <hif_isr+0x29c>)
  401310:	4b1f      	ldr	r3, [pc, #124]	; (401390 <hif_isr+0x2a0>)
  401312:	4798      	blx	r3
  401314:	4829      	ldr	r0, [pc, #164]	; (4013bc <hif_isr+0x2cc>)
  401316:	4b1e      	ldr	r3, [pc, #120]	; (401390 <hif_isr+0x2a0>)
  401318:	4798      	blx	r3
  40131a:	481f      	ldr	r0, [pc, #124]	; (401398 <hif_isr+0x2a8>)
  40131c:	4b1c      	ldr	r3, [pc, #112]	; (401390 <hif_isr+0x2a0>)
  40131e:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
  401320:	23fa      	movs	r3, #250	; 0xfa
  401322:	73fb      	strb	r3, [r7, #15]
						goto ERR1;
  401324:	bf00      	nop
  401326:	e080      	b.n	40142a <hif_isr+0x33a>
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  401328:	4b16      	ldr	r3, [pc, #88]	; (401384 <hif_isr+0x294>)
  40132a:	781b      	ldrb	r3, [r3, #0]
  40132c:	b2db      	uxtb	r3, r3
  40132e:	2b00      	cmp	r3, #0
  401330:	d175      	bne.n	40141e <hif_isr+0x32e>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  401332:	f240 2209 	movw	r2, #521	; 0x209
  401336:	4914      	ldr	r1, [pc, #80]	; (401388 <hif_isr+0x298>)
  401338:	4814      	ldr	r0, [pc, #80]	; (40138c <hif_isr+0x29c>)
  40133a:	4b15      	ldr	r3, [pc, #84]	; (401390 <hif_isr+0x2a0>)
  40133c:	4798      	blx	r3
  40133e:	4820      	ldr	r0, [pc, #128]	; (4013c0 <hif_isr+0x2d0>)
  401340:	4b13      	ldr	r3, [pc, #76]	; (401390 <hif_isr+0x2a0>)
  401342:	4798      	blx	r3
  401344:	4814      	ldr	r0, [pc, #80]	; (401398 <hif_isr+0x2a8>)
  401346:	4b12      	ldr	r3, [pc, #72]	; (401390 <hif_isr+0x2a0>)
  401348:	4798      	blx	r3
						ret = hif_set_rx_done();
  40134a:	4b1e      	ldr	r3, [pc, #120]	; (4013c4 <hif_isr+0x2d4>)
  40134c:	4798      	blx	r3
  40134e:	4603      	mov	r3, r0
  401350:	73fb      	strb	r3, [r7, #15]
  401352:	e064      	b.n	40141e <hif_isr+0x32e>
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  401354:	23fe      	movs	r3, #254	; 0xfe
  401356:	73fb      	strb	r3, [r7, #15]
					M2M_ERR("(hif) Wrong Size\n");
  401358:	f240 2211 	movw	r2, #529	; 0x211
  40135c:	490a      	ldr	r1, [pc, #40]	; (401388 <hif_isr+0x298>)
  40135e:	480b      	ldr	r0, [pc, #44]	; (40138c <hif_isr+0x29c>)
  401360:	4b0b      	ldr	r3, [pc, #44]	; (401390 <hif_isr+0x2a0>)
  401362:	4798      	blx	r3
  401364:	4818      	ldr	r0, [pc, #96]	; (4013c8 <hif_isr+0x2d8>)
  401366:	4b0a      	ldr	r3, [pc, #40]	; (401390 <hif_isr+0x2a0>)
  401368:	4798      	blx	r3
  40136a:	480b      	ldr	r0, [pc, #44]	; (401398 <hif_isr+0x2a8>)
  40136c:	4b08      	ldr	r3, [pc, #32]	; (401390 <hif_isr+0x2a0>)
  40136e:	4798      	blx	r3
					goto ERR1;
  401370:	e05b      	b.n	40142a <hif_isr+0x33a>
  401372:	bf00      	nop
  401374:	00400cf5 	.word	0x00400cf5
  401378:	004026b1 	.word	0x004026b1
  40137c:	00400599 	.word	0x00400599
  401380:	004026d1 	.word	0x004026d1
  401384:	204008de 	.word	0x204008de
  401388:	0040e08c 	.word	0x0040e08c
  40138c:	0040de34 	.word	0x0040de34
  401390:	004079e5 	.word	0x004079e5
  401394:	0040de6c 	.word	0x0040de6c
  401398:	0040de68 	.word	0x0040de68
  40139c:	00402719 	.word	0x00402719
  4013a0:	0040de94 	.word	0x0040de94
  4013a4:	0040deac 	.word	0x0040deac
  4013a8:	204008e0 	.word	0x204008e0
  4013ac:	204008e4 	.word	0x204008e4
  4013b0:	204008e8 	.word	0x204008e8
  4013b4:	204008f4 	.word	0x204008f4
  4013b8:	204008ec 	.word	0x204008ec
  4013bc:	0040deec 	.word	0x0040deec
  4013c0:	0040df04 	.word	0x0040df04
  4013c4:	00400c75 	.word	0x00400c75
  4013c8:	0040df28 	.word	0x0040df28
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  4013cc:	f44f 7206 	mov.w	r2, #536	; 0x218
  4013d0:	4919      	ldr	r1, [pc, #100]	; (401438 <hif_isr+0x348>)
  4013d2:	481a      	ldr	r0, [pc, #104]	; (40143c <hif_isr+0x34c>)
  4013d4:	4b1a      	ldr	r3, [pc, #104]	; (401440 <hif_isr+0x350>)
  4013d6:	4798      	blx	r3
  4013d8:	68bb      	ldr	r3, [r7, #8]
  4013da:	4619      	mov	r1, r3
  4013dc:	4819      	ldr	r0, [pc, #100]	; (401444 <hif_isr+0x354>)
  4013de:	4b18      	ldr	r3, [pc, #96]	; (401440 <hif_isr+0x350>)
  4013e0:	4798      	blx	r3
  4013e2:	4819      	ldr	r0, [pc, #100]	; (401448 <hif_isr+0x358>)
  4013e4:	4b16      	ldr	r3, [pc, #88]	; (401440 <hif_isr+0x350>)
  4013e6:	4798      	blx	r3
  4013e8:	e019      	b.n	40141e <hif_isr+0x32e>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  4013ea:	f240 221e 	movw	r2, #542	; 0x21e
  4013ee:	4912      	ldr	r1, [pc, #72]	; (401438 <hif_isr+0x348>)
  4013f0:	4812      	ldr	r0, [pc, #72]	; (40143c <hif_isr+0x34c>)
  4013f2:	4b13      	ldr	r3, [pc, #76]	; (401440 <hif_isr+0x350>)
  4013f4:	4798      	blx	r3
  4013f6:	4815      	ldr	r0, [pc, #84]	; (40144c <hif_isr+0x35c>)
  4013f8:	4b11      	ldr	r3, [pc, #68]	; (401440 <hif_isr+0x350>)
  4013fa:	4798      	blx	r3
  4013fc:	4812      	ldr	r0, [pc, #72]	; (401448 <hif_isr+0x358>)
  4013fe:	4b10      	ldr	r3, [pc, #64]	; (401440 <hif_isr+0x350>)
  401400:	4798      	blx	r3
			goto ERR1;
  401402:	e012      	b.n	40142a <hif_isr+0x33a>
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  401404:	f44f 7209 	mov.w	r2, #548	; 0x224
  401408:	490b      	ldr	r1, [pc, #44]	; (401438 <hif_isr+0x348>)
  40140a:	480c      	ldr	r0, [pc, #48]	; (40143c <hif_isr+0x34c>)
  40140c:	4b0c      	ldr	r3, [pc, #48]	; (401440 <hif_isr+0x350>)
  40140e:	4798      	blx	r3
  401410:	480f      	ldr	r0, [pc, #60]	; (401450 <hif_isr+0x360>)
  401412:	4b0b      	ldr	r3, [pc, #44]	; (401440 <hif_isr+0x350>)
  401414:	4798      	blx	r3
  401416:	480c      	ldr	r0, [pc, #48]	; (401448 <hif_isr+0x358>)
  401418:	4b09      	ldr	r3, [pc, #36]	; (401440 <hif_isr+0x350>)
  40141a:	4798      	blx	r3
		goto ERR1;
  40141c:	e005      	b.n	40142a <hif_isr+0x33a>
	}

	ret = hif_chip_sleep();
  40141e:	4b0d      	ldr	r3, [pc, #52]	; (401454 <hif_isr+0x364>)
  401420:	4798      	blx	r3
  401422:	4603      	mov	r3, r0
  401424:	73fb      	strb	r3, [r7, #15]
  401426:	e000      	b.n	40142a <hif_isr+0x33a>

				nm_bsp_interrupt_ctrl(0);
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
				if(ret != M2M_SUCCESS)goto ERR1;
  401428:	bf00      	nop
		goto ERR1;
	}

	ret = hif_chip_sleep();
ERR1:
	return ret;
  40142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  40142e:	4618      	mov	r0, r3
  401430:	3714      	adds	r7, #20
  401432:	46bd      	mov	sp, r7
  401434:	bd90      	pop	{r4, r7, pc}
  401436:	bf00      	nop
  401438:	0040e08c 	.word	0x0040e08c
  40143c:	0040de34 	.word	0x0040de34
  401440:	004079e5 	.word	0x004079e5
  401444:	0040df3c 	.word	0x0040df3c
  401448:	0040de68 	.word	0x0040de68
  40144c:	0040df58 	.word	0x0040df58
  401450:	0040df7c 	.word	0x0040df7c
  401454:	00400d79 	.word	0x00400d79

00401458 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  401458:	b580      	push	{r7, lr}
  40145a:	b082      	sub	sp, #8
  40145c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
  40145e:	2300      	movs	r3, #0
  401460:	71fb      	strb	r3, [r7, #7]

	while (gu8Interrupt) {
  401462:	e01f      	b.n	4014a4 <hif_handle_isr+0x4c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  401464:	4b15      	ldr	r3, [pc, #84]	; (4014bc <hif_handle_isr+0x64>)
  401466:	781b      	ldrb	r3, [r3, #0]
  401468:	b2db      	uxtb	r3, r3
  40146a:	3b01      	subs	r3, #1
  40146c:	b2da      	uxtb	r2, r3
  40146e:	4b13      	ldr	r3, [pc, #76]	; (4014bc <hif_handle_isr+0x64>)
  401470:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			ret = hif_isr();
  401472:	4b13      	ldr	r3, [pc, #76]	; (4014c0 <hif_handle_isr+0x68>)
  401474:	4798      	blx	r3
  401476:	4603      	mov	r3, r0
  401478:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
  40147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40147e:	2b00      	cmp	r3, #0
  401480:	d100      	bne.n	401484 <hif_handle_isr+0x2c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
  401482:	e00f      	b.n	4014a4 <hif_handle_isr+0x4c>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  401484:	f240 2243 	movw	r2, #579	; 0x243
  401488:	490e      	ldr	r1, [pc, #56]	; (4014c4 <hif_handle_isr+0x6c>)
  40148a:	480f      	ldr	r0, [pc, #60]	; (4014c8 <hif_handle_isr+0x70>)
  40148c:	4b0f      	ldr	r3, [pc, #60]	; (4014cc <hif_handle_isr+0x74>)
  40148e:	4798      	blx	r3
  401490:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401494:	4619      	mov	r1, r3
  401496:	480e      	ldr	r0, [pc, #56]	; (4014d0 <hif_handle_isr+0x78>)
  401498:	4b0c      	ldr	r3, [pc, #48]	; (4014cc <hif_handle_isr+0x74>)
  40149a:	4798      	blx	r3
  40149c:	480d      	ldr	r0, [pc, #52]	; (4014d4 <hif_handle_isr+0x7c>)
  40149e:	4b0b      	ldr	r3, [pc, #44]	; (4014cc <hif_handle_isr+0x74>)
  4014a0:	4798      	blx	r3
			}
		}
  4014a2:	e7e6      	b.n	401472 <hif_handle_isr+0x1a>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4014a4:	4b05      	ldr	r3, [pc, #20]	; (4014bc <hif_handle_isr+0x64>)
  4014a6:	781b      	ldrb	r3, [r3, #0]
  4014a8:	b2db      	uxtb	r3, r3
  4014aa:	2b00      	cmp	r3, #0
  4014ac:	d1da      	bne.n	401464 <hif_handle_isr+0xc>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
  4014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
  4014b2:	4618      	mov	r0, r3
  4014b4:	3708      	adds	r7, #8
  4014b6:	46bd      	mov	sp, r7
  4014b8:	bd80      	pop	{r7, pc}
  4014ba:	bf00      	nop
  4014bc:	204008df 	.word	0x204008df
  4014c0:	004010f1 	.word	0x004010f1
  4014c4:	0040e094 	.word	0x0040e094
  4014c8:	0040de34 	.word	0x0040de34
  4014cc:	004079e5 	.word	0x004079e5
  4014d0:	0040df9c 	.word	0x0040df9c
  4014d4:	0040de68 	.word	0x0040de68

004014d8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  4014d8:	b580      	push	{r7, lr}
  4014da:	b088      	sub	sp, #32
  4014dc:	af00      	add	r7, sp, #0
  4014de:	60f8      	str	r0, [r7, #12]
  4014e0:	60b9      	str	r1, [r7, #8]
  4014e2:	4611      	mov	r1, r2
  4014e4:	461a      	mov	r2, r3
  4014e6:	460b      	mov	r3, r1
  4014e8:	80fb      	strh	r3, [r7, #6]
  4014ea:	4613      	mov	r3, r2
  4014ec:	717b      	strb	r3, [r7, #5]
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;
  4014ee:	2300      	movs	r3, #0
  4014f0:	77fb      	strb	r3, [r7, #31]

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  4014f2:	68fb      	ldr	r3, [r7, #12]
  4014f4:	2b00      	cmp	r3, #0
  4014f6:	d005      	beq.n	401504 <hif_receive+0x2c>
  4014f8:	68bb      	ldr	r3, [r7, #8]
  4014fa:	2b00      	cmp	r3, #0
  4014fc:	d002      	beq.n	401504 <hif_receive+0x2c>
  4014fe:	88fb      	ldrh	r3, [r7, #6]
  401500:	2b00      	cmp	r3, #0
  401502:	d119      	bne.n	401538 <hif_receive+0x60>
	{
		if(isDone)
  401504:	797b      	ldrb	r3, [r7, #5]
  401506:	2b00      	cmp	r3, #0
  401508:	d007      	beq.n	40151a <hif_receive+0x42>
		{
			gu8HifSizeDone = 1;
  40150a:	4b49      	ldr	r3, [pc, #292]	; (401630 <hif_receive+0x158>)
  40150c:	2201      	movs	r2, #1
  40150e:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  401510:	4b48      	ldr	r3, [pc, #288]	; (401634 <hif_receive+0x15c>)
  401512:	4798      	blx	r3
  401514:	4603      	mov	r3, r0
  401516:	77fb      	strb	r3, [r7, #31]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
  401518:	e083      	b.n	401622 <hif_receive+0x14a>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  40151a:	23f4      	movs	r3, #244	; 0xf4
  40151c:	77fb      	strb	r3, [r7, #31]
			M2M_ERR(" hif_receive: Invalid argument\n");
  40151e:	f240 2269 	movw	r2, #617	; 0x269
  401522:	4945      	ldr	r1, [pc, #276]	; (401638 <hif_receive+0x160>)
  401524:	4845      	ldr	r0, [pc, #276]	; (40163c <hif_receive+0x164>)
  401526:	4b46      	ldr	r3, [pc, #280]	; (401640 <hif_receive+0x168>)
  401528:	4798      	blx	r3
  40152a:	4846      	ldr	r0, [pc, #280]	; (401644 <hif_receive+0x16c>)
  40152c:	4b44      	ldr	r3, [pc, #272]	; (401640 <hif_receive+0x168>)
  40152e:	4798      	blx	r3
  401530:	4845      	ldr	r0, [pc, #276]	; (401648 <hif_receive+0x170>)
  401532:	4b43      	ldr	r3, [pc, #268]	; (401640 <hif_receive+0x168>)
  401534:	4798      	blx	r3
		}
		goto ERR1;
  401536:	e074      	b.n	401622 <hif_receive+0x14a>
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  401538:	f107 0314 	add.w	r3, r7, #20
  40153c:	4619      	mov	r1, r3
  40153e:	f241 0070 	movw	r0, #4208	; 0x1070
  401542:	4b42      	ldr	r3, [pc, #264]	; (40164c <hif_receive+0x174>)
  401544:	4798      	blx	r3
  401546:	4603      	mov	r3, r0
  401548:	77fb      	strb	r3, [r7, #31]
	if(ret != M2M_SUCCESS)goto ERR1;
  40154a:	f997 301f 	ldrsb.w	r3, [r7, #31]
  40154e:	2b00      	cmp	r3, #0
  401550:	d162      	bne.n	401618 <hif_receive+0x140>


	size = (uint16)((reg >> 2) & 0xfff);
  401552:	697b      	ldr	r3, [r7, #20]
  401554:	089b      	lsrs	r3, r3, #2
  401556:	b29b      	uxth	r3, r3
  401558:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40155c:	83bb      	strh	r3, [r7, #28]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  40155e:	f107 0318 	add.w	r3, r7, #24
  401562:	4619      	mov	r1, r3
  401564:	f241 0084 	movw	r0, #4228	; 0x1084
  401568:	4b38      	ldr	r3, [pc, #224]	; (40164c <hif_receive+0x174>)
  40156a:	4798      	blx	r3
  40156c:	4603      	mov	r3, r0
  40156e:	77fb      	strb	r3, [r7, #31]
	if(ret != M2M_SUCCESS)goto ERR1;
  401570:	f997 301f 	ldrsb.w	r3, [r7, #31]
  401574:	2b00      	cmp	r3, #0
  401576:	d151      	bne.n	40161c <hif_receive+0x144>


	if(u16Sz > size)
  401578:	88fa      	ldrh	r2, [r7, #6]
  40157a:	8bbb      	ldrh	r3, [r7, #28]
  40157c:	429a      	cmp	r2, r3
  40157e:	d911      	bls.n	4015a4 <hif_receive+0xcc>
	{
		ret = M2M_ERR_FAIL;
  401580:	23f4      	movs	r3, #244	; 0xf4
  401582:	77fb      	strb	r3, [r7, #31]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  401584:	f240 227a 	movw	r2, #634	; 0x27a
  401588:	492b      	ldr	r1, [pc, #172]	; (401638 <hif_receive+0x160>)
  40158a:	482c      	ldr	r0, [pc, #176]	; (40163c <hif_receive+0x164>)
  40158c:	4b2c      	ldr	r3, [pc, #176]	; (401640 <hif_receive+0x168>)
  40158e:	4798      	blx	r3
  401590:	88fb      	ldrh	r3, [r7, #6]
  401592:	8bba      	ldrh	r2, [r7, #28]
  401594:	4619      	mov	r1, r3
  401596:	482e      	ldr	r0, [pc, #184]	; (401650 <hif_receive+0x178>)
  401598:	4b29      	ldr	r3, [pc, #164]	; (401640 <hif_receive+0x168>)
  40159a:	4798      	blx	r3
  40159c:	482a      	ldr	r0, [pc, #168]	; (401648 <hif_receive+0x170>)
  40159e:	4b28      	ldr	r3, [pc, #160]	; (401640 <hif_receive+0x168>)
  4015a0:	4798      	blx	r3
		goto ERR1;
  4015a2:	e03e      	b.n	401622 <hif_receive+0x14a>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  4015a4:	69bb      	ldr	r3, [r7, #24]
  4015a6:	68fa      	ldr	r2, [r7, #12]
  4015a8:	429a      	cmp	r2, r3
  4015aa:	d307      	bcc.n	4015bc <hif_receive+0xe4>
  4015ac:	88fa      	ldrh	r2, [r7, #6]
  4015ae:	68fb      	ldr	r3, [r7, #12]
  4015b0:	441a      	add	r2, r3
  4015b2:	8bb9      	ldrh	r1, [r7, #28]
  4015b4:	69bb      	ldr	r3, [r7, #24]
  4015b6:	440b      	add	r3, r1
  4015b8:	429a      	cmp	r2, r3
  4015ba:	d90e      	bls.n	4015da <hif_receive+0x102>
	{
		ret = M2M_ERR_FAIL;
  4015bc:	23f4      	movs	r3, #244	; 0xf4
  4015be:	77fb      	strb	r3, [r7, #31]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  4015c0:	f44f 7220 	mov.w	r2, #640	; 0x280
  4015c4:	491c      	ldr	r1, [pc, #112]	; (401638 <hif_receive+0x160>)
  4015c6:	481d      	ldr	r0, [pc, #116]	; (40163c <hif_receive+0x164>)
  4015c8:	4b1d      	ldr	r3, [pc, #116]	; (401640 <hif_receive+0x168>)
  4015ca:	4798      	blx	r3
  4015cc:	4821      	ldr	r0, [pc, #132]	; (401654 <hif_receive+0x17c>)
  4015ce:	4b1c      	ldr	r3, [pc, #112]	; (401640 <hif_receive+0x168>)
  4015d0:	4798      	blx	r3
  4015d2:	481d      	ldr	r0, [pc, #116]	; (401648 <hif_receive+0x170>)
  4015d4:	4b1a      	ldr	r3, [pc, #104]	; (401640 <hif_receive+0x168>)
  4015d6:	4798      	blx	r3
		goto ERR1;
  4015d8:	e023      	b.n	401622 <hif_receive+0x14a>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  4015da:	88fb      	ldrh	r3, [r7, #6]
  4015dc:	461a      	mov	r2, r3
  4015de:	68b9      	ldr	r1, [r7, #8]
  4015e0:	68f8      	ldr	r0, [r7, #12]
  4015e2:	4b1d      	ldr	r3, [pc, #116]	; (401658 <hif_receive+0x180>)
  4015e4:	4798      	blx	r3
  4015e6:	4603      	mov	r3, r0
  4015e8:	77fb      	strb	r3, [r7, #31]
	if(ret != M2M_SUCCESS)goto ERR1;
  4015ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
  4015ee:	2b00      	cmp	r3, #0
  4015f0:	d116      	bne.n	401620 <hif_receive+0x148>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  4015f2:	8bba      	ldrh	r2, [r7, #28]
  4015f4:	69bb      	ldr	r3, [r7, #24]
  4015f6:	441a      	add	r2, r3
  4015f8:	88f9      	ldrh	r1, [r7, #6]
  4015fa:	68fb      	ldr	r3, [r7, #12]
  4015fc:	440b      	add	r3, r1
  4015fe:	429a      	cmp	r2, r3
  401600:	d002      	beq.n	401608 <hif_receive+0x130>
  401602:	797b      	ldrb	r3, [r7, #5]
  401604:	2b00      	cmp	r3, #0
  401606:	d00c      	beq.n	401622 <hif_receive+0x14a>
	{
		gu8HifSizeDone = 1;
  401608:	4b09      	ldr	r3, [pc, #36]	; (401630 <hif_receive+0x158>)
  40160a:	2201      	movs	r2, #1
  40160c:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  40160e:	4b09      	ldr	r3, [pc, #36]	; (401634 <hif_receive+0x15c>)
  401610:	4798      	blx	r3
  401612:	4603      	mov	r3, r0
  401614:	77fb      	strb	r3, [r7, #31]
  401616:	e004      	b.n	401622 <hif_receive+0x14a>
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
  401618:	bf00      	nop
  40161a:	e002      	b.n	401622 <hif_receive+0x14a>


	size = (uint16)((reg >> 2) & 0xfff);
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;
  40161c:	bf00      	nop
  40161e:	e000      	b.n	401622 <hif_receive+0x14a>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
  401620:	bf00      	nop
	}



ERR1:
	return ret;
  401622:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
  401626:	4618      	mov	r0, r3
  401628:	3720      	adds	r7, #32
  40162a:	46bd      	mov	sp, r7
  40162c:	bd80      	pop	{r7, pc}
  40162e:	bf00      	nop
  401630:	204008de 	.word	0x204008de
  401634:	00400c75 	.word	0x00400c75
  401638:	0040e0a4 	.word	0x0040e0a4
  40163c:	0040de34 	.word	0x0040de34
  401640:	004079e5 	.word	0x004079e5
  401644:	0040dfcc 	.word	0x0040dfcc
  401648:	0040de68 	.word	0x0040de68
  40164c:	004026b1 	.word	0x004026b1
  401650:	0040dfec 	.word	0x0040dfec
  401654:	0040e030 	.word	0x0040e030
  401658:	00402719 	.word	0x00402719

0040165c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  40165c:	b580      	push	{r7, lr}
  40165e:	b084      	sub	sp, #16
  401660:	af00      	add	r7, sp, #0
  401662:	4603      	mov	r3, r0
  401664:	6039      	str	r1, [r7, #0]
  401666:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
  401668:	2300      	movs	r3, #0
  40166a:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
  40166c:	79fb      	ldrb	r3, [r7, #7]
  40166e:	3b01      	subs	r3, #1
  401670:	2b06      	cmp	r3, #6
  401672:	d829      	bhi.n	4016c8 <hif_register_cb+0x6c>
  401674:	a201      	add	r2, pc, #4	; (adr r2, 40167c <hif_register_cb+0x20>)
  401676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40167a:	bf00      	nop
  40167c:	004016a1 	.word	0x004016a1
  401680:	00401699 	.word	0x00401699
  401684:	004016b1 	.word	0x004016b1
  401688:	004016a9 	.word	0x004016a9
  40168c:	004016c9 	.word	0x004016c9
  401690:	004016b9 	.word	0x004016b9
  401694:	004016c1 	.word	0x004016c1
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  401698:	4a17      	ldr	r2, [pc, #92]	; (4016f8 <hif_register_cb+0x9c>)
  40169a:	683b      	ldr	r3, [r7, #0]
  40169c:	6013      	str	r3, [r2, #0]
			break;
  40169e:	e024      	b.n	4016ea <hif_register_cb+0x8e>
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  4016a0:	4a16      	ldr	r2, [pc, #88]	; (4016fc <hif_register_cb+0xa0>)
  4016a2:	683b      	ldr	r3, [r7, #0]
  4016a4:	6013      	str	r3, [r2, #0]
			break;
  4016a6:	e020      	b.n	4016ea <hif_register_cb+0x8e>
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  4016a8:	4a15      	ldr	r2, [pc, #84]	; (401700 <hif_register_cb+0xa4>)
  4016aa:	683b      	ldr	r3, [r7, #0]
  4016ac:	6013      	str	r3, [r2, #0]
			break;
  4016ae:	e01c      	b.n	4016ea <hif_register_cb+0x8e>
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  4016b0:	4a14      	ldr	r2, [pc, #80]	; (401704 <hif_register_cb+0xa8>)
  4016b2:	683b      	ldr	r3, [r7, #0]
  4016b4:	6013      	str	r3, [r2, #0]
			break;
  4016b6:	e018      	b.n	4016ea <hif_register_cb+0x8e>
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  4016b8:	4a13      	ldr	r2, [pc, #76]	; (401708 <hif_register_cb+0xac>)
  4016ba:	683b      	ldr	r3, [r7, #0]
  4016bc:	6013      	str	r3, [r2, #0]
			break;
  4016be:	e014      	b.n	4016ea <hif_register_cb+0x8e>
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  4016c0:	4a12      	ldr	r2, [pc, #72]	; (40170c <hif_register_cb+0xb0>)
  4016c2:	683b      	ldr	r3, [r7, #0]
  4016c4:	6013      	str	r3, [r2, #0]
			break;
  4016c6:	e010      	b.n	4016ea <hif_register_cb+0x8e>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  4016c8:	f240 22b9 	movw	r2, #697	; 0x2b9
  4016cc:	4910      	ldr	r1, [pc, #64]	; (401710 <hif_register_cb+0xb4>)
  4016ce:	4811      	ldr	r0, [pc, #68]	; (401714 <hif_register_cb+0xb8>)
  4016d0:	4b11      	ldr	r3, [pc, #68]	; (401718 <hif_register_cb+0xbc>)
  4016d2:	4798      	blx	r3
  4016d4:	79fb      	ldrb	r3, [r7, #7]
  4016d6:	4619      	mov	r1, r3
  4016d8:	4810      	ldr	r0, [pc, #64]	; (40171c <hif_register_cb+0xc0>)
  4016da:	4b0f      	ldr	r3, [pc, #60]	; (401718 <hif_register_cb+0xbc>)
  4016dc:	4798      	blx	r3
  4016de:	4810      	ldr	r0, [pc, #64]	; (401720 <hif_register_cb+0xc4>)
  4016e0:	4b0d      	ldr	r3, [pc, #52]	; (401718 <hif_register_cb+0xbc>)
  4016e2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
  4016e4:	23f4      	movs	r3, #244	; 0xf4
  4016e6:	73fb      	strb	r3, [r7, #15]
			break;
  4016e8:	bf00      	nop
	}
	return ret;
  4016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  4016ee:	4618      	mov	r0, r3
  4016f0:	3710      	adds	r7, #16
  4016f2:	46bd      	mov	sp, r7
  4016f4:	bd80      	pop	{r7, pc}
  4016f6:	bf00      	nop
  4016f8:	204008e4 	.word	0x204008e4
  4016fc:	204008e0 	.word	0x204008e0
  401700:	204008e8 	.word	0x204008e8
  401704:	204008f0 	.word	0x204008f0
  401708:	204008f4 	.word	0x204008f4
  40170c:	204008ec 	.word	0x204008ec
  401710:	0040e0b0 	.word	0x0040e0b0
  401714:	0040de34 	.word	0x0040de34
  401718:	004079e5 	.word	0x004079e5
  40171c:	0040e074 	.word	0x0040e074
  401720:	0040de68 	.word	0x0040de68

00401724 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  401724:	b590      	push	{r4, r7, lr}
  401726:	b0ad      	sub	sp, #180	; 0xb4
  401728:	af02      	add	r7, sp, #8
  40172a:	4603      	mov	r3, r0
  40172c:	603a      	str	r2, [r7, #0]
  40172e:	71fb      	strb	r3, [r7, #7]
  401730:	460b      	mov	r3, r1
  401732:	80bb      	strh	r3, [r7, #4]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  401734:	79fb      	ldrb	r3, [r7, #7]
  401736:	2b2c      	cmp	r3, #44	; 0x2c
  401738:	d117      	bne.n	40176a <m2m_wifi_cb+0x46>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  40173a:	f107 019c 	add.w	r1, r7, #156	; 0x9c
  40173e:	2300      	movs	r3, #0
  401740:	2204      	movs	r2, #4
  401742:	6838      	ldr	r0, [r7, #0]
  401744:	4caf      	ldr	r4, [pc, #700]	; (401a04 <m2m_wifi_cb+0x2e0>)
  401746:	47a0      	blx	r4
  401748:	4603      	mov	r3, r0
  40174a:	2b00      	cmp	r3, #0
  40174c:	f040 819f 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  401750:	4bad      	ldr	r3, [pc, #692]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401752:	681b      	ldr	r3, [r3, #0]
  401754:	2b00      	cmp	r3, #0
  401756:	f000 819a 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  40175a:	4bab      	ldr	r3, [pc, #684]	; (401a08 <m2m_wifi_cb+0x2e4>)
  40175c:	681b      	ldr	r3, [r3, #0]
  40175e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
  401762:	4611      	mov	r1, r2
  401764:	202c      	movs	r0, #44	; 0x2c
  401766:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  401768:	e191      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  40176a:	79fb      	ldrb	r3, [r7, #7]
  40176c:	2b1b      	cmp	r3, #27
  40176e:	d117      	bne.n	4017a0 <m2m_wifi_cb+0x7c>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  401770:	f107 0194 	add.w	r1, r7, #148	; 0x94
  401774:	2300      	movs	r3, #0
  401776:	2208      	movs	r2, #8
  401778:	6838      	ldr	r0, [r7, #0]
  40177a:	4ca2      	ldr	r4, [pc, #648]	; (401a04 <m2m_wifi_cb+0x2e0>)
  40177c:	47a0      	blx	r4
  40177e:	4603      	mov	r3, r0
  401780:	2b00      	cmp	r3, #0
  401782:	f040 8184 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  401786:	4ba0      	ldr	r3, [pc, #640]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401788:	681b      	ldr	r3, [r3, #0]
  40178a:	2b00      	cmp	r3, #0
  40178c:	f000 817f 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  401790:	4b9d      	ldr	r3, [pc, #628]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401792:	681b      	ldr	r3, [r3, #0]
  401794:	f107 0294 	add.w	r2, r7, #148	; 0x94
  401798:	4611      	mov	r1, r2
  40179a:	201b      	movs	r0, #27
  40179c:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  40179e:	e176      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  4017a0:	79fb      	ldrb	r3, [r7, #7]
  4017a2:	2b06      	cmp	r3, #6
  4017a4:	d117      	bne.n	4017d6 <m2m_wifi_cb+0xb2>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  4017a6:	f107 010c 	add.w	r1, r7, #12
  4017aa:	2301      	movs	r3, #1
  4017ac:	2230      	movs	r2, #48	; 0x30
  4017ae:	6838      	ldr	r0, [r7, #0]
  4017b0:	4c94      	ldr	r4, [pc, #592]	; (401a04 <m2m_wifi_cb+0x2e0>)
  4017b2:	47a0      	blx	r4
  4017b4:	4603      	mov	r3, r0
  4017b6:	2b00      	cmp	r3, #0
  4017b8:	f040 8169 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if(gpfAppWifiCb)
  4017bc:	4b92      	ldr	r3, [pc, #584]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4017be:	681b      	ldr	r3, [r3, #0]
  4017c0:	2b00      	cmp	r3, #0
  4017c2:	f000 8164 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  4017c6:	4b90      	ldr	r3, [pc, #576]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4017c8:	681b      	ldr	r3, [r3, #0]
  4017ca:	f107 020c 	add.w	r2, r7, #12
  4017ce:	4611      	mov	r1, r2
  4017d0:	2006      	movs	r0, #6
  4017d2:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  4017d4:	e15b      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  4017d6:	79fb      	ldrb	r3, [r7, #7]
  4017d8:	2b0e      	cmp	r3, #14
  4017da:	f000 8158 	beq.w	401a8e <m2m_wifi_cb+0x36a>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  4017de:	79fb      	ldrb	r3, [r7, #7]
  4017e0:	2b32      	cmp	r3, #50	; 0x32
  4017e2:	d117      	bne.n	401814 <m2m_wifi_cb+0xf0>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  4017e4:	f107 0184 	add.w	r1, r7, #132	; 0x84
  4017e8:	2300      	movs	r3, #0
  4017ea:	2210      	movs	r2, #16
  4017ec:	6838      	ldr	r0, [r7, #0]
  4017ee:	4c85      	ldr	r4, [pc, #532]	; (401a04 <m2m_wifi_cb+0x2e0>)
  4017f0:	47a0      	blx	r4
  4017f2:	4603      	mov	r3, r0
  4017f4:	2b00      	cmp	r3, #0
  4017f6:	f040 814a 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  4017fa:	4b83      	ldr	r3, [pc, #524]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4017fc:	681b      	ldr	r3, [r3, #0]
  4017fe:	2b00      	cmp	r3, #0
  401800:	f000 8145 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  401804:	4b80      	ldr	r3, [pc, #512]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401806:	681b      	ldr	r3, [r3, #0]
  401808:	f107 0284 	add.w	r2, r7, #132	; 0x84
  40180c:	4611      	mov	r1, r2
  40180e:	2032      	movs	r0, #50	; 0x32
  401810:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  401812:	e13c      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  401814:	79fb      	ldrb	r3, [r7, #7]
  401816:	2b2f      	cmp	r3, #47	; 0x2f
  401818:	d11e      	bne.n	401858 <m2m_wifi_cb+0x134>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  40181a:	f107 030c 	add.w	r3, r7, #12
  40181e:	2264      	movs	r2, #100	; 0x64
  401820:	2100      	movs	r1, #0
  401822:	4618      	mov	r0, r3
  401824:	4b79      	ldr	r3, [pc, #484]	; (401a0c <m2m_wifi_cb+0x2e8>)
  401826:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  401828:	f107 010c 	add.w	r1, r7, #12
  40182c:	2300      	movs	r3, #0
  40182e:	2264      	movs	r2, #100	; 0x64
  401830:	6838      	ldr	r0, [r7, #0]
  401832:	4c74      	ldr	r4, [pc, #464]	; (401a04 <m2m_wifi_cb+0x2e0>)
  401834:	47a0      	blx	r4
  401836:	4603      	mov	r3, r0
  401838:	2b00      	cmp	r3, #0
  40183a:	f040 8128 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  40183e:	4b72      	ldr	r3, [pc, #456]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401840:	681b      	ldr	r3, [r3, #0]
  401842:	2b00      	cmp	r3, #0
  401844:	f000 8123 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  401848:	4b6f      	ldr	r3, [pc, #444]	; (401a08 <m2m_wifi_cb+0x2e4>)
  40184a:	681b      	ldr	r3, [r3, #0]
  40184c:	f107 020c 	add.w	r2, r7, #12
  401850:	4611      	mov	r1, r2
  401852:	202f      	movs	r0, #47	; 0x2f
  401854:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  401856:	e11a      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  401858:	79fb      	ldrb	r3, [r7, #7]
  40185a:	2b34      	cmp	r3, #52	; 0x34
  40185c:	d12e      	bne.n	4018bc <m2m_wifi_cb+0x198>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  40185e:	f107 0180 	add.w	r1, r7, #128	; 0x80
  401862:	2300      	movs	r3, #0
  401864:	2204      	movs	r2, #4
  401866:	6838      	ldr	r0, [r7, #0]
  401868:	4c66      	ldr	r4, [pc, #408]	; (401a04 <m2m_wifi_cb+0x2e0>)
  40186a:	47a0      	blx	r4
  40186c:	4603      	mov	r3, r0
  40186e:	2b00      	cmp	r3, #0
  401870:	f040 810d 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  401874:	4866      	ldr	r0, [pc, #408]	; (401a10 <m2m_wifi_cb+0x2ec>)
  401876:	4b67      	ldr	r3, [pc, #412]	; (401a14 <m2m_wifi_cb+0x2f0>)
  401878:	4798      	blx	r3
  40187a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  40187e:	b2d9      	uxtb	r1, r3
  401880:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  401884:	0a1b      	lsrs	r3, r3, #8
  401886:	b2da      	uxtb	r2, r3
  401888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  40188c:	0c1b      	lsrs	r3, r3, #16
  40188e:	b2d8      	uxtb	r0, r3
  401890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  401894:	0e1b      	lsrs	r3, r3, #24
  401896:	9300      	str	r3, [sp, #0]
  401898:	4603      	mov	r3, r0
  40189a:	485f      	ldr	r0, [pc, #380]	; (401a18 <m2m_wifi_cb+0x2f4>)
  40189c:	4c5d      	ldr	r4, [pc, #372]	; (401a14 <m2m_wifi_cb+0x2f0>)
  40189e:	47a0      	blx	r4
  4018a0:	485e      	ldr	r0, [pc, #376]	; (401a1c <m2m_wifi_cb+0x2f8>)
  4018a2:	4b5c      	ldr	r3, [pc, #368]	; (401a14 <m2m_wifi_cb+0x2f0>)
  4018a4:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  4018a6:	4b58      	ldr	r3, [pc, #352]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4018a8:	681b      	ldr	r3, [r3, #0]
  4018aa:	2b00      	cmp	r3, #0
  4018ac:	f000 80ef 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  4018b0:	4b55      	ldr	r3, [pc, #340]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4018b2:	681b      	ldr	r3, [r3, #0]
  4018b4:	2100      	movs	r1, #0
  4018b6:	2034      	movs	r0, #52	; 0x34
  4018b8:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  4018ba:	e0e8      	b.n	401a8e <m2m_wifi_cb+0x36a>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  4018bc:	79fb      	ldrb	r3, [r7, #7]
  4018be:	2b11      	cmp	r3, #17
  4018c0:	d11e      	bne.n	401900 <m2m_wifi_cb+0x1dc>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  4018c2:	4b57      	ldr	r3, [pc, #348]	; (401a20 <m2m_wifi_cb+0x2fc>)
  4018c4:	2200      	movs	r2, #0
  4018c6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  4018c8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
  4018cc:	2300      	movs	r3, #0
  4018ce:	2204      	movs	r2, #4
  4018d0:	6838      	ldr	r0, [r7, #0]
  4018d2:	4c4c      	ldr	r4, [pc, #304]	; (401a04 <m2m_wifi_cb+0x2e0>)
  4018d4:	47a0      	blx	r4
  4018d6:	4603      	mov	r3, r0
  4018d8:	2b00      	cmp	r3, #0
  4018da:	f040 80d8 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			gu8ChNum = strState.u8NumofCh;
  4018de:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
  4018e2:	4b50      	ldr	r3, [pc, #320]	; (401a24 <m2m_wifi_cb+0x300>)
  4018e4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  4018e6:	4b48      	ldr	r3, [pc, #288]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4018e8:	681b      	ldr	r3, [r3, #0]
  4018ea:	2b00      	cmp	r3, #0
  4018ec:	f000 80cf 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  4018f0:	4b45      	ldr	r3, [pc, #276]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4018f2:	681b      	ldr	r3, [r3, #0]
  4018f4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
  4018f8:	4611      	mov	r1, r2
  4018fa:	2011      	movs	r0, #17
  4018fc:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  4018fe:	e0c6      	b.n	401a8e <m2m_wifi_cb+0x36a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  401900:	79fb      	ldrb	r3, [r7, #7]
  401902:	2b13      	cmp	r3, #19
  401904:	d117      	bne.n	401936 <m2m_wifi_cb+0x212>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  401906:	f107 010c 	add.w	r1, r7, #12
  40190a:	2300      	movs	r3, #0
  40190c:	222c      	movs	r2, #44	; 0x2c
  40190e:	6838      	ldr	r0, [r7, #0]
  401910:	4c3c      	ldr	r4, [pc, #240]	; (401a04 <m2m_wifi_cb+0x2e0>)
  401912:	47a0      	blx	r4
  401914:	4603      	mov	r3, r0
  401916:	2b00      	cmp	r3, #0
  401918:	f040 80b9 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  40191c:	4b3a      	ldr	r3, [pc, #232]	; (401a08 <m2m_wifi_cb+0x2e4>)
  40191e:	681b      	ldr	r3, [r3, #0]
  401920:	2b00      	cmp	r3, #0
  401922:	f000 80b4 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  401926:	4b38      	ldr	r3, [pc, #224]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401928:	681b      	ldr	r3, [r3, #0]
  40192a:	f107 020c 	add.w	r2, r7, #12
  40192e:	4611      	mov	r1, r2
  401930:	2013      	movs	r0, #19
  401932:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  401934:	e0ab      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  401936:	79fb      	ldrb	r3, [r7, #7]
  401938:	2b04      	cmp	r3, #4
  40193a:	d117      	bne.n	40196c <m2m_wifi_cb+0x248>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  40193c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
  401940:	2300      	movs	r3, #0
  401942:	2204      	movs	r2, #4
  401944:	6838      	ldr	r0, [r7, #0]
  401946:	4c2f      	ldr	r4, [pc, #188]	; (401a04 <m2m_wifi_cb+0x2e0>)
  401948:	47a0      	blx	r4
  40194a:	4603      	mov	r3, r0
  40194c:	2b00      	cmp	r3, #0
  40194e:	f040 809e 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  401952:	4b2d      	ldr	r3, [pc, #180]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401954:	681b      	ldr	r3, [r3, #0]
  401956:	2b00      	cmp	r3, #0
  401958:	f000 8099 	beq.w	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  40195c:	4b2a      	ldr	r3, [pc, #168]	; (401a08 <m2m_wifi_cb+0x2e4>)
  40195e:	681b      	ldr	r3, [r3, #0]
  401960:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
  401964:	4611      	mov	r1, r2
  401966:	2004      	movs	r0, #4
  401968:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  40196a:	e090      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  40196c:	79fb      	ldrb	r3, [r7, #7]
  40196e:	2b65      	cmp	r3, #101	; 0x65
  401970:	d116      	bne.n	4019a0 <m2m_wifi_cb+0x27c>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  401972:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
  401976:	2300      	movs	r3, #0
  401978:	2204      	movs	r2, #4
  40197a:	6838      	ldr	r0, [r7, #0]
  40197c:	4c21      	ldr	r4, [pc, #132]	; (401a04 <m2m_wifi_cb+0x2e0>)
  40197e:	47a0      	blx	r4
  401980:	4603      	mov	r3, r0
  401982:	2b00      	cmp	r3, #0
  401984:	f040 8083 	bne.w	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
  401988:	4b1f      	ldr	r3, [pc, #124]	; (401a08 <m2m_wifi_cb+0x2e4>)
  40198a:	681b      	ldr	r3, [r3, #0]
  40198c:	2b00      	cmp	r3, #0
  40198e:	d07e      	beq.n	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  401990:	4b1d      	ldr	r3, [pc, #116]	; (401a08 <m2m_wifi_cb+0x2e4>)
  401992:	681b      	ldr	r3, [r3, #0]
  401994:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
  401998:	4611      	mov	r1, r2
  40199a:	2065      	movs	r0, #101	; 0x65
  40199c:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  40199e:	e076      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  4019a0:	79fb      	ldrb	r3, [r7, #7]
  4019a2:	2b09      	cmp	r3, #9
  4019a4:	d115      	bne.n	4019d2 <m2m_wifi_cb+0x2ae>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  4019a6:	f107 010c 	add.w	r1, r7, #12
  4019aa:	2301      	movs	r3, #1
  4019ac:	2264      	movs	r2, #100	; 0x64
  4019ae:	6838      	ldr	r0, [r7, #0]
  4019b0:	4c14      	ldr	r4, [pc, #80]	; (401a04 <m2m_wifi_cb+0x2e0>)
  4019b2:	47a0      	blx	r4
  4019b4:	4603      	mov	r3, r0
  4019b6:	2b00      	cmp	r3, #0
  4019b8:	d169      	bne.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if(gpfAppWifiCb)
  4019ba:	4b13      	ldr	r3, [pc, #76]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4019bc:	681b      	ldr	r3, [r3, #0]
  4019be:	2b00      	cmp	r3, #0
  4019c0:	d065      	beq.n	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  4019c2:	4b11      	ldr	r3, [pc, #68]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4019c4:	681b      	ldr	r3, [r3, #0]
  4019c6:	f107 020c 	add.w	r2, r7, #12
  4019ca:	4611      	mov	r1, r2
  4019cc:	2009      	movs	r0, #9
  4019ce:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  4019d0:	e05d      	b.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  4019d2:	79fb      	ldrb	r3, [r7, #7]
  4019d4:	2b2a      	cmp	r3, #42	; 0x2a
  4019d6:	d127      	bne.n	401a28 <m2m_wifi_cb+0x304>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  4019d8:	f107 0178 	add.w	r1, r7, #120	; 0x78
  4019dc:	2301      	movs	r3, #1
  4019de:	2204      	movs	r2, #4
  4019e0:	6838      	ldr	r0, [r7, #0]
  4019e2:	4c08      	ldr	r4, [pc, #32]	; (401a04 <m2m_wifi_cb+0x2e0>)
  4019e4:	47a0      	blx	r4
  4019e6:	4603      	mov	r3, r0
  4019e8:	2b00      	cmp	r3, #0
  4019ea:	d150      	bne.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if(gpfAppWifiCb)
  4019ec:	4b06      	ldr	r3, [pc, #24]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4019ee:	681b      	ldr	r3, [r3, #0]
  4019f0:	2b00      	cmp	r3, #0
  4019f2:	d04c      	beq.n	401a8e <m2m_wifi_cb+0x36a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  4019f4:	4b04      	ldr	r3, [pc, #16]	; (401a08 <m2m_wifi_cb+0x2e4>)
  4019f6:	681b      	ldr	r3, [r3, #0]
  4019f8:	f107 0278 	add.w	r2, r7, #120	; 0x78
  4019fc:	4611      	mov	r1, r2
  4019fe:	202a      	movs	r0, #42	; 0x2a
  401a00:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  401a02:	e044      	b.n	401a8e <m2m_wifi_cb+0x36a>
  401a04:	004014d9 	.word	0x004014d9
  401a08:	204008fc 	.word	0x204008fc
  401a0c:	00400be9 	.word	0x00400be9
  401a10:	0040e0c0 	.word	0x0040e0c0
  401a14:	004079e5 	.word	0x004079e5
  401a18:	0040e0cc 	.word	0x0040e0cc
  401a1c:	0040e0ec 	.word	0x0040e0ec
  401a20:	204008f9 	.word	0x204008f9
  401a24:	204008f8 	.word	0x204008f8
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  401a28:	79fb      	ldrb	r3, [r7, #7]
  401a2a:	2b20      	cmp	r3, #32
  401a2c:	d121      	bne.n	401a72 <m2m_wifi_cb+0x34e>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  401a2e:	f107 0170 	add.w	r1, r7, #112	; 0x70
  401a32:	2300      	movs	r3, #0
  401a34:	2208      	movs	r2, #8
  401a36:	6838      	ldr	r0, [r7, #0]
  401a38:	4c17      	ldr	r4, [pc, #92]	; (401a98 <m2m_wifi_cb+0x374>)
  401a3a:	47a0      	blx	r4
  401a3c:	4603      	mov	r3, r0
  401a3e:	2b00      	cmp	r3, #0
  401a40:	d125      	bne.n	401a8e <m2m_wifi_cb+0x36a>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  401a42:	683b      	ldr	r3, [r7, #0]
  401a44:	f103 0008 	add.w	r0, r3, #8
  401a48:	6f39      	ldr	r1, [r7, #112]	; 0x70
  401a4a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
  401a4e:	2301      	movs	r3, #1
  401a50:	4c11      	ldr	r4, [pc, #68]	; (401a98 <m2m_wifi_cb+0x374>)
  401a52:	47a0      	blx	r4
  401a54:	4603      	mov	r3, r0
  401a56:	2b00      	cmp	r3, #0
  401a58:	d119      	bne.n	401a8e <m2m_wifi_cb+0x36a>
			{
				if(gpfAppWifiCb)
  401a5a:	4b10      	ldr	r3, [pc, #64]	; (401a9c <m2m_wifi_cb+0x378>)
  401a5c:	681b      	ldr	r3, [r3, #0]
  401a5e:	2b00      	cmp	r3, #0
  401a60:	d015      	beq.n	401a8e <m2m_wifi_cb+0x36a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  401a62:	4b0e      	ldr	r3, [pc, #56]	; (401a9c <m2m_wifi_cb+0x378>)
  401a64:	681b      	ldr	r3, [r3, #0]
  401a66:	f107 0270 	add.w	r2, r7, #112	; 0x70
  401a6a:	4611      	mov	r1, r2
  401a6c:	2020      	movs	r0, #32
  401a6e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
  401a70:	e00d      	b.n	401a8e <m2m_wifi_cb+0x36a>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  401a72:	f44f 7295 	mov.w	r2, #298	; 0x12a
  401a76:	490a      	ldr	r1, [pc, #40]	; (401aa0 <m2m_wifi_cb+0x37c>)
  401a78:	480a      	ldr	r0, [pc, #40]	; (401aa4 <m2m_wifi_cb+0x380>)
  401a7a:	4b0b      	ldr	r3, [pc, #44]	; (401aa8 <m2m_wifi_cb+0x384>)
  401a7c:	4798      	blx	r3
  401a7e:	79fb      	ldrb	r3, [r7, #7]
  401a80:	4619      	mov	r1, r3
  401a82:	480a      	ldr	r0, [pc, #40]	; (401aac <m2m_wifi_cb+0x388>)
  401a84:	4b08      	ldr	r3, [pc, #32]	; (401aa8 <m2m_wifi_cb+0x384>)
  401a86:	4798      	blx	r3
  401a88:	4809      	ldr	r0, [pc, #36]	; (401ab0 <m2m_wifi_cb+0x38c>)
  401a8a:	4b07      	ldr	r3, [pc, #28]	; (401aa8 <m2m_wifi_cb+0x384>)
  401a8c:	4798      	blx	r3
	}
}
  401a8e:	bf00      	nop
  401a90:	37ac      	adds	r7, #172	; 0xac
  401a92:	46bd      	mov	sp, r7
  401a94:	bd90      	pop	{r4, r7, pc}
  401a96:	bf00      	nop
  401a98:	004014d9 	.word	0x004014d9
  401a9c:	204008fc 	.word	0x204008fc
  401aa0:	0040e400 	.word	0x0040e400
  401aa4:	0040e0f0 	.word	0x0040e0f0
  401aa8:	004079e5 	.word	0x004079e5
  401aac:	0040e104 	.word	0x0040e104
  401ab0:	0040e0ec 	.word	0x0040e0ec

00401ab4 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  401ab4:	b590      	push	{r4, r7, lr}
  401ab6:	b08d      	sub	sp, #52	; 0x34
  401ab8:	af00      	add	r7, sp, #0
  401aba:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
  401abc:	2300      	movs	r3, #0
  401abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  401ac2:	2301      	movs	r3, #1
  401ac4:	72fb      	strb	r3, [r7, #11]
	
	if(param == NULL) {
  401ac6:	687b      	ldr	r3, [r7, #4]
  401ac8:	2b00      	cmp	r3, #0
  401aca:	d103      	bne.n	401ad4 <m2m_wifi_init+0x20>
		ret = M2M_ERR_FAIL;
  401acc:	23f4      	movs	r3, #244	; 0xf4
  401ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		goto _EXIT0;
  401ad2:	e06a      	b.n	401baa <m2m_wifi_init+0xf6>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  401ad4:	687b      	ldr	r3, [r7, #4]
  401ad6:	681b      	ldr	r3, [r3, #0]
  401ad8:	4a37      	ldr	r2, [pc, #220]	; (401bb8 <m2m_wifi_init+0x104>)
  401ada:	6013      	str	r3, [r2, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  401adc:	4b37      	ldr	r3, [pc, #220]	; (401bbc <m2m_wifi_init+0x108>)
  401ade:	2200      	movs	r2, #0
  401ae0:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  401ae2:	f107 030b 	add.w	r3, r7, #11
  401ae6:	4618      	mov	r0, r3
  401ae8:	4b35      	ldr	r3, [pc, #212]	; (401bc0 <m2m_wifi_init+0x10c>)
  401aea:	4798      	blx	r3
  401aec:	4603      	mov	r3, r0
  401aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  401af2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
  401af6:	2b00      	cmp	r3, #0
  401af8:	d154      	bne.n	401ba4 <m2m_wifi_init+0xf0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  401afa:	2000      	movs	r0, #0
  401afc:	4b31      	ldr	r3, [pc, #196]	; (401bc4 <m2m_wifi_init+0x110>)
  401afe:	4798      	blx	r3
  401b00:	4603      	mov	r3, r0
  401b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401b06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
  401b0a:	2b00      	cmp	r3, #0
  401b0c:	d145      	bne.n	401b9a <m2m_wifi_init+0xe6>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  401b0e:	492e      	ldr	r1, [pc, #184]	; (401bc8 <m2m_wifi_init+0x114>)
  401b10:	2001      	movs	r0, #1
  401b12:	4b2e      	ldr	r3, [pc, #184]	; (401bcc <m2m_wifi_init+0x118>)
  401b14:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  401b16:	f107 030c 	add.w	r3, r7, #12
  401b1a:	4618      	mov	r0, r3
  401b1c:	4b2c      	ldr	r3, [pc, #176]	; (401bd0 <m2m_wifi_init+0x11c>)
  401b1e:	4798      	blx	r3
  401b20:	4603      	mov	r3, r0
  401b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  401b26:	482b      	ldr	r0, [pc, #172]	; (401bd4 <m2m_wifi_init+0x120>)
  401b28:	4b2b      	ldr	r3, [pc, #172]	; (401bd8 <m2m_wifi_init+0x124>)
  401b2a:	4798      	blx	r3
  401b2c:	7c3b      	ldrb	r3, [r7, #16]
  401b2e:	4619      	mov	r1, r3
  401b30:	7c7b      	ldrb	r3, [r7, #17]
  401b32:	461a      	mov	r2, r3
  401b34:	7cbb      	ldrb	r3, [r7, #18]
  401b36:	4829      	ldr	r0, [pc, #164]	; (401bdc <m2m_wifi_init+0x128>)
  401b38:	4c27      	ldr	r4, [pc, #156]	; (401bd8 <m2m_wifi_init+0x124>)
  401b3a:	47a0      	blx	r4
  401b3c:	4828      	ldr	r0, [pc, #160]	; (401be0 <m2m_wifi_init+0x12c>)
  401b3e:	4b26      	ldr	r3, [pc, #152]	; (401bd8 <m2m_wifi_init+0x124>)
  401b40:	4798      	blx	r3
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  401b42:	4824      	ldr	r0, [pc, #144]	; (401bd4 <m2m_wifi_init+0x120>)
  401b44:	4b24      	ldr	r3, [pc, #144]	; (401bd8 <m2m_wifi_init+0x124>)
  401b46:	4798      	blx	r3
  401b48:	7cfb      	ldrb	r3, [r7, #19]
  401b4a:	4619      	mov	r1, r3
  401b4c:	7d3b      	ldrb	r3, [r7, #20]
  401b4e:	461a      	mov	r2, r3
  401b50:	7d7b      	ldrb	r3, [r7, #21]
  401b52:	4824      	ldr	r0, [pc, #144]	; (401be4 <m2m_wifi_init+0x130>)
  401b54:	4c20      	ldr	r4, [pc, #128]	; (401bd8 <m2m_wifi_init+0x124>)
  401b56:	47a0      	blx	r4
  401b58:	4821      	ldr	r0, [pc, #132]	; (401be0 <m2m_wifi_init+0x12c>)
  401b5a:	4b1f      	ldr	r3, [pc, #124]	; (401bd8 <m2m_wifi_init+0x124>)
  401b5c:	4798      	blx	r3
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  401b5e:	481d      	ldr	r0, [pc, #116]	; (401bd4 <m2m_wifi_init+0x120>)
  401b60:	4b1d      	ldr	r3, [pc, #116]	; (401bd8 <m2m_wifi_init+0x124>)
  401b62:	4798      	blx	r3
  401b64:	2300      	movs	r3, #0
  401b66:	2203      	movs	r2, #3
  401b68:	2113      	movs	r1, #19
  401b6a:	481f      	ldr	r0, [pc, #124]	; (401be8 <m2m_wifi_init+0x134>)
  401b6c:	4c1a      	ldr	r4, [pc, #104]	; (401bd8 <m2m_wifi_init+0x124>)
  401b6e:	47a0      	blx	r4
  401b70:	481b      	ldr	r0, [pc, #108]	; (401be0 <m2m_wifi_init+0x12c>)
  401b72:	4b19      	ldr	r3, [pc, #100]	; (401bd8 <m2m_wifi_init+0x124>)
  401b74:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  401b76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
  401b7a:	f113 0f0d 	cmn.w	r3, #13
  401b7e:	d113      	bne.n	401ba8 <m2m_wifi_init+0xf4>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  401b80:	f240 12d5 	movw	r2, #469	; 0x1d5
  401b84:	4919      	ldr	r1, [pc, #100]	; (401bec <m2m_wifi_init+0x138>)
  401b86:	481a      	ldr	r0, [pc, #104]	; (401bf0 <m2m_wifi_init+0x13c>)
  401b88:	4b13      	ldr	r3, [pc, #76]	; (401bd8 <m2m_wifi_init+0x124>)
  401b8a:	4798      	blx	r3
  401b8c:	4819      	ldr	r0, [pc, #100]	; (401bf4 <m2m_wifi_init+0x140>)
  401b8e:	4b12      	ldr	r3, [pc, #72]	; (401bd8 <m2m_wifi_init+0x124>)
  401b90:	4798      	blx	r3
  401b92:	4813      	ldr	r0, [pc, #76]	; (401be0 <m2m_wifi_init+0x12c>)
  401b94:	4b10      	ldr	r3, [pc, #64]	; (401bd8 <m2m_wifi_init+0x124>)
  401b96:	4798      	blx	r3
	}

	goto _EXIT0;
  401b98:	e006      	b.n	401ba8 <m2m_wifi_init+0xf4>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401b9a:	bf00      	nop
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  401b9c:	2000      	movs	r0, #0
  401b9e:	4b16      	ldr	r3, [pc, #88]	; (401bf8 <m2m_wifi_init+0x144>)
  401ba0:	4798      	blx	r3
  401ba2:	e002      	b.n	401baa <m2m_wifi_init+0xf6>
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  401ba4:	bf00      	nop
  401ba6:	e000      	b.n	401baa <m2m_wifi_init+0xf6>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
  401ba8:	bf00      	nop

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
  401baa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
  401bae:	4618      	mov	r0, r3
  401bb0:	3734      	adds	r7, #52	; 0x34
  401bb2:	46bd      	mov	sp, r7
  401bb4:	bd90      	pop	{r4, r7, pc}
  401bb6:	bf00      	nop
  401bb8:	204008fc 	.word	0x204008fc
  401bbc:	204008f9 	.word	0x204008f9
  401bc0:	00402999 	.word	0x00402999
  401bc4:	00400e31 	.word	0x00400e31
  401bc8:	00401725 	.word	0x00401725
  401bcc:	0040165d 	.word	0x0040165d
  401bd0:	00402871 	.word	0x00402871
  401bd4:	0040e0c0 	.word	0x0040e0c0
  401bd8:	004079e5 	.word	0x004079e5
  401bdc:	0040e23c 	.word	0x0040e23c
  401be0:	0040e0ec 	.word	0x0040e0ec
  401be4:	0040e258 	.word	0x0040e258
  401be8:	0040e274 	.word	0x0040e274
  401bec:	0040e40c 	.word	0x0040e40c
  401bf0:	0040e0f0 	.word	0x0040e0f0
  401bf4:	0040e290 	.word	0x0040e290
  401bf8:	00402ac9 	.word	0x00402ac9

00401bfc <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  401bfc:	b580      	push	{r7, lr}
  401bfe:	b082      	sub	sp, #8
  401c00:	af00      	add	r7, sp, #0
  401c02:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
  401c04:	4b03      	ldr	r3, [pc, #12]	; (401c14 <m2m_wifi_handle_events+0x18>)
  401c06:	4798      	blx	r3
  401c08:	4603      	mov	r3, r0
}
  401c0a:	4618      	mov	r0, r3
  401c0c:	3708      	adds	r7, #8
  401c0e:	46bd      	mov	sp, r7
  401c10:	bd80      	pop	{r7, pc}
  401c12:	bf00      	nop
  401c14:	00401459 	.word	0x00401459

00401c18 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
  401c18:	b590      	push	{r4, r7, lr}
  401c1a:	b087      	sub	sp, #28
  401c1c:	af02      	add	r7, sp, #8
  401c1e:	60f8      	str	r0, [r7, #12]
  401c20:	607b      	str	r3, [r7, #4]
  401c22:	460b      	mov	r3, r1
  401c24:	72fb      	strb	r3, [r7, #11]
  401c26:	4613      	mov	r3, r2
  401c28:	72bb      	strb	r3, [r7, #10]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  401c2a:	7aba      	ldrb	r2, [r7, #10]
  401c2c:	7af9      	ldrb	r1, [r7, #11]
  401c2e:	2300      	movs	r3, #0
  401c30:	9301      	str	r3, [sp, #4]
  401c32:	8c3b      	ldrh	r3, [r7, #32]
  401c34:	9300      	str	r3, [sp, #0]
  401c36:	687b      	ldr	r3, [r7, #4]
  401c38:	68f8      	ldr	r0, [r7, #12]
  401c3a:	4c03      	ldr	r4, [pc, #12]	; (401c48 <m2m_wifi_connect+0x30>)
  401c3c:	47a0      	blx	r4
  401c3e:	4603      	mov	r3, r0
}
  401c40:	4618      	mov	r0, r3
  401c42:	3714      	adds	r7, #20
  401c44:	46bd      	mov	sp, r7
  401c46:	bd90      	pop	{r4, r7, pc}
  401c48:	00401c4d 	.word	0x00401c4d

00401c4c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  401c4c:	b590      	push	{r4, r7, lr}
  401c4e:	b0ab      	sub	sp, #172	; 0xac
  401c50:	af04      	add	r7, sp, #16
  401c52:	60f8      	str	r0, [r7, #12]
  401c54:	607b      	str	r3, [r7, #4]
  401c56:	460b      	mov	r3, r1
  401c58:	72fb      	strb	r3, [r7, #11]
  401c5a:	4613      	mov	r3, r2
  401c5c:	72bb      	strb	r3, [r7, #10]
	sint8				ret = M2M_SUCCESS;
  401c5e:	2300      	movs	r3, #0
  401c60:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  401c64:	7abb      	ldrb	r3, [r7, #10]
  401c66:	2b01      	cmp	r3, #1
  401c68:	d06b      	beq.n	401d42 <m2m_wifi_connect_sc+0xf6>
	{
		if(pvAuthInfo == NULL)
  401c6a:	687b      	ldr	r3, [r7, #4]
  401c6c:	2b00      	cmp	r3, #0
  401c6e:	d10f      	bne.n	401c90 <m2m_wifi_connect_sc+0x44>
		{
			M2M_ERR("Key is not valid\n");
  401c70:	f240 2203 	movw	r2, #515	; 0x203
  401c74:	49ab      	ldr	r1, [pc, #684]	; (401f24 <m2m_wifi_connect_sc+0x2d8>)
  401c76:	48ac      	ldr	r0, [pc, #688]	; (401f28 <m2m_wifi_connect_sc+0x2dc>)
  401c78:	4bac      	ldr	r3, [pc, #688]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401c7a:	4798      	blx	r3
  401c7c:	48ac      	ldr	r0, [pc, #688]	; (401f30 <m2m_wifi_connect_sc+0x2e4>)
  401c7e:	4bab      	ldr	r3, [pc, #684]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401c80:	4798      	blx	r3
  401c82:	48ac      	ldr	r0, [pc, #688]	; (401f34 <m2m_wifi_connect_sc+0x2e8>)
  401c84:	4ba9      	ldr	r3, [pc, #676]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401c86:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
  401c88:	23f4      	movs	r3, #244	; 0xf4
  401c8a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
  401c8e:	e186      	b.n	401f9e <m2m_wifi_connect_sc+0x352>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  401c90:	7abb      	ldrb	r3, [r7, #10]
  401c92:	2b02      	cmp	r3, #2
  401c94:	d155      	bne.n	401d42 <m2m_wifi_connect_sc+0xf6>
  401c96:	6878      	ldr	r0, [r7, #4]
  401c98:	4ba7      	ldr	r3, [pc, #668]	; (401f38 <m2m_wifi_connect_sc+0x2ec>)
  401c9a:	4798      	blx	r3
  401c9c:	4603      	mov	r3, r0
  401c9e:	2b40      	cmp	r3, #64	; 0x40
  401ca0:	d14f      	bne.n	401d42 <m2m_wifi_connect_sc+0xf6>
		{
			uint8 i = 0;
  401ca2:	2300      	movs	r3, #0
  401ca4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			uint8* pu8Psk = (uint8*)pvAuthInfo;
  401ca8:	687b      	ldr	r3, [r7, #4]
  401caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			while(i < (M2M_MAX_PSK_LEN-1))
  401cae:	e044      	b.n	401d3a <m2m_wifi_connect_sc+0xee>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  401cb0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401cb4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  401cb8:	4413      	add	r3, r2
  401cba:	781b      	ldrb	r3, [r3, #0]
  401cbc:	2b2f      	cmp	r3, #47	; 0x2f
  401cbe:	d927      	bls.n	401d10 <m2m_wifi_connect_sc+0xc4>
  401cc0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401cc4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  401cc8:	4413      	add	r3, r2
  401cca:	781b      	ldrb	r3, [r3, #0]
  401ccc:	2b39      	cmp	r3, #57	; 0x39
  401cce:	d907      	bls.n	401ce0 <m2m_wifi_connect_sc+0x94>
  401cd0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401cd4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  401cd8:	4413      	add	r3, r2
  401cda:	781b      	ldrb	r3, [r3, #0]
  401cdc:	2b40      	cmp	r3, #64	; 0x40
  401cde:	d917      	bls.n	401d10 <m2m_wifi_connect_sc+0xc4>
  401ce0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401ce4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  401ce8:	4413      	add	r3, r2
  401cea:	781b      	ldrb	r3, [r3, #0]
  401cec:	2b46      	cmp	r3, #70	; 0x46
  401cee:	d907      	bls.n	401d00 <m2m_wifi_connect_sc+0xb4>
  401cf0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401cf4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  401cf8:	4413      	add	r3, r2
  401cfa:	781b      	ldrb	r3, [r3, #0]
  401cfc:	2b60      	cmp	r3, #96	; 0x60
  401cfe:	d907      	bls.n	401d10 <m2m_wifi_connect_sc+0xc4>
  401d00:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401d04:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  401d08:	4413      	add	r3, r2
  401d0a:	781b      	ldrb	r3, [r3, #0]
  401d0c:	2b66      	cmp	r3, #102	; 0x66
  401d0e:	d90f      	bls.n	401d30 <m2m_wifi_connect_sc+0xe4>
				{
					M2M_ERR("Invalid Key\n");
  401d10:	f240 220f 	movw	r2, #527	; 0x20f
  401d14:	4983      	ldr	r1, [pc, #524]	; (401f24 <m2m_wifi_connect_sc+0x2d8>)
  401d16:	4884      	ldr	r0, [pc, #528]	; (401f28 <m2m_wifi_connect_sc+0x2dc>)
  401d18:	4b84      	ldr	r3, [pc, #528]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401d1a:	4798      	blx	r3
  401d1c:	4887      	ldr	r0, [pc, #540]	; (401f3c <m2m_wifi_connect_sc+0x2f0>)
  401d1e:	4b83      	ldr	r3, [pc, #524]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401d20:	4798      	blx	r3
  401d22:	4884      	ldr	r0, [pc, #528]	; (401f34 <m2m_wifi_connect_sc+0x2e8>)
  401d24:	4b81      	ldr	r3, [pc, #516]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401d26:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
  401d28:	23f4      	movs	r3, #244	; 0xf4
  401d2a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					goto ERR1;
  401d2e:	e136      	b.n	401f9e <m2m_wifi_connect_sc+0x352>
				}
				i++;
  401d30:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401d34:	3301      	adds	r3, #1
  401d36:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
  401d3a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
  401d3e:	2b3f      	cmp	r3, #63	; 0x3f
  401d40:	d9b6      	bls.n	401cb0 <m2m_wifi_connect_sc+0x64>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  401d42:	7afb      	ldrb	r3, [r7, #11]
  401d44:	2b00      	cmp	r3, #0
  401d46:	d002      	beq.n	401d4e <m2m_wifi_connect_sc+0x102>
  401d48:	7afb      	ldrb	r3, [r7, #11]
  401d4a:	2b20      	cmp	r3, #32
  401d4c:	d90f      	bls.n	401d6e <m2m_wifi_connect_sc+0x122>
	{
		M2M_ERR("SSID LEN INVALID\n");
  401d4e:	f240 2219 	movw	r2, #537	; 0x219
  401d52:	4974      	ldr	r1, [pc, #464]	; (401f24 <m2m_wifi_connect_sc+0x2d8>)
  401d54:	4874      	ldr	r0, [pc, #464]	; (401f28 <m2m_wifi_connect_sc+0x2dc>)
  401d56:	4b75      	ldr	r3, [pc, #468]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401d58:	4798      	blx	r3
  401d5a:	4879      	ldr	r0, [pc, #484]	; (401f40 <m2m_wifi_connect_sc+0x2f4>)
  401d5c:	4b73      	ldr	r3, [pc, #460]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401d5e:	4798      	blx	r3
  401d60:	4874      	ldr	r0, [pc, #464]	; (401f34 <m2m_wifi_connect_sc+0x2e8>)
  401d62:	4b72      	ldr	r3, [pc, #456]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401d64:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
  401d66:	23f4      	movs	r3, #244	; 0xf4
  401d68:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		goto ERR1;
  401d6c:	e117      	b.n	401f9e <m2m_wifi_connect_sc+0x352>
	}

	if(u16Ch>M2M_WIFI_CH_14)
  401d6e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
  401d72:	2b0d      	cmp	r3, #13
  401d74:	d913      	bls.n	401d9e <m2m_wifi_connect_sc+0x152>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  401d76:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
  401d7a:	2bff      	cmp	r3, #255	; 0xff
  401d7c:	d00f      	beq.n	401d9e <m2m_wifi_connect_sc+0x152>
		{
			M2M_ERR("CH INVALID\n");
  401d7e:	f240 2222 	movw	r2, #546	; 0x222
  401d82:	4968      	ldr	r1, [pc, #416]	; (401f24 <m2m_wifi_connect_sc+0x2d8>)
  401d84:	4868      	ldr	r0, [pc, #416]	; (401f28 <m2m_wifi_connect_sc+0x2dc>)
  401d86:	4b69      	ldr	r3, [pc, #420]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401d88:	4798      	blx	r3
  401d8a:	486e      	ldr	r0, [pc, #440]	; (401f44 <m2m_wifi_connect_sc+0x2f8>)
  401d8c:	4b67      	ldr	r3, [pc, #412]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401d8e:	4798      	blx	r3
  401d90:	4868      	ldr	r0, [pc, #416]	; (401f34 <m2m_wifi_connect_sc+0x2e8>)
  401d92:	4b66      	ldr	r3, [pc, #408]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401d94:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
  401d96:	23f4      	movs	r3, #244	; 0xf4
  401d98:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
  401d9c:	e0ff      	b.n	401f9e <m2m_wifi_connect_sc+0x352>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  401d9e:	7afa      	ldrb	r2, [r7, #11]
  401da0:	f107 0314 	add.w	r3, r7, #20
  401da4:	3346      	adds	r3, #70	; 0x46
  401da6:	68f9      	ldr	r1, [r7, #12]
  401da8:	4618      	mov	r0, r3
  401daa:	4b67      	ldr	r3, [pc, #412]	; (401f48 <m2m_wifi_connect_sc+0x2fc>)
  401dac:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  401dae:	7afb      	ldrb	r3, [r7, #11]
  401db0:	f107 0298 	add.w	r2, r7, #152	; 0x98
  401db4:	4413      	add	r3, r2
  401db6:	2200      	movs	r2, #0
  401db8:	f803 2c3e 	strb.w	r2, [r3, #-62]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  401dbc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
  401dc0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  401dc4:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
  401dc8:	2b00      	cmp	r3, #0
  401dca:	bf14      	ite	ne
  401dcc:	2301      	movne	r3, #1
  401dce:	2300      	moveq	r3, #0
  401dd0:	b2db      	uxtb	r3, r3
  401dd2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
  401dd6:	f107 0314 	add.w	r3, r7, #20
  401dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	pstrAuthInfo->u8SecType		= u8SecType;
  401dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  401de2:	7aba      	ldrb	r2, [r7, #10]
  401de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	if(u8SecType == M2M_WIFI_SEC_WEP)
  401de8:	7abb      	ldrb	r3, [r7, #10]
  401dea:	2b03      	cmp	r3, #3
  401dec:	d163      	bne.n	401eb6 <m2m_wifi_connect_sc+0x26a>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
  401dee:	687b      	ldr	r3, [r7, #4]
  401df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
  401df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  401df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  401dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  401e00:	781b      	ldrb	r3, [r3, #0]
  401e02:	3b01      	subs	r3, #1
  401e04:	b2da      	uxtb	r2, r3
  401e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  401e0a:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  401e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  401e10:	781b      	ldrb	r3, [r3, #0]
  401e12:	2b03      	cmp	r3, #3
  401e14:	d913      	bls.n	401e3e <m2m_wifi_connect_sc+0x1f2>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  401e16:	f240 2239 	movw	r2, #569	; 0x239
  401e1a:	4942      	ldr	r1, [pc, #264]	; (401f24 <m2m_wifi_connect_sc+0x2d8>)
  401e1c:	4842      	ldr	r0, [pc, #264]	; (401f28 <m2m_wifi_connect_sc+0x2dc>)
  401e1e:	4b43      	ldr	r3, [pc, #268]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401e20:	4798      	blx	r3
  401e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  401e26:	781b      	ldrb	r3, [r3, #0]
  401e28:	4619      	mov	r1, r3
  401e2a:	4848      	ldr	r0, [pc, #288]	; (401f4c <m2m_wifi_connect_sc+0x300>)
  401e2c:	4b3f      	ldr	r3, [pc, #252]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401e2e:	4798      	blx	r3
  401e30:	4840      	ldr	r0, [pc, #256]	; (401f34 <m2m_wifi_connect_sc+0x2e8>)
  401e32:	4b3e      	ldr	r3, [pc, #248]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401e34:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
  401e36:	23f4      	movs	r3, #244	; 0xf4
  401e38:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
  401e3c:	e0af      	b.n	401f9e <m2m_wifi_connect_sc+0x352>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  401e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  401e42:	785b      	ldrb	r3, [r3, #1]
  401e44:	3b01      	subs	r3, #1
  401e46:	b2da      	uxtb	r2, r3
  401e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  401e4c:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  401e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  401e52:	785b      	ldrb	r3, [r3, #1]
  401e54:	2b0a      	cmp	r3, #10
  401e56:	d018      	beq.n	401e8a <m2m_wifi_connect_sc+0x23e>
  401e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  401e5c:	785b      	ldrb	r3, [r3, #1]
  401e5e:	2b1a      	cmp	r3, #26
  401e60:	d013      	beq.n	401e8a <m2m_wifi_connect_sc+0x23e>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  401e62:	f44f 7210 	mov.w	r2, #576	; 0x240
  401e66:	492f      	ldr	r1, [pc, #188]	; (401f24 <m2m_wifi_connect_sc+0x2d8>)
  401e68:	482f      	ldr	r0, [pc, #188]	; (401f28 <m2m_wifi_connect_sc+0x2dc>)
  401e6a:	4b30      	ldr	r3, [pc, #192]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401e6c:	4798      	blx	r3
  401e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  401e72:	785b      	ldrb	r3, [r3, #1]
  401e74:	4619      	mov	r1, r3
  401e76:	4836      	ldr	r0, [pc, #216]	; (401f50 <m2m_wifi_connect_sc+0x304>)
  401e78:	4b2c      	ldr	r3, [pc, #176]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401e7a:	4798      	blx	r3
  401e7c:	482d      	ldr	r0, [pc, #180]	; (401f34 <m2m_wifi_connect_sc+0x2e8>)
  401e7e:	4b2b      	ldr	r3, [pc, #172]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401e80:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
  401e82:	23f4      	movs	r3, #244	; 0xf4
  401e84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
  401e88:	e089      	b.n	401f9e <m2m_wifi_connect_sc+0x352>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  401e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  401e8e:	1c98      	adds	r0, r3, #2
  401e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  401e94:	1c99      	adds	r1, r3, #2
  401e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  401e9a:	785b      	ldrb	r3, [r3, #1]
  401e9c:	461a      	mov	r2, r3
  401e9e:	4b2a      	ldr	r3, [pc, #168]	; (401f48 <m2m_wifi_connect_sc+0x2fc>)
  401ea0:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  401ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  401ea6:	785b      	ldrb	r3, [r3, #1]
  401ea8:	461a      	mov	r2, r3
  401eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  401eae:	4413      	add	r3, r2
  401eb0:	2200      	movs	r2, #0
  401eb2:	709a      	strb	r2, [r3, #2]
  401eb4:	e063      	b.n	401f7e <m2m_wifi_connect_sc+0x332>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  401eb6:	7abb      	ldrb	r3, [r7, #10]
  401eb8:	2b02      	cmp	r3, #2
  401eba:	d127      	bne.n	401f0c <m2m_wifi_connect_sc+0x2c0>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  401ebc:	6878      	ldr	r0, [r7, #4]
  401ebe:	4b1e      	ldr	r3, [pc, #120]	; (401f38 <m2m_wifi_connect_sc+0x2ec>)
  401ec0:	4798      	blx	r3
  401ec2:	4603      	mov	r3, r0
  401ec4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  401ec8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
  401ecc:	2b00      	cmp	r3, #0
  401ece:	d003      	beq.n	401ed8 <m2m_wifi_connect_sc+0x28c>
  401ed0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
  401ed4:	2b40      	cmp	r3, #64	; 0x40
  401ed6:	d90f      	bls.n	401ef8 <m2m_wifi_connect_sc+0x2ac>
		{
			M2M_ERR("Incorrect PSK key length\n");
  401ed8:	f240 224f 	movw	r2, #591	; 0x24f
  401edc:	4911      	ldr	r1, [pc, #68]	; (401f24 <m2m_wifi_connect_sc+0x2d8>)
  401ede:	4812      	ldr	r0, [pc, #72]	; (401f28 <m2m_wifi_connect_sc+0x2dc>)
  401ee0:	4b12      	ldr	r3, [pc, #72]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401ee2:	4798      	blx	r3
  401ee4:	481b      	ldr	r0, [pc, #108]	; (401f54 <m2m_wifi_connect_sc+0x308>)
  401ee6:	4b11      	ldr	r3, [pc, #68]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401ee8:	4798      	blx	r3
  401eea:	4812      	ldr	r0, [pc, #72]	; (401f34 <m2m_wifi_connect_sc+0x2e8>)
  401eec:	4b0f      	ldr	r3, [pc, #60]	; (401f2c <m2m_wifi_connect_sc+0x2e0>)
  401eee:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
  401ef0:	23f4      	movs	r3, #244	; 0xf4
  401ef2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
  401ef6:	e052      	b.n	401f9e <m2m_wifi_connect_sc+0x352>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  401ef8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  401efc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
  401f00:	3301      	adds	r3, #1
  401f02:	461a      	mov	r2, r3
  401f04:	6879      	ldr	r1, [r7, #4]
  401f06:	4b10      	ldr	r3, [pc, #64]	; (401f48 <m2m_wifi_connect_sc+0x2fc>)
  401f08:	4798      	blx	r3
  401f0a:	e038      	b.n	401f7e <m2m_wifi_connect_sc+0x332>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  401f0c:	7abb      	ldrb	r3, [r7, #10]
  401f0e:	2b04      	cmp	r3, #4
  401f10:	d122      	bne.n	401f58 <m2m_wifi_connect_sc+0x30c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  401f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  401f16:	223e      	movs	r2, #62	; 0x3e
  401f18:	6879      	ldr	r1, [r7, #4]
  401f1a:	4618      	mov	r0, r3
  401f1c:	4b0a      	ldr	r3, [pc, #40]	; (401f48 <m2m_wifi_connect_sc+0x2fc>)
  401f1e:	4798      	blx	r3
  401f20:	e02d      	b.n	401f7e <m2m_wifi_connect_sc+0x332>
  401f22:	bf00      	nop
  401f24:	0040e41c 	.word	0x0040e41c
  401f28:	0040e0f0 	.word	0x0040e0f0
  401f2c:	004079e5 	.word	0x004079e5
  401f30:	0040e2ac 	.word	0x0040e2ac
  401f34:	0040e0ec 	.word	0x0040e0ec
  401f38:	00400c25 	.word	0x00400c25
  401f3c:	0040e2c0 	.word	0x0040e2c0
  401f40:	0040e2d0 	.word	0x0040e2d0
  401f44:	0040e2e4 	.word	0x0040e2e4
  401f48:	00400ba9 	.word	0x00400ba9
  401f4c:	0040e2f0 	.word	0x0040e2f0
  401f50:	0040e30c 	.word	0x0040e30c
  401f54:	0040e328 	.word	0x0040e328
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  401f58:	7abb      	ldrb	r3, [r7, #10]
  401f5a:	2b01      	cmp	r3, #1
  401f5c:	d00f      	beq.n	401f7e <m2m_wifi_connect_sc+0x332>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
  401f5e:	f240 225f 	movw	r2, #607	; 0x25f
  401f62:	4912      	ldr	r1, [pc, #72]	; (401fac <m2m_wifi_connect_sc+0x360>)
  401f64:	4812      	ldr	r0, [pc, #72]	; (401fb0 <m2m_wifi_connect_sc+0x364>)
  401f66:	4b13      	ldr	r3, [pc, #76]	; (401fb4 <m2m_wifi_connect_sc+0x368>)
  401f68:	4798      	blx	r3
  401f6a:	4813      	ldr	r0, [pc, #76]	; (401fb8 <m2m_wifi_connect_sc+0x36c>)
  401f6c:	4b11      	ldr	r3, [pc, #68]	; (401fb4 <m2m_wifi_connect_sc+0x368>)
  401f6e:	4798      	blx	r3
  401f70:	4812      	ldr	r0, [pc, #72]	; (401fbc <m2m_wifi_connect_sc+0x370>)
  401f72:	4b10      	ldr	r3, [pc, #64]	; (401fb4 <m2m_wifi_connect_sc+0x368>)
  401f74:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
  401f76:	23f4      	movs	r3, #244	; 0xf4
  401f78:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		goto ERR1;
  401f7c:	e00f      	b.n	401f9e <m2m_wifi_connect_sc+0x352>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  401f7e:	f107 0214 	add.w	r2, r7, #20
  401f82:	2300      	movs	r3, #0
  401f84:	9302      	str	r3, [sp, #8]
  401f86:	2300      	movs	r3, #0
  401f88:	9301      	str	r3, [sp, #4]
  401f8a:	2300      	movs	r3, #0
  401f8c:	9300      	str	r3, [sp, #0]
  401f8e:	236c      	movs	r3, #108	; 0x6c
  401f90:	2128      	movs	r1, #40	; 0x28
  401f92:	2001      	movs	r0, #1
  401f94:	4c0a      	ldr	r4, [pc, #40]	; (401fc0 <m2m_wifi_connect_sc+0x374>)
  401f96:	47a0      	blx	r4
  401f98:	4603      	mov	r3, r0
  401f9a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

ERR1:
	return ret;
  401f9e:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
  401fa2:	4618      	mov	r0, r3
  401fa4:	379c      	adds	r7, #156	; 0x9c
  401fa6:	46bd      	mov	sp, r7
  401fa8:	bd90      	pop	{r4, r7, pc}
  401faa:	bf00      	nop
  401fac:	0040e41c 	.word	0x0040e41c
  401fb0:	0040e0f0 	.word	0x0040e0f0
  401fb4:	004079e5 	.word	0x004079e5
  401fb8:	0040e344 	.word	0x0040e344
  401fbc:	0040e0ec 	.word	0x0040e0ec
  401fc0:	00400e95 	.word	0x00400e95

00401fc4 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
  401fc4:	b480      	push	{r7}
  401fc6:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
  401fc8:	2300      	movs	r3, #0
}
  401fca:	4618      	mov	r0, r3
  401fcc:	46bd      	mov	sp, r7
  401fce:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fd2:	4770      	bx	lr

00401fd4 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  401fd4:	b580      	push	{r7, lr}
  401fd6:	b086      	sub	sp, #24
  401fd8:	af00      	add	r7, sp, #0
  401fda:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
  401fdc:	2300      	movs	r3, #0
  401fde:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
  401fe0:	687b      	ldr	r3, [r7, #4]
  401fe2:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  401fe4:	6939      	ldr	r1, [r7, #16]
  401fe6:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
  401fea:	4b10      	ldr	r3, [pc, #64]	; (40202c <chip_apply_conf+0x58>)
  401fec:	4798      	blx	r3
		if(val32 != 0) {		
  401fee:	693b      	ldr	r3, [r7, #16]
  401ff0:	2b00      	cmp	r3, #0
  401ff2:	d013      	beq.n	40201c <chip_apply_conf+0x48>
			uint32 reg = 0;
  401ff4:	2300      	movs	r3, #0
  401ff6:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  401ff8:	f107 030c 	add.w	r3, r7, #12
  401ffc:	4619      	mov	r1, r3
  401ffe:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
  402002:	4b0b      	ldr	r3, [pc, #44]	; (402030 <chip_apply_conf+0x5c>)
  402004:	4798      	blx	r3
  402006:	4603      	mov	r3, r0
  402008:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
  40200a:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40200e:	2b00      	cmp	r3, #0
  402010:	d1e8      	bne.n	401fe4 <chip_apply_conf+0x10>
				if(reg == val32)
  402012:	68fa      	ldr	r2, [r7, #12]
  402014:	693b      	ldr	r3, [r7, #16]
  402016:	429a      	cmp	r2, r3
  402018:	d002      	beq.n	402020 <chip_apply_conf+0x4c>
					break;
			}
		} else {
			break;
		}
	} while(1);
  40201a:	e7e3      	b.n	401fe4 <chip_apply_conf+0x10>
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
			}
		} else {
			break;
  40201c:	bf00      	nop
  40201e:	e000      	b.n	402022 <chip_apply_conf+0x4e>
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
  402020:	bf00      	nop
		} else {
			break;
		}
	} while(1);

	return M2M_SUCCESS;
  402022:	2300      	movs	r3, #0
}
  402024:	4618      	mov	r0, r3
  402026:	3718      	adds	r7, #24
  402028:	46bd      	mov	sp, r7
  40202a:	bd80      	pop	{r7, pc}
  40202c:	004026d1 	.word	0x004026d1
  402030:	004026b1 	.word	0x004026b1

00402034 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  402034:	b580      	push	{r7, lr}
  402036:	b084      	sub	sp, #16
  402038:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
  40203a:	2300      	movs	r3, #0
  40203c:	73fb      	strb	r3, [r7, #15]
	uint32 reg, clk_status_reg,trials = 0;
  40203e:	2300      	movs	r3, #0
  402040:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  402042:	2001      	movs	r0, #1
  402044:	4b5a      	ldr	r3, [pc, #360]	; (4021b0 <nm_clkless_wake+0x17c>)
  402046:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  402048:	1d3b      	adds	r3, r7, #4
  40204a:	4619      	mov	r1, r3
  40204c:	2001      	movs	r0, #1
  40204e:	4b59      	ldr	r3, [pc, #356]	; (4021b4 <nm_clkless_wake+0x180>)
  402050:	4798      	blx	r3
  402052:	4603      	mov	r3, r0
  402054:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS) {
  402056:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40205a:	2b00      	cmp	r3, #0
  40205c:	d00b      	beq.n	402076 <nm_clkless_wake+0x42>
		M2M_ERR("Bus error (1). Wake up failed\n");
  40205e:	2272      	movs	r2, #114	; 0x72
  402060:	4955      	ldr	r1, [pc, #340]	; (4021b8 <nm_clkless_wake+0x184>)
  402062:	4856      	ldr	r0, [pc, #344]	; (4021bc <nm_clkless_wake+0x188>)
  402064:	4b56      	ldr	r3, [pc, #344]	; (4021c0 <nm_clkless_wake+0x18c>)
  402066:	4798      	blx	r3
  402068:	4856      	ldr	r0, [pc, #344]	; (4021c4 <nm_clkless_wake+0x190>)
  40206a:	4b55      	ldr	r3, [pc, #340]	; (4021c0 <nm_clkless_wake+0x18c>)
  40206c:	4798      	blx	r3
  40206e:	4856      	ldr	r0, [pc, #344]	; (4021c8 <nm_clkless_wake+0x194>)
  402070:	4b53      	ldr	r3, [pc, #332]	; (4021c0 <nm_clkless_wake+0x18c>)
  402072:	4798      	blx	r3
		goto _WAKE_EXIT;
  402074:	e095      	b.n	4021a2 <nm_clkless_wake+0x16e>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  402076:	687b      	ldr	r3, [r7, #4]
  402078:	f043 0302 	orr.w	r3, r3, #2
  40207c:	4619      	mov	r1, r3
  40207e:	2001      	movs	r0, #1
  402080:	4b52      	ldr	r3, [pc, #328]	; (4021cc <nm_clkless_wake+0x198>)
  402082:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  402084:	2001      	movs	r0, #1
  402086:	4b4a      	ldr	r3, [pc, #296]	; (4021b0 <nm_clkless_wake+0x17c>)
  402088:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40208a:	4b51      	ldr	r3, [pc, #324]	; (4021d0 <nm_clkless_wake+0x19c>)
  40208c:	681b      	ldr	r3, [r3, #0]
  40208e:	463a      	mov	r2, r7
  402090:	4611      	mov	r1, r2
  402092:	4618      	mov	r0, r3
  402094:	4b47      	ldr	r3, [pc, #284]	; (4021b4 <nm_clkless_wake+0x180>)
  402096:	4798      	blx	r3
  402098:	4603      	mov	r3, r0
  40209a:	73fb      	strb	r3, [r7, #15]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40209c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4020a0:	2b00      	cmp	r3, #0
  4020a2:	d106      	bne.n	4020b2 <nm_clkless_wake+0x7e>
  4020a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4020a8:	2b00      	cmp	r3, #0
  4020aa:	d155      	bne.n	402158 <nm_clkless_wake+0x124>
  4020ac:	683b      	ldr	r3, [r7, #0]
  4020ae:	2b00      	cmp	r3, #0
  4020b0:	d152      	bne.n	402158 <nm_clkless_wake+0x124>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  4020b2:	4b47      	ldr	r3, [pc, #284]	; (4021d0 <nm_clkless_wake+0x19c>)
  4020b4:	220e      	movs	r2, #14
  4020b6:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  4020b8:	2001      	movs	r0, #1
  4020ba:	4b3d      	ldr	r3, [pc, #244]	; (4021b0 <nm_clkless_wake+0x17c>)
  4020bc:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4020be:	4b44      	ldr	r3, [pc, #272]	; (4021d0 <nm_clkless_wake+0x19c>)
  4020c0:	681b      	ldr	r3, [r3, #0]
  4020c2:	463a      	mov	r2, r7
  4020c4:	4611      	mov	r1, r2
  4020c6:	4618      	mov	r0, r3
  4020c8:	4b3a      	ldr	r3, [pc, #232]	; (4021b4 <nm_clkless_wake+0x180>)
  4020ca:	4798      	blx	r3
  4020cc:	4603      	mov	r3, r0
  4020ce:	73fb      	strb	r3, [r7, #15]
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4020d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4020d4:	2b00      	cmp	r3, #0
  4020d6:	d106      	bne.n	4020e6 <nm_clkless_wake+0xb2>
  4020d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4020dc:	2b00      	cmp	r3, #0
  4020de:	d13b      	bne.n	402158 <nm_clkless_wake+0x124>
  4020e0:	683b      	ldr	r3, [r7, #0]
  4020e2:	2b00      	cmp	r3, #0
  4020e4:	d138      	bne.n	402158 <nm_clkless_wake+0x124>
				 
				clk_status_reg_adr = 0x13;
  4020e6:	4b3a      	ldr	r3, [pc, #232]	; (4021d0 <nm_clkless_wake+0x19c>)
  4020e8:	2213      	movs	r2, #19
  4020ea:	601a      	str	r2, [r3, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  4020ec:	2001      	movs	r0, #1
  4020ee:	4b30      	ldr	r3, [pc, #192]	; (4021b0 <nm_clkless_wake+0x17c>)
  4020f0:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4020f2:	4b37      	ldr	r3, [pc, #220]	; (4021d0 <nm_clkless_wake+0x19c>)
  4020f4:	681b      	ldr	r3, [r3, #0]
  4020f6:	463a      	mov	r2, r7
  4020f8:	4611      	mov	r1, r2
  4020fa:	4618      	mov	r0, r3
  4020fc:	4b2d      	ldr	r3, [pc, #180]	; (4021b4 <nm_clkless_wake+0x180>)
  4020fe:	4798      	blx	r3
  402100:	4603      	mov	r3, r0
  402102:	73fb      	strb	r3, [r7, #15]
			
				if(ret != M2M_SUCCESS) {
  402104:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402108:	2b00      	cmp	r3, #0
  40210a:	d025      	beq.n	402158 <nm_clkless_wake+0x124>
					M2M_ERR("Bus error (2). Wake up failed\n");
  40210c:	2296      	movs	r2, #150	; 0x96
  40210e:	492a      	ldr	r1, [pc, #168]	; (4021b8 <nm_clkless_wake+0x184>)
  402110:	482a      	ldr	r0, [pc, #168]	; (4021bc <nm_clkless_wake+0x188>)
  402112:	4b2b      	ldr	r3, [pc, #172]	; (4021c0 <nm_clkless_wake+0x18c>)
  402114:	4798      	blx	r3
  402116:	482f      	ldr	r0, [pc, #188]	; (4021d4 <nm_clkless_wake+0x1a0>)
  402118:	4b29      	ldr	r3, [pc, #164]	; (4021c0 <nm_clkless_wake+0x18c>)
  40211a:	4798      	blx	r3
  40211c:	482a      	ldr	r0, [pc, #168]	; (4021c8 <nm_clkless_wake+0x194>)
  40211e:	4b28      	ldr	r3, [pc, #160]	; (4021c0 <nm_clkless_wake+0x18c>)
  402120:	4798      	blx	r3
					goto _WAKE_EXIT;
  402122:	e03e      	b.n	4021a2 <nm_clkless_wake+0x16e>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  402124:	2002      	movs	r0, #2
  402126:	4b22      	ldr	r3, [pc, #136]	; (4021b0 <nm_clkless_wake+0x17c>)
  402128:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40212a:	4b29      	ldr	r3, [pc, #164]	; (4021d0 <nm_clkless_wake+0x19c>)
  40212c:	681b      	ldr	r3, [r3, #0]
  40212e:	463a      	mov	r2, r7
  402130:	4611      	mov	r1, r2
  402132:	4618      	mov	r0, r3
  402134:	4b1f      	ldr	r3, [pc, #124]	; (4021b4 <nm_clkless_wake+0x180>)
  402136:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  402138:	683b      	ldr	r3, [r7, #0]
  40213a:	f003 0304 	and.w	r3, r3, #4
  40213e:	2b00      	cmp	r3, #0
  402140:	d10a      	bne.n	402158 <nm_clkless_wake+0x124>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  402142:	22aa      	movs	r2, #170	; 0xaa
  402144:	491c      	ldr	r1, [pc, #112]	; (4021b8 <nm_clkless_wake+0x184>)
  402146:	481d      	ldr	r0, [pc, #116]	; (4021bc <nm_clkless_wake+0x188>)
  402148:	4b1d      	ldr	r3, [pc, #116]	; (4021c0 <nm_clkless_wake+0x18c>)
  40214a:	4798      	blx	r3
  40214c:	4822      	ldr	r0, [pc, #136]	; (4021d8 <nm_clkless_wake+0x1a4>)
  40214e:	4b1c      	ldr	r3, [pc, #112]	; (4021c0 <nm_clkless_wake+0x18c>)
  402150:	4798      	blx	r3
  402152:	481d      	ldr	r0, [pc, #116]	; (4021c8 <nm_clkless_wake+0x194>)
  402154:	4b1a      	ldr	r3, [pc, #104]	; (4021c0 <nm_clkless_wake+0x18c>)
  402156:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  402158:	683b      	ldr	r3, [r7, #0]
  40215a:	f003 0304 	and.w	r3, r3, #4
  40215e:	2b00      	cmp	r3, #0
  402160:	d10d      	bne.n	40217e <nm_clkless_wake+0x14a>
  402162:	68bb      	ldr	r3, [r7, #8]
  402164:	3301      	adds	r3, #1
  402166:	60bb      	str	r3, [r7, #8]
  402168:	68b9      	ldr	r1, [r7, #8]
  40216a:	4b1c      	ldr	r3, [pc, #112]	; (4021dc <nm_clkless_wake+0x1a8>)
  40216c:	fba3 2301 	umull	r2, r3, r3, r1
  402170:	085a      	lsrs	r2, r3, #1
  402172:	4613      	mov	r3, r2
  402174:	005b      	lsls	r3, r3, #1
  402176:	4413      	add	r3, r2
  402178:	1aca      	subs	r2, r1, r3
  40217a:	2a00      	cmp	r2, #0
  40217c:	d0d2      	beq.n	402124 <nm_clkless_wake+0xf0>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
  40217e:	683b      	ldr	r3, [r7, #0]
  402180:	f003 0304 	and.w	r3, r3, #4
  402184:	2b00      	cmp	r3, #0
  402186:	d106      	bne.n	402196 <nm_clkless_wake+0x162>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  402188:	687b      	ldr	r3, [r7, #4]
  40218a:	f043 0302 	orr.w	r3, r3, #2
  40218e:	4619      	mov	r1, r3
  402190:	2001      	movs	r0, #1
  402192:	4b0e      	ldr	r3, [pc, #56]	; (4021cc <nm_clkless_wake+0x198>)
  402194:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
  402196:	683b      	ldr	r3, [r7, #0]
  402198:	f003 0304 	and.w	r3, r3, #4
  40219c:	2b00      	cmp	r3, #0
  40219e:	f43f af6a 	beq.w	402076 <nm_clkless_wake+0x42>

_WAKE_EXIT:
	return ret;
  4021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  4021a6:	4618      	mov	r0, r3
  4021a8:	3710      	adds	r7, #16
  4021aa:	46bd      	mov	sp, r7
  4021ac:	bd80      	pop	{r7, pc}
  4021ae:	bf00      	nop
  4021b0:	004004ad 	.word	0x004004ad
  4021b4:	004026b1 	.word	0x004026b1
  4021b8:	0040e578 	.word	0x0040e578
  4021bc:	0040e430 	.word	0x0040e430
  4021c0:	004079e5 	.word	0x004079e5
  4021c4:	0040e444 	.word	0x0040e444
  4021c8:	0040e464 	.word	0x0040e464
  4021cc:	004026d1 	.word	0x004026d1
  4021d0:	20400010 	.word	0x20400010
  4021d4:	0040e468 	.word	0x0040e468
  4021d8:	0040e488 	.word	0x0040e488
  4021dc:	aaaaaaab 	.word	0xaaaaaaab

004021e0 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  4021e0:	b580      	push	{r7, lr}
  4021e2:	b082      	sub	sp, #8
  4021e4:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  4021e6:	463b      	mov	r3, r7
  4021e8:	4619      	mov	r1, r3
  4021ea:	f241 4008 	movw	r0, #5128	; 0x1408
  4021ee:	4b22      	ldr	r3, [pc, #136]	; (402278 <enable_interrupts+0x98>)
  4021f0:	4798      	blx	r3
  4021f2:	4603      	mov	r3, r0
  4021f4:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
  4021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4021fa:	2b00      	cmp	r3, #0
  4021fc:	d002      	beq.n	402204 <enable_interrupts+0x24>
		return M2M_ERR_BUS_FAIL;
  4021fe:	f06f 0305 	mvn.w	r3, #5
  402202:	e035      	b.n	402270 <enable_interrupts+0x90>
	}
	reg |= ((uint32) 1 << 8);
  402204:	683b      	ldr	r3, [r7, #0]
  402206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40220a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  40220c:	683b      	ldr	r3, [r7, #0]
  40220e:	4619      	mov	r1, r3
  402210:	f241 4008 	movw	r0, #5128	; 0x1408
  402214:	4b19      	ldr	r3, [pc, #100]	; (40227c <enable_interrupts+0x9c>)
  402216:	4798      	blx	r3
  402218:	4603      	mov	r3, r0
  40221a:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
  40221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402220:	2b00      	cmp	r3, #0
  402222:	d002      	beq.n	40222a <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
  402224:	f06f 0305 	mvn.w	r3, #5
  402228:	e022      	b.n	402270 <enable_interrupts+0x90>
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  40222a:	463b      	mov	r3, r7
  40222c:	4619      	mov	r1, r3
  40222e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  402232:	4b11      	ldr	r3, [pc, #68]	; (402278 <enable_interrupts+0x98>)
  402234:	4798      	blx	r3
  402236:	4603      	mov	r3, r0
  402238:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
  40223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40223e:	2b00      	cmp	r3, #0
  402240:	d002      	beq.n	402248 <enable_interrupts+0x68>
		return M2M_ERR_BUS_FAIL;
  402242:	f06f 0305 	mvn.w	r3, #5
  402246:	e013      	b.n	402270 <enable_interrupts+0x90>
	}
	reg |= ((uint32) 1 << 16);
  402248:	683b      	ldr	r3, [r7, #0]
  40224a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40224e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  402250:	683b      	ldr	r3, [r7, #0]
  402252:	4619      	mov	r1, r3
  402254:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  402258:	4b08      	ldr	r3, [pc, #32]	; (40227c <enable_interrupts+0x9c>)
  40225a:	4798      	blx	r3
  40225c:	4603      	mov	r3, r0
  40225e:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) {
  402260:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402264:	2b00      	cmp	r3, #0
  402266:	d002      	beq.n	40226e <enable_interrupts+0x8e>
		return M2M_ERR_BUS_FAIL;
  402268:	f06f 0305 	mvn.w	r3, #5
  40226c:	e000      	b.n	402270 <enable_interrupts+0x90>
	}
	return M2M_SUCCESS;
  40226e:	2300      	movs	r3, #0
}
  402270:	4618      	mov	r0, r3
  402272:	3708      	adds	r7, #8
  402274:	46bd      	mov	sp, r7
  402276:	bd80      	pop	{r7, pc}
  402278:	004026b1 	.word	0x004026b1
  40227c:	004026d1 	.word	0x004026d1

00402280 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  402280:	b580      	push	{r7, lr}
  402282:	b082      	sub	sp, #8
  402284:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
  402286:	4b31      	ldr	r3, [pc, #196]	; (40234c <nmi_get_chipid+0xcc>)
  402288:	681b      	ldr	r3, [r3, #0]
  40228a:	2b00      	cmp	r3, #0
  40228c:	d157      	bne.n	40233e <nmi_get_chipid+0xbe>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  40228e:	492f      	ldr	r1, [pc, #188]	; (40234c <nmi_get_chipid+0xcc>)
  402290:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  402294:	4b2e      	ldr	r3, [pc, #184]	; (402350 <nmi_get_chipid+0xd0>)
  402296:	4798      	blx	r3
  402298:	4603      	mov	r3, r0
  40229a:	2b00      	cmp	r3, #0
  40229c:	d004      	beq.n	4022a8 <nmi_get_chipid+0x28>
			chipid = 0;
  40229e:	4b2b      	ldr	r3, [pc, #172]	; (40234c <nmi_get_chipid+0xcc>)
  4022a0:	2200      	movs	r2, #0
  4022a2:	601a      	str	r2, [r3, #0]
			return 0;
  4022a4:	2300      	movs	r3, #0
  4022a6:	e04c      	b.n	402342 <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4022a8:	1d3b      	adds	r3, r7, #4
  4022aa:	4619      	mov	r1, r3
  4022ac:	f241 30f4 	movw	r0, #5108	; 0x13f4
  4022b0:	4b27      	ldr	r3, [pc, #156]	; (402350 <nmi_get_chipid+0xd0>)
  4022b2:	4798      	blx	r3
  4022b4:	4603      	mov	r3, r0
  4022b6:	2b00      	cmp	r3, #0
  4022b8:	d004      	beq.n	4022c4 <nmi_get_chipid+0x44>
			chipid = 0;
  4022ba:	4b24      	ldr	r3, [pc, #144]	; (40234c <nmi_get_chipid+0xcc>)
  4022bc:	2200      	movs	r2, #0
  4022be:	601a      	str	r2, [r3, #0]
			return 0;
  4022c0:	2300      	movs	r3, #0
  4022c2:	e03e      	b.n	402342 <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
  4022c4:	4b21      	ldr	r3, [pc, #132]	; (40234c <nmi_get_chipid+0xcc>)
  4022c6:	681b      	ldr	r3, [r3, #0]
  4022c8:	4a22      	ldr	r2, [pc, #136]	; (402354 <nmi_get_chipid+0xd4>)
  4022ca:	4293      	cmp	r3, r2
  4022cc:	d106      	bne.n	4022dc <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
  4022ce:	687b      	ldr	r3, [r7, #4]
  4022d0:	2b01      	cmp	r3, #1
  4022d2:	d028      	beq.n	402326 <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  4022d4:	4b1d      	ldr	r3, [pc, #116]	; (40234c <nmi_get_chipid+0xcc>)
  4022d6:	4a20      	ldr	r2, [pc, #128]	; (402358 <nmi_get_chipid+0xd8>)
  4022d8:	601a      	str	r2, [r3, #0]
  4022da:	e024      	b.n	402326 <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
  4022dc:	4b1b      	ldr	r3, [pc, #108]	; (40234c <nmi_get_chipid+0xcc>)
  4022de:	681b      	ldr	r3, [r3, #0]
  4022e0:	4a1e      	ldr	r2, [pc, #120]	; (40235c <nmi_get_chipid+0xdc>)
  4022e2:	4293      	cmp	r3, r2
  4022e4:	d10d      	bne.n	402302 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
  4022e6:	687b      	ldr	r3, [r7, #4]
  4022e8:	2b03      	cmp	r3, #3
  4022ea:	d01c      	beq.n	402326 <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
  4022ec:	687b      	ldr	r3, [r7, #4]
  4022ee:	2b04      	cmp	r3, #4
  4022f0:	d103      	bne.n	4022fa <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
  4022f2:	4b16      	ldr	r3, [pc, #88]	; (40234c <nmi_get_chipid+0xcc>)
  4022f4:	4a1a      	ldr	r2, [pc, #104]	; (402360 <nmi_get_chipid+0xe0>)
  4022f6:	601a      	str	r2, [r3, #0]
  4022f8:	e015      	b.n	402326 <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  4022fa:	4b14      	ldr	r3, [pc, #80]	; (40234c <nmi_get_chipid+0xcc>)
  4022fc:	4a19      	ldr	r2, [pc, #100]	; (402364 <nmi_get_chipid+0xe4>)
  4022fe:	601a      	str	r2, [r3, #0]
  402300:	e011      	b.n	402326 <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1000F0) { 
  402302:	4b12      	ldr	r3, [pc, #72]	; (40234c <nmi_get_chipid+0xcc>)
  402304:	681b      	ldr	r3, [r3, #0]
  402306:	4a18      	ldr	r2, [pc, #96]	; (402368 <nmi_get_chipid+0xe8>)
  402308:	4293      	cmp	r3, r2
  40230a:	d10c      	bne.n	402326 <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  40230c:	490f      	ldr	r1, [pc, #60]	; (40234c <nmi_get_chipid+0xcc>)
  40230e:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  402312:	4b0f      	ldr	r3, [pc, #60]	; (402350 <nmi_get_chipid+0xd0>)
  402314:	4798      	blx	r3
  402316:	4603      	mov	r3, r0
  402318:	2b00      	cmp	r3, #0
  40231a:	d004      	beq.n	402326 <nmi_get_chipid+0xa6>
			chipid = 0;
  40231c:	4b0b      	ldr	r3, [pc, #44]	; (40234c <nmi_get_chipid+0xcc>)
  40231e:	2200      	movs	r2, #0
  402320:	601a      	str	r2, [r3, #0]
			return 0;
  402322:	2300      	movs	r3, #0
  402324:	e00d      	b.n	402342 <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
  402326:	4b09      	ldr	r3, [pc, #36]	; (40234c <nmi_get_chipid+0xcc>)
  402328:	681b      	ldr	r3, [r3, #0]
  40232a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40232e:	4a07      	ldr	r2, [pc, #28]	; (40234c <nmi_get_chipid+0xcc>)
  402330:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
  402332:	4b06      	ldr	r3, [pc, #24]	; (40234c <nmi_get_chipid+0xcc>)
  402334:	681b      	ldr	r3, [r3, #0]
  402336:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  40233a:	4a04      	ldr	r2, [pc, #16]	; (40234c <nmi_get_chipid+0xcc>)
  40233c:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  40233e:	4b03      	ldr	r3, [pc, #12]	; (40234c <nmi_get_chipid+0xcc>)
  402340:	681b      	ldr	r3, [r3, #0]
}
  402342:	4618      	mov	r0, r3
  402344:	3708      	adds	r7, #8
  402346:	46bd      	mov	sp, r7
  402348:	bd80      	pop	{r7, pc}
  40234a:	bf00      	nop
  40234c:	20400900 	.word	0x20400900
  402350:	004026b1 	.word	0x004026b1
  402354:	001002a0 	.word	0x001002a0
  402358:	001002a1 	.word	0x001002a1
  40235c:	001002b0 	.word	0x001002b0
  402360:	001002b1 	.word	0x001002b1
  402364:	001002b2 	.word	0x001002b2
  402368:	001000f0 	.word	0x001000f0

0040236c <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  40236c:	b580      	push	{r7, lr}
  40236e:	b086      	sub	sp, #24
  402370:	af00      	add	r7, sp, #0
  402372:	4603      	mov	r3, r0
  402374:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
  402376:	2300      	movs	r3, #0
  402378:	72fb      	strb	r3, [r7, #11]
	uint32 reg = 0, cnt = 0;
  40237a:	2300      	movs	r3, #0
  40237c:	617b      	str	r3, [r7, #20]
  40237e:	2300      	movs	r3, #0
  402380:	613b      	str	r3, [r7, #16]
	uint32 u32GpReg1 = 0;
  402382:	2300      	movs	r3, #0
  402384:	60fb      	str	r3, [r7, #12]

	reg = 0;
  402386:	2300      	movs	r3, #0
  402388:	617b      	str	r3, [r7, #20]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40238a:	f241 0014 	movw	r0, #4116	; 0x1014
  40238e:	4b35      	ldr	r3, [pc, #212]	; (402464 <wait_for_bootrom+0xf8>)
  402390:	4798      	blx	r3
  402392:	6178      	str	r0, [r7, #20]
		if (reg & 0x80000000) {
  402394:	697b      	ldr	r3, [r7, #20]
  402396:	2b00      	cmp	r3, #0
  402398:	db03      	blt.n	4023a2 <wait_for_bootrom+0x36>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40239a:	2001      	movs	r0, #1
  40239c:	4b32      	ldr	r3, [pc, #200]	; (402468 <wait_for_bootrom+0xfc>)
  40239e:	4798      	blx	r3
	}
  4023a0:	e7f3      	b.n	40238a <wait_for_bootrom+0x1e>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
  4023a2:	bf00      	nop
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  4023a4:	4831      	ldr	r0, [pc, #196]	; (40246c <wait_for_bootrom+0x100>)
  4023a6:	4b2f      	ldr	r3, [pc, #188]	; (402464 <wait_for_bootrom+0xf8>)
  4023a8:	4798      	blx	r3
  4023aa:	6178      	str	r0, [r7, #20]
	reg &= 0x1;
  4023ac:	697b      	ldr	r3, [r7, #20]
  4023ae:	f003 0301 	and.w	r3, r3, #1
  4023b2:	617b      	str	r3, [r7, #20]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  4023b4:	697b      	ldr	r3, [r7, #20]
  4023b6:	2b00      	cmp	r3, #0
  4023b8:	d116      	bne.n	4023e8 <wait_for_bootrom+0x7c>
	{
		reg = 0;
  4023ba:	2300      	movs	r3, #0
  4023bc:	617b      	str	r3, [r7, #20]
		while(reg != M2M_FINISH_BOOT_ROM)
  4023be:	e00f      	b.n	4023e0 <wait_for_bootrom+0x74>
		{
			nm_bsp_sleep(1);
  4023c0:	2001      	movs	r0, #1
  4023c2:	4b29      	ldr	r3, [pc, #164]	; (402468 <wait_for_bootrom+0xfc>)
  4023c4:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
  4023c6:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4023ca:	4b26      	ldr	r3, [pc, #152]	; (402464 <wait_for_bootrom+0xf8>)
  4023cc:	4798      	blx	r3
  4023ce:	6178      	str	r0, [r7, #20]

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4023d0:	4a27      	ldr	r2, [pc, #156]	; (402470 <wait_for_bootrom+0x104>)
  4023d2:	6979      	ldr	r1, [r7, #20]
  4023d4:	4827      	ldr	r0, [pc, #156]	; (402474 <wait_for_bootrom+0x108>)
  4023d6:	4b28      	ldr	r3, [pc, #160]	; (402478 <wait_for_bootrom+0x10c>)
  4023d8:	4798      	blx	r3

			if(++cnt > TIMEOUT)
  4023da:	693b      	ldr	r3, [r7, #16]
  4023dc:	3301      	adds	r3, #1
  4023de:	613b      	str	r3, [r7, #16]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  4023e0:	697b      	ldr	r3, [r7, #20]
  4023e2:	4a23      	ldr	r2, [pc, #140]	; (402470 <wait_for_bootrom+0x104>)
  4023e4:	4293      	cmp	r3, r2
  4023e6:	d1eb      	bne.n	4023c0 <wait_for_bootrom+0x54>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  4023e8:	79fb      	ldrb	r3, [r7, #7]
  4023ea:	2b02      	cmp	r3, #2
  4023ec:	d10a      	bne.n	402404 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4023ee:	4923      	ldr	r1, [pc, #140]	; (40247c <wait_for_bootrom+0x110>)
  4023f0:	4823      	ldr	r0, [pc, #140]	; (402480 <wait_for_bootrom+0x114>)
  4023f2:	4b24      	ldr	r3, [pc, #144]	; (402484 <wait_for_bootrom+0x118>)
  4023f4:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4023f6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4023fa:	f241 008c 	movw	r0, #4236	; 0x108c
  4023fe:	4b21      	ldr	r3, [pc, #132]	; (402484 <wait_for_bootrom+0x118>)
  402400:	4798      	blx	r3
  402402:	e011      	b.n	402428 <wait_for_bootrom+0xbc>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  402404:	79fb      	ldrb	r3, [r7, #7]
  402406:	2b03      	cmp	r3, #3
  402408:	d109      	bne.n	40241e <wait_for_bootrom+0xb2>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  40240a:	491c      	ldr	r1, [pc, #112]	; (40247c <wait_for_bootrom+0x110>)
  40240c:	481c      	ldr	r0, [pc, #112]	; (402480 <wait_for_bootrom+0x114>)
  40240e:	4b1d      	ldr	r3, [pc, #116]	; (402484 <wait_for_bootrom+0x118>)
  402410:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
  402412:	2100      	movs	r1, #0
  402414:	f241 008c 	movw	r0, #4236	; 0x108c
  402418:	4b1a      	ldr	r3, [pc, #104]	; (402484 <wait_for_bootrom+0x118>)
  40241a:	4798      	blx	r3
  40241c:	e004      	b.n	402428 <wait_for_bootrom+0xbc>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
  40241e:	79fb      	ldrb	r3, [r7, #7]
  402420:	2b04      	cmp	r3, #4
  402422:	d101      	bne.n	402428 <wait_for_bootrom+0xbc>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  402424:	2380      	movs	r3, #128	; 0x80
  402426:	60fb      	str	r3, [r7, #12]
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  402428:	4b17      	ldr	r3, [pc, #92]	; (402488 <wait_for_bootrom+0x11c>)
  40242a:	4798      	blx	r3
  40242c:	4603      	mov	r3, r0
  40242e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  402432:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
  402436:	d106      	bne.n	402446 <wait_for_bootrom+0xda>
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  402438:	68fb      	ldr	r3, [r7, #12]
  40243a:	f043 0302 	orr.w	r3, r3, #2
  40243e:	4618      	mov	r0, r3
  402440:	4b12      	ldr	r3, [pc, #72]	; (40248c <wait_for_bootrom+0x120>)
  402442:	4798      	blx	r3
  402444:	e002      	b.n	40244c <wait_for_bootrom+0xe0>
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  402446:	68f8      	ldr	r0, [r7, #12]
  402448:	4b10      	ldr	r3, [pc, #64]	; (40248c <wait_for_bootrom+0x120>)
  40244a:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  40244c:	4910      	ldr	r1, [pc, #64]	; (402490 <wait_for_bootrom+0x124>)
  40244e:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  402452:	4b0c      	ldr	r3, [pc, #48]	; (402484 <wait_for_bootrom+0x118>)
  402454:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
  402456:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  40245a:	4618      	mov	r0, r3
  40245c:	3718      	adds	r7, #24
  40245e:	46bd      	mov	sp, r7
  402460:	bd80      	pop	{r7, pc}
  402462:	bf00      	nop
  402464:	00402695 	.word	0x00402695
  402468:	004004ad 	.word	0x004004ad
  40246c:	000207bc 	.word	0x000207bc
  402470:	10add09e 	.word	0x10add09e
  402474:	0040e4d4 	.word	0x0040e4d4
  402478:	004079e5 	.word	0x004079e5
  40247c:	3c1cd57d 	.word	0x3c1cd57d
  402480:	000207ac 	.word	0x000207ac
  402484:	004026d1 	.word	0x004026d1
  402488:	00402281 	.word	0x00402281
  40248c:	00401fd5 	.word	0x00401fd5
  402490:	ef522f61 	.word	0xef522f61

00402494 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  402494:	b580      	push	{r7, lr}
  402496:	b088      	sub	sp, #32
  402498:	af00      	add	r7, sp, #0
  40249a:	4603      	mov	r3, r0
  40249c:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
  40249e:	2300      	movs	r3, #0
  4024a0:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
  4024a2:	2300      	movs	r3, #0
  4024a4:	61bb      	str	r3, [r7, #24]
  4024a6:	2300      	movs	r3, #0
  4024a8:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
  4024aa:	f04f 33ff 	mov.w	r3, #4294967295
  4024ae:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
  4024b0:	f241 038c 	movw	r3, #4236	; 0x108c
  4024b4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  4024b6:	4b19      	ldr	r3, [pc, #100]	; (40251c <wait_for_firmware_start+0x88>)
  4024b8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  4024ba:	79fb      	ldrb	r3, [r7, #7]
  4024bc:	2b02      	cmp	r3, #2
  4024be:	d002      	beq.n	4024c6 <wait_for_firmware_start+0x32>
  4024c0:	79fb      	ldrb	r3, [r7, #7]
  4024c2:	2b03      	cmp	r3, #3
  4024c4:	d116      	bne.n	4024f4 <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
  4024c6:	4b16      	ldr	r3, [pc, #88]	; (402520 <wait_for_firmware_start+0x8c>)
  4024c8:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  4024ca:	4b16      	ldr	r3, [pc, #88]	; (402524 <wait_for_firmware_start+0x90>)
  4024cc:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  4024ce:	e011      	b.n	4024f4 <wait_for_firmware_start+0x60>
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4024d0:	2002      	movs	r0, #2
  4024d2:	4b15      	ldr	r3, [pc, #84]	; (402528 <wait_for_firmware_start+0x94>)
  4024d4:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4024d6:	68fb      	ldr	r3, [r7, #12]
  4024d8:	4618      	mov	r0, r3
  4024da:	4b14      	ldr	r3, [pc, #80]	; (40252c <wait_for_firmware_start+0x98>)
  4024dc:	4798      	blx	r3
  4024de:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
  4024e0:	697b      	ldr	r3, [r7, #20]
  4024e2:	3301      	adds	r3, #1
  4024e4:	617b      	str	r3, [r7, #20]
  4024e6:	697a      	ldr	r2, [r7, #20]
  4024e8:	693b      	ldr	r3, [r7, #16]
  4024ea:	429a      	cmp	r2, r3
  4024ec:	d302      	bcc.n	4024f4 <wait_for_firmware_start+0x60>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  4024ee:	23fb      	movs	r3, #251	; 0xfb
  4024f0:	77fb      	strb	r3, [r7, #31]
			goto ERR;
  4024f2:	e00c      	b.n	40250e <wait_for_firmware_start+0x7a>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  4024f4:	68ba      	ldr	r2, [r7, #8]
  4024f6:	69bb      	ldr	r3, [r7, #24]
  4024f8:	429a      	cmp	r2, r3
  4024fa:	d1e9      	bne.n	4024d0 <wait_for_firmware_start+0x3c>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  4024fc:	68bb      	ldr	r3, [r7, #8]
  4024fe:	4a07      	ldr	r2, [pc, #28]	; (40251c <wait_for_firmware_start+0x88>)
  402500:	4293      	cmp	r3, r2
  402502:	d104      	bne.n	40250e <wait_for_firmware_start+0x7a>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  402504:	2100      	movs	r1, #0
  402506:	f241 008c 	movw	r0, #4236	; 0x108c
  40250a:	4b09      	ldr	r3, [pc, #36]	; (402530 <wait_for_firmware_start+0x9c>)
  40250c:	4798      	blx	r3
	}
ERR:
	return ret;
  40250e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
  402512:	4618      	mov	r0, r3
  402514:	3720      	adds	r7, #32
  402516:	46bd      	mov	sp, r7
  402518:	bd80      	pop	{r7, pc}
  40251a:	bf00      	nop
  40251c:	02532636 	.word	0x02532636
  402520:	000207ac 	.word	0x000207ac
  402524:	d75dc1c3 	.word	0xd75dc1c3
  402528:	004004ad 	.word	0x004004ad
  40252c:	00402695 	.word	0x00402695
  402530:	004026d1 	.word	0x004026d1

00402534 <chip_deinit>:

sint8 chip_deinit(void)
{
  402534:	b580      	push	{r7, lr}
  402536:	b082      	sub	sp, #8
  402538:	af00      	add	r7, sp, #0
	uint32 reg = 0;
  40253a:	2300      	movs	r3, #0
  40253c:	603b      	str	r3, [r7, #0]
	sint8 ret;
	uint8 timeout = 10;
  40253e:	230a      	movs	r3, #10
  402540:	71bb      	strb	r3, [r7, #6]

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  402542:	463b      	mov	r3, r7
  402544:	4619      	mov	r1, r3
  402546:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40254a:	4b36      	ldr	r3, [pc, #216]	; (402624 <chip_deinit+0xf0>)
  40254c:	4798      	blx	r3
  40254e:	4603      	mov	r3, r0
  402550:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
  402552:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402556:	2b00      	cmp	r3, #0
  402558:	d00b      	beq.n	402572 <chip_deinit+0x3e>
		M2M_ERR("failed to de-initialize\n");
  40255a:	f240 2231 	movw	r2, #561	; 0x231
  40255e:	4932      	ldr	r1, [pc, #200]	; (402628 <chip_deinit+0xf4>)
  402560:	4832      	ldr	r0, [pc, #200]	; (40262c <chip_deinit+0xf8>)
  402562:	4b33      	ldr	r3, [pc, #204]	; (402630 <chip_deinit+0xfc>)
  402564:	4798      	blx	r3
  402566:	4833      	ldr	r0, [pc, #204]	; (402634 <chip_deinit+0x100>)
  402568:	4b31      	ldr	r3, [pc, #196]	; (402630 <chip_deinit+0xfc>)
  40256a:	4798      	blx	r3
  40256c:	4832      	ldr	r0, [pc, #200]	; (402638 <chip_deinit+0x104>)
  40256e:	4b30      	ldr	r3, [pc, #192]	; (402630 <chip_deinit+0xfc>)
  402570:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
  402572:	683b      	ldr	r3, [r7, #0]
  402574:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402578:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40257a:	683b      	ldr	r3, [r7, #0]
  40257c:	4619      	mov	r1, r3
  40257e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  402582:	4b2e      	ldr	r3, [pc, #184]	; (40263c <chip_deinit+0x108>)
  402584:	4798      	blx	r3
  402586:	4603      	mov	r3, r0
  402588:	71fb      	strb	r3, [r7, #7]

	if (ret != M2M_SUCCESS) {
  40258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40258e:	2b00      	cmp	r3, #0
  402590:	d00e      	beq.n	4025b0 <chip_deinit+0x7c>
		M2M_ERR("Error while writing reg\n");
  402592:	f240 2237 	movw	r2, #567	; 0x237
  402596:	4924      	ldr	r1, [pc, #144]	; (402628 <chip_deinit+0xf4>)
  402598:	4824      	ldr	r0, [pc, #144]	; (40262c <chip_deinit+0xf8>)
  40259a:	4b25      	ldr	r3, [pc, #148]	; (402630 <chip_deinit+0xfc>)
  40259c:	4798      	blx	r3
  40259e:	4828      	ldr	r0, [pc, #160]	; (402640 <chip_deinit+0x10c>)
  4025a0:	4b23      	ldr	r3, [pc, #140]	; (402630 <chip_deinit+0xfc>)
  4025a2:	4798      	blx	r3
  4025a4:	4824      	ldr	r0, [pc, #144]	; (402638 <chip_deinit+0x104>)
  4025a6:	4b22      	ldr	r3, [pc, #136]	; (402630 <chip_deinit+0xfc>)
  4025a8:	4798      	blx	r3
		return ret;
  4025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4025ae:	e035      	b.n	40261c <chip_deinit+0xe8>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4025b0:	463b      	mov	r3, r7
  4025b2:	4619      	mov	r1, r3
  4025b4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4025b8:	4b1a      	ldr	r3, [pc, #104]	; (402624 <chip_deinit+0xf0>)
  4025ba:	4798      	blx	r3
  4025bc:	4603      	mov	r3, r0
  4025be:	71fb      	strb	r3, [r7, #7]
		if (ret != M2M_SUCCESS) {
  4025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4025c4:	2b00      	cmp	r3, #0
  4025c6:	d00e      	beq.n	4025e6 <chip_deinit+0xb2>
			M2M_ERR("Error while reading reg\n");
  4025c8:	f240 223e 	movw	r2, #574	; 0x23e
  4025cc:	4916      	ldr	r1, [pc, #88]	; (402628 <chip_deinit+0xf4>)
  4025ce:	4817      	ldr	r0, [pc, #92]	; (40262c <chip_deinit+0xf8>)
  4025d0:	4b17      	ldr	r3, [pc, #92]	; (402630 <chip_deinit+0xfc>)
  4025d2:	4798      	blx	r3
  4025d4:	481b      	ldr	r0, [pc, #108]	; (402644 <chip_deinit+0x110>)
  4025d6:	4b16      	ldr	r3, [pc, #88]	; (402630 <chip_deinit+0xfc>)
  4025d8:	4798      	blx	r3
  4025da:	4817      	ldr	r0, [pc, #92]	; (402638 <chip_deinit+0x104>)
  4025dc:	4b14      	ldr	r3, [pc, #80]	; (402630 <chip_deinit+0xfc>)
  4025de:	4798      	blx	r3
			return ret;
  4025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4025e4:	e01a      	b.n	40261c <chip_deinit+0xe8>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  4025e6:	683b      	ldr	r3, [r7, #0]
  4025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  4025ec:	2b00      	cmp	r3, #0
  4025ee:	d012      	beq.n	402616 <chip_deinit+0xe2>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  4025f0:	683b      	ldr	r3, [r7, #0]
  4025f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4025f6:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4025f8:	683b      	ldr	r3, [r7, #0]
  4025fa:	4619      	mov	r1, r3
  4025fc:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  402600:	4b0e      	ldr	r3, [pc, #56]	; (40263c <chip_deinit+0x108>)
  402602:	4798      	blx	r3
  402604:	4603      	mov	r3, r0
  402606:	71fb      	strb	r3, [r7, #7]
			timeout--;
  402608:	79bb      	ldrb	r3, [r7, #6]
  40260a:	3b01      	subs	r3, #1
  40260c:	71bb      	strb	r3, [r7, #6]
		} else {
			break;
		}

	} while (timeout);
  40260e:	79bb      	ldrb	r3, [r7, #6]
  402610:	2b00      	cmp	r3, #0
  402612:	d1cd      	bne.n	4025b0 <chip_deinit+0x7c>
  402614:	e000      	b.n	402618 <chip_deinit+0xe4>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
			timeout--;
		} else {
			break;
  402616:	bf00      	nop
		}

	} while (timeout);

	return ret;
  402618:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
  40261c:	4618      	mov	r0, r3
  40261e:	3708      	adds	r7, #8
  402620:	46bd      	mov	sp, r7
  402622:	bd80      	pop	{r7, pc}
  402624:	004026b1 	.word	0x004026b1
  402628:	0040e588 	.word	0x0040e588
  40262c:	0040e430 	.word	0x0040e430
  402630:	004079e5 	.word	0x004079e5
  402634:	0040e4e4 	.word	0x0040e4e4
  402638:	0040e464 	.word	0x0040e464
  40263c:	004026d1 	.word	0x004026d1
  402640:	0040e500 	.word	0x0040e500
  402644:	0040e51c 	.word	0x0040e51c

00402648 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  402648:	b580      	push	{r7, lr}
  40264a:	b084      	sub	sp, #16
  40264c:	af00      	add	r7, sp, #0
  40264e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
  402650:	2300      	movs	r3, #0
  402652:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
  402654:	6878      	ldr	r0, [r7, #4]
  402656:	4b05      	ldr	r3, [pc, #20]	; (40266c <nm_bus_iface_init+0x24>)
  402658:	4798      	blx	r3
  40265a:	4603      	mov	r3, r0
  40265c:	73fb      	strb	r3, [r7, #15]

	return ret;
  40265e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  402662:	4618      	mov	r0, r3
  402664:	3710      	adds	r7, #16
  402666:	46bd      	mov	sp, r7
  402668:	bd80      	pop	{r7, pc}
  40266a:	bf00      	nop
  40266c:	004009c9 	.word	0x004009c9

00402670 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  402670:	b580      	push	{r7, lr}
  402672:	b082      	sub	sp, #8
  402674:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
  402676:	2300      	movs	r3, #0
  402678:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
  40267a:	4b05      	ldr	r3, [pc, #20]	; (402690 <nm_bus_iface_deinit+0x20>)
  40267c:	4798      	blx	r3
  40267e:	4603      	mov	r3, r0
  402680:	71fb      	strb	r3, [r7, #7]

	return ret;
  402682:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
  402686:	4618      	mov	r0, r3
  402688:	3708      	adds	r7, #8
  40268a:	46bd      	mov	sp, r7
  40268c:	bd80      	pop	{r7, pc}
  40268e:	bf00      	nop
  402690:	00400b6d 	.word	0x00400b6d

00402694 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  402694:	b580      	push	{r7, lr}
  402696:	b082      	sub	sp, #8
  402698:	af00      	add	r7, sp, #0
  40269a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  40269c:	6878      	ldr	r0, [r7, #4]
  40269e:	4b03      	ldr	r3, [pc, #12]	; (4026ac <nm_read_reg+0x18>)
  4026a0:	4798      	blx	r3
  4026a2:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  4026a4:	4618      	mov	r0, r3
  4026a6:	3708      	adds	r7, #8
  4026a8:	46bd      	mov	sp, r7
  4026aa:	bd80      	pop	{r7, pc}
  4026ac:	00403821 	.word	0x00403821

004026b0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4026b0:	b580      	push	{r7, lr}
  4026b2:	b082      	sub	sp, #8
  4026b4:	af00      	add	r7, sp, #0
  4026b6:	6078      	str	r0, [r7, #4]
  4026b8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  4026ba:	6839      	ldr	r1, [r7, #0]
  4026bc:	6878      	ldr	r0, [r7, #4]
  4026be:	4b03      	ldr	r3, [pc, #12]	; (4026cc <nm_read_reg_with_ret+0x1c>)
  4026c0:	4798      	blx	r3
  4026c2:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  4026c4:	4618      	mov	r0, r3
  4026c6:	3708      	adds	r7, #8
  4026c8:	46bd      	mov	sp, r7
  4026ca:	bd80      	pop	{r7, pc}
  4026cc:	00403845 	.word	0x00403845

004026d0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4026d0:	b580      	push	{r7, lr}
  4026d2:	b082      	sub	sp, #8
  4026d4:	af00      	add	r7, sp, #0
  4026d6:	6078      	str	r0, [r7, #4]
  4026d8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  4026da:	6839      	ldr	r1, [r7, #0]
  4026dc:	6878      	ldr	r0, [r7, #4]
  4026de:	4b03      	ldr	r3, [pc, #12]	; (4026ec <nm_write_reg+0x1c>)
  4026e0:	4798      	blx	r3
  4026e2:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  4026e4:	4618      	mov	r0, r3
  4026e6:	3708      	adds	r7, #8
  4026e8:	46bd      	mov	sp, r7
  4026ea:	bd80      	pop	{r7, pc}
  4026ec:	0040387d 	.word	0x0040387d

004026f0 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4026f0:	b580      	push	{r7, lr}
  4026f2:	b084      	sub	sp, #16
  4026f4:	af00      	add	r7, sp, #0
  4026f6:	60f8      	str	r0, [r7, #12]
  4026f8:	60b9      	str	r1, [r7, #8]
  4026fa:	4613      	mov	r3, r2
  4026fc:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4026fe:	88fb      	ldrh	r3, [r7, #6]
  402700:	461a      	mov	r2, r3
  402702:	68b9      	ldr	r1, [r7, #8]
  402704:	68f8      	ldr	r0, [r7, #12]
  402706:	4b03      	ldr	r3, [pc, #12]	; (402714 <p_nm_read_block+0x24>)
  402708:	4798      	blx	r3
  40270a:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
  40270c:	4618      	mov	r0, r3
  40270e:	3710      	adds	r7, #16
  402710:	46bd      	mov	sp, r7
  402712:	bd80      	pop	{r7, pc}
  402714:	004038b5 	.word	0x004038b5

00402718 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  402718:	b580      	push	{r7, lr}
  40271a:	b086      	sub	sp, #24
  40271c:	af00      	add	r7, sp, #0
  40271e:	60f8      	str	r0, [r7, #12]
  402720:	60b9      	str	r1, [r7, #8]
  402722:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  402724:	4b20      	ldr	r3, [pc, #128]	; (4027a8 <nm_read_block+0x90>)
  402726:	881b      	ldrh	r3, [r3, #0]
  402728:	3b08      	subs	r3, #8
  40272a:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
  40272c:	2300      	movs	r3, #0
  40272e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
  402730:	2300      	movs	r3, #0
  402732:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  402734:	8a3a      	ldrh	r2, [r7, #16]
  402736:	687b      	ldr	r3, [r7, #4]
  402738:	429a      	cmp	r2, r3
  40273a:	d30f      	bcc.n	40275c <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
  40273c:	68ba      	ldr	r2, [r7, #8]
  40273e:	697b      	ldr	r3, [r7, #20]
  402740:	4413      	add	r3, r2
  402742:	687a      	ldr	r2, [r7, #4]
  402744:	b292      	uxth	r2, r2
  402746:	4619      	mov	r1, r3
  402748:	68f8      	ldr	r0, [r7, #12]
  40274a:	4b18      	ldr	r3, [pc, #96]	; (4027ac <nm_read_block+0x94>)
  40274c:	4798      	blx	r3
  40274e:	4603      	mov	r3, r0
  402750:	b2da      	uxtb	r2, r3
  402752:	7cfb      	ldrb	r3, [r7, #19]
  402754:	4413      	add	r3, r2
  402756:	b2db      	uxtb	r3, r3
  402758:	74fb      	strb	r3, [r7, #19]
			break;
  40275a:	e01f      	b.n	40279c <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
  40275c:	68ba      	ldr	r2, [r7, #8]
  40275e:	697b      	ldr	r3, [r7, #20]
  402760:	4413      	add	r3, r2
  402762:	8a3a      	ldrh	r2, [r7, #16]
  402764:	4619      	mov	r1, r3
  402766:	68f8      	ldr	r0, [r7, #12]
  402768:	4b10      	ldr	r3, [pc, #64]	; (4027ac <nm_read_block+0x94>)
  40276a:	4798      	blx	r3
  40276c:	4603      	mov	r3, r0
  40276e:	b2da      	uxtb	r2, r3
  402770:	7cfb      	ldrb	r3, [r7, #19]
  402772:	4413      	add	r3, r2
  402774:	b2db      	uxtb	r3, r3
  402776:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
  402778:	f997 3013 	ldrsb.w	r3, [r7, #19]
  40277c:	2b00      	cmp	r3, #0
  40277e:	d10c      	bne.n	40279a <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
  402780:	8a3b      	ldrh	r3, [r7, #16]
  402782:	687a      	ldr	r2, [r7, #4]
  402784:	1ad3      	subs	r3, r2, r3
  402786:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
  402788:	8a3b      	ldrh	r3, [r7, #16]
  40278a:	697a      	ldr	r2, [r7, #20]
  40278c:	4413      	add	r3, r2
  40278e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
  402790:	8a3b      	ldrh	r3, [r7, #16]
  402792:	68fa      	ldr	r2, [r7, #12]
  402794:	4413      	add	r3, r2
  402796:	60fb      	str	r3, [r7, #12]
		}
	}
  402798:	e7cc      	b.n	402734 <nm_read_block+0x1c>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  40279a:	bf00      	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
  40279c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
  4027a0:	4618      	mov	r0, r3
  4027a2:	3718      	adds	r7, #24
  4027a4:	46bd      	mov	sp, r7
  4027a6:	bd80      	pop	{r7, pc}
  4027a8:	2040000c 	.word	0x2040000c
  4027ac:	004026f1 	.word	0x004026f1

004027b0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4027b0:	b580      	push	{r7, lr}
  4027b2:	b084      	sub	sp, #16
  4027b4:	af00      	add	r7, sp, #0
  4027b6:	60f8      	str	r0, [r7, #12]
  4027b8:	60b9      	str	r1, [r7, #8]
  4027ba:	4613      	mov	r3, r2
  4027bc:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4027be:	88fb      	ldrh	r3, [r7, #6]
  4027c0:	461a      	mov	r2, r3
  4027c2:	68b9      	ldr	r1, [r7, #8]
  4027c4:	68f8      	ldr	r0, [r7, #12]
  4027c6:	4b03      	ldr	r3, [pc, #12]	; (4027d4 <p_nm_write_block+0x24>)
  4027c8:	4798      	blx	r3
  4027ca:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
  4027cc:	4618      	mov	r0, r3
  4027ce:	3710      	adds	r7, #16
  4027d0:	46bd      	mov	sp, r7
  4027d2:	bd80      	pop	{r7, pc}
  4027d4:	004038f5 	.word	0x004038f5

004027d8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4027d8:	b580      	push	{r7, lr}
  4027da:	b086      	sub	sp, #24
  4027dc:	af00      	add	r7, sp, #0
  4027de:	60f8      	str	r0, [r7, #12]
  4027e0:	60b9      	str	r1, [r7, #8]
  4027e2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4027e4:	4b20      	ldr	r3, [pc, #128]	; (402868 <nm_write_block+0x90>)
  4027e6:	881b      	ldrh	r3, [r3, #0]
  4027e8:	3b08      	subs	r3, #8
  4027ea:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
  4027ec:	2300      	movs	r3, #0
  4027ee:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
  4027f0:	2300      	movs	r3, #0
  4027f2:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4027f4:	8a3a      	ldrh	r2, [r7, #16]
  4027f6:	687b      	ldr	r3, [r7, #4]
  4027f8:	429a      	cmp	r2, r3
  4027fa:	d30f      	bcc.n	40281c <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
  4027fc:	68ba      	ldr	r2, [r7, #8]
  4027fe:	697b      	ldr	r3, [r7, #20]
  402800:	4413      	add	r3, r2
  402802:	687a      	ldr	r2, [r7, #4]
  402804:	b292      	uxth	r2, r2
  402806:	4619      	mov	r1, r3
  402808:	68f8      	ldr	r0, [r7, #12]
  40280a:	4b18      	ldr	r3, [pc, #96]	; (40286c <nm_write_block+0x94>)
  40280c:	4798      	blx	r3
  40280e:	4603      	mov	r3, r0
  402810:	b2da      	uxtb	r2, r3
  402812:	7cfb      	ldrb	r3, [r7, #19]
  402814:	4413      	add	r3, r2
  402816:	b2db      	uxtb	r3, r3
  402818:	74fb      	strb	r3, [r7, #19]
			break;
  40281a:	e01f      	b.n	40285c <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
  40281c:	68ba      	ldr	r2, [r7, #8]
  40281e:	697b      	ldr	r3, [r7, #20]
  402820:	4413      	add	r3, r2
  402822:	8a3a      	ldrh	r2, [r7, #16]
  402824:	4619      	mov	r1, r3
  402826:	68f8      	ldr	r0, [r7, #12]
  402828:	4b10      	ldr	r3, [pc, #64]	; (40286c <nm_write_block+0x94>)
  40282a:	4798      	blx	r3
  40282c:	4603      	mov	r3, r0
  40282e:	b2da      	uxtb	r2, r3
  402830:	7cfb      	ldrb	r3, [r7, #19]
  402832:	4413      	add	r3, r2
  402834:	b2db      	uxtb	r3, r3
  402836:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
  402838:	f997 3013 	ldrsb.w	r3, [r7, #19]
  40283c:	2b00      	cmp	r3, #0
  40283e:	d10c      	bne.n	40285a <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
  402840:	8a3b      	ldrh	r3, [r7, #16]
  402842:	687a      	ldr	r2, [r7, #4]
  402844:	1ad3      	subs	r3, r2, r3
  402846:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
  402848:	8a3b      	ldrh	r3, [r7, #16]
  40284a:	697a      	ldr	r2, [r7, #20]
  40284c:	4413      	add	r3, r2
  40284e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
  402850:	8a3b      	ldrh	r3, [r7, #16]
  402852:	68fa      	ldr	r2, [r7, #12]
  402854:	4413      	add	r3, r2
  402856:	60fb      	str	r3, [r7, #12]
		}
	}
  402858:	e7cc      	b.n	4027f4 <nm_write_block+0x1c>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  40285a:	bf00      	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
  40285c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
  402860:	4618      	mov	r0, r3
  402862:	3718      	adds	r7, #24
  402864:	46bd      	mov	sp, r7
  402866:	bd80      	pop	{r7, pc}
  402868:	2040000c 	.word	0x2040000c
  40286c:	004027b1 	.word	0x004027b1

00402870 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  402870:	b580      	push	{r7, lr}
  402872:	b086      	sub	sp, #24
  402874:	af00      	add	r7, sp, #0
  402876:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  402878:	2300      	movs	r3, #0
  40287a:	60fb      	str	r3, [r7, #12]
	sint8	ret = M2M_SUCCESS;
  40287c:	2300      	movs	r3, #0
  40287e:	75fb      	strb	r3, [r7, #23]

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  402880:	f107 030c 	add.w	r3, r7, #12
  402884:	4619      	mov	r1, r3
  402886:	4840      	ldr	r0, [pc, #256]	; (402988 <nm_get_firmware_info+0x118>)
  402888:	4b40      	ldr	r3, [pc, #256]	; (40298c <nm_get_firmware_info+0x11c>)
  40288a:	4798      	blx	r3
  40288c:	4603      	mov	r3, r0
  40288e:	75fb      	strb	r3, [r7, #23]
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  402890:	68fb      	ldr	r3, [r7, #12]
  402892:	4a3f      	ldr	r2, [pc, #252]	; (402990 <nm_get_firmware_info+0x120>)
  402894:	4293      	cmp	r3, r2
  402896:	d108      	bne.n	4028aa <nm_get_firmware_info+0x3a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  402898:	f107 030c 	add.w	r3, r7, #12
  40289c:	4619      	mov	r1, r3
  40289e:	f241 0048 	movw	r0, #4168	; 0x1048
  4028a2:	4b3a      	ldr	r3, [pc, #232]	; (40298c <nm_get_firmware_info+0x11c>)
  4028a4:	4798      	blx	r3
  4028a6:	4603      	mov	r3, r0
  4028a8:	75fb      	strb	r3, [r7, #23]
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  4028aa:	68fb      	ldr	r3, [r7, #12]
  4028ac:	0c1b      	lsrs	r3, r3, #16
  4028ae:	121b      	asrs	r3, r3, #8
  4028b0:	b2da      	uxtb	r2, r3
  4028b2:	687b      	ldr	r3, [r7, #4]
  4028b4:	71da      	strb	r2, [r3, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  4028b6:	68fb      	ldr	r3, [r7, #12]
  4028b8:	0c1b      	lsrs	r3, r3, #16
  4028ba:	111b      	asrs	r3, r3, #4
  4028bc:	b2db      	uxtb	r3, r3
  4028be:	f003 030f 	and.w	r3, r3, #15
  4028c2:	b2da      	uxtb	r2, r3
  4028c4:	687b      	ldr	r3, [r7, #4]
  4028c6:	721a      	strb	r2, [r3, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  4028c8:	68fb      	ldr	r3, [r7, #12]
  4028ca:	0c1b      	lsrs	r3, r3, #16
  4028cc:	b2db      	uxtb	r3, r3
  4028ce:	f003 030f 	and.w	r3, r3, #15
  4028d2:	b2da      	uxtb	r2, r3
  4028d4:	687b      	ldr	r3, [r7, #4]
  4028d6:	725a      	strb	r2, [r3, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  4028d8:	68fb      	ldr	r3, [r7, #12]
  4028da:	121b      	asrs	r3, r3, #8
  4028dc:	b2da      	uxtb	r2, r3
  4028de:	687b      	ldr	r3, [r7, #4]
  4028e0:	711a      	strb	r2, [r3, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  4028e2:	68fb      	ldr	r3, [r7, #12]
  4028e4:	111b      	asrs	r3, r3, #4
  4028e6:	b2db      	uxtb	r3, r3
  4028e8:	f003 030f 	and.w	r3, r3, #15
  4028ec:	b2da      	uxtb	r2, r3
  4028ee:	687b      	ldr	r3, [r7, #4]
  4028f0:	715a      	strb	r2, [r3, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  4028f2:	68fb      	ldr	r3, [r7, #12]
  4028f4:	b2db      	uxtb	r3, r3
  4028f6:	f003 030f 	and.w	r3, r3, #15
  4028fa:	b2da      	uxtb	r2, r3
  4028fc:	687b      	ldr	r3, [r7, #4]
  4028fe:	719a      	strb	r2, [r3, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  402900:	4b24      	ldr	r3, [pc, #144]	; (402994 <nm_get_firmware_info+0x124>)
  402902:	4798      	blx	r3
  402904:	4602      	mov	r2, r0
  402906:	687b      	ldr	r3, [r7, #4]
  402908:	601a      	str	r2, [r3, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  40290a:	687b      	ldr	r3, [r7, #4]
  40290c:	791b      	ldrb	r3, [r3, #4]
  40290e:	021b      	lsls	r3, r3, #8
  402910:	b21a      	sxth	r2, r3
  402912:	687b      	ldr	r3, [r7, #4]
  402914:	795b      	ldrb	r3, [r3, #5]
  402916:	011b      	lsls	r3, r3, #4
  402918:	b21b      	sxth	r3, r3
  40291a:	b2db      	uxtb	r3, r3
  40291c:	b21b      	sxth	r3, r3
  40291e:	4313      	orrs	r3, r2
  402920:	b21a      	sxth	r2, r3
  402922:	687b      	ldr	r3, [r7, #4]
  402924:	799b      	ldrb	r3, [r3, #6]
  402926:	b21b      	sxth	r3, r3
  402928:	f003 030f 	and.w	r3, r3, #15
  40292c:	b21b      	sxth	r3, r3
  40292e:	4313      	orrs	r3, r2
  402930:	b21b      	sxth	r3, r3
  402932:	82bb      	strh	r3, [r7, #20]
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  402934:	f241 3330 	movw	r3, #4912	; 0x1330
  402938:	827b      	strh	r3, [r7, #18]
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  40293a:	687b      	ldr	r3, [r7, #4]
  40293c:	79db      	ldrb	r3, [r3, #7]
  40293e:	021b      	lsls	r3, r3, #8
  402940:	b21a      	sxth	r2, r3
  402942:	687b      	ldr	r3, [r7, #4]
  402944:	7a1b      	ldrb	r3, [r3, #8]
  402946:	011b      	lsls	r3, r3, #4
  402948:	b21b      	sxth	r3, r3
  40294a:	b2db      	uxtb	r3, r3
  40294c:	b21b      	sxth	r3, r3
  40294e:	4313      	orrs	r3, r2
  402950:	b21a      	sxth	r2, r3
  402952:	687b      	ldr	r3, [r7, #4]
  402954:	7a5b      	ldrb	r3, [r3, #9]
  402956:	b21b      	sxth	r3, r3
  402958:	f003 030f 	and.w	r3, r3, #15
  40295c:	b21b      	sxth	r3, r3
  40295e:	4313      	orrs	r3, r2
  402960:	b21b      	sxth	r3, r3
  402962:	823b      	strh	r3, [r7, #16]
	if(curr_drv_ver <  min_req_drv_ver) {
  402964:	8a7a      	ldrh	r2, [r7, #18]
  402966:	8a3b      	ldrh	r3, [r7, #16]
  402968:	429a      	cmp	r2, r3
  40296a:	d201      	bcs.n	402970 <nm_get_firmware_info+0x100>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  40296c:	23f3      	movs	r3, #243	; 0xf3
  40296e:	75fb      	strb	r3, [r7, #23]
	}
	if(curr_drv_ver >  curr_firm_ver) {
  402970:	8a7a      	ldrh	r2, [r7, #18]
  402972:	8abb      	ldrh	r3, [r7, #20]
  402974:	429a      	cmp	r2, r3
  402976:	d901      	bls.n	40297c <nm_get_firmware_info+0x10c>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  402978:	23f3      	movs	r3, #243	; 0xf3
  40297a:	75fb      	strb	r3, [r7, #23]
	}
	return ret;
  40297c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
  402980:	4618      	mov	r0, r3
  402982:	3718      	adds	r7, #24
  402984:	46bd      	mov	sp, r7
  402986:	bd80      	pop	{r7, pc}
  402988:	000207ac 	.word	0x000207ac
  40298c:	004026b1 	.word	0x004026b1
  402990:	d75dc1c3 	.word	0xd75dc1c3
  402994:	00402281 	.word	0x00402281

00402998 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  402998:	b580      	push	{r7, lr}
  40299a:	b084      	sub	sp, #16
  40299c:	af00      	add	r7, sp, #0
  40299e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
  4029a0:	2300      	movs	r3, #0
  4029a2:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode;
	
	if(NULL != arg) {
  4029a4:	687b      	ldr	r3, [r7, #4]
  4029a6:	2b00      	cmp	r3, #0
  4029a8:	d00b      	beq.n	4029c2 <nm_drv_init+0x2a>
		u8Mode = *((uint8 *)arg);
  4029aa:	687b      	ldr	r3, [r7, #4]
  4029ac:	781b      	ldrb	r3, [r3, #0]
  4029ae:	73bb      	strb	r3, [r7, #14]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  4029b0:	7bbb      	ldrb	r3, [r7, #14]
  4029b2:	2b00      	cmp	r3, #0
  4029b4:	d002      	beq.n	4029bc <nm_drv_init+0x24>
  4029b6:	7bbb      	ldrb	r3, [r7, #14]
  4029b8:	2b04      	cmp	r3, #4
  4029ba:	d904      	bls.n	4029c6 <nm_drv_init+0x2e>
			u8Mode = M2M_WIFI_MODE_NORMAL;
  4029bc:	2301      	movs	r3, #1
  4029be:	73bb      	strb	r3, [r7, #14]
  4029c0:	e001      	b.n	4029c6 <nm_drv_init+0x2e>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  4029c2:	2301      	movs	r3, #1
  4029c4:	73bb      	strb	r3, [r7, #14]
	}
	
	ret = nm_bus_iface_init(NULL);
  4029c6:	2000      	movs	r0, #0
  4029c8:	4b30      	ldr	r3, [pc, #192]	; (402a8c <nm_drv_init+0xf4>)
  4029ca:	4798      	blx	r3
  4029cc:	4603      	mov	r3, r0
  4029ce:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  4029d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4029d4:	2b00      	cmp	r3, #0
  4029d6:	d00c      	beq.n	4029f2 <nm_drv_init+0x5a>
		M2M_ERR("[nmi start]: fail init bus\n");
  4029d8:	f44f 7292 	mov.w	r2, #292	; 0x124
  4029dc:	492c      	ldr	r1, [pc, #176]	; (402a90 <nm_drv_init+0xf8>)
  4029de:	482d      	ldr	r0, [pc, #180]	; (402a94 <nm_drv_init+0xfc>)
  4029e0:	4b2d      	ldr	r3, [pc, #180]	; (402a98 <nm_drv_init+0x100>)
  4029e2:	4798      	blx	r3
  4029e4:	482d      	ldr	r0, [pc, #180]	; (402a9c <nm_drv_init+0x104>)
  4029e6:	4b2c      	ldr	r3, [pc, #176]	; (402a98 <nm_drv_init+0x100>)
  4029e8:	4798      	blx	r3
  4029ea:	482d      	ldr	r0, [pc, #180]	; (402aa0 <nm_drv_init+0x108>)
  4029ec:	4b2a      	ldr	r3, [pc, #168]	; (402a98 <nm_drv_init+0x100>)
  4029ee:	4798      	blx	r3
		goto ERR1;
  4029f0:	e045      	b.n	402a7e <nm_drv_init+0xe6>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  4029f2:	482c      	ldr	r0, [pc, #176]	; (402aa4 <nm_drv_init+0x10c>)
  4029f4:	4b28      	ldr	r3, [pc, #160]	; (402a98 <nm_drv_init+0x100>)
  4029f6:	4798      	blx	r3
  4029f8:	4b2b      	ldr	r3, [pc, #172]	; (402aa8 <nm_drv_init+0x110>)
  4029fa:	4798      	blx	r3
  4029fc:	4603      	mov	r3, r0
  4029fe:	4619      	mov	r1, r3
  402a00:	482a      	ldr	r0, [pc, #168]	; (402aac <nm_drv_init+0x114>)
  402a02:	4b25      	ldr	r3, [pc, #148]	; (402a98 <nm_drv_init+0x100>)
  402a04:	4798      	blx	r3
  402a06:	4826      	ldr	r0, [pc, #152]	; (402aa0 <nm_drv_init+0x108>)
  402a08:	4b23      	ldr	r3, [pc, #140]	; (402a98 <nm_drv_init+0x100>)
  402a0a:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  402a0c:	4b28      	ldr	r3, [pc, #160]	; (402ab0 <nm_drv_init+0x118>)
  402a0e:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  402a10:	7bbb      	ldrb	r3, [r7, #14]
  402a12:	4618      	mov	r0, r3
  402a14:	4b27      	ldr	r3, [pc, #156]	; (402ab4 <nm_drv_init+0x11c>)
  402a16:	4798      	blx	r3
  402a18:	4603      	mov	r3, r0
  402a1a:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  402a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402a20:	2b00      	cmp	r3, #0
  402a22:	d127      	bne.n	402a74 <nm_drv_init+0xdc>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  402a24:	7bbb      	ldrb	r3, [r7, #14]
  402a26:	4618      	mov	r0, r3
  402a28:	4b23      	ldr	r3, [pc, #140]	; (402ab8 <nm_drv_init+0x120>)
  402a2a:	4798      	blx	r3
  402a2c:	4603      	mov	r3, r0
  402a2e:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  402a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402a34:	2b00      	cmp	r3, #0
  402a36:	d11f      	bne.n	402a78 <nm_drv_init+0xe0>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  402a38:	7bbb      	ldrb	r3, [r7, #14]
  402a3a:	2b02      	cmp	r3, #2
  402a3c:	d01f      	beq.n	402a7e <nm_drv_init+0xe6>
  402a3e:	7bbb      	ldrb	r3, [r7, #14]
  402a40:	2b03      	cmp	r3, #3
  402a42:	d01c      	beq.n	402a7e <nm_drv_init+0xe6>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  402a44:	4b1d      	ldr	r3, [pc, #116]	; (402abc <nm_drv_init+0x124>)
  402a46:	4798      	blx	r3
  402a48:	4603      	mov	r3, r0
  402a4a:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  402a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402a50:	2b00      	cmp	r3, #0
  402a52:	d00c      	beq.n	402a6e <nm_drv_init+0xd6>
		M2M_ERR("failed to enable interrupts..\n");
  402a54:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  402a58:	490d      	ldr	r1, [pc, #52]	; (402a90 <nm_drv_init+0xf8>)
  402a5a:	480e      	ldr	r0, [pc, #56]	; (402a94 <nm_drv_init+0xfc>)
  402a5c:	4b0e      	ldr	r3, [pc, #56]	; (402a98 <nm_drv_init+0x100>)
  402a5e:	4798      	blx	r3
  402a60:	4817      	ldr	r0, [pc, #92]	; (402ac0 <nm_drv_init+0x128>)
  402a62:	4b0d      	ldr	r3, [pc, #52]	; (402a98 <nm_drv_init+0x100>)
  402a64:	4798      	blx	r3
  402a66:	480e      	ldr	r0, [pc, #56]	; (402aa0 <nm_drv_init+0x108>)
  402a68:	4b0b      	ldr	r3, [pc, #44]	; (402a98 <nm_drv_init+0x100>)
  402a6a:	4798      	blx	r3
		goto ERR2;
  402a6c:	e005      	b.n	402a7a <nm_drv_init+0xe2>
	}
	
	return ret;
  402a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402a72:	e006      	b.n	402a82 <nm_drv_init+0xea>
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
  402a74:	bf00      	nop
  402a76:	e000      	b.n	402a7a <nm_drv_init+0xe2>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
  402a78:	bf00      	nop
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  402a7a:	4b12      	ldr	r3, [pc, #72]	; (402ac4 <nm_drv_init+0x12c>)
  402a7c:	4798      	blx	r3
ERR1:
	return ret;
  402a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  402a82:	4618      	mov	r0, r3
  402a84:	3710      	adds	r7, #16
  402a86:	46bd      	mov	sp, r7
  402a88:	bd80      	pop	{r7, pc}
  402a8a:	bf00      	nop
  402a8c:	00402649 	.word	0x00402649
  402a90:	0040e664 	.word	0x0040e664
  402a94:	0040e594 	.word	0x0040e594
  402a98:	004079e5 	.word	0x004079e5
  402a9c:	0040e5a8 	.word	0x0040e5a8
  402aa0:	0040e5c4 	.word	0x0040e5c4
  402aa4:	0040e5c8 	.word	0x0040e5c8
  402aa8:	00402281 	.word	0x00402281
  402aac:	0040e5d4 	.word	0x0040e5d4
  402ab0:	004036d5 	.word	0x004036d5
  402ab4:	0040236d 	.word	0x0040236d
  402ab8:	00402495 	.word	0x00402495
  402abc:	004021e1 	.word	0x004021e1
  402ac0:	0040e5e4 	.word	0x0040e5e4
  402ac4:	00402671 	.word	0x00402671

00402ac8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  402ac8:	b580      	push	{r7, lr}
  402aca:	b084      	sub	sp, #16
  402acc:	af00      	add	r7, sp, #0
  402ace:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
  402ad0:	4b23      	ldr	r3, [pc, #140]	; (402b60 <nm_drv_deinit+0x98>)
  402ad2:	4798      	blx	r3
  402ad4:	4603      	mov	r3, r0
  402ad6:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  402ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402adc:	2b00      	cmp	r3, #0
  402ade:	d00c      	beq.n	402afa <nm_drv_deinit+0x32>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  402ae0:	f44f 72ba 	mov.w	r2, #372	; 0x174
  402ae4:	491f      	ldr	r1, [pc, #124]	; (402b64 <nm_drv_deinit+0x9c>)
  402ae6:	4820      	ldr	r0, [pc, #128]	; (402b68 <nm_drv_deinit+0xa0>)
  402ae8:	4b20      	ldr	r3, [pc, #128]	; (402b6c <nm_drv_deinit+0xa4>)
  402aea:	4798      	blx	r3
  402aec:	4820      	ldr	r0, [pc, #128]	; (402b70 <nm_drv_deinit+0xa8>)
  402aee:	4b1f      	ldr	r3, [pc, #124]	; (402b6c <nm_drv_deinit+0xa4>)
  402af0:	4798      	blx	r3
  402af2:	4820      	ldr	r0, [pc, #128]	; (402b74 <nm_drv_deinit+0xac>)
  402af4:	4b1d      	ldr	r3, [pc, #116]	; (402b6c <nm_drv_deinit+0xa4>)
  402af6:	4798      	blx	r3
		goto ERR1;
  402af8:	e02c      	b.n	402b54 <nm_drv_deinit+0x8c>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  402afa:	2000      	movs	r0, #0
  402afc:	4b1e      	ldr	r3, [pc, #120]	; (402b78 <nm_drv_deinit+0xb0>)
  402afe:	4798      	blx	r3
  402b00:	4603      	mov	r3, r0
  402b02:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  402b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402b08:	2b00      	cmp	r3, #0
  402b0a:	d00c      	beq.n	402b26 <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  402b0c:	f240 127b 	movw	r2, #379	; 0x17b
  402b10:	4914      	ldr	r1, [pc, #80]	; (402b64 <nm_drv_deinit+0x9c>)
  402b12:	4815      	ldr	r0, [pc, #84]	; (402b68 <nm_drv_deinit+0xa0>)
  402b14:	4b15      	ldr	r3, [pc, #84]	; (402b6c <nm_drv_deinit+0xa4>)
  402b16:	4798      	blx	r3
  402b18:	4818      	ldr	r0, [pc, #96]	; (402b7c <nm_drv_deinit+0xb4>)
  402b1a:	4b14      	ldr	r3, [pc, #80]	; (402b6c <nm_drv_deinit+0xa4>)
  402b1c:	4798      	blx	r3
  402b1e:	4815      	ldr	r0, [pc, #84]	; (402b74 <nm_drv_deinit+0xac>)
  402b20:	4b12      	ldr	r3, [pc, #72]	; (402b6c <nm_drv_deinit+0xa4>)
  402b22:	4798      	blx	r3
		goto ERR1;
  402b24:	e016      	b.n	402b54 <nm_drv_deinit+0x8c>
	}

	ret = nm_bus_iface_deinit();
  402b26:	4b16      	ldr	r3, [pc, #88]	; (402b80 <nm_drv_deinit+0xb8>)
  402b28:	4798      	blx	r3
  402b2a:	4603      	mov	r3, r0
  402b2c:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
  402b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402b32:	2b00      	cmp	r3, #0
  402b34:	d00c      	beq.n	402b50 <nm_drv_deinit+0x88>
		M2M_ERR("[nmi stop]: fail init bus\n");
  402b36:	f240 1281 	movw	r2, #385	; 0x181
  402b3a:	490a      	ldr	r1, [pc, #40]	; (402b64 <nm_drv_deinit+0x9c>)
  402b3c:	480a      	ldr	r0, [pc, #40]	; (402b68 <nm_drv_deinit+0xa0>)
  402b3e:	4b0b      	ldr	r3, [pc, #44]	; (402b6c <nm_drv_deinit+0xa4>)
  402b40:	4798      	blx	r3
  402b42:	4810      	ldr	r0, [pc, #64]	; (402b84 <nm_drv_deinit+0xbc>)
  402b44:	4b09      	ldr	r3, [pc, #36]	; (402b6c <nm_drv_deinit+0xa4>)
  402b46:	4798      	blx	r3
  402b48:	480a      	ldr	r0, [pc, #40]	; (402b74 <nm_drv_deinit+0xac>)
  402b4a:	4b08      	ldr	r3, [pc, #32]	; (402b6c <nm_drv_deinit+0xa4>)
  402b4c:	4798      	blx	r3
		goto ERR1;
  402b4e:	e001      	b.n	402b54 <nm_drv_deinit+0x8c>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  402b50:	4b0d      	ldr	r3, [pc, #52]	; (402b88 <nm_drv_deinit+0xc0>)
  402b52:	4798      	blx	r3
#endif

ERR1:
	return ret;
  402b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  402b58:	4618      	mov	r0, r3
  402b5a:	3710      	adds	r7, #16
  402b5c:	46bd      	mov	sp, r7
  402b5e:	bd80      	pop	{r7, pc}
  402b60:	00402535 	.word	0x00402535
  402b64:	0040e670 	.word	0x0040e670
  402b68:	0040e594 	.word	0x0040e594
  402b6c:	004079e5 	.word	0x004079e5
  402b70:	0040e604 	.word	0x0040e604
  402b74:	0040e5c4 	.word	0x0040e5c4
  402b78:	00404499 	.word	0x00404499
  402b7c:	0040e624 	.word	0x0040e624
  402b80:	00402671 	.word	0x00402671
  402b84:	0040e648 	.word	0x0040e648
  402b88:	00403805 	.word	0x00403805

00402b8c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  402b8c:	b580      	push	{r7, lr}
  402b8e:	b086      	sub	sp, #24
  402b90:	af00      	add	r7, sp, #0
  402b92:	6078      	str	r0, [r7, #4]
  402b94:	460b      	mov	r3, r1
  402b96:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  402b98:	2300      	movs	r3, #0
  402b9a:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = b;
  402b9c:	687b      	ldr	r3, [r7, #4]
  402b9e:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
  402ba0:	887b      	ldrh	r3, [r7, #2]
  402ba2:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  402ba4:	f107 030c 	add.w	r3, r7, #12
  402ba8:	4619      	mov	r1, r3
  402baa:	2003      	movs	r0, #3
  402bac:	4b03      	ldr	r3, [pc, #12]	; (402bbc <nmi_spi_read+0x30>)
  402bae:	4798      	blx	r3
  402bb0:	4603      	mov	r3, r0
}
  402bb2:	4618      	mov	r0, r3
  402bb4:	3718      	adds	r7, #24
  402bb6:	46bd      	mov	sp, r7
  402bb8:	bd80      	pop	{r7, pc}
  402bba:	bf00      	nop
  402bbc:	00400af9 	.word	0x00400af9

00402bc0 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  402bc0:	b580      	push	{r7, lr}
  402bc2:	b086      	sub	sp, #24
  402bc4:	af00      	add	r7, sp, #0
  402bc6:	6078      	str	r0, [r7, #4]
  402bc8:	460b      	mov	r3, r1
  402bca:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  402bcc:	687b      	ldr	r3, [r7, #4]
  402bce:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = NULL;
  402bd0:	2300      	movs	r3, #0
  402bd2:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
  402bd4:	887b      	ldrh	r3, [r7, #2]
  402bd6:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  402bd8:	f107 030c 	add.w	r3, r7, #12
  402bdc:	4619      	mov	r1, r3
  402bde:	2003      	movs	r0, #3
  402be0:	4b03      	ldr	r3, [pc, #12]	; (402bf0 <nmi_spi_write+0x30>)
  402be2:	4798      	blx	r3
  402be4:	4603      	mov	r3, r0
}
  402be6:	4618      	mov	r0, r3
  402be8:	3718      	adds	r7, #24
  402bea:	46bd      	mov	sp, r7
  402bec:	bd80      	pop	{r7, pc}
  402bee:	bf00      	nop
  402bf0:	00400af9 	.word	0x00400af9

00402bf4 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
  402bf4:	b480      	push	{r7}
  402bf6:	b083      	sub	sp, #12
  402bf8:	af00      	add	r7, sp, #0
  402bfa:	4603      	mov	r3, r0
  402bfc:	460a      	mov	r2, r1
  402bfe:	71fb      	strb	r3, [r7, #7]
  402c00:	4613      	mov	r3, r2
  402c02:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
  402c04:	79fb      	ldrb	r3, [r7, #7]
  402c06:	005a      	lsls	r2, r3, #1
  402c08:	79bb      	ldrb	r3, [r7, #6]
  402c0a:	4053      	eors	r3, r2
  402c0c:	4a03      	ldr	r2, [pc, #12]	; (402c1c <crc7_byte+0x28>)
  402c0e:	5cd3      	ldrb	r3, [r2, r3]
}
  402c10:	4618      	mov	r0, r3
  402c12:	370c      	adds	r7, #12
  402c14:	46bd      	mov	sp, r7
  402c16:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c1a:	4770      	bx	lr
  402c1c:	0040e680 	.word	0x0040e680

00402c20 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
  402c20:	b580      	push	{r7, lr}
  402c22:	b084      	sub	sp, #16
  402c24:	af00      	add	r7, sp, #0
  402c26:	4603      	mov	r3, r0
  402c28:	60b9      	str	r1, [r7, #8]
  402c2a:	607a      	str	r2, [r7, #4]
  402c2c:	73fb      	strb	r3, [r7, #15]
	while (len--)
  402c2e:	e00a      	b.n	402c46 <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
  402c30:	68bb      	ldr	r3, [r7, #8]
  402c32:	1c5a      	adds	r2, r3, #1
  402c34:	60ba      	str	r2, [r7, #8]
  402c36:	781a      	ldrb	r2, [r3, #0]
  402c38:	7bfb      	ldrb	r3, [r7, #15]
  402c3a:	4611      	mov	r1, r2
  402c3c:	4618      	mov	r0, r3
  402c3e:	4b07      	ldr	r3, [pc, #28]	; (402c5c <crc7+0x3c>)
  402c40:	4798      	blx	r3
  402c42:	4603      	mov	r3, r0
  402c44:	73fb      	strb	r3, [r7, #15]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  402c46:	687b      	ldr	r3, [r7, #4]
  402c48:	1e5a      	subs	r2, r3, #1
  402c4a:	607a      	str	r2, [r7, #4]
  402c4c:	2b00      	cmp	r3, #0
  402c4e:	d1ef      	bne.n	402c30 <crc7+0x10>
		crc = crc7_byte(crc, *buffer++);
	return crc;
  402c50:	7bfb      	ldrb	r3, [r7, #15]
}
  402c52:	4618      	mov	r0, r3
  402c54:	3710      	adds	r7, #16
  402c56:	46bd      	mov	sp, r7
  402c58:	bd80      	pop	{r7, pc}
  402c5a:	bf00      	nop
  402c5c:	00402bf5 	.word	0x00402bf5

00402c60 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  402c60:	b590      	push	{r4, r7, lr}
  402c62:	b089      	sub	sp, #36	; 0x24
  402c64:	af00      	add	r7, sp, #0
  402c66:	60b9      	str	r1, [r7, #8]
  402c68:	607a      	str	r2, [r7, #4]
  402c6a:	603b      	str	r3, [r7, #0]
  402c6c:	4603      	mov	r3, r0
  402c6e:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
  402c70:	2305      	movs	r3, #5
  402c72:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
  402c74:	2301      	movs	r3, #1
  402c76:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
  402c78:	7bfb      	ldrb	r3, [r7, #15]
  402c7a:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
  402c7c:	7bfb      	ldrb	r3, [r7, #15]
  402c7e:	3bc1      	subs	r3, #193	; 0xc1
  402c80:	2b0e      	cmp	r3, #14
  402c82:	f200 80cc 	bhi.w	402e1e <spi_cmd+0x1be>
  402c86:	a201      	add	r2, pc, #4	; (adr r2, 402c8c <spi_cmd+0x2c>)
  402c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402c8c:	00402d45 	.word	0x00402d45
  402c90:	00402d45 	.word	0x00402d45
  402c94:	00402da1 	.word	0x00402da1
  402c98:	00402ce5 	.word	0x00402ce5
  402c9c:	00402d0f 	.word	0x00402d0f
  402ca0:	00402d21 	.word	0x00402d21
  402ca4:	00402d6f 	.word	0x00402d6f
  402ca8:	00402d6f 	.word	0x00402d6f
  402cac:	00402de5 	.word	0x00402de5
  402cb0:	00402cc9 	.word	0x00402cc9
  402cb4:	00402e1f 	.word	0x00402e1f
  402cb8:	00402e1f 	.word	0x00402e1f
  402cbc:	00402e1f 	.word	0x00402e1f
  402cc0:	00402e1f 	.word	0x00402e1f
  402cc4:	00402d33 	.word	0x00402d33
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  402cc8:	68bb      	ldr	r3, [r7, #8]
  402cca:	0c1b      	lsrs	r3, r3, #16
  402ccc:	b2db      	uxtb	r3, r3
  402cce:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
  402cd0:	68bb      	ldr	r3, [r7, #8]
  402cd2:	0a1b      	lsrs	r3, r3, #8
  402cd4:	b2db      	uxtb	r3, r3
  402cd6:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
  402cd8:	68bb      	ldr	r3, [r7, #8]
  402cda:	b2db      	uxtb	r3, r3
  402cdc:	75fb      	strb	r3, [r7, #23]
		len = 5;
  402cde:	2305      	movs	r3, #5
  402ce0:	77fb      	strb	r3, [r7, #31]
		break;
  402ce2:	e09f      	b.n	402e24 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  402ce4:	68bb      	ldr	r3, [r7, #8]
  402ce6:	0a1b      	lsrs	r3, r3, #8
  402ce8:	b2db      	uxtb	r3, r3
  402cea:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
  402cec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
  402cf0:	2b00      	cmp	r3, #0
  402cf2:	d004      	beq.n	402cfe <spi_cmd+0x9e>
  402cf4:	7d7b      	ldrb	r3, [r7, #21]
  402cf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402cfa:	b2db      	uxtb	r3, r3
  402cfc:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
  402cfe:	68bb      	ldr	r3, [r7, #8]
  402d00:	b2db      	uxtb	r3, r3
  402d02:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
  402d04:	2300      	movs	r3, #0
  402d06:	75fb      	strb	r3, [r7, #23]
		len = 5;
  402d08:	2305      	movs	r3, #5
  402d0a:	77fb      	strb	r3, [r7, #31]
		break;
  402d0c:	e08a      	b.n	402e24 <spi_cmd+0x1c4>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  402d0e:	2300      	movs	r3, #0
  402d10:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
  402d12:	2300      	movs	r3, #0
  402d14:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
  402d16:	2300      	movs	r3, #0
  402d18:	75fb      	strb	r3, [r7, #23]
		len = 5;
  402d1a:	2305      	movs	r3, #5
  402d1c:	77fb      	strb	r3, [r7, #31]
		break;
  402d1e:	e081      	b.n	402e24 <spi_cmd+0x1c4>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  402d20:	2300      	movs	r3, #0
  402d22:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
  402d24:	2300      	movs	r3, #0
  402d26:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
  402d28:	2300      	movs	r3, #0
  402d2a:	75fb      	strb	r3, [r7, #23]
		len = 5;
  402d2c:	2305      	movs	r3, #5
  402d2e:	77fb      	strb	r3, [r7, #31]
		break;
  402d30:	e078      	b.n	402e24 <spi_cmd+0x1c4>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  402d32:	23ff      	movs	r3, #255	; 0xff
  402d34:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
  402d36:	23ff      	movs	r3, #255	; 0xff
  402d38:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
  402d3a:	23ff      	movs	r3, #255	; 0xff
  402d3c:	75fb      	strb	r3, [r7, #23]
		len = 5;
  402d3e:	2305      	movs	r3, #5
  402d40:	77fb      	strb	r3, [r7, #31]
		break;
  402d42:	e06f      	b.n	402e24 <spi_cmd+0x1c4>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  402d44:	68bb      	ldr	r3, [r7, #8]
  402d46:	0c1b      	lsrs	r3, r3, #16
  402d48:	b2db      	uxtb	r3, r3
  402d4a:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
  402d4c:	68bb      	ldr	r3, [r7, #8]
  402d4e:	0a1b      	lsrs	r3, r3, #8
  402d50:	b2db      	uxtb	r3, r3
  402d52:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
  402d54:	68bb      	ldr	r3, [r7, #8]
  402d56:	b2db      	uxtb	r3, r3
  402d58:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
  402d5a:	683b      	ldr	r3, [r7, #0]
  402d5c:	0a1b      	lsrs	r3, r3, #8
  402d5e:	b2db      	uxtb	r3, r3
  402d60:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
  402d62:	683b      	ldr	r3, [r7, #0]
  402d64:	b2db      	uxtb	r3, r3
  402d66:	767b      	strb	r3, [r7, #25]
		len = 7;
  402d68:	2307      	movs	r3, #7
  402d6a:	77fb      	strb	r3, [r7, #31]
		break;
  402d6c:	e05a      	b.n	402e24 <spi_cmd+0x1c4>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  402d6e:	68bb      	ldr	r3, [r7, #8]
  402d70:	0c1b      	lsrs	r3, r3, #16
  402d72:	b2db      	uxtb	r3, r3
  402d74:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
  402d76:	68bb      	ldr	r3, [r7, #8]
  402d78:	0a1b      	lsrs	r3, r3, #8
  402d7a:	b2db      	uxtb	r3, r3
  402d7c:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
  402d7e:	68bb      	ldr	r3, [r7, #8]
  402d80:	b2db      	uxtb	r3, r3
  402d82:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
  402d84:	683b      	ldr	r3, [r7, #0]
  402d86:	0c1b      	lsrs	r3, r3, #16
  402d88:	b2db      	uxtb	r3, r3
  402d8a:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
  402d8c:	683b      	ldr	r3, [r7, #0]
  402d8e:	0a1b      	lsrs	r3, r3, #8
  402d90:	b2db      	uxtb	r3, r3
  402d92:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
  402d94:	683b      	ldr	r3, [r7, #0]
  402d96:	b2db      	uxtb	r3, r3
  402d98:	76bb      	strb	r3, [r7, #26]
		len = 8;
  402d9a:	2308      	movs	r3, #8
  402d9c:	77fb      	strb	r3, [r7, #31]
		break;
  402d9e:	e041      	b.n	402e24 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  402da0:	68bb      	ldr	r3, [r7, #8]
  402da2:	0a1b      	lsrs	r3, r3, #8
  402da4:	b2db      	uxtb	r3, r3
  402da6:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
  402da8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
  402dac:	2b00      	cmp	r3, #0
  402dae:	d004      	beq.n	402dba <spi_cmd+0x15a>
  402db0:	7d7b      	ldrb	r3, [r7, #21]
  402db2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402db6:	b2db      	uxtb	r3, r3
  402db8:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
  402dba:	68bb      	ldr	r3, [r7, #8]
  402dbc:	b2db      	uxtb	r3, r3
  402dbe:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
  402dc0:	687b      	ldr	r3, [r7, #4]
  402dc2:	0e1b      	lsrs	r3, r3, #24
  402dc4:	b2db      	uxtb	r3, r3
  402dc6:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
  402dc8:	687b      	ldr	r3, [r7, #4]
  402dca:	0c1b      	lsrs	r3, r3, #16
  402dcc:	b2db      	uxtb	r3, r3
  402dce:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
  402dd0:	687b      	ldr	r3, [r7, #4]
  402dd2:	0a1b      	lsrs	r3, r3, #8
  402dd4:	b2db      	uxtb	r3, r3
  402dd6:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
  402dd8:	687b      	ldr	r3, [r7, #4]
  402dda:	b2db      	uxtb	r3, r3
  402ddc:	76bb      	strb	r3, [r7, #26]
		len = 8;
  402dde:	2308      	movs	r3, #8
  402de0:	77fb      	strb	r3, [r7, #31]
		break;
  402de2:	e01f      	b.n	402e24 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  402de4:	68bb      	ldr	r3, [r7, #8]
  402de6:	0c1b      	lsrs	r3, r3, #16
  402de8:	b2db      	uxtb	r3, r3
  402dea:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
  402dec:	68bb      	ldr	r3, [r7, #8]
  402dee:	0a1b      	lsrs	r3, r3, #8
  402df0:	b2db      	uxtb	r3, r3
  402df2:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
  402df4:	68bb      	ldr	r3, [r7, #8]
  402df6:	b2db      	uxtb	r3, r3
  402df8:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
  402dfa:	687b      	ldr	r3, [r7, #4]
  402dfc:	0e1b      	lsrs	r3, r3, #24
  402dfe:	b2db      	uxtb	r3, r3
  402e00:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
  402e02:	687b      	ldr	r3, [r7, #4]
  402e04:	0c1b      	lsrs	r3, r3, #16
  402e06:	b2db      	uxtb	r3, r3
  402e08:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
  402e0a:	687b      	ldr	r3, [r7, #4]
  402e0c:	0a1b      	lsrs	r3, r3, #8
  402e0e:	b2db      	uxtb	r3, r3
  402e10:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
  402e12:	687b      	ldr	r3, [r7, #4]
  402e14:	b2db      	uxtb	r3, r3
  402e16:	76fb      	strb	r3, [r7, #27]
		len = 9;
  402e18:	2309      	movs	r3, #9
  402e1a:	77fb      	strb	r3, [r7, #31]
		break;
  402e1c:	e002      	b.n	402e24 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
  402e1e:	2300      	movs	r3, #0
  402e20:	77bb      	strb	r3, [r7, #30]
		break;
  402e22:	bf00      	nop
	}

	if (result) {
  402e24:	f997 301e 	ldrsb.w	r3, [r7, #30]
  402e28:	2b00      	cmp	r3, #0
  402e2a:	d033      	beq.n	402e94 <spi_cmd+0x234>
		if (!gu8Crc_off)
  402e2c:	4b1c      	ldr	r3, [pc, #112]	; (402ea0 <spi_cmd+0x240>)
  402e2e:	781b      	ldrb	r3, [r3, #0]
  402e30:	2b00      	cmp	r3, #0
  402e32:	d113      	bne.n	402e5c <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402e34:	7ffb      	ldrb	r3, [r7, #31]
  402e36:	1e5c      	subs	r4, r3, #1
  402e38:	7ffb      	ldrb	r3, [r7, #31]
  402e3a:	3b01      	subs	r3, #1
  402e3c:	461a      	mov	r2, r3
  402e3e:	f107 0314 	add.w	r3, r7, #20
  402e42:	4619      	mov	r1, r3
  402e44:	207f      	movs	r0, #127	; 0x7f
  402e46:	4b17      	ldr	r3, [pc, #92]	; (402ea4 <spi_cmd+0x244>)
  402e48:	4798      	blx	r3
  402e4a:	4603      	mov	r3, r0
  402e4c:	005b      	lsls	r3, r3, #1
  402e4e:	b2da      	uxtb	r2, r3
  402e50:	f107 0320 	add.w	r3, r7, #32
  402e54:	4423      	add	r3, r4
  402e56:	f803 2c0c 	strb.w	r2, [r3, #-12]
  402e5a:	e002      	b.n	402e62 <spi_cmd+0x202>
		else
			len-=1;
  402e5c:	7ffb      	ldrb	r3, [r7, #31]
  402e5e:	3b01      	subs	r3, #1
  402e60:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  402e62:	7ffb      	ldrb	r3, [r7, #31]
  402e64:	b29a      	uxth	r2, r3
  402e66:	f107 0314 	add.w	r3, r7, #20
  402e6a:	4611      	mov	r1, r2
  402e6c:	4618      	mov	r0, r3
  402e6e:	4b0e      	ldr	r3, [pc, #56]	; (402ea8 <spi_cmd+0x248>)
  402e70:	4798      	blx	r3
  402e72:	4603      	mov	r3, r0
  402e74:	2b00      	cmp	r3, #0
  402e76:	d00d      	beq.n	402e94 <spi_cmd+0x234>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  402e78:	f44f 7284 	mov.w	r2, #264	; 0x108
  402e7c:	490b      	ldr	r1, [pc, #44]	; (402eac <spi_cmd+0x24c>)
  402e7e:	480c      	ldr	r0, [pc, #48]	; (402eb0 <spi_cmd+0x250>)
  402e80:	4b0c      	ldr	r3, [pc, #48]	; (402eb4 <spi_cmd+0x254>)
  402e82:	4798      	blx	r3
  402e84:	480c      	ldr	r0, [pc, #48]	; (402eb8 <spi_cmd+0x258>)
  402e86:	4b0b      	ldr	r3, [pc, #44]	; (402eb4 <spi_cmd+0x254>)
  402e88:	4798      	blx	r3
  402e8a:	480c      	ldr	r0, [pc, #48]	; (402ebc <spi_cmd+0x25c>)
  402e8c:	4b09      	ldr	r3, [pc, #36]	; (402eb4 <spi_cmd+0x254>)
  402e8e:	4798      	blx	r3
			result = N_FAIL;
  402e90:	2300      	movs	r3, #0
  402e92:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
  402e94:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
  402e98:	4618      	mov	r0, r3
  402e9a:	3724      	adds	r7, #36	; 0x24
  402e9c:	46bd      	mov	sp, r7
  402e9e:	bd90      	pop	{r4, r7, pc}
  402ea0:	20400904 	.word	0x20400904
  402ea4:	00402c21 	.word	0x00402c21
  402ea8:	00402bc1 	.word	0x00402bc1
  402eac:	0040ec4c 	.word	0x0040ec4c
  402eb0:	0040e780 	.word	0x0040e780
  402eb4:	004079e5 	.word	0x004079e5
  402eb8:	0040e794 	.word	0x0040e794
  402ebc:	0040e7c0 	.word	0x0040e7c0

00402ec0 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
  402ec0:	b580      	push	{r7, lr}
  402ec2:	b084      	sub	sp, #16
  402ec4:	af00      	add	r7, sp, #0
  402ec6:	4603      	mov	r3, r0
  402ec8:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
  402eca:	2301      	movs	r3, #1
  402ecc:	73fb      	strb	r3, [r7, #15]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
  402ece:	79fb      	ldrb	r3, [r7, #7]
  402ed0:	2bcf      	cmp	r3, #207	; 0xcf
  402ed2:	d005      	beq.n	402ee0 <spi_cmd_rsp+0x20>
  402ed4:	79fb      	ldrb	r3, [r7, #7]
  402ed6:	2bc5      	cmp	r3, #197	; 0xc5
  402ed8:	d002      	beq.n	402ee0 <spi_cmd_rsp+0x20>
		 (cmd == CMD_TERMINATE) ||
  402eda:	79fb      	ldrb	r3, [r7, #7]
  402edc:	2bc6      	cmp	r3, #198	; 0xc6
  402ede:	d10b      	bne.n	402ef8 <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402ee0:	f107 030d 	add.w	r3, r7, #13
  402ee4:	2101      	movs	r1, #1
  402ee6:	4618      	mov	r0, r3
  402ee8:	4b2c      	ldr	r3, [pc, #176]	; (402f9c <spi_cmd_rsp+0xdc>)
  402eea:	4798      	blx	r3
  402eec:	4603      	mov	r3, r0
  402eee:	2b00      	cmp	r3, #0
  402ef0:	d002      	beq.n	402ef8 <spi_cmd_rsp+0x38>
			result = N_FAIL;
  402ef2:	2300      	movs	r3, #0
  402ef4:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
  402ef6:	e04a      	b.n	402f8e <spi_cmd_rsp+0xce>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
  402ef8:	230a      	movs	r3, #10
  402efa:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402efc:	f107 030d 	add.w	r3, r7, #13
  402f00:	2101      	movs	r1, #1
  402f02:	4618      	mov	r0, r3
  402f04:	4b25      	ldr	r3, [pc, #148]	; (402f9c <spi_cmd_rsp+0xdc>)
  402f06:	4798      	blx	r3
  402f08:	4603      	mov	r3, r0
  402f0a:	2b00      	cmp	r3, #0
  402f0c:	d00e      	beq.n	402f2c <spi_cmd_rsp+0x6c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  402f0e:	f240 1227 	movw	r2, #295	; 0x127
  402f12:	4923      	ldr	r1, [pc, #140]	; (402fa0 <spi_cmd_rsp+0xe0>)
  402f14:	4823      	ldr	r0, [pc, #140]	; (402fa4 <spi_cmd_rsp+0xe4>)
  402f16:	4b24      	ldr	r3, [pc, #144]	; (402fa8 <spi_cmd_rsp+0xe8>)
  402f18:	4798      	blx	r3
  402f1a:	4824      	ldr	r0, [pc, #144]	; (402fac <spi_cmd_rsp+0xec>)
  402f1c:	4b22      	ldr	r3, [pc, #136]	; (402fa8 <spi_cmd_rsp+0xe8>)
  402f1e:	4798      	blx	r3
  402f20:	4823      	ldr	r0, [pc, #140]	; (402fb0 <spi_cmd_rsp+0xf0>)
  402f22:	4b21      	ldr	r3, [pc, #132]	; (402fa8 <spi_cmd_rsp+0xe8>)
  402f24:	4798      	blx	r3
			result = N_FAIL;
  402f26:	2300      	movs	r3, #0
  402f28:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
  402f2a:	e030      	b.n	402f8e <spi_cmd_rsp+0xce>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  402f2c:	7b7b      	ldrb	r3, [r7, #13]
  402f2e:	79fa      	ldrb	r2, [r7, #7]
  402f30:	429a      	cmp	r2, r3
  402f32:	d007      	beq.n	402f44 <spi_cmd_rsp+0x84>
  402f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
  402f38:	b2da      	uxtb	r2, r3
  402f3a:	3a01      	subs	r2, #1
  402f3c:	b2d2      	uxtb	r2, r2
  402f3e:	73ba      	strb	r2, [r7, #14]
  402f40:	2b00      	cmp	r3, #0
  402f42:	dcdb      	bgt.n	402efc <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
  402f44:	230a      	movs	r3, #10
  402f46:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402f48:	f107 030d 	add.w	r3, r7, #13
  402f4c:	2101      	movs	r1, #1
  402f4e:	4618      	mov	r0, r3
  402f50:	4b12      	ldr	r3, [pc, #72]	; (402f9c <spi_cmd_rsp+0xdc>)
  402f52:	4798      	blx	r3
  402f54:	4603      	mov	r3, r0
  402f56:	2b00      	cmp	r3, #0
  402f58:	d00e      	beq.n	402f78 <spi_cmd_rsp+0xb8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  402f5a:	f240 1235 	movw	r2, #309	; 0x135
  402f5e:	4910      	ldr	r1, [pc, #64]	; (402fa0 <spi_cmd_rsp+0xe0>)
  402f60:	4810      	ldr	r0, [pc, #64]	; (402fa4 <spi_cmd_rsp+0xe4>)
  402f62:	4b11      	ldr	r3, [pc, #68]	; (402fa8 <spi_cmd_rsp+0xe8>)
  402f64:	4798      	blx	r3
  402f66:	4811      	ldr	r0, [pc, #68]	; (402fac <spi_cmd_rsp+0xec>)
  402f68:	4b0f      	ldr	r3, [pc, #60]	; (402fa8 <spi_cmd_rsp+0xe8>)
  402f6a:	4798      	blx	r3
  402f6c:	4810      	ldr	r0, [pc, #64]	; (402fb0 <spi_cmd_rsp+0xf0>)
  402f6e:	4b0e      	ldr	r3, [pc, #56]	; (402fa8 <spi_cmd_rsp+0xe8>)
  402f70:	4798      	blx	r3
			result = N_FAIL;
  402f72:	2300      	movs	r3, #0
  402f74:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
  402f76:	e00a      	b.n	402f8e <spi_cmd_rsp+0xce>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  402f78:	7b7b      	ldrb	r3, [r7, #13]
  402f7a:	2b00      	cmp	r3, #0
  402f7c:	d007      	beq.n	402f8e <spi_cmd_rsp+0xce>
  402f7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
  402f82:	b2da      	uxtb	r2, r3
  402f84:	3a01      	subs	r2, #1
  402f86:	b2d2      	uxtb	r2, r2
  402f88:	73ba      	strb	r2, [r7, #14]
  402f8a:	2b00      	cmp	r3, #0
  402f8c:	dcdc      	bgt.n	402f48 <spi_cmd_rsp+0x88>

_fail_:

	return result;
  402f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  402f92:	4618      	mov	r0, r3
  402f94:	3710      	adds	r7, #16
  402f96:	46bd      	mov	sp, r7
  402f98:	bd80      	pop	{r7, pc}
  402f9a:	bf00      	nop
  402f9c:	00402b8d 	.word	0x00402b8d
  402fa0:	0040ec54 	.word	0x0040ec54
  402fa4:	0040e780 	.word	0x0040e780
  402fa8:	004079e5 	.word	0x004079e5
  402fac:	0040e7c4 	.word	0x0040e7c4
  402fb0:	0040e7c0 	.word	0x0040e7c0

00402fb4 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  402fb4:	b580      	push	{r7, lr}
  402fb6:	b086      	sub	sp, #24
  402fb8:	af00      	add	r7, sp, #0
  402fba:	6078      	str	r0, [r7, #4]
  402fbc:	460b      	mov	r3, r1
  402fbe:	807b      	strh	r3, [r7, #2]
  402fc0:	4613      	mov	r3, r2
  402fc2:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
  402fc4:	2301      	movs	r3, #1
  402fc6:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  402fc8:	2300      	movs	r3, #0
  402fca:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
  402fcc:	887b      	ldrh	r3, [r7, #2]
  402fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  402fd2:	d802      	bhi.n	402fda <spi_data_read+0x26>
			nbytes = sz;
  402fd4:	887b      	ldrh	r3, [r7, #2]
  402fd6:	827b      	strh	r3, [r7, #18]
  402fd8:	e002      	b.n	402fe0 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
  402fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402fde:	827b      	strh	r3, [r7, #18]

		/**
			Data Respnose header
		**/
		retry = 10;
  402fe0:	230a      	movs	r3, #10
  402fe2:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402fe4:	f107 030b 	add.w	r3, r7, #11
  402fe8:	2101      	movs	r1, #1
  402fea:	4618      	mov	r0, r3
  402fec:	4b46      	ldr	r3, [pc, #280]	; (403108 <spi_data_read+0x154>)
  402fee:	4798      	blx	r3
  402ff0:	4603      	mov	r3, r0
  402ff2:	2b00      	cmp	r3, #0
  402ff4:	d00e      	beq.n	403014 <spi_data_read+0x60>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  402ff6:	f240 1257 	movw	r2, #343	; 0x157
  402ffa:	4944      	ldr	r1, [pc, #272]	; (40310c <spi_data_read+0x158>)
  402ffc:	4844      	ldr	r0, [pc, #272]	; (403110 <spi_data_read+0x15c>)
  402ffe:	4b45      	ldr	r3, [pc, #276]	; (403114 <spi_data_read+0x160>)
  403000:	4798      	blx	r3
  403002:	4845      	ldr	r0, [pc, #276]	; (403118 <spi_data_read+0x164>)
  403004:	4b43      	ldr	r3, [pc, #268]	; (403114 <spi_data_read+0x160>)
  403006:	4798      	blx	r3
  403008:	4844      	ldr	r0, [pc, #272]	; (40311c <spi_data_read+0x168>)
  40300a:	4b42      	ldr	r3, [pc, #264]	; (403114 <spi_data_read+0x160>)
  40300c:	4798      	blx	r3
				result = N_FAIL;
  40300e:	2300      	movs	r3, #0
  403010:	747b      	strb	r3, [r7, #17]
				break;
  403012:	e010      	b.n	403036 <spi_data_read+0x82>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  403014:	7afb      	ldrb	r3, [r7, #11]
  403016:	091b      	lsrs	r3, r3, #4
  403018:	b2db      	uxtb	r3, r3
  40301a:	f003 030f 	and.w	r3, r3, #15
  40301e:	2b0f      	cmp	r3, #15
  403020:	d008      	beq.n	403034 <spi_data_read+0x80>
				break;
		} while (retry--);
  403022:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  403026:	b29a      	uxth	r2, r3
  403028:	3a01      	subs	r2, #1
  40302a:	b292      	uxth	r2, r2
  40302c:	82fa      	strh	r2, [r7, #22]
  40302e:	2b00      	cmp	r3, #0
  403030:	d1d8      	bne.n	402fe4 <spi_data_read+0x30>
  403032:	e000      	b.n	403036 <spi_data_read+0x82>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
  403034:	bf00      	nop
		} while (retry--);

		if (result == N_FAIL)
  403036:	f997 3011 	ldrsb.w	r3, [r7, #17]
  40303a:	2b00      	cmp	r3, #0
  40303c:	d05c      	beq.n	4030f8 <spi_data_read+0x144>
			break;

		if (retry <= 0) {
  40303e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  403042:	2b00      	cmp	r3, #0
  403044:	dc10      	bgt.n	403068 <spi_data_read+0xb4>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  403046:	f240 1263 	movw	r2, #355	; 0x163
  40304a:	4930      	ldr	r1, [pc, #192]	; (40310c <spi_data_read+0x158>)
  40304c:	4830      	ldr	r0, [pc, #192]	; (403110 <spi_data_read+0x15c>)
  40304e:	4b31      	ldr	r3, [pc, #196]	; (403114 <spi_data_read+0x160>)
  403050:	4798      	blx	r3
  403052:	7afb      	ldrb	r3, [r7, #11]
  403054:	4619      	mov	r1, r3
  403056:	4832      	ldr	r0, [pc, #200]	; (403120 <spi_data_read+0x16c>)
  403058:	4b2e      	ldr	r3, [pc, #184]	; (403114 <spi_data_read+0x160>)
  40305a:	4798      	blx	r3
  40305c:	482f      	ldr	r0, [pc, #188]	; (40311c <spi_data_read+0x168>)
  40305e:	4b2d      	ldr	r3, [pc, #180]	; (403114 <spi_data_read+0x160>)
  403060:	4798      	blx	r3
			result = N_FAIL;
  403062:	2300      	movs	r3, #0
  403064:	747b      	strb	r3, [r7, #17]
			break;
  403066:	e048      	b.n	4030fa <spi_data_read+0x146>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  403068:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  40306c:	687a      	ldr	r2, [r7, #4]
  40306e:	4413      	add	r3, r2
  403070:	8a7a      	ldrh	r2, [r7, #18]
  403072:	4611      	mov	r1, r2
  403074:	4618      	mov	r0, r3
  403076:	4b24      	ldr	r3, [pc, #144]	; (403108 <spi_data_read+0x154>)
  403078:	4798      	blx	r3
  40307a:	4603      	mov	r3, r0
  40307c:	2b00      	cmp	r3, #0
  40307e:	d00e      	beq.n	40309e <spi_data_read+0xea>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  403080:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  403084:	4921      	ldr	r1, [pc, #132]	; (40310c <spi_data_read+0x158>)
  403086:	4822      	ldr	r0, [pc, #136]	; (403110 <spi_data_read+0x15c>)
  403088:	4b22      	ldr	r3, [pc, #136]	; (403114 <spi_data_read+0x160>)
  40308a:	4798      	blx	r3
  40308c:	4825      	ldr	r0, [pc, #148]	; (403124 <spi_data_read+0x170>)
  40308e:	4b21      	ldr	r3, [pc, #132]	; (403114 <spi_data_read+0x160>)
  403090:	4798      	blx	r3
  403092:	4822      	ldr	r0, [pc, #136]	; (40311c <spi_data_read+0x168>)
  403094:	4b1f      	ldr	r3, [pc, #124]	; (403114 <spi_data_read+0x160>)
  403096:	4798      	blx	r3
			result = N_FAIL;
  403098:	2300      	movs	r3, #0
  40309a:	747b      	strb	r3, [r7, #17]
			break;
  40309c:	e02d      	b.n	4030fa <spi_data_read+0x146>
		}
		if(!clockless)
  40309e:	787b      	ldrb	r3, [r7, #1]
  4030a0:	2b00      	cmp	r3, #0
  4030a2:	d11b      	bne.n	4030dc <spi_data_read+0x128>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  4030a4:	4b20      	ldr	r3, [pc, #128]	; (403128 <spi_data_read+0x174>)
  4030a6:	781b      	ldrb	r3, [r3, #0]
  4030a8:	2b00      	cmp	r3, #0
  4030aa:	d117      	bne.n	4030dc <spi_data_read+0x128>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  4030ac:	f107 030c 	add.w	r3, r7, #12
  4030b0:	2102      	movs	r1, #2
  4030b2:	4618      	mov	r0, r3
  4030b4:	4b14      	ldr	r3, [pc, #80]	; (403108 <spi_data_read+0x154>)
  4030b6:	4798      	blx	r3
  4030b8:	4603      	mov	r3, r0
  4030ba:	2b00      	cmp	r3, #0
  4030bc:	d00e      	beq.n	4030dc <spi_data_read+0x128>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  4030be:	f240 1277 	movw	r2, #375	; 0x177
  4030c2:	4912      	ldr	r1, [pc, #72]	; (40310c <spi_data_read+0x158>)
  4030c4:	4812      	ldr	r0, [pc, #72]	; (403110 <spi_data_read+0x15c>)
  4030c6:	4b13      	ldr	r3, [pc, #76]	; (403114 <spi_data_read+0x160>)
  4030c8:	4798      	blx	r3
  4030ca:	4818      	ldr	r0, [pc, #96]	; (40312c <spi_data_read+0x178>)
  4030cc:	4b11      	ldr	r3, [pc, #68]	; (403114 <spi_data_read+0x160>)
  4030ce:	4798      	blx	r3
  4030d0:	4812      	ldr	r0, [pc, #72]	; (40311c <spi_data_read+0x168>)
  4030d2:	4b10      	ldr	r3, [pc, #64]	; (403114 <spi_data_read+0x160>)
  4030d4:	4798      	blx	r3
					result = N_FAIL;
  4030d6:	2300      	movs	r3, #0
  4030d8:	747b      	strb	r3, [r7, #17]
					break;
  4030da:	e00e      	b.n	4030fa <spi_data_read+0x146>
				}
			}
		}
		ix += nbytes;
  4030dc:	8aba      	ldrh	r2, [r7, #20]
  4030de:	8a7b      	ldrh	r3, [r7, #18]
  4030e0:	4413      	add	r3, r2
  4030e2:	b29b      	uxth	r3, r3
  4030e4:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
  4030e6:	8a7b      	ldrh	r3, [r7, #18]
  4030e8:	887a      	ldrh	r2, [r7, #2]
  4030ea:	1ad3      	subs	r3, r2, r3
  4030ec:	807b      	strh	r3, [r7, #2]

	} while (sz);
  4030ee:	887b      	ldrh	r3, [r7, #2]
  4030f0:	2b00      	cmp	r3, #0
  4030f2:	f47f af6b 	bne.w	402fcc <spi_data_read+0x18>
  4030f6:	e000      	b.n	4030fa <spi_data_read+0x146>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
  4030f8:	bf00      	nop
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
  4030fa:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
  4030fe:	4618      	mov	r0, r3
  403100:	3718      	adds	r7, #24
  403102:	46bd      	mov	sp, r7
  403104:	bd80      	pop	{r7, pc}
  403106:	bf00      	nop
  403108:	00402b8d 	.word	0x00402b8d
  40310c:	0040ec60 	.word	0x0040ec60
  403110:	0040e780 	.word	0x0040e780
  403114:	004079e5 	.word	0x004079e5
  403118:	0040e7f8 	.word	0x0040e7f8
  40311c:	0040e7c0 	.word	0x0040e7c0
  403120:	0040e82c 	.word	0x0040e82c
  403124:	0040e85c 	.word	0x0040e85c
  403128:	20400904 	.word	0x20400904
  40312c:	0040e890 	.word	0x0040e890

00403130 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
  403130:	b580      	push	{r7, lr}
  403132:	b086      	sub	sp, #24
  403134:	af00      	add	r7, sp, #0
  403136:	6078      	str	r0, [r7, #4]
  403138:	460b      	mov	r3, r1
  40313a:	807b      	strh	r3, [r7, #2]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
  40313c:	2301      	movs	r3, #1
  40313e:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
  403140:	2300      	movs	r3, #0
  403142:	81bb      	strh	r3, [r7, #12]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  403144:	2300      	movs	r3, #0
  403146:	82fb      	strh	r3, [r7, #22]
	do {
		if (sz <= DATA_PKT_SZ)
  403148:	887b      	ldrh	r3, [r7, #2]
  40314a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  40314e:	d802      	bhi.n	403156 <spi_data_write+0x26>
			nbytes = sz;
  403150:	887b      	ldrh	r3, [r7, #2]
  403152:	82bb      	strh	r3, [r7, #20]
  403154:	e002      	b.n	40315c <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
  403156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40315a:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
  40315c:	23f0      	movs	r3, #240	; 0xf0
  40315e:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
  403160:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  403164:	2b00      	cmp	r3, #0
  403166:	d109      	bne.n	40317c <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
  403168:	887b      	ldrh	r3, [r7, #2]
  40316a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  40316e:	d802      	bhi.n	403176 <spi_data_write+0x46>
				order = 0x3;
  403170:	2303      	movs	r3, #3
  403172:	74bb      	strb	r3, [r7, #18]
  403174:	e00b      	b.n	40318e <spi_data_write+0x5e>
			else
				order = 0x1;
  403176:	2301      	movs	r3, #1
  403178:	74bb      	strb	r3, [r7, #18]
  40317a:	e008      	b.n	40318e <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
  40317c:	887b      	ldrh	r3, [r7, #2]
  40317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  403182:	d802      	bhi.n	40318a <spi_data_write+0x5a>
				order = 0x3;
  403184:	2303      	movs	r3, #3
  403186:	74bb      	strb	r3, [r7, #18]
  403188:	e001      	b.n	40318e <spi_data_write+0x5e>
			else
				order = 0x2;
  40318a:	2302      	movs	r3, #2
  40318c:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
  40318e:	7c7a      	ldrb	r2, [r7, #17]
  403190:	7cbb      	ldrb	r3, [r7, #18]
  403192:	4313      	orrs	r3, r2
  403194:	b2db      	uxtb	r3, r3
  403196:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  403198:	f107 0311 	add.w	r3, r7, #17
  40319c:	2101      	movs	r1, #1
  40319e:	4618      	mov	r0, r3
  4031a0:	4b2e      	ldr	r3, [pc, #184]	; (40325c <spi_data_write+0x12c>)
  4031a2:	4798      	blx	r3
  4031a4:	4603      	mov	r3, r0
  4031a6:	2b00      	cmp	r3, #0
  4031a8:	d00e      	beq.n	4031c8 <spi_data_write+0x98>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  4031aa:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4031ae:	492c      	ldr	r1, [pc, #176]	; (403260 <spi_data_write+0x130>)
  4031b0:	482c      	ldr	r0, [pc, #176]	; (403264 <spi_data_write+0x134>)
  4031b2:	4b2d      	ldr	r3, [pc, #180]	; (403268 <spi_data_write+0x138>)
  4031b4:	4798      	blx	r3
  4031b6:	482d      	ldr	r0, [pc, #180]	; (40326c <spi_data_write+0x13c>)
  4031b8:	4b2b      	ldr	r3, [pc, #172]	; (403268 <spi_data_write+0x138>)
  4031ba:	4798      	blx	r3
  4031bc:	482c      	ldr	r0, [pc, #176]	; (403270 <spi_data_write+0x140>)
  4031be:	4b2a      	ldr	r3, [pc, #168]	; (403268 <spi_data_write+0x138>)
  4031c0:	4798      	blx	r3
			result = N_FAIL;
  4031c2:	2300      	movs	r3, #0
  4031c4:	74fb      	strb	r3, [r7, #19]
			break;
  4031c6:	e043      	b.n	403250 <spi_data_write+0x120>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  4031c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  4031cc:	687a      	ldr	r2, [r7, #4]
  4031ce:	4413      	add	r3, r2
  4031d0:	8aba      	ldrh	r2, [r7, #20]
  4031d2:	4611      	mov	r1, r2
  4031d4:	4618      	mov	r0, r3
  4031d6:	4b21      	ldr	r3, [pc, #132]	; (40325c <spi_data_write+0x12c>)
  4031d8:	4798      	blx	r3
  4031da:	4603      	mov	r3, r0
  4031dc:	2b00      	cmp	r3, #0
  4031de:	d00e      	beq.n	4031fe <spi_data_write+0xce>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  4031e0:	f240 12b1 	movw	r2, #433	; 0x1b1
  4031e4:	491e      	ldr	r1, [pc, #120]	; (403260 <spi_data_write+0x130>)
  4031e6:	481f      	ldr	r0, [pc, #124]	; (403264 <spi_data_write+0x134>)
  4031e8:	4b1f      	ldr	r3, [pc, #124]	; (403268 <spi_data_write+0x138>)
  4031ea:	4798      	blx	r3
  4031ec:	4821      	ldr	r0, [pc, #132]	; (403274 <spi_data_write+0x144>)
  4031ee:	4b1e      	ldr	r3, [pc, #120]	; (403268 <spi_data_write+0x138>)
  4031f0:	4798      	blx	r3
  4031f2:	481f      	ldr	r0, [pc, #124]	; (403270 <spi_data_write+0x140>)
  4031f4:	4b1c      	ldr	r3, [pc, #112]	; (403268 <spi_data_write+0x138>)
  4031f6:	4798      	blx	r3
			result = N_FAIL;
  4031f8:	2300      	movs	r3, #0
  4031fa:	74fb      	strb	r3, [r7, #19]
			break;
  4031fc:	e028      	b.n	403250 <spi_data_write+0x120>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  4031fe:	4b1e      	ldr	r3, [pc, #120]	; (403278 <spi_data_write+0x148>)
  403200:	781b      	ldrb	r3, [r3, #0]
  403202:	2b00      	cmp	r3, #0
  403204:	d117      	bne.n	403236 <spi_data_write+0x106>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  403206:	f107 030c 	add.w	r3, r7, #12
  40320a:	2102      	movs	r1, #2
  40320c:	4618      	mov	r0, r3
  40320e:	4b13      	ldr	r3, [pc, #76]	; (40325c <spi_data_write+0x12c>)
  403210:	4798      	blx	r3
  403212:	4603      	mov	r3, r0
  403214:	2b00      	cmp	r3, #0
  403216:	d00e      	beq.n	403236 <spi_data_write+0x106>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  403218:	f240 12bb 	movw	r2, #443	; 0x1bb
  40321c:	4910      	ldr	r1, [pc, #64]	; (403260 <spi_data_write+0x130>)
  40321e:	4811      	ldr	r0, [pc, #68]	; (403264 <spi_data_write+0x134>)
  403220:	4b11      	ldr	r3, [pc, #68]	; (403268 <spi_data_write+0x138>)
  403222:	4798      	blx	r3
  403224:	4815      	ldr	r0, [pc, #84]	; (40327c <spi_data_write+0x14c>)
  403226:	4b10      	ldr	r3, [pc, #64]	; (403268 <spi_data_write+0x138>)
  403228:	4798      	blx	r3
  40322a:	4811      	ldr	r0, [pc, #68]	; (403270 <spi_data_write+0x140>)
  40322c:	4b0e      	ldr	r3, [pc, #56]	; (403268 <spi_data_write+0x138>)
  40322e:	4798      	blx	r3
				result = N_FAIL;
  403230:	2300      	movs	r3, #0
  403232:	74fb      	strb	r3, [r7, #19]
				break;
  403234:	e00c      	b.n	403250 <spi_data_write+0x120>
			}
		}

		ix += nbytes;
  403236:	8afa      	ldrh	r2, [r7, #22]
  403238:	8abb      	ldrh	r3, [r7, #20]
  40323a:	4413      	add	r3, r2
  40323c:	b29b      	uxth	r3, r3
  40323e:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
  403240:	887a      	ldrh	r2, [r7, #2]
  403242:	8abb      	ldrh	r3, [r7, #20]
  403244:	1ad3      	subs	r3, r2, r3
  403246:	807b      	strh	r3, [r7, #2]
	} while (sz);
  403248:	887b      	ldrh	r3, [r7, #2]
  40324a:	2b00      	cmp	r3, #0
  40324c:	f47f af7c 	bne.w	403148 <spi_data_write+0x18>


	return result;
  403250:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
  403254:	4618      	mov	r0, r3
  403256:	3718      	adds	r7, #24
  403258:	46bd      	mov	sp, r7
  40325a:	bd80      	pop	{r7, pc}
  40325c:	00402bc1 	.word	0x00402bc1
  403260:	0040ec70 	.word	0x0040ec70
  403264:	0040e780 	.word	0x0040e780
  403268:	004079e5 	.word	0x004079e5
  40326c:	0040e8c8 	.word	0x0040e8c8
  403270:	0040e7c0 	.word	0x0040e7c0
  403274:	0040e900 	.word	0x0040e900
  403278:	20400904 	.word	0x20400904
  40327c:	0040e934 	.word	0x0040e934

00403280 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  403280:	b590      	push	{r4, r7, lr}
  403282:	b087      	sub	sp, #28
  403284:	af02      	add	r7, sp, #8
  403286:	6078      	str	r0, [r7, #4]
  403288:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
  40328a:	2301      	movs	r3, #1
  40328c:	737b      	strb	r3, [r7, #13]
	uint8 cmd = CMD_SINGLE_WRITE;
  40328e:	23c9      	movs	r3, #201	; 0xc9
  403290:	73fb      	strb	r3, [r7, #15]
	uint8 clockless = 0;
  403292:	2300      	movs	r3, #0
  403294:	73bb      	strb	r3, [r7, #14]
	if (addr <= 0x30)
  403296:	687b      	ldr	r3, [r7, #4]
  403298:	2b30      	cmp	r3, #48	; 0x30
  40329a:	d804      	bhi.n	4032a6 <spi_write_reg+0x26>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
  40329c:	23c3      	movs	r3, #195	; 0xc3
  40329e:	73fb      	strb	r3, [r7, #15]
		clockless = 1;
  4032a0:	2301      	movs	r3, #1
  4032a2:	73bb      	strb	r3, [r7, #14]
  4032a4:	e003      	b.n	4032ae <spi_write_reg+0x2e>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
  4032a6:	23c9      	movs	r3, #201	; 0xc9
  4032a8:	73fb      	strb	r3, [r7, #15]
		clockless = 0;
  4032aa:	2300      	movs	r3, #0
  4032ac:	73bb      	strb	r3, [r7, #14]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  4032ae:	7bf8      	ldrb	r0, [r7, #15]
  4032b0:	7bbb      	ldrb	r3, [r7, #14]
  4032b2:	9300      	str	r3, [sp, #0]
  4032b4:	2304      	movs	r3, #4
  4032b6:	683a      	ldr	r2, [r7, #0]
  4032b8:	6879      	ldr	r1, [r7, #4]
  4032ba:	4c1e      	ldr	r4, [pc, #120]	; (403334 <spi_write_reg+0xb4>)
  4032bc:	47a0      	blx	r4
  4032be:	4603      	mov	r3, r0
  4032c0:	737b      	strb	r3, [r7, #13]
	if (result != N_OK) {
  4032c2:	f997 300d 	ldrsb.w	r3, [r7, #13]
  4032c6:	2b01      	cmp	r3, #1
  4032c8:	d00e      	beq.n	4032e8 <spi_write_reg+0x68>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  4032ca:	f240 12eb 	movw	r2, #491	; 0x1eb
  4032ce:	491a      	ldr	r1, [pc, #104]	; (403338 <spi_write_reg+0xb8>)
  4032d0:	481a      	ldr	r0, [pc, #104]	; (40333c <spi_write_reg+0xbc>)
  4032d2:	4b1b      	ldr	r3, [pc, #108]	; (403340 <spi_write_reg+0xc0>)
  4032d4:	4798      	blx	r3
  4032d6:	6879      	ldr	r1, [r7, #4]
  4032d8:	481a      	ldr	r0, [pc, #104]	; (403344 <spi_write_reg+0xc4>)
  4032da:	4b19      	ldr	r3, [pc, #100]	; (403340 <spi_write_reg+0xc0>)
  4032dc:	4798      	blx	r3
  4032de:	481a      	ldr	r0, [pc, #104]	; (403348 <spi_write_reg+0xc8>)
  4032e0:	4b17      	ldr	r3, [pc, #92]	; (403340 <spi_write_reg+0xc0>)
  4032e2:	4798      	blx	r3
		return N_FAIL;
  4032e4:	2300      	movs	r3, #0
  4032e6:	e021      	b.n	40332c <spi_write_reg+0xac>
	}

	result = spi_cmd_rsp(cmd);
  4032e8:	7bfb      	ldrb	r3, [r7, #15]
  4032ea:	4618      	mov	r0, r3
  4032ec:	4b17      	ldr	r3, [pc, #92]	; (40334c <spi_write_reg+0xcc>)
  4032ee:	4798      	blx	r3
  4032f0:	4603      	mov	r3, r0
  4032f2:	737b      	strb	r3, [r7, #13]
	if (result != N_OK) {
  4032f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
  4032f8:	2b01      	cmp	r3, #1
  4032fa:	d016      	beq.n	40332a <spi_write_reg+0xaa>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  4032fc:	f240 12f1 	movw	r2, #497	; 0x1f1
  403300:	490d      	ldr	r1, [pc, #52]	; (403338 <spi_write_reg+0xb8>)
  403302:	480e      	ldr	r0, [pc, #56]	; (40333c <spi_write_reg+0xbc>)
  403304:	4b0e      	ldr	r3, [pc, #56]	; (403340 <spi_write_reg+0xc0>)
  403306:	4798      	blx	r3
  403308:	6879      	ldr	r1, [r7, #4]
  40330a:	4811      	ldr	r0, [pc, #68]	; (403350 <spi_write_reg+0xd0>)
  40330c:	4b0c      	ldr	r3, [pc, #48]	; (403340 <spi_write_reg+0xc0>)
  40330e:	4798      	blx	r3
  403310:	480d      	ldr	r0, [pc, #52]	; (403348 <spi_write_reg+0xc8>)
  403312:	4b0b      	ldr	r3, [pc, #44]	; (403340 <spi_write_reg+0xc0>)
  403314:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403316:	2300      	movs	r3, #0
  403318:	9300      	str	r3, [sp, #0]
  40331a:	2300      	movs	r3, #0
  40331c:	2200      	movs	r2, #0
  40331e:	2100      	movs	r1, #0
  403320:	20cf      	movs	r0, #207	; 0xcf
  403322:	4c04      	ldr	r4, [pc, #16]	; (403334 <spi_write_reg+0xb4>)
  403324:	47a0      	blx	r4
		return N_FAIL;
  403326:	2300      	movs	r3, #0
  403328:	e000      	b.n	40332c <spi_write_reg+0xac>
	}

	return N_OK;
  40332a:	2301      	movs	r3, #1
	}

	return result;

#endif
}
  40332c:	4618      	mov	r0, r3
  40332e:	3714      	adds	r7, #20
  403330:	46bd      	mov	sp, r7
  403332:	bd90      	pop	{r4, r7, pc}
  403334:	00402c61 	.word	0x00402c61
  403338:	0040ec80 	.word	0x0040ec80
  40333c:	0040e780 	.word	0x0040e780
  403340:	004079e5 	.word	0x004079e5
  403344:	0040e96c 	.word	0x0040e96c
  403348:	0040e7c0 	.word	0x0040e7c0
  40334c:	00402ec1 	.word	0x00402ec1
  403350:	0040e998 	.word	0x0040e998

00403354 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
  403354:	b590      	push	{r4, r7, lr}
  403356:	b089      	sub	sp, #36	; 0x24
  403358:	af02      	add	r7, sp, #8
  40335a:	60f8      	str	r0, [r7, #12]
  40335c:	60b9      	str	r1, [r7, #8]
  40335e:	4613      	mov	r3, r2
  403360:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
  403362:	23c7      	movs	r3, #199	; 0xc7
  403364:	75fb      	strb	r3, [r7, #23]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  403366:	88fa      	ldrh	r2, [r7, #6]
  403368:	7df8      	ldrb	r0, [r7, #23]
  40336a:	2300      	movs	r3, #0
  40336c:	9300      	str	r3, [sp, #0]
  40336e:	4613      	mov	r3, r2
  403370:	2200      	movs	r2, #0
  403372:	68f9      	ldr	r1, [r7, #12]
  403374:	4c2d      	ldr	r4, [pc, #180]	; (40342c <nm_spi_write+0xd8>)
  403376:	47a0      	blx	r4
  403378:	4603      	mov	r3, r0
  40337a:	75bb      	strb	r3, [r7, #22]
	if (result != N_OK) {
  40337c:	f997 3016 	ldrsb.w	r3, [r7, #22]
  403380:	2b01      	cmp	r3, #1
  403382:	d00e      	beq.n	4033a2 <nm_spi_write+0x4e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  403384:	f240 220f 	movw	r2, #527	; 0x20f
  403388:	4929      	ldr	r1, [pc, #164]	; (403430 <nm_spi_write+0xdc>)
  40338a:	482a      	ldr	r0, [pc, #168]	; (403434 <nm_spi_write+0xe0>)
  40338c:	4b2a      	ldr	r3, [pc, #168]	; (403438 <nm_spi_write+0xe4>)
  40338e:	4798      	blx	r3
  403390:	68f9      	ldr	r1, [r7, #12]
  403392:	482a      	ldr	r0, [pc, #168]	; (40343c <nm_spi_write+0xe8>)
  403394:	4b28      	ldr	r3, [pc, #160]	; (403438 <nm_spi_write+0xe4>)
  403396:	4798      	blx	r3
  403398:	4829      	ldr	r0, [pc, #164]	; (403440 <nm_spi_write+0xec>)
  40339a:	4b27      	ldr	r3, [pc, #156]	; (403438 <nm_spi_write+0xe4>)
  40339c:	4798      	blx	r3
		return N_FAIL;
  40339e:	2300      	movs	r3, #0
  4033a0:	e040      	b.n	403424 <nm_spi_write+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  4033a2:	7dfb      	ldrb	r3, [r7, #23]
  4033a4:	4618      	mov	r0, r3
  4033a6:	4b27      	ldr	r3, [pc, #156]	; (403444 <nm_spi_write+0xf0>)
  4033a8:	4798      	blx	r3
  4033aa:	4603      	mov	r3, r0
  4033ac:	75bb      	strb	r3, [r7, #22]
	if (result != N_OK) {
  4033ae:	f997 3016 	ldrsb.w	r3, [r7, #22]
  4033b2:	2b01      	cmp	r3, #1
  4033b4:	d016      	beq.n	4033e4 <nm_spi_write+0x90>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  4033b6:	f240 2215 	movw	r2, #533	; 0x215
  4033ba:	491d      	ldr	r1, [pc, #116]	; (403430 <nm_spi_write+0xdc>)
  4033bc:	481d      	ldr	r0, [pc, #116]	; (403434 <nm_spi_write+0xe0>)
  4033be:	4b1e      	ldr	r3, [pc, #120]	; (403438 <nm_spi_write+0xe4>)
  4033c0:	4798      	blx	r3
  4033c2:	68f9      	ldr	r1, [r7, #12]
  4033c4:	4820      	ldr	r0, [pc, #128]	; (403448 <nm_spi_write+0xf4>)
  4033c6:	4b1c      	ldr	r3, [pc, #112]	; (403438 <nm_spi_write+0xe4>)
  4033c8:	4798      	blx	r3
  4033ca:	481d      	ldr	r0, [pc, #116]	; (403440 <nm_spi_write+0xec>)
  4033cc:	4b1a      	ldr	r3, [pc, #104]	; (403438 <nm_spi_write+0xe4>)
  4033ce:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4033d0:	2300      	movs	r3, #0
  4033d2:	9300      	str	r3, [sp, #0]
  4033d4:	2300      	movs	r3, #0
  4033d6:	2200      	movs	r2, #0
  4033d8:	2100      	movs	r1, #0
  4033da:	20cf      	movs	r0, #207	; 0xcf
  4033dc:	4c13      	ldr	r4, [pc, #76]	; (40342c <nm_spi_write+0xd8>)
  4033de:	47a0      	blx	r4
		return N_FAIL;
  4033e0:	2300      	movs	r3, #0
  4033e2:	e01f      	b.n	403424 <nm_spi_write+0xd0>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
  4033e4:	88fb      	ldrh	r3, [r7, #6]
  4033e6:	4619      	mov	r1, r3
  4033e8:	68b8      	ldr	r0, [r7, #8]
  4033ea:	4b18      	ldr	r3, [pc, #96]	; (40344c <nm_spi_write+0xf8>)
  4033ec:	4798      	blx	r3
  4033ee:	4603      	mov	r3, r0
  4033f0:	75bb      	strb	r3, [r7, #22]
	if (result != N_OK) {
  4033f2:	f997 3016 	ldrsb.w	r3, [r7, #22]
  4033f6:	2b01      	cmp	r3, #1
  4033f8:	d013      	beq.n	403422 <nm_spi_write+0xce>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4033fa:	f240 2226 	movw	r2, #550	; 0x226
  4033fe:	490c      	ldr	r1, [pc, #48]	; (403430 <nm_spi_write+0xdc>)
  403400:	480c      	ldr	r0, [pc, #48]	; (403434 <nm_spi_write+0xe0>)
  403402:	4b0d      	ldr	r3, [pc, #52]	; (403438 <nm_spi_write+0xe4>)
  403404:	4798      	blx	r3
  403406:	4812      	ldr	r0, [pc, #72]	; (403450 <nm_spi_write+0xfc>)
  403408:	4b0b      	ldr	r3, [pc, #44]	; (403438 <nm_spi_write+0xe4>)
  40340a:	4798      	blx	r3
  40340c:	480c      	ldr	r0, [pc, #48]	; (403440 <nm_spi_write+0xec>)
  40340e:	4b0a      	ldr	r3, [pc, #40]	; (403438 <nm_spi_write+0xe4>)
  403410:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403412:	2300      	movs	r3, #0
  403414:	9300      	str	r3, [sp, #0]
  403416:	2300      	movs	r3, #0
  403418:	2200      	movs	r2, #0
  40341a:	2100      	movs	r1, #0
  40341c:	20cf      	movs	r0, #207	; 0xcf
  40341e:	4c03      	ldr	r4, [pc, #12]	; (40342c <nm_spi_write+0xd8>)
  403420:	47a0      	blx	r4
	}

	return N_OK;
  403422:	2301      	movs	r3, #1
}
  403424:	4618      	mov	r0, r3
  403426:	371c      	adds	r7, #28
  403428:	46bd      	mov	sp, r7
  40342a:	bd90      	pop	{r4, r7, pc}
  40342c:	00402c61 	.word	0x00402c61
  403430:	0040ec90 	.word	0x0040ec90
  403434:	0040e780 	.word	0x0040e780
  403438:	004079e5 	.word	0x004079e5
  40343c:	0040e9d0 	.word	0x0040e9d0
  403440:	0040e7c0 	.word	0x0040e7c0
  403444:	00402ec1 	.word	0x00402ec1
  403448:	0040ea00 	.word	0x0040ea00
  40344c:	00403131 	.word	0x00403131
  403450:	0040ea38 	.word	0x0040ea38

00403454 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  403454:	b590      	push	{r4, r7, lr}
  403456:	b087      	sub	sp, #28
  403458:	af02      	add	r7, sp, #8
  40345a:	6078      	str	r0, [r7, #4]
  40345c:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
  40345e:	2301      	movs	r3, #1
  403460:	737b      	strb	r3, [r7, #13]
	uint8 cmd = CMD_SINGLE_READ;
  403462:	23ca      	movs	r3, #202	; 0xca
  403464:	73fb      	strb	r3, [r7, #15]
	uint8 tmp[4];
	uint8 clockless = 0;
  403466:	2300      	movs	r3, #0
  403468:	73bb      	strb	r3, [r7, #14]

	if (addr <= 0xff)
  40346a:	687b      	ldr	r3, [r7, #4]
  40346c:	2bff      	cmp	r3, #255	; 0xff
  40346e:	d804      	bhi.n	40347a <spi_read_reg+0x26>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
  403470:	23c4      	movs	r3, #196	; 0xc4
  403472:	73fb      	strb	r3, [r7, #15]
		clockless = 1;
  403474:	2301      	movs	r3, #1
  403476:	73bb      	strb	r3, [r7, #14]
  403478:	e003      	b.n	403482 <spi_read_reg+0x2e>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
  40347a:	23ca      	movs	r3, #202	; 0xca
  40347c:	73fb      	strb	r3, [r7, #15]
		clockless = 0;
  40347e:	2300      	movs	r3, #0
  403480:	73bb      	strb	r3, [r7, #14]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  403482:	7bf8      	ldrb	r0, [r7, #15]
  403484:	7bbb      	ldrb	r3, [r7, #14]
  403486:	9300      	str	r3, [sp, #0]
  403488:	2304      	movs	r3, #4
  40348a:	2200      	movs	r2, #0
  40348c:	6879      	ldr	r1, [r7, #4]
  40348e:	4c36      	ldr	r4, [pc, #216]	; (403568 <spi_read_reg+0x114>)
  403490:	47a0      	blx	r4
  403492:	4603      	mov	r3, r0
  403494:	737b      	strb	r3, [r7, #13]
	if (result != N_OK) {
  403496:	f997 300d 	ldrsb.w	r3, [r7, #13]
  40349a:	2b01      	cmp	r3, #1
  40349c:	d00e      	beq.n	4034bc <spi_read_reg+0x68>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  40349e:	f240 2245 	movw	r2, #581	; 0x245
  4034a2:	4932      	ldr	r1, [pc, #200]	; (40356c <spi_read_reg+0x118>)
  4034a4:	4832      	ldr	r0, [pc, #200]	; (403570 <spi_read_reg+0x11c>)
  4034a6:	4b33      	ldr	r3, [pc, #204]	; (403574 <spi_read_reg+0x120>)
  4034a8:	4798      	blx	r3
  4034aa:	6879      	ldr	r1, [r7, #4]
  4034ac:	4832      	ldr	r0, [pc, #200]	; (403578 <spi_read_reg+0x124>)
  4034ae:	4b31      	ldr	r3, [pc, #196]	; (403574 <spi_read_reg+0x120>)
  4034b0:	4798      	blx	r3
  4034b2:	4832      	ldr	r0, [pc, #200]	; (40357c <spi_read_reg+0x128>)
  4034b4:	4b2f      	ldr	r3, [pc, #188]	; (403574 <spi_read_reg+0x120>)
  4034b6:	4798      	blx	r3
		return N_FAIL;
  4034b8:	2300      	movs	r3, #0
  4034ba:	e051      	b.n	403560 <spi_read_reg+0x10c>
	}

	result = spi_cmd_rsp(cmd);
  4034bc:	7bfb      	ldrb	r3, [r7, #15]
  4034be:	4618      	mov	r0, r3
  4034c0:	4b2f      	ldr	r3, [pc, #188]	; (403580 <spi_read_reg+0x12c>)
  4034c2:	4798      	blx	r3
  4034c4:	4603      	mov	r3, r0
  4034c6:	737b      	strb	r3, [r7, #13]
	if (result != N_OK) {
  4034c8:	f997 300d 	ldrsb.w	r3, [r7, #13]
  4034cc:	2b01      	cmp	r3, #1
  4034ce:	d016      	beq.n	4034fe <spi_read_reg+0xaa>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  4034d0:	f240 224b 	movw	r2, #587	; 0x24b
  4034d4:	4925      	ldr	r1, [pc, #148]	; (40356c <spi_read_reg+0x118>)
  4034d6:	4826      	ldr	r0, [pc, #152]	; (403570 <spi_read_reg+0x11c>)
  4034d8:	4b26      	ldr	r3, [pc, #152]	; (403574 <spi_read_reg+0x120>)
  4034da:	4798      	blx	r3
  4034dc:	6879      	ldr	r1, [r7, #4]
  4034de:	4829      	ldr	r0, [pc, #164]	; (403584 <spi_read_reg+0x130>)
  4034e0:	4b24      	ldr	r3, [pc, #144]	; (403574 <spi_read_reg+0x120>)
  4034e2:	4798      	blx	r3
  4034e4:	4825      	ldr	r0, [pc, #148]	; (40357c <spi_read_reg+0x128>)
  4034e6:	4b23      	ldr	r3, [pc, #140]	; (403574 <spi_read_reg+0x120>)
  4034e8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4034ea:	2300      	movs	r3, #0
  4034ec:	9300      	str	r3, [sp, #0]
  4034ee:	2300      	movs	r3, #0
  4034f0:	2200      	movs	r2, #0
  4034f2:	2100      	movs	r1, #0
  4034f4:	20cf      	movs	r0, #207	; 0xcf
  4034f6:	4c1c      	ldr	r4, [pc, #112]	; (403568 <spi_read_reg+0x114>)
  4034f8:	47a0      	blx	r4
		return N_FAIL;
  4034fa:	2300      	movs	r3, #0
  4034fc:	e030      	b.n	403560 <spi_read_reg+0x10c>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  4034fe:	7bba      	ldrb	r2, [r7, #14]
  403500:	f107 0308 	add.w	r3, r7, #8
  403504:	2104      	movs	r1, #4
  403506:	4618      	mov	r0, r3
  403508:	4b1f      	ldr	r3, [pc, #124]	; (403588 <spi_read_reg+0x134>)
  40350a:	4798      	blx	r3
  40350c:	4603      	mov	r3, r0
  40350e:	737b      	strb	r3, [r7, #13]
	if (result != N_OK) {
  403510:	f997 300d 	ldrsb.w	r3, [r7, #13]
  403514:	2b01      	cmp	r3, #1
  403516:	d015      	beq.n	403544 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  403518:	f240 2253 	movw	r2, #595	; 0x253
  40351c:	4913      	ldr	r1, [pc, #76]	; (40356c <spi_read_reg+0x118>)
  40351e:	4814      	ldr	r0, [pc, #80]	; (403570 <spi_read_reg+0x11c>)
  403520:	4b14      	ldr	r3, [pc, #80]	; (403574 <spi_read_reg+0x120>)
  403522:	4798      	blx	r3
  403524:	4819      	ldr	r0, [pc, #100]	; (40358c <spi_read_reg+0x138>)
  403526:	4b13      	ldr	r3, [pc, #76]	; (403574 <spi_read_reg+0x120>)
  403528:	4798      	blx	r3
  40352a:	4814      	ldr	r0, [pc, #80]	; (40357c <spi_read_reg+0x128>)
  40352c:	4b11      	ldr	r3, [pc, #68]	; (403574 <spi_read_reg+0x120>)
  40352e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403530:	2300      	movs	r3, #0
  403532:	9300      	str	r3, [sp, #0]
  403534:	2300      	movs	r3, #0
  403536:	2200      	movs	r2, #0
  403538:	2100      	movs	r1, #0
  40353a:	20cf      	movs	r0, #207	; 0xcf
  40353c:	4c0a      	ldr	r4, [pc, #40]	; (403568 <spi_read_reg+0x114>)
  40353e:	47a0      	blx	r4
		return N_FAIL;
  403540:	2300      	movs	r3, #0
  403542:	e00d      	b.n	403560 <spi_read_reg+0x10c>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  403544:	7a3b      	ldrb	r3, [r7, #8]
  403546:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
  403548:	7a7b      	ldrb	r3, [r7, #9]
  40354a:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  40354c:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
  40354e:	7abb      	ldrb	r3, [r7, #10]
  403550:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
  403552:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
  403554:	7afb      	ldrb	r3, [r7, #11]
  403556:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
  403558:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  40355a:	683b      	ldr	r3, [r7, #0]
  40355c:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  40355e:	2301      	movs	r3, #1
}
  403560:	4618      	mov	r0, r3
  403562:	3714      	adds	r7, #20
  403564:	46bd      	mov	sp, r7
  403566:	bd90      	pop	{r4, r7, pc}
  403568:	00402c61 	.word	0x00402c61
  40356c:	0040eca0 	.word	0x0040eca0
  403570:	0040e780 	.word	0x0040e780
  403574:	004079e5 	.word	0x004079e5
  403578:	0040ea60 	.word	0x0040ea60
  40357c:	0040e7c0 	.word	0x0040e7c0
  403580:	00402ec1 	.word	0x00402ec1
  403584:	0040ea8c 	.word	0x0040ea8c
  403588:	00402fb5 	.word	0x00402fb5
  40358c:	0040eac0 	.word	0x0040eac0

00403590 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
  403590:	b590      	push	{r4, r7, lr}
  403592:	b089      	sub	sp, #36	; 0x24
  403594:	af02      	add	r7, sp, #8
  403596:	60f8      	str	r0, [r7, #12]
  403598:	60b9      	str	r1, [r7, #8]
  40359a:	4613      	mov	r3, r2
  40359c:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
  40359e:	23c8      	movs	r3, #200	; 0xc8
  4035a0:	75fb      	strb	r3, [r7, #23]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  4035a2:	88fa      	ldrh	r2, [r7, #6]
  4035a4:	7df8      	ldrb	r0, [r7, #23]
  4035a6:	2300      	movs	r3, #0
  4035a8:	9300      	str	r3, [sp, #0]
  4035aa:	4613      	mov	r3, r2
  4035ac:	2200      	movs	r2, #0
  4035ae:	68f9      	ldr	r1, [r7, #12]
  4035b0:	4c2f      	ldr	r4, [pc, #188]	; (403670 <nm_spi_read+0xe0>)
  4035b2:	47a0      	blx	r4
  4035b4:	4603      	mov	r3, r0
  4035b6:	75bb      	strb	r3, [r7, #22]
	if (result != N_OK) {
  4035b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
  4035bc:	2b01      	cmp	r3, #1
  4035be:	d00e      	beq.n	4035de <nm_spi_read+0x4e>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  4035c0:	f44f 721d 	mov.w	r2, #628	; 0x274
  4035c4:	492b      	ldr	r1, [pc, #172]	; (403674 <nm_spi_read+0xe4>)
  4035c6:	482c      	ldr	r0, [pc, #176]	; (403678 <nm_spi_read+0xe8>)
  4035c8:	4b2c      	ldr	r3, [pc, #176]	; (40367c <nm_spi_read+0xec>)
  4035ca:	4798      	blx	r3
  4035cc:	68f9      	ldr	r1, [r7, #12]
  4035ce:	482c      	ldr	r0, [pc, #176]	; (403680 <nm_spi_read+0xf0>)
  4035d0:	4b2a      	ldr	r3, [pc, #168]	; (40367c <nm_spi_read+0xec>)
  4035d2:	4798      	blx	r3
  4035d4:	482b      	ldr	r0, [pc, #172]	; (403684 <nm_spi_read+0xf4>)
  4035d6:	4b29      	ldr	r3, [pc, #164]	; (40367c <nm_spi_read+0xec>)
  4035d8:	4798      	blx	r3
		return N_FAIL;
  4035da:	2300      	movs	r3, #0
  4035dc:	e043      	b.n	403666 <nm_spi_read+0xd6>
	}

	result = spi_cmd_rsp(cmd);
  4035de:	7dfb      	ldrb	r3, [r7, #23]
  4035e0:	4618      	mov	r0, r3
  4035e2:	4b29      	ldr	r3, [pc, #164]	; (403688 <nm_spi_read+0xf8>)
  4035e4:	4798      	blx	r3
  4035e6:	4603      	mov	r3, r0
  4035e8:	75bb      	strb	r3, [r7, #22]
	if (result != N_OK) {
  4035ea:	f997 3016 	ldrsb.w	r3, [r7, #22]
  4035ee:	2b01      	cmp	r3, #1
  4035f0:	d016      	beq.n	403620 <nm_spi_read+0x90>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  4035f2:	f240 227a 	movw	r2, #634	; 0x27a
  4035f6:	491f      	ldr	r1, [pc, #124]	; (403674 <nm_spi_read+0xe4>)
  4035f8:	481f      	ldr	r0, [pc, #124]	; (403678 <nm_spi_read+0xe8>)
  4035fa:	4b20      	ldr	r3, [pc, #128]	; (40367c <nm_spi_read+0xec>)
  4035fc:	4798      	blx	r3
  4035fe:	68f9      	ldr	r1, [r7, #12]
  403600:	4822      	ldr	r0, [pc, #136]	; (40368c <nm_spi_read+0xfc>)
  403602:	4b1e      	ldr	r3, [pc, #120]	; (40367c <nm_spi_read+0xec>)
  403604:	4798      	blx	r3
  403606:	481f      	ldr	r0, [pc, #124]	; (403684 <nm_spi_read+0xf4>)
  403608:	4b1c      	ldr	r3, [pc, #112]	; (40367c <nm_spi_read+0xec>)
  40360a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40360c:	2300      	movs	r3, #0
  40360e:	9300      	str	r3, [sp, #0]
  403610:	2300      	movs	r3, #0
  403612:	2200      	movs	r2, #0
  403614:	2100      	movs	r1, #0
  403616:	20cf      	movs	r0, #207	; 0xcf
  403618:	4c15      	ldr	r4, [pc, #84]	; (403670 <nm_spi_read+0xe0>)
  40361a:	47a0      	blx	r4
		return N_FAIL;
  40361c:	2300      	movs	r3, #0
  40361e:	e022      	b.n	403666 <nm_spi_read+0xd6>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  403620:	88fb      	ldrh	r3, [r7, #6]
  403622:	2200      	movs	r2, #0
  403624:	4619      	mov	r1, r3
  403626:	68b8      	ldr	r0, [r7, #8]
  403628:	4b19      	ldr	r3, [pc, #100]	; (403690 <nm_spi_read+0x100>)
  40362a:	4798      	blx	r3
  40362c:	4603      	mov	r3, r0
  40362e:	75bb      	strb	r3, [r7, #22]
	if (result != N_OK) {
  403630:	f997 3016 	ldrsb.w	r3, [r7, #22]
  403634:	2b01      	cmp	r3, #1
  403636:	d015      	beq.n	403664 <nm_spi_read+0xd4>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  403638:	f44f 7221 	mov.w	r2, #644	; 0x284
  40363c:	490d      	ldr	r1, [pc, #52]	; (403674 <nm_spi_read+0xe4>)
  40363e:	480e      	ldr	r0, [pc, #56]	; (403678 <nm_spi_read+0xe8>)
  403640:	4b0e      	ldr	r3, [pc, #56]	; (40367c <nm_spi_read+0xec>)
  403642:	4798      	blx	r3
  403644:	4813      	ldr	r0, [pc, #76]	; (403694 <nm_spi_read+0x104>)
  403646:	4b0d      	ldr	r3, [pc, #52]	; (40367c <nm_spi_read+0xec>)
  403648:	4798      	blx	r3
  40364a:	480e      	ldr	r0, [pc, #56]	; (403684 <nm_spi_read+0xf4>)
  40364c:	4b0b      	ldr	r3, [pc, #44]	; (40367c <nm_spi_read+0xec>)
  40364e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403650:	2300      	movs	r3, #0
  403652:	9300      	str	r3, [sp, #0]
  403654:	2300      	movs	r3, #0
  403656:	2200      	movs	r2, #0
  403658:	2100      	movs	r1, #0
  40365a:	20cf      	movs	r0, #207	; 0xcf
  40365c:	4c04      	ldr	r4, [pc, #16]	; (403670 <nm_spi_read+0xe0>)
  40365e:	47a0      	blx	r4
		return N_FAIL;
  403660:	2300      	movs	r3, #0
  403662:	e000      	b.n	403666 <nm_spi_read+0xd6>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
  403664:	2301      	movs	r3, #1
}
  403666:	4618      	mov	r0, r3
  403668:	371c      	adds	r7, #28
  40366a:	46bd      	mov	sp, r7
  40366c:	bd90      	pop	{r4, r7, pc}
  40366e:	bf00      	nop
  403670:	00402c61 	.word	0x00402c61
  403674:	0040ecb0 	.word	0x0040ecb0
  403678:	0040e780 	.word	0x0040e780
  40367c:	004079e5 	.word	0x004079e5
  403680:	0040eae0 	.word	0x0040eae0
  403684:	0040e7c0 	.word	0x0040e7c0
  403688:	00402ec1 	.word	0x00402ec1
  40368c:	0040eb10 	.word	0x0040eb10
  403690:	00402fb5 	.word	0x00402fb5
  403694:	0040eb48 	.word	0x0040eb48

00403698 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
  403698:	b580      	push	{r7, lr}
  40369a:	b082      	sub	sp, #8
  40369c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  40369e:	f64e 0024 	movw	r0, #59428	; 0xe824
  4036a2:	4b0a      	ldr	r3, [pc, #40]	; (4036cc <spi_init_pkt_sz+0x34>)
  4036a4:	4798      	blx	r3
  4036a6:	6078      	str	r0, [r7, #4]
	val32 &= ~(0x7 << 4);
  4036a8:	687b      	ldr	r3, [r7, #4]
  4036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4036ae:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
  4036b0:	687b      	ldr	r3, [r7, #4]
  4036b2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  4036b6:	607b      	str	r3, [r7, #4]
  4036b8:	bf00      	nop

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  4036ba:	6879      	ldr	r1, [r7, #4]
  4036bc:	f64e 0024 	movw	r0, #59428	; 0xe824
  4036c0:	4b03      	ldr	r3, [pc, #12]	; (4036d0 <spi_init_pkt_sz+0x38>)
  4036c2:	4798      	blx	r3
}
  4036c4:	bf00      	nop
  4036c6:	3708      	adds	r7, #8
  4036c8:	46bd      	mov	sp, r7
  4036ca:	bd80      	pop	{r7, pc}
  4036cc:	00403821 	.word	0x00403821
  4036d0:	0040387d 	.word	0x0040387d

004036d4 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  4036d4:	b580      	push	{r7, lr}
  4036d6:	b082      	sub	sp, #8
  4036d8:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg =0;
  4036da:	2300      	movs	r3, #0
  4036dc:	603b      	str	r3, [r7, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  4036de:	4b3d      	ldr	r3, [pc, #244]	; (4037d4 <nm_spi_init+0x100>)
  4036e0:	2200      	movs	r2, #0
  4036e2:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  4036e4:	463b      	mov	r3, r7
  4036e6:	4619      	mov	r1, r3
  4036e8:	f64e 0024 	movw	r0, #59428	; 0xe824
  4036ec:	4b3a      	ldr	r3, [pc, #232]	; (4037d8 <nm_spi_init+0x104>)
  4036ee:	4798      	blx	r3
  4036f0:	4603      	mov	r3, r0
  4036f2:	2b00      	cmp	r3, #0
  4036f4:	d125      	bne.n	403742 <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  4036f6:	4b37      	ldr	r3, [pc, #220]	; (4037d4 <nm_spi_init+0x100>)
  4036f8:	2201      	movs	r2, #1
  4036fa:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  4036fc:	f240 22c5 	movw	r2, #709	; 0x2c5
  403700:	4936      	ldr	r1, [pc, #216]	; (4037dc <nm_spi_init+0x108>)
  403702:	4837      	ldr	r0, [pc, #220]	; (4037e0 <nm_spi_init+0x10c>)
  403704:	4b37      	ldr	r3, [pc, #220]	; (4037e4 <nm_spi_init+0x110>)
  403706:	4798      	blx	r3
  403708:	4837      	ldr	r0, [pc, #220]	; (4037e8 <nm_spi_init+0x114>)
  40370a:	4b36      	ldr	r3, [pc, #216]	; (4037e4 <nm_spi_init+0x110>)
  40370c:	4798      	blx	r3
  40370e:	4837      	ldr	r0, [pc, #220]	; (4037ec <nm_spi_init+0x118>)
  403710:	4b34      	ldr	r3, [pc, #208]	; (4037e4 <nm_spi_init+0x110>)
  403712:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  403714:	463b      	mov	r3, r7
  403716:	4619      	mov	r1, r3
  403718:	f64e 0024 	movw	r0, #59428	; 0xe824
  40371c:	4b2e      	ldr	r3, [pc, #184]	; (4037d8 <nm_spi_init+0x104>)
  40371e:	4798      	blx	r3
  403720:	4603      	mov	r3, r0
  403722:	2b00      	cmp	r3, #0
  403724:	d10d      	bne.n	403742 <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  403726:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  40372a:	492c      	ldr	r1, [pc, #176]	; (4037dc <nm_spi_init+0x108>)
  40372c:	482c      	ldr	r0, [pc, #176]	; (4037e0 <nm_spi_init+0x10c>)
  40372e:	4b2d      	ldr	r3, [pc, #180]	; (4037e4 <nm_spi_init+0x110>)
  403730:	4798      	blx	r3
  403732:	482f      	ldr	r0, [pc, #188]	; (4037f0 <nm_spi_init+0x11c>)
  403734:	4b2b      	ldr	r3, [pc, #172]	; (4037e4 <nm_spi_init+0x110>)
  403736:	4798      	blx	r3
  403738:	482c      	ldr	r0, [pc, #176]	; (4037ec <nm_spi_init+0x118>)
  40373a:	4b2a      	ldr	r3, [pc, #168]	; (4037e4 <nm_spi_init+0x110>)
  40373c:	4798      	blx	r3
			return 0;
  40373e:	2300      	movs	r3, #0
  403740:	e044      	b.n	4037cc <nm_spi_init+0xf8>
		}
	}
	if(gu8Crc_off == 0)
  403742:	4b24      	ldr	r3, [pc, #144]	; (4037d4 <nm_spi_init+0x100>)
  403744:	781b      	ldrb	r3, [r3, #0]
  403746:	2b00      	cmp	r3, #0
  403748:	d125      	bne.n	403796 <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
  40374a:	683b      	ldr	r3, [r7, #0]
  40374c:	f023 030c 	bic.w	r3, r3, #12
  403750:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
  403752:	683b      	ldr	r3, [r7, #0]
  403754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403758:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
  40375a:	683b      	ldr	r3, [r7, #0]
  40375c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  403760:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  403762:	683b      	ldr	r3, [r7, #0]
  403764:	4619      	mov	r1, r3
  403766:	f64e 0024 	movw	r0, #59428	; 0xe824
  40376a:	4b22      	ldr	r3, [pc, #136]	; (4037f4 <nm_spi_init+0x120>)
  40376c:	4798      	blx	r3
  40376e:	4603      	mov	r3, r0
  403770:	2b00      	cmp	r3, #0
  403772:	d10d      	bne.n	403790 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  403774:	f240 22d2 	movw	r2, #722	; 0x2d2
  403778:	4918      	ldr	r1, [pc, #96]	; (4037dc <nm_spi_init+0x108>)
  40377a:	4819      	ldr	r0, [pc, #100]	; (4037e0 <nm_spi_init+0x10c>)
  40377c:	4b19      	ldr	r3, [pc, #100]	; (4037e4 <nm_spi_init+0x110>)
  40377e:	4798      	blx	r3
  403780:	481d      	ldr	r0, [pc, #116]	; (4037f8 <nm_spi_init+0x124>)
  403782:	4b18      	ldr	r3, [pc, #96]	; (4037e4 <nm_spi_init+0x110>)
  403784:	4798      	blx	r3
  403786:	4819      	ldr	r0, [pc, #100]	; (4037ec <nm_spi_init+0x118>)
  403788:	4b16      	ldr	r3, [pc, #88]	; (4037e4 <nm_spi_init+0x110>)
  40378a:	4798      	blx	r3
			return 0;
  40378c:	2300      	movs	r3, #0
  40378e:	e01d      	b.n	4037cc <nm_spi_init+0xf8>
		}
		gu8Crc_off = 1;
  403790:	4b10      	ldr	r3, [pc, #64]	; (4037d4 <nm_spi_init+0x100>)
  403792:	2201      	movs	r2, #1
  403794:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  403796:	1d3b      	adds	r3, r7, #4
  403798:	4619      	mov	r1, r3
  40379a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40379e:	4b0e      	ldr	r3, [pc, #56]	; (4037d8 <nm_spi_init+0x104>)
  4037a0:	4798      	blx	r3
  4037a2:	4603      	mov	r3, r0
  4037a4:	2b00      	cmp	r3, #0
  4037a6:	d10e      	bne.n	4037c6 <nm_spi_init+0xf2>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  4037a8:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  4037ac:	490b      	ldr	r1, [pc, #44]	; (4037dc <nm_spi_init+0x108>)
  4037ae:	480c      	ldr	r0, [pc, #48]	; (4037e0 <nm_spi_init+0x10c>)
  4037b0:	4b0c      	ldr	r3, [pc, #48]	; (4037e4 <nm_spi_init+0x110>)
  4037b2:	4798      	blx	r3
  4037b4:	4811      	ldr	r0, [pc, #68]	; (4037fc <nm_spi_init+0x128>)
  4037b6:	4b0b      	ldr	r3, [pc, #44]	; (4037e4 <nm_spi_init+0x110>)
  4037b8:	4798      	blx	r3
  4037ba:	480c      	ldr	r0, [pc, #48]	; (4037ec <nm_spi_init+0x118>)
  4037bc:	4b09      	ldr	r3, [pc, #36]	; (4037e4 <nm_spi_init+0x110>)
  4037be:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
  4037c0:	f06f 0305 	mvn.w	r3, #5
  4037c4:	e002      	b.n	4037cc <nm_spi_init+0xf8>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
  4037c6:	4b0e      	ldr	r3, [pc, #56]	; (403800 <nm_spi_init+0x12c>)
  4037c8:	4798      	blx	r3


	return M2M_SUCCESS;
  4037ca:	2300      	movs	r3, #0
}
  4037cc:	4618      	mov	r0, r3
  4037ce:	3708      	adds	r7, #8
  4037d0:	46bd      	mov	sp, r7
  4037d2:	bd80      	pop	{r7, pc}
  4037d4:	20400904 	.word	0x20400904
  4037d8:	00403455 	.word	0x00403455
  4037dc:	0040ecbc 	.word	0x0040ecbc
  4037e0:	0040e780 	.word	0x0040e780
  4037e4:	004079e5 	.word	0x004079e5
  4037e8:	0040eb70 	.word	0x0040eb70
  4037ec:	0040e7c0 	.word	0x0040e7c0
  4037f0:	0040ebc0 	.word	0x0040ebc0
  4037f4:	00403281 	.word	0x00403281
  4037f8:	0040ebf0 	.word	0x0040ebf0
  4037fc:	0040ec24 	.word	0x0040ec24
  403800:	00403699 	.word	0x00403699

00403804 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
  403804:	b480      	push	{r7}
  403806:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
  403808:	4b04      	ldr	r3, [pc, #16]	; (40381c <nm_spi_deinit+0x18>)
  40380a:	2200      	movs	r2, #0
  40380c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
  40380e:	2300      	movs	r3, #0
}
  403810:	4618      	mov	r0, r3
  403812:	46bd      	mov	sp, r7
  403814:	f85d 7b04 	ldr.w	r7, [sp], #4
  403818:	4770      	bx	lr
  40381a:	bf00      	nop
  40381c:	20400904 	.word	0x20400904

00403820 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  403820:	b580      	push	{r7, lr}
  403822:	b084      	sub	sp, #16
  403824:	af00      	add	r7, sp, #0
  403826:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  403828:	f107 030c 	add.w	r3, r7, #12
  40382c:	4619      	mov	r1, r3
  40382e:	6878      	ldr	r0, [r7, #4]
  403830:	4b03      	ldr	r3, [pc, #12]	; (403840 <nm_spi_read_reg+0x20>)
  403832:	4798      	blx	r3

	return u32Val;
  403834:	68fb      	ldr	r3, [r7, #12]
}
  403836:	4618      	mov	r0, r3
  403838:	3710      	adds	r7, #16
  40383a:	46bd      	mov	sp, r7
  40383c:	bd80      	pop	{r7, pc}
  40383e:	bf00      	nop
  403840:	00403455 	.word	0x00403455

00403844 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403844:	b580      	push	{r7, lr}
  403846:	b084      	sub	sp, #16
  403848:	af00      	add	r7, sp, #0
  40384a:	6078      	str	r0, [r7, #4]
  40384c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  40384e:	6839      	ldr	r1, [r7, #0]
  403850:	6878      	ldr	r0, [r7, #4]
  403852:	4b09      	ldr	r3, [pc, #36]	; (403878 <nm_spi_read_reg_with_ret+0x34>)
  403854:	4798      	blx	r3
  403856:	4603      	mov	r3, r0
  403858:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40385a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40385e:	2b01      	cmp	r3, #1
  403860:	d102      	bne.n	403868 <nm_spi_read_reg_with_ret+0x24>
  403862:	2300      	movs	r3, #0
  403864:	73fb      	strb	r3, [r7, #15]
  403866:	e001      	b.n	40386c <nm_spi_read_reg_with_ret+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
  403868:	23fa      	movs	r3, #250	; 0xfa
  40386a:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
  40386c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  403870:	4618      	mov	r0, r3
  403872:	3710      	adds	r7, #16
  403874:	46bd      	mov	sp, r7
  403876:	bd80      	pop	{r7, pc}
  403878:	00403455 	.word	0x00403455

0040387c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  40387c:	b580      	push	{r7, lr}
  40387e:	b084      	sub	sp, #16
  403880:	af00      	add	r7, sp, #0
  403882:	6078      	str	r0, [r7, #4]
  403884:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  403886:	6839      	ldr	r1, [r7, #0]
  403888:	6878      	ldr	r0, [r7, #4]
  40388a:	4b09      	ldr	r3, [pc, #36]	; (4038b0 <nm_spi_write_reg+0x34>)
  40388c:	4798      	blx	r3
  40388e:	4603      	mov	r3, r0
  403890:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403892:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403896:	2b01      	cmp	r3, #1
  403898:	d102      	bne.n	4038a0 <nm_spi_write_reg+0x24>
  40389a:	2300      	movs	r3, #0
  40389c:	73fb      	strb	r3, [r7, #15]
  40389e:	e001      	b.n	4038a4 <nm_spi_write_reg+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
  4038a0:	23fa      	movs	r3, #250	; 0xfa
  4038a2:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
  4038a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  4038a8:	4618      	mov	r0, r3
  4038aa:	3710      	adds	r7, #16
  4038ac:	46bd      	mov	sp, r7
  4038ae:	bd80      	pop	{r7, pc}
  4038b0:	00403281 	.word	0x00403281

004038b4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4038b4:	b580      	push	{r7, lr}
  4038b6:	b086      	sub	sp, #24
  4038b8:	af00      	add	r7, sp, #0
  4038ba:	60f8      	str	r0, [r7, #12]
  4038bc:	60b9      	str	r1, [r7, #8]
  4038be:	4613      	mov	r3, r2
  4038c0:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
  4038c2:	88fb      	ldrh	r3, [r7, #6]
  4038c4:	461a      	mov	r2, r3
  4038c6:	68b9      	ldr	r1, [r7, #8]
  4038c8:	68f8      	ldr	r0, [r7, #12]
  4038ca:	4b09      	ldr	r3, [pc, #36]	; (4038f0 <nm_spi_read_block+0x3c>)
  4038cc:	4798      	blx	r3
  4038ce:	4603      	mov	r3, r0
  4038d0:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4038d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4038d6:	2b01      	cmp	r3, #1
  4038d8:	d102      	bne.n	4038e0 <nm_spi_read_block+0x2c>
  4038da:	2300      	movs	r3, #0
  4038dc:	75fb      	strb	r3, [r7, #23]
  4038de:	e001      	b.n	4038e4 <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
  4038e0:	23fa      	movs	r3, #250	; 0xfa
  4038e2:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
  4038e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
  4038e8:	4618      	mov	r0, r3
  4038ea:	3718      	adds	r7, #24
  4038ec:	46bd      	mov	sp, r7
  4038ee:	bd80      	pop	{r7, pc}
  4038f0:	00403591 	.word	0x00403591

004038f4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4038f4:	b580      	push	{r7, lr}
  4038f6:	b086      	sub	sp, #24
  4038f8:	af00      	add	r7, sp, #0
  4038fa:	60f8      	str	r0, [r7, #12]
  4038fc:	60b9      	str	r1, [r7, #8]
  4038fe:	4613      	mov	r3, r2
  403900:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
  403902:	88fb      	ldrh	r3, [r7, #6]
  403904:	461a      	mov	r2, r3
  403906:	68b9      	ldr	r1, [r7, #8]
  403908:	68f8      	ldr	r0, [r7, #12]
  40390a:	4b09      	ldr	r3, [pc, #36]	; (403930 <nm_spi_write_block+0x3c>)
  40390c:	4798      	blx	r3
  40390e:	4603      	mov	r3, r0
  403910:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403912:	f997 3017 	ldrsb.w	r3, [r7, #23]
  403916:	2b01      	cmp	r3, #1
  403918:	d102      	bne.n	403920 <nm_spi_write_block+0x2c>
  40391a:	2300      	movs	r3, #0
  40391c:	75fb      	strb	r3, [r7, #23]
  40391e:	e001      	b.n	403924 <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
  403920:	23fa      	movs	r3, #250	; 0xfa
  403922:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
  403924:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
  403928:	4618      	mov	r0, r3
  40392a:	3718      	adds	r7, #24
  40392c:	46bd      	mov	sp, r7
  40392e:	bd80      	pop	{r7, pc}
  403930:	00403355 	.word	0x00403355

00403934 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  403934:	b590      	push	{r4, r7, lr}
  403936:	b089      	sub	sp, #36	; 0x24
  403938:	af00      	add	r7, sp, #0
  40393a:	60b9      	str	r1, [r7, #8]
  40393c:	607b      	str	r3, [r7, #4]
  40393e:	4603      	mov	r3, r0
  403940:	73fb      	strb	r3, [r7, #15]
  403942:	4613      	mov	r3, r2
  403944:	73bb      	strb	r3, [r7, #14]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  403946:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  403948:	2b00      	cmp	r3, #0
  40394a:	f000 8084 	beq.w	403a56 <Socket_ReadSocketData+0x122>
  40394e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403952:	4a43      	ldr	r2, [pc, #268]	; (403a60 <Socket_ReadSocketData+0x12c>)
  403954:	011b      	lsls	r3, r3, #4
  403956:	4413      	add	r3, r2
  403958:	681b      	ldr	r3, [r3, #0]
  40395a:	2b00      	cmp	r3, #0
  40395c:	d07b      	beq.n	403a56 <Socket_ReadSocketData+0x122>
  40395e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403962:	4a3f      	ldr	r2, [pc, #252]	; (403a60 <Socket_ReadSocketData+0x12c>)
  403964:	011b      	lsls	r3, r3, #4
  403966:	4413      	add	r3, r2
  403968:	3304      	adds	r3, #4
  40396a:	881b      	ldrh	r3, [r3, #0]
  40396c:	b29b      	uxth	r3, r3
  40396e:	2b00      	cmp	r3, #0
  403970:	d071      	beq.n	403a56 <Socket_ReadSocketData+0x122>
  403972:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403976:	4a3a      	ldr	r2, [pc, #232]	; (403a60 <Socket_ReadSocketData+0x12c>)
  403978:	011b      	lsls	r3, r3, #4
  40397a:	4413      	add	r3, r2
  40397c:	330a      	adds	r3, #10
  40397e:	781b      	ldrb	r3, [r3, #0]
  403980:	b2db      	uxtb	r3, r3
  403982:	2b01      	cmp	r3, #1
  403984:	d167      	bne.n	403a56 <Socket_ReadSocketData+0x122>
	{
		uint32	u32Address = u32StartAddress;
  403986:	687b      	ldr	r3, [r7, #4]
  403988:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  40398a:	68bb      	ldr	r3, [r7, #8]
  40398c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
  40398e:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
  403990:	2301      	movs	r3, #1
  403992:	767b      	strb	r3, [r7, #25]
			u16Read = u16ReadCount;
  403994:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  403996:	837b      	strh	r3, [r7, #26]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  403998:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40399c:	4a30      	ldr	r2, [pc, #192]	; (403a60 <Socket_ReadSocketData+0x12c>)
  40399e:	011b      	lsls	r3, r3, #4
  4039a0:	4413      	add	r3, r2
  4039a2:	3304      	adds	r3, #4
  4039a4:	881b      	ldrh	r3, [r3, #0]
  4039a6:	b29b      	uxth	r3, r3
  4039a8:	8b7a      	ldrh	r2, [r7, #26]
  4039aa:	1ad3      	subs	r3, r2, r3
  4039ac:	b29b      	uxth	r3, r3
  4039ae:	82fb      	strh	r3, [r7, #22]
			if(s16Diff > 0)
  4039b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  4039b4:	2b00      	cmp	r3, #0
  4039b6:	dd09      	ble.n	4039cc <Socket_ReadSocketData+0x98>
			{
				u8SetRxDone = 0;
  4039b8:	2300      	movs	r3, #0
  4039ba:	767b      	strb	r3, [r7, #25]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4039bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4039c0:	4a27      	ldr	r2, [pc, #156]	; (403a60 <Socket_ReadSocketData+0x12c>)
  4039c2:	011b      	lsls	r3, r3, #4
  4039c4:	4413      	add	r3, r2
  4039c6:	3304      	adds	r3, #4
  4039c8:	881b      	ldrh	r3, [r3, #0]
  4039ca:	837b      	strh	r3, [r7, #26]
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4039cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4039d0:	4a23      	ldr	r2, [pc, #140]	; (403a60 <Socket_ReadSocketData+0x12c>)
  4039d2:	011b      	lsls	r3, r3, #4
  4039d4:	4413      	add	r3, r2
  4039d6:	6819      	ldr	r1, [r3, #0]
  4039d8:	7e7b      	ldrb	r3, [r7, #25]
  4039da:	8b7a      	ldrh	r2, [r7, #26]
  4039dc:	69f8      	ldr	r0, [r7, #28]
  4039de:	4c21      	ldr	r4, [pc, #132]	; (403a64 <Socket_ReadSocketData+0x130>)
  4039e0:	47a0      	blx	r4
  4039e2:	4603      	mov	r3, r0
  4039e4:	2b00      	cmp	r3, #0
  4039e6:	d126      	bne.n	403a36 <Socket_ReadSocketData+0x102>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4039e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4039ec:	4a1c      	ldr	r2, [pc, #112]	; (403a60 <Socket_ReadSocketData+0x12c>)
  4039ee:	011b      	lsls	r3, r3, #4
  4039f0:	4413      	add	r3, r2
  4039f2:	681a      	ldr	r2, [r3, #0]
  4039f4:	68bb      	ldr	r3, [r7, #8]
  4039f6:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4039f8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
  4039fc:	68bb      	ldr	r3, [r7, #8]
  4039fe:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  403a00:	68bb      	ldr	r3, [r7, #8]
  403a02:	88da      	ldrh	r2, [r3, #6]
  403a04:	8b7b      	ldrh	r3, [r7, #26]
  403a06:	1ad3      	subs	r3, r2, r3
  403a08:	b29a      	uxth	r2, r3
  403a0a:	68bb      	ldr	r3, [r7, #8]
  403a0c:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
  403a0e:	4b16      	ldr	r3, [pc, #88]	; (403a68 <Socket_ReadSocketData+0x134>)
  403a10:	681b      	ldr	r3, [r3, #0]
  403a12:	2b00      	cmp	r3, #0
  403a14:	d006      	beq.n	403a24 <Socket_ReadSocketData+0xf0>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  403a16:	4b14      	ldr	r3, [pc, #80]	; (403a68 <Socket_ReadSocketData+0x134>)
  403a18:	681b      	ldr	r3, [r3, #0]
  403a1a:	7bb9      	ldrb	r1, [r7, #14]
  403a1c:	f997 000f 	ldrsb.w	r0, [r7, #15]
  403a20:	68ba      	ldr	r2, [r7, #8]
  403a22:	4798      	blx	r3

				u16ReadCount -= u16Read;
  403a24:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
  403a26:	8b7b      	ldrh	r3, [r7, #26]
  403a28:	1ad3      	subs	r3, r2, r3
  403a2a:	863b      	strh	r3, [r7, #48]	; 0x30
				u32Address += u16Read;
  403a2c:	8b7b      	ldrh	r3, [r7, #26]
  403a2e:	69fa      	ldr	r2, [r7, #28]
  403a30:	4413      	add	r3, r2
  403a32:	61fb      	str	r3, [r7, #28]
  403a34:	e00c      	b.n	403a50 <Socket_ReadSocketData+0x11c>
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  403a36:	480d      	ldr	r0, [pc, #52]	; (403a6c <Socket_ReadSocketData+0x138>)
  403a38:	4b0d      	ldr	r3, [pc, #52]	; (403a70 <Socket_ReadSocketData+0x13c>)
  403a3a:	4798      	blx	r3
  403a3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  403a3e:	4619      	mov	r1, r3
  403a40:	480c      	ldr	r0, [pc, #48]	; (403a74 <Socket_ReadSocketData+0x140>)
  403a42:	4b0b      	ldr	r3, [pc, #44]	; (403a70 <Socket_ReadSocketData+0x13c>)
  403a44:	4798      	blx	r3
  403a46:	480c      	ldr	r0, [pc, #48]	; (403a78 <Socket_ReadSocketData+0x144>)
  403a48:	4b09      	ldr	r3, [pc, #36]	; (403a70 <Socket_ReadSocketData+0x13c>)
  403a4a:	4798      	blx	r3
				break;
  403a4c:	bf00      	nop
			}
		}while(u16ReadCount != 0);
	}
}
  403a4e:	e002      	b.n	403a56 <Socket_ReadSocketData+0x122>
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  403a50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  403a52:	2b00      	cmp	r3, #0
  403a54:	d19c      	bne.n	403990 <Socket_ReadSocketData+0x5c>
	}
}
  403a56:	bf00      	nop
  403a58:	3724      	adds	r7, #36	; 0x24
  403a5a:	46bd      	mov	sp, r7
  403a5c:	bd90      	pop	{r4, r7, pc}
  403a5e:	bf00      	nop
  403a60:	20401ae4 	.word	0x20401ae4
  403a64:	004014d9 	.word	0x004014d9
  403a68:	20401b94 	.word	0x20401b94
  403a6c:	0040ecc8 	.word	0x0040ecc8
  403a70:	004079e5 	.word	0x004079e5
  403a74:	0040ecd4 	.word	0x0040ecd4
  403a78:	0040ece8 	.word	0x0040ece8

00403a7c <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  403a7c:	b590      	push	{r4, r7, lr}
  403a7e:	b0bb      	sub	sp, #236	; 0xec
  403a80:	af02      	add	r7, sp, #8
  403a82:	4603      	mov	r3, r0
  403a84:	603a      	str	r2, [r7, #0]
  403a86:	71fb      	strb	r3, [r7, #7]
  403a88:	460b      	mov	r3, r1
  403a8a:	80bb      	strh	r3, [r7, #4]
	if(u8OpCode == SOCKET_CMD_BIND)
  403a8c:	79fb      	ldrb	r3, [r7, #7]
  403a8e:	2b41      	cmp	r3, #65	; 0x41
  403a90:	d11c      	bne.n	403acc <m2m_ip_cb+0x50>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  403a92:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
  403a96:	2300      	movs	r3, #0
  403a98:	2204      	movs	r2, #4
  403a9a:	6838      	ldr	r0, [r7, #0]
  403a9c:	4cbd      	ldr	r4, [pc, #756]	; (403d94 <m2m_ip_cb+0x318>)
  403a9e:	47a0      	blx	r4
  403aa0:	4603      	mov	r3, r0
  403aa2:	2b00      	cmp	r3, #0
  403aa4:	f040 81e9 	bne.w	403e7a <m2m_ip_cb+0x3fe>
		{
			strBind.status = strBindReply.s8Status;
  403aa8:	f997 30cd 	ldrsb.w	r3, [r7, #205]	; 0xcd
  403aac:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
			if(gpfAppSocketCb)
  403ab0:	4bb9      	ldr	r3, [pc, #740]	; (403d98 <m2m_ip_cb+0x31c>)
  403ab2:	681b      	ldr	r3, [r3, #0]
  403ab4:	2b00      	cmp	r3, #0
  403ab6:	f000 81e0 	beq.w	403e7a <m2m_ip_cb+0x3fe>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  403aba:	4bb7      	ldr	r3, [pc, #732]	; (403d98 <m2m_ip_cb+0x31c>)
  403abc:	681b      	ldr	r3, [r3, #0]
  403abe:	f997 00cc 	ldrsb.w	r0, [r7, #204]	; 0xcc
  403ac2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
  403ac6:	2101      	movs	r1, #1
  403ac8:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  403aca:	e1d6      	b.n	403e7a <m2m_ip_cb+0x3fe>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  403acc:	79fb      	ldrb	r3, [r7, #7]
  403ace:	2b42      	cmp	r3, #66	; 0x42
  403ad0:	d11c      	bne.n	403b0c <m2m_ip_cb+0x90>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  403ad2:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
  403ad6:	2300      	movs	r3, #0
  403ad8:	2204      	movs	r2, #4
  403ada:	6838      	ldr	r0, [r7, #0]
  403adc:	4cad      	ldr	r4, [pc, #692]	; (403d94 <m2m_ip_cb+0x318>)
  403ade:	47a0      	blx	r4
  403ae0:	4603      	mov	r3, r0
  403ae2:	2b00      	cmp	r3, #0
  403ae4:	f040 81c9 	bne.w	403e7a <m2m_ip_cb+0x3fe>
		{
			strListen.status = strListenReply.s8Status;
  403ae8:	f997 30c5 	ldrsb.w	r3, [r7, #197]	; 0xc5
  403aec:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
			if(gpfAppSocketCb)
  403af0:	4ba9      	ldr	r3, [pc, #676]	; (403d98 <m2m_ip_cb+0x31c>)
  403af2:	681b      	ldr	r3, [r3, #0]
  403af4:	2b00      	cmp	r3, #0
  403af6:	f000 81c0 	beq.w	403e7a <m2m_ip_cb+0x3fe>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  403afa:	4ba7      	ldr	r3, [pc, #668]	; (403d98 <m2m_ip_cb+0x31c>)
  403afc:	681b      	ldr	r3, [r3, #0]
  403afe:	f997 00c4 	ldrsb.w	r0, [r7, #196]	; 0xc4
  403b02:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
  403b06:	2102      	movs	r1, #2
  403b08:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  403b0a:	e1b6      	b.n	403e7a <m2m_ip_cb+0x3fe>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  403b0c:	79fb      	ldrb	r3, [r7, #7]
  403b0e:	2b43      	cmp	r3, #67	; 0x43
  403b10:	d15a      	bne.n	403bc8 <m2m_ip_cb+0x14c>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  403b12:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
  403b16:	2300      	movs	r3, #0
  403b18:	220c      	movs	r2, #12
  403b1a:	6838      	ldr	r0, [r7, #0]
  403b1c:	4c9d      	ldr	r4, [pc, #628]	; (403d94 <m2m_ip_cb+0x318>)
  403b1e:	47a0      	blx	r4
  403b20:	4603      	mov	r3, r0
  403b22:	2b00      	cmp	r3, #0
  403b24:	f040 81a9 	bne.w	403e7a <m2m_ip_cb+0x3fe>
		{
			if(strAcceptReply.sConnectedSock >= 0)
  403b28:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
  403b2c:	2b00      	cmp	r3, #0
  403b2e:	db2e      	blt.n	403b8e <m2m_ip_cb+0x112>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  403b30:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
  403b34:	4a99      	ldr	r2, [pc, #612]	; (403d9c <m2m_ip_cb+0x320>)
  403b36:	011b      	lsls	r3, r3, #4
  403b38:	4413      	add	r3, r2
  403b3a:	330b      	adds	r3, #11
  403b3c:	2200      	movs	r2, #0
  403b3e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  403b40:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
  403b44:	4a95      	ldr	r2, [pc, #596]	; (403d9c <m2m_ip_cb+0x320>)
  403b46:	011b      	lsls	r3, r3, #4
  403b48:	4413      	add	r3, r2
  403b4a:	330a      	adds	r3, #10
  403b4c:	2201      	movs	r2, #1
  403b4e:	701a      	strb	r2, [r3, #0]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  403b50:	4b93      	ldr	r3, [pc, #588]	; (403da0 <m2m_ip_cb+0x324>)
  403b52:	881b      	ldrh	r3, [r3, #0]
  403b54:	b29b      	uxth	r3, r3
  403b56:	3301      	adds	r3, #1
  403b58:	b29a      	uxth	r2, r3
  403b5a:	4b91      	ldr	r3, [pc, #580]	; (403da0 <m2m_ip_cb+0x324>)
  403b5c:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
  403b5e:	4b90      	ldr	r3, [pc, #576]	; (403da0 <m2m_ip_cb+0x324>)
  403b60:	881b      	ldrh	r3, [r3, #0]
  403b62:	b29b      	uxth	r3, r3
  403b64:	2b00      	cmp	r3, #0
  403b66:	d106      	bne.n	403b76 <m2m_ip_cb+0xfa>
					++gu16SessionID;
  403b68:	4b8d      	ldr	r3, [pc, #564]	; (403da0 <m2m_ip_cb+0x324>)
  403b6a:	881b      	ldrh	r3, [r3, #0]
  403b6c:	b29b      	uxth	r3, r3
  403b6e:	3301      	adds	r3, #1
  403b70:	b29a      	uxth	r2, r3
  403b72:	4b8b      	ldr	r3, [pc, #556]	; (403da0 <m2m_ip_cb+0x324>)
  403b74:	801a      	strh	r2, [r3, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  403b76:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
  403b7a:	4618      	mov	r0, r3
  403b7c:	4b88      	ldr	r3, [pc, #544]	; (403da0 <m2m_ip_cb+0x324>)
  403b7e:	881b      	ldrh	r3, [r3, #0]
  403b80:	b299      	uxth	r1, r3
  403b82:	4a86      	ldr	r2, [pc, #536]	; (403d9c <m2m_ip_cb+0x320>)
  403b84:	0103      	lsls	r3, r0, #4
  403b86:	4413      	add	r3, r2
  403b88:	3306      	adds	r3, #6
  403b8a:	460a      	mov	r2, r1
  403b8c:	801a      	strh	r2, [r3, #0]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
  403b8e:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
  403b92:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
			strAccept.strAddr.sin_family		= AF_INET;
  403b96:	2302      	movs	r3, #2
  403b98:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  403b9c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
  403ba0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  403ba4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
  403ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			if(gpfAppSocketCb)
  403bac:	4b7a      	ldr	r3, [pc, #488]	; (403d98 <m2m_ip_cb+0x31c>)
  403bae:	681b      	ldr	r3, [r3, #0]
  403bb0:	2b00      	cmp	r3, #0
  403bb2:	f000 8162 	beq.w	403e7a <m2m_ip_cb+0x3fe>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  403bb6:	4b78      	ldr	r3, [pc, #480]	; (403d98 <m2m_ip_cb+0x31c>)
  403bb8:	681b      	ldr	r3, [r3, #0]
  403bba:	f997 00bc 	ldrsb.w	r0, [r7, #188]	; 0xbc
  403bbe:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
  403bc2:	2104      	movs	r1, #4
  403bc4:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  403bc6:	e158      	b.n	403e7a <m2m_ip_cb+0x3fe>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  403bc8:	79fb      	ldrb	r3, [r7, #7]
  403bca:	2b44      	cmp	r3, #68	; 0x44
  403bcc:	d002      	beq.n	403bd4 <m2m_ip_cb+0x158>
  403bce:	79fb      	ldrb	r3, [r7, #7]
  403bd0:	2b4b      	cmp	r3, #75	; 0x4b
  403bd2:	d131      	bne.n	403c38 <m2m_ip_cb+0x1bc>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  403bd4:	f107 019c 	add.w	r1, r7, #156	; 0x9c
  403bd8:	2300      	movs	r3, #0
  403bda:	2204      	movs	r2, #4
  403bdc:	6838      	ldr	r0, [r7, #0]
  403bde:	4c6d      	ldr	r4, [pc, #436]	; (403d94 <m2m_ip_cb+0x318>)
  403be0:	47a0      	blx	r4
  403be2:	4603      	mov	r3, r0
  403be4:	2b00      	cmp	r3, #0
  403be6:	f040 8143 	bne.w	403e70 <m2m_ip_cb+0x3f4>
		{
			strConnMsg.sock		= strConnectReply.sock;
  403bea:	f997 309c 	ldrsb.w	r3, [r7, #156]	; 0x9c
  403bee:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			strConnMsg.s8Error	= strConnectReply.s8Error;
  403bf2:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
  403bf6:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  403bfa:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
  403bfe:	2b00      	cmp	r3, #0
  403c00:	d10c      	bne.n	403c1c <m2m_ip_cb+0x1a0>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  403c02:	f997 309c 	ldrsb.w	r3, [r7, #156]	; 0x9c
  403c06:	4618      	mov	r0, r3
  403c08:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
  403c0c:	3b08      	subs	r3, #8
  403c0e:	b299      	uxth	r1, r3
  403c10:	4a62      	ldr	r2, [pc, #392]	; (403d9c <m2m_ip_cb+0x320>)
  403c12:	0103      	lsls	r3, r0, #4
  403c14:	4413      	add	r3, r2
  403c16:	3308      	adds	r3, #8
  403c18:	460a      	mov	r2, r1
  403c1a:	801a      	strh	r2, [r3, #0]
			}
			if(gpfAppSocketCb)
  403c1c:	4b5e      	ldr	r3, [pc, #376]	; (403d98 <m2m_ip_cb+0x31c>)
  403c1e:	681b      	ldr	r3, [r3, #0]
  403c20:	2b00      	cmp	r3, #0
  403c22:	f000 8125 	beq.w	403e70 <m2m_ip_cb+0x3f4>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  403c26:	4b5c      	ldr	r3, [pc, #368]	; (403d98 <m2m_ip_cb+0x31c>)
  403c28:	681b      	ldr	r3, [r3, #0]
  403c2a:	f997 009c 	ldrsb.w	r0, [r7, #156]	; 0x9c
  403c2e:	f107 0298 	add.w	r2, r7, #152	; 0x98
  403c32:	2105      	movs	r1, #5
  403c34:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
  403c36:	e11b      	b.n	403e70 <m2m_ip_cb+0x3f4>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  403c38:	79fb      	ldrb	r3, [r7, #7]
  403c3a:	2b4a      	cmp	r3, #74	; 0x4a
  403c3c:	d119      	bne.n	403c72 <m2m_ip_cb+0x1f6>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  403c3e:	f107 010c 	add.w	r1, r7, #12
  403c42:	2300      	movs	r3, #0
  403c44:	2244      	movs	r2, #68	; 0x44
  403c46:	6838      	ldr	r0, [r7, #0]
  403c48:	4c52      	ldr	r4, [pc, #328]	; (403d94 <m2m_ip_cb+0x318>)
  403c4a:	47a0      	blx	r4
  403c4c:	4603      	mov	r3, r0
  403c4e:	2b00      	cmp	r3, #0
  403c50:	f040 8113 	bne.w	403e7a <m2m_ip_cb+0x3fe>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
  403c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  403c56:	64fb      	str	r3, [r7, #76]	; 0x4c
			if(gpfAppResolveCb)
  403c58:	4b52      	ldr	r3, [pc, #328]	; (403da4 <m2m_ip_cb+0x328>)
  403c5a:	681b      	ldr	r3, [r3, #0]
  403c5c:	2b00      	cmp	r3, #0
  403c5e:	f000 810c 	beq.w	403e7a <m2m_ip_cb+0x3fe>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  403c62:	4b50      	ldr	r3, [pc, #320]	; (403da4 <m2m_ip_cb+0x328>)
  403c64:	681b      	ldr	r3, [r3, #0]
  403c66:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
  403c68:	f107 020c 	add.w	r2, r7, #12
  403c6c:	4610      	mov	r0, r2
  403c6e:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  403c70:	e103      	b.n	403e7a <m2m_ip_cb+0x3fe>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  403c72:	79fb      	ldrb	r3, [r7, #7]
  403c74:	2b46      	cmp	r3, #70	; 0x46
  403c76:	d006      	beq.n	403c86 <m2m_ip_cb+0x20a>
  403c78:	79fb      	ldrb	r3, [r7, #7]
  403c7a:	2b48      	cmp	r3, #72	; 0x48
  403c7c:	d003      	beq.n	403c86 <m2m_ip_cb+0x20a>
  403c7e:	79fb      	ldrb	r3, [r7, #7]
  403c80:	2b4d      	cmp	r3, #77	; 0x4d
  403c82:	f040 8093 	bne.w	403dac <m2m_ip_cb+0x330>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
  403c86:	2306      	movs	r3, #6
  403c88:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
  403c8c:	79fb      	ldrb	r3, [r7, #7]
  403c8e:	2b48      	cmp	r3, #72	; 0x48
  403c90:	d102      	bne.n	403c98 <m2m_ip_cb+0x21c>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  403c92:	2309      	movs	r3, #9
  403c94:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
  403c98:	2310      	movs	r3, #16
  403c9a:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  403c9e:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
  403ca2:	f107 0188 	add.w	r1, r7, #136	; 0x88
  403ca6:	2300      	movs	r3, #0
  403ca8:	6838      	ldr	r0, [r7, #0]
  403caa:	4c3a      	ldr	r4, [pc, #232]	; (403d94 <m2m_ip_cb+0x318>)
  403cac:	47a0      	blx	r4
  403cae:	4603      	mov	r3, r0
  403cb0:	2b00      	cmp	r3, #0
  403cb2:	f040 80df 	bne.w	403e74 <m2m_ip_cb+0x3f8>
		{
			uint16 u16SessionID = 0;
  403cb6:	2300      	movs	r3, #0
  403cb8:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6

			sock			= strRecvReply.sock;
  403cbc:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
  403cc0:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			u16SessionID = strRecvReply.u16SessionID;
  403cc4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
  403cc8:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  403ccc:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
  403cd0:	4a32      	ldr	r2, [pc, #200]	; (403d9c <m2m_ip_cb+0x320>)
  403cd2:	011b      	lsls	r3, r3, #4
  403cd4:	4413      	add	r3, r2
  403cd6:	330c      	adds	r3, #12
  403cd8:	2200      	movs	r2, #0
  403cda:	701a      	strb	r2, [r3, #0]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  403cdc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
  403ce0:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  403ce4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
  403ce8:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  403cec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
  403cf0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  403cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  403cf8:	67fb      	str	r3, [r7, #124]	; 0x7c

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  403cfa:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
  403cfe:	4a27      	ldr	r2, [pc, #156]	; (403d9c <m2m_ip_cb+0x320>)
  403d00:	011b      	lsls	r3, r3, #4
  403d02:	4413      	add	r3, r2
  403d04:	3306      	adds	r3, #6
  403d06:	881b      	ldrh	r3, [r3, #0]
  403d08:	b29b      	uxth	r3, r3
  403d0a:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
  403d0e:	429a      	cmp	r2, r3
  403d10:	d133      	bne.n	403d7a <m2m_ip_cb+0x2fe>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  403d12:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
  403d16:	2b00      	cmp	r3, #0
  403d18:	dd1a      	ble.n	403d50 <m2m_ip_cb+0x2d4>
  403d1a:	f9b7 20d2 	ldrsh.w	r2, [r7, #210]	; 0xd2
  403d1e:	88bb      	ldrh	r3, [r7, #4]
  403d20:	429a      	cmp	r2, r3
  403d22:	da15      	bge.n	403d50 <m2m_ip_cb+0x2d4>
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
  403d24:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
  403d28:	683a      	ldr	r2, [r7, #0]
  403d2a:	4413      	add	r3, r2
  403d2c:	603b      	str	r3, [r7, #0]

					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
  403d2e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
  403d32:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  403d36:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
  403d3a:	f107 0170 	add.w	r1, r7, #112	; 0x70
  403d3e:	f997 00d5 	ldrsb.w	r0, [r7, #213]	; 0xd5
  403d42:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
  403d46:	9300      	str	r3, [sp, #0]
  403d48:	683b      	ldr	r3, [r7, #0]
  403d4a:	4c17      	ldr	r4, [pc, #92]	; (403da8 <m2m_ip_cb+0x32c>)
  403d4c:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  403d4e:	e091      	b.n	403e74 <m2m_ip_cb+0x3f8>
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  403d50:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
  403d54:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
					strRecvMsg.pu8Buffer		= NULL;
  403d58:	2300      	movs	r3, #0
  403d5a:	673b      	str	r3, [r7, #112]	; 0x70
					if(gpfAppSocketCb)
  403d5c:	4b0e      	ldr	r3, [pc, #56]	; (403d98 <m2m_ip_cb+0x31c>)
  403d5e:	681b      	ldr	r3, [r3, #0]
  403d60:	2b00      	cmp	r3, #0
  403d62:	f000 8087 	beq.w	403e74 <m2m_ip_cb+0x3f8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  403d66:	4b0c      	ldr	r3, [pc, #48]	; (403d98 <m2m_ip_cb+0x31c>)
  403d68:	681b      	ldr	r3, [r3, #0]
  403d6a:	f107 0270 	add.w	r2, r7, #112	; 0x70
  403d6e:	f897 10df 	ldrb.w	r1, [r7, #223]	; 0xdf
  403d72:	f997 00d5 	ldrsb.w	r0, [r7, #213]	; 0xd5
  403d76:	4798      	blx	r3
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  403d78:	e07c      	b.n	403e74 <m2m_ip_cb+0x3f8>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  403d7a:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
  403d7e:	88bb      	ldrh	r3, [r7, #4]
  403d80:	429a      	cmp	r2, r3
  403d82:	d277      	bcs.n	403e74 <m2m_ip_cb+0x3f8>
					hif_receive(0, NULL, 0, 1);
  403d84:	2301      	movs	r3, #1
  403d86:	2200      	movs	r2, #0
  403d88:	2100      	movs	r1, #0
  403d8a:	2000      	movs	r0, #0
  403d8c:	4c01      	ldr	r4, [pc, #4]	; (403d94 <m2m_ip_cb+0x318>)
  403d8e:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  403d90:	e070      	b.n	403e74 <m2m_ip_cb+0x3f8>
  403d92:	bf00      	nop
  403d94:	004014d9 	.word	0x004014d9
  403d98:	20401b94 	.word	0x20401b94
  403d9c:	20401ae4 	.word	0x20401ae4
  403da0:	20400906 	.word	0x20400906
  403da4:	20401b9c 	.word	0x20401b9c
  403da8:	00403935 	.word	0x00403935
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  403dac:	79fb      	ldrb	r3, [r7, #7]
  403dae:	2b45      	cmp	r3, #69	; 0x45
  403db0:	d005      	beq.n	403dbe <m2m_ip_cb+0x342>
  403db2:	79fb      	ldrb	r3, [r7, #7]
  403db4:	2b47      	cmp	r3, #71	; 0x47
  403db6:	d002      	beq.n	403dbe <m2m_ip_cb+0x342>
  403db8:	79fb      	ldrb	r3, [r7, #7]
  403dba:	2b4c      	cmp	r3, #76	; 0x4c
  403dbc:	d13b      	bne.n	403e36 <m2m_ip_cb+0x3ba>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
  403dbe:	2307      	movs	r3, #7
  403dc0:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde

		if(u8OpCode == SOCKET_CMD_SENDTO)
  403dc4:	79fb      	ldrb	r3, [r7, #7]
  403dc6:	2b47      	cmp	r3, #71	; 0x47
  403dc8:	d102      	bne.n	403dd0 <m2m_ip_cb+0x354>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  403dca:	2308      	movs	r3, #8
  403dcc:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  403dd0:	f107 0164 	add.w	r1, r7, #100	; 0x64
  403dd4:	2300      	movs	r3, #0
  403dd6:	2208      	movs	r2, #8
  403dd8:	6838      	ldr	r0, [r7, #0]
  403dda:	4c2a      	ldr	r4, [pc, #168]	; (403e84 <m2m_ip_cb+0x408>)
  403ddc:	47a0      	blx	r4
  403dde:	4603      	mov	r3, r0
  403de0:	2b00      	cmp	r3, #0
  403de2:	d149      	bne.n	403e78 <m2m_ip_cb+0x3fc>
		{
			uint16 u16SessionID = 0;
  403de4:	2300      	movs	r3, #0
  403de6:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			
			sock = strReply.sock;
  403dea:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  403dee:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
			u16SessionID = strReply.u16SessionID;
  403df2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
  403df6:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  403dfa:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
  403dfe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  403e02:	f997 30db 	ldrsb.w	r3, [r7, #219]	; 0xdb
  403e06:	4a20      	ldr	r2, [pc, #128]	; (403e88 <m2m_ip_cb+0x40c>)
  403e08:	011b      	lsls	r3, r3, #4
  403e0a:	4413      	add	r3, r2
  403e0c:	3306      	adds	r3, #6
  403e0e:	881b      	ldrh	r3, [r3, #0]
  403e10:	b29b      	uxth	r3, r3
  403e12:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
  403e16:	429a      	cmp	r2, r3
  403e18:	d12e      	bne.n	403e78 <m2m_ip_cb+0x3fc>
			{
				if(gpfAppSocketCb)
  403e1a:	4b1c      	ldr	r3, [pc, #112]	; (403e8c <m2m_ip_cb+0x410>)
  403e1c:	681b      	ldr	r3, [r3, #0]
  403e1e:	2b00      	cmp	r3, #0
  403e20:	d02a      	beq.n	403e78 <m2m_ip_cb+0x3fc>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  403e22:	4b1a      	ldr	r3, [pc, #104]	; (403e8c <m2m_ip_cb+0x410>)
  403e24:	681b      	ldr	r3, [r3, #0]
  403e26:	f107 026e 	add.w	r2, r7, #110	; 0x6e
  403e2a:	f897 10de 	ldrb.w	r1, [r7, #222]	; 0xde
  403e2e:	f997 00db 	ldrsb.w	r0, [r7, #219]	; 0xdb
  403e32:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  403e34:	e020      	b.n	403e78 <m2m_ip_cb+0x3fc>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
  403e36:	79fb      	ldrb	r3, [r7, #7]
  403e38:	2b52      	cmp	r3, #82	; 0x52
  403e3a:	d11e      	bne.n	403e7a <m2m_ip_cb+0x3fe>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  403e3c:	f107 0150 	add.w	r1, r7, #80	; 0x50
  403e40:	2301      	movs	r3, #1
  403e42:	2214      	movs	r2, #20
  403e44:	6838      	ldr	r0, [r7, #0]
  403e46:	4c0f      	ldr	r4, [pc, #60]	; (403e84 <m2m_ip_cb+0x408>)
  403e48:	47a0      	blx	r4
  403e4a:	4603      	mov	r3, r0
  403e4c:	2b00      	cmp	r3, #0
  403e4e:	d114      	bne.n	403e7a <m2m_ip_cb+0x3fe>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  403e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  403e52:	461a      	mov	r2, r3
  403e54:	4b0e      	ldr	r3, [pc, #56]	; (403e90 <m2m_ip_cb+0x414>)
  403e56:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  403e58:	4b0d      	ldr	r3, [pc, #52]	; (403e90 <m2m_ip_cb+0x414>)
  403e5a:	681b      	ldr	r3, [r3, #0]
  403e5c:	2b00      	cmp	r3, #0
  403e5e:	d00c      	beq.n	403e7a <m2m_ip_cb+0x3fe>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  403e60:	4b0b      	ldr	r3, [pc, #44]	; (403e90 <m2m_ip_cb+0x414>)
  403e62:	681b      	ldr	r3, [r3, #0]
  403e64:	6d38      	ldr	r0, [r7, #80]	; 0x50
  403e66:	6db9      	ldr	r1, [r7, #88]	; 0x58
  403e68:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
  403e6c:	4798      	blx	r3
			}
		}
	}
}
  403e6e:	e004      	b.n	403e7a <m2m_ip_cb+0x3fe>
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
  403e70:	bf00      	nop
  403e72:	e002      	b.n	403e7a <m2m_ip_cb+0x3fe>
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  403e74:	bf00      	nop
  403e76:	e000      	b.n	403e7a <m2m_ip_cb+0x3fe>
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  403e78:	bf00      	nop
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  403e7a:	bf00      	nop
  403e7c:	37e4      	adds	r7, #228	; 0xe4
  403e7e:	46bd      	mov	sp, r7
  403e80:	bd90      	pop	{r4, r7, pc}
  403e82:	bf00      	nop
  403e84:	004014d9 	.word	0x004014d9
  403e88:	20401ae4 	.word	0x20401ae4
  403e8c:	20401b94 	.word	0x20401b94
  403e90:	20401b98 	.word	0x20401b98

00403e94 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  403e94:	b580      	push	{r7, lr}
  403e96:	af00      	add	r7, sp, #0
	if(gbSocketInit==0)
  403e98:	4b0a      	ldr	r3, [pc, #40]	; (403ec4 <socketInit+0x30>)
  403e9a:	781b      	ldrb	r3, [r3, #0]
  403e9c:	b2db      	uxtb	r3, r3
  403e9e:	2b00      	cmp	r3, #0
  403ea0:	d10e      	bne.n	403ec0 <socketInit+0x2c>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  403ea2:	22b0      	movs	r2, #176	; 0xb0
  403ea4:	2100      	movs	r1, #0
  403ea6:	4808      	ldr	r0, [pc, #32]	; (403ec8 <socketInit+0x34>)
  403ea8:	4b08      	ldr	r3, [pc, #32]	; (403ecc <socketInit+0x38>)
  403eaa:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  403eac:	4908      	ldr	r1, [pc, #32]	; (403ed0 <socketInit+0x3c>)
  403eae:	2002      	movs	r0, #2
  403eb0:	4b08      	ldr	r3, [pc, #32]	; (403ed4 <socketInit+0x40>)
  403eb2:	4798      	blx	r3
		gbSocketInit=1;
  403eb4:	4b03      	ldr	r3, [pc, #12]	; (403ec4 <socketInit+0x30>)
  403eb6:	2201      	movs	r2, #1
  403eb8:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  403eba:	4b07      	ldr	r3, [pc, #28]	; (403ed8 <socketInit+0x44>)
  403ebc:	2200      	movs	r2, #0
  403ebe:	801a      	strh	r2, [r3, #0]
	}
}
  403ec0:	bf00      	nop
  403ec2:	bd80      	pop	{r7, pc}
  403ec4:	20400908 	.word	0x20400908
  403ec8:	20401ae4 	.word	0x20401ae4
  403ecc:	00400be9 	.word	0x00400be9
  403ed0:	00403a7d 	.word	0x00403a7d
  403ed4:	0040165d 	.word	0x0040165d
  403ed8:	20400906 	.word	0x20400906

00403edc <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
  403edc:	b480      	push	{r7}
  403ede:	b083      	sub	sp, #12
  403ee0:	af00      	add	r7, sp, #0
  403ee2:	6078      	str	r0, [r7, #4]
  403ee4:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
  403ee6:	4a06      	ldr	r2, [pc, #24]	; (403f00 <registerSocketCallback+0x24>)
  403ee8:	687b      	ldr	r3, [r7, #4]
  403eea:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb = pfAppResolveCb;
  403eec:	4a05      	ldr	r2, [pc, #20]	; (403f04 <registerSocketCallback+0x28>)
  403eee:	683b      	ldr	r3, [r7, #0]
  403ef0:	6013      	str	r3, [r2, #0]
}
  403ef2:	bf00      	nop
  403ef4:	370c      	adds	r7, #12
  403ef6:	46bd      	mov	sp, r7
  403ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403efc:	4770      	bx	lr
  403efe:	bf00      	nop
  403f00:	20401b94 	.word	0x20401b94
  403f04:	20401b9c 	.word	0x20401b9c

00403f08 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  403f08:	b590      	push	{r4, r7, lr}
  403f0a:	b08b      	sub	sp, #44	; 0x2c
  403f0c:	af04      	add	r7, sp, #16
  403f0e:	4603      	mov	r3, r0
  403f10:	80fb      	strh	r3, [r7, #6]
  403f12:	460b      	mov	r3, r1
  403f14:	717b      	strb	r3, [r7, #5]
  403f16:	4613      	mov	r3, r2
  403f18:	713b      	strb	r3, [r7, #4]
	SOCKET		sock = -1;
  403f1a:	23ff      	movs	r3, #255	; 0xff
  403f1c:	75fb      	strb	r3, [r7, #23]
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
  403f1e:	230b      	movs	r3, #11
  403f20:	757b      	strb	r3, [r7, #21]
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  403f22:	88fb      	ldrh	r3, [r7, #6]
  403f24:	2b02      	cmp	r3, #2
  403f26:	d15f      	bne.n	403fe8 <socket+0xe0>
	{
		if(u8Type == SOCK_STREAM)
  403f28:	797b      	ldrb	r3, [r7, #5]
  403f2a:	2b01      	cmp	r3, #1
  403f2c:	d104      	bne.n	403f38 <socket+0x30>
		{
			u8SocketCount = TCP_SOCK_MAX;
  403f2e:	2307      	movs	r3, #7
  403f30:	757b      	strb	r3, [r7, #21]
			u8Count = 0;
  403f32:	2300      	movs	r3, #0
  403f34:	75bb      	strb	r3, [r7, #22]
  403f36:	e051      	b.n	403fdc <socket+0xd4>
		}
		else if(u8Type == SOCK_DGRAM)
  403f38:	797b      	ldrb	r3, [r7, #5]
  403f3a:	2b02      	cmp	r3, #2
  403f3c:	d104      	bne.n	403f48 <socket+0x40>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  403f3e:	230b      	movs	r3, #11
  403f40:	757b      	strb	r3, [r7, #21]
			u8Count = TCP_SOCK_MAX;
  403f42:	2307      	movs	r3, #7
  403f44:	75bb      	strb	r3, [r7, #22]
  403f46:	e049      	b.n	403fdc <socket+0xd4>
		}
		else
			return sock;
  403f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
  403f4c:	e04e      	b.n	403fec <socket+0xe4>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  403f4e:	7dbb      	ldrb	r3, [r7, #22]
  403f50:	011b      	lsls	r3, r3, #4
  403f52:	4a28      	ldr	r2, [pc, #160]	; (403ff4 <socket+0xec>)
  403f54:	4413      	add	r3, r2
  403f56:	613b      	str	r3, [r7, #16]
			if(pstrSock->bIsUsed == 0)
  403f58:	693b      	ldr	r3, [r7, #16]
  403f5a:	7a9b      	ldrb	r3, [r3, #10]
  403f5c:	b2db      	uxtb	r3, r3
  403f5e:	2b00      	cmp	r3, #0
  403f60:	d139      	bne.n	403fd6 <socket+0xce>
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  403f62:	2210      	movs	r2, #16
  403f64:	2100      	movs	r1, #0
  403f66:	6938      	ldr	r0, [r7, #16]
  403f68:	4b23      	ldr	r3, [pc, #140]	; (403ff8 <socket+0xf0>)
  403f6a:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  403f6c:	693b      	ldr	r3, [r7, #16]
  403f6e:	2201      	movs	r2, #1
  403f70:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  403f72:	4b22      	ldr	r3, [pc, #136]	; (403ffc <socket+0xf4>)
  403f74:	881b      	ldrh	r3, [r3, #0]
  403f76:	b29b      	uxth	r3, r3
  403f78:	3301      	adds	r3, #1
  403f7a:	b29a      	uxth	r2, r3
  403f7c:	4b1f      	ldr	r3, [pc, #124]	; (403ffc <socket+0xf4>)
  403f7e:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
  403f80:	4b1e      	ldr	r3, [pc, #120]	; (403ffc <socket+0xf4>)
  403f82:	881b      	ldrh	r3, [r3, #0]
  403f84:	b29b      	uxth	r3, r3
  403f86:	2b00      	cmp	r3, #0
  403f88:	d106      	bne.n	403f98 <socket+0x90>
					++gu16SessionID;
  403f8a:	4b1c      	ldr	r3, [pc, #112]	; (403ffc <socket+0xf4>)
  403f8c:	881b      	ldrh	r3, [r3, #0]
  403f8e:	b29b      	uxth	r3, r3
  403f90:	3301      	adds	r3, #1
  403f92:	b29a      	uxth	r2, r3
  403f94:	4b19      	ldr	r3, [pc, #100]	; (403ffc <socket+0xf4>)
  403f96:	801a      	strh	r2, [r3, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  403f98:	4b18      	ldr	r3, [pc, #96]	; (403ffc <socket+0xf4>)
  403f9a:	881b      	ldrh	r3, [r3, #0]
  403f9c:	b29a      	uxth	r2, r3
  403f9e:	693b      	ldr	r3, [r7, #16]
  403fa0:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  403fa2:	7dbb      	ldrb	r3, [r7, #22]
  403fa4:	75fb      	strb	r3, [r7, #23]

				if(u8Flags & SOCKET_FLAGS_SSL)
  403fa6:	793b      	ldrb	r3, [r7, #4]
  403fa8:	f003 0301 	and.w	r3, r3, #1
  403fac:	2b00      	cmp	r3, #0
  403fae:	d01a      	beq.n	403fe6 <socket+0xde>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  403fb0:	7dfb      	ldrb	r3, [r7, #23]
  403fb2:	733b      	strb	r3, [r7, #12]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  403fb4:	693b      	ldr	r3, [r7, #16]
  403fb6:	2221      	movs	r2, #33	; 0x21
  403fb8:	72da      	strb	r2, [r3, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  403fba:	f107 020c 	add.w	r2, r7, #12
  403fbe:	2300      	movs	r3, #0
  403fc0:	9302      	str	r3, [sp, #8]
  403fc2:	2300      	movs	r3, #0
  403fc4:	9301      	str	r3, [sp, #4]
  403fc6:	2300      	movs	r3, #0
  403fc8:	9300      	str	r3, [sp, #0]
  403fca:	2304      	movs	r3, #4
  403fcc:	2150      	movs	r1, #80	; 0x50
  403fce:	2002      	movs	r0, #2
  403fd0:	4c0b      	ldr	r4, [pc, #44]	; (404000 <socket+0xf8>)
  403fd2:	47a0      	blx	r4
				}
				break;
  403fd4:	e007      	b.n	403fe6 <socket+0xde>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
  403fd6:	7dbb      	ldrb	r3, [r7, #22]
  403fd8:	3301      	adds	r3, #1
  403fda:	75bb      	strb	r3, [r7, #22]
  403fdc:	7dba      	ldrb	r2, [r7, #22]
  403fde:	7d7b      	ldrb	r3, [r7, #21]
  403fe0:	429a      	cmp	r2, r3
  403fe2:	d3b4      	bcc.n	403f4e <socket+0x46>
  403fe4:	e000      	b.n	403fe8 <socket+0xe0>
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
				}
				break;
  403fe6:	bf00      	nop
			}
		}
	}
	return sock;
  403fe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
  403fec:	4618      	mov	r0, r3
  403fee:	371c      	adds	r7, #28
  403ff0:	46bd      	mov	sp, r7
  403ff2:	bd90      	pop	{r4, r7, pc}
  403ff4:	20401ae4 	.word	0x20401ae4
  403ff8:	00400be9 	.word	0x00400be9
  403ffc:	20400906 	.word	0x20400906
  404000:	00400e95 	.word	0x00400e95

00404004 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  404004:	b590      	push	{r4, r7, lr}
  404006:	b08b      	sub	sp, #44	; 0x2c
  404008:	af04      	add	r7, sp, #16
  40400a:	4603      	mov	r3, r0
  40400c:	6039      	str	r1, [r7, #0]
  40400e:	71fb      	strb	r3, [r7, #7]
  404010:	4613      	mov	r3, r2
  404012:	71bb      	strb	r3, [r7, #6]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404014:	23fa      	movs	r3, #250	; 0xfa
  404016:	75fb      	strb	r3, [r7, #23]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  404018:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40401c:	2b00      	cmp	r3, #0
  40401e:	db4f      	blt.n	4040c0 <connect+0xbc>
  404020:	683b      	ldr	r3, [r7, #0]
  404022:	2b00      	cmp	r3, #0
  404024:	d04c      	beq.n	4040c0 <connect+0xbc>
  404026:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40402a:	4a28      	ldr	r2, [pc, #160]	; (4040cc <connect+0xc8>)
  40402c:	011b      	lsls	r3, r3, #4
  40402e:	4413      	add	r3, r2
  404030:	330a      	adds	r3, #10
  404032:	781b      	ldrb	r3, [r3, #0]
  404034:	b2db      	uxtb	r3, r3
  404036:	2b01      	cmp	r3, #1
  404038:	d142      	bne.n	4040c0 <connect+0xbc>
  40403a:	79bb      	ldrb	r3, [r7, #6]
  40403c:	2b00      	cmp	r3, #0
  40403e:	d03f      	beq.n	4040c0 <connect+0xbc>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  404040:	2344      	movs	r3, #68	; 0x44
  404042:	75bb      	strb	r3, [r7, #22]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  404044:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404048:	4a20      	ldr	r2, [pc, #128]	; (4040cc <connect+0xc8>)
  40404a:	011b      	lsls	r3, r3, #4
  40404c:	4413      	add	r3, r2
  40404e:	330b      	adds	r3, #11
  404050:	781b      	ldrb	r3, [r3, #0]
  404052:	b2db      	uxtb	r3, r3
  404054:	f003 0301 	and.w	r3, r3, #1
  404058:	2b00      	cmp	r3, #0
  40405a:	d00a      	beq.n	404072 <connect+0x6e>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  40405c:	234b      	movs	r3, #75	; 0x4b
  40405e:	75bb      	strb	r3, [r7, #22]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  404060:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404064:	4a19      	ldr	r2, [pc, #100]	; (4040cc <connect+0xc8>)
  404066:	011b      	lsls	r3, r3, #4
  404068:	4413      	add	r3, r2
  40406a:	330b      	adds	r3, #11
  40406c:	781b      	ldrb	r3, [r3, #0]
  40406e:	b2db      	uxtb	r3, r3
  404070:	747b      	strb	r3, [r7, #17]
		}
		strConnect.sock = sock;
  404072:	79fb      	ldrb	r3, [r7, #7]
  404074:	743b      	strb	r3, [r7, #16]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  404076:	f107 0308 	add.w	r3, r7, #8
  40407a:	2208      	movs	r2, #8
  40407c:	6839      	ldr	r1, [r7, #0]
  40407e:	4618      	mov	r0, r3
  404080:	4b13      	ldr	r3, [pc, #76]	; (4040d0 <connect+0xcc>)
  404082:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  404084:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404088:	4a10      	ldr	r2, [pc, #64]	; (4040cc <connect+0xc8>)
  40408a:	011b      	lsls	r3, r3, #4
  40408c:	4413      	add	r3, r2
  40408e:	3306      	adds	r3, #6
  404090:	881b      	ldrh	r3, [r3, #0]
  404092:	b29b      	uxth	r3, r3
  404094:	827b      	strh	r3, [r7, #18]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  404096:	f107 0208 	add.w	r2, r7, #8
  40409a:	7db9      	ldrb	r1, [r7, #22]
  40409c:	2300      	movs	r3, #0
  40409e:	9302      	str	r3, [sp, #8]
  4040a0:	2300      	movs	r3, #0
  4040a2:	9301      	str	r3, [sp, #4]
  4040a4:	2300      	movs	r3, #0
  4040a6:	9300      	str	r3, [sp, #0]
  4040a8:	230c      	movs	r3, #12
  4040aa:	2002      	movs	r0, #2
  4040ac:	4c09      	ldr	r4, [pc, #36]	; (4040d4 <connect+0xd0>)
  4040ae:	47a0      	blx	r4
  4040b0:	4603      	mov	r3, r0
  4040b2:	75fb      	strb	r3, [r7, #23]
		if(s8Ret != SOCK_ERR_NO_ERROR)
  4040b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4040b8:	2b00      	cmp	r3, #0
  4040ba:	d001      	beq.n	4040c0 <connect+0xbc>
		{
			s8Ret = SOCK_ERR_INVALID;
  4040bc:	23f7      	movs	r3, #247	; 0xf7
  4040be:	75fb      	strb	r3, [r7, #23]
		}
	}
	return s8Ret;
  4040c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
  4040c4:	4618      	mov	r0, r3
  4040c6:	371c      	adds	r7, #28
  4040c8:	46bd      	mov	sp, r7
  4040ca:	bd90      	pop	{r4, r7, pc}
  4040cc:	20401ae4 	.word	0x20401ae4
  4040d0:	00400ba9 	.word	0x00400ba9
  4040d4:	00400e95 	.word	0x00400e95

004040d8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  4040d8:	b590      	push	{r4, r7, lr}
  4040da:	b08f      	sub	sp, #60	; 0x3c
  4040dc:	af04      	add	r7, sp, #16
  4040de:	60b9      	str	r1, [r7, #8]
  4040e0:	4611      	mov	r1, r2
  4040e2:	461a      	mov	r2, r3
  4040e4:	4603      	mov	r3, r0
  4040e6:	73fb      	strb	r3, [r7, #15]
  4040e8:	460b      	mov	r3, r1
  4040ea:	81bb      	strh	r3, [r7, #12]
  4040ec:	4613      	mov	r3, r2
  4040ee:	80fb      	strh	r3, [r7, #6]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4040f0:	f64f 73fa 	movw	r3, #65530	; 0xfffa
  4040f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  4040f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4040fa:	2b00      	cmp	r3, #0
  4040fc:	db59      	blt.n	4041b2 <send+0xda>
  4040fe:	68bb      	ldr	r3, [r7, #8]
  404100:	2b00      	cmp	r3, #0
  404102:	d056      	beq.n	4041b2 <send+0xda>
  404104:	89bb      	ldrh	r3, [r7, #12]
  404106:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
  40410a:	d852      	bhi.n	4041b2 <send+0xda>
  40410c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404110:	4a2b      	ldr	r2, [pc, #172]	; (4041c0 <send+0xe8>)
  404112:	011b      	lsls	r3, r3, #4
  404114:	4413      	add	r3, r2
  404116:	330a      	adds	r3, #10
  404118:	781b      	ldrb	r3, [r3, #0]
  40411a:	b2db      	uxtb	r3, r3
  40411c:	2b01      	cmp	r3, #1
  40411e:	d148      	bne.n	4041b2 <send+0xda>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
  404120:	2345      	movs	r3, #69	; 0x45
  404122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
  404126:	2350      	movs	r3, #80	; 0x50
  404128:	84bb      	strh	r3, [r7, #36]	; 0x24

		strSend.sock			= sock;
  40412a:	7bfb      	ldrb	r3, [r7, #15]
  40412c:	743b      	strb	r3, [r7, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  40412e:	89bb      	ldrh	r3, [r7, #12]
  404130:	827b      	strh	r3, [r7, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  404132:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404136:	4a22      	ldr	r2, [pc, #136]	; (4041c0 <send+0xe8>)
  404138:	011b      	lsls	r3, r3, #4
  40413a:	4413      	add	r3, r2
  40413c:	3306      	adds	r3, #6
  40413e:	881b      	ldrh	r3, [r3, #0]
  404140:	b29b      	uxth	r3, r3
  404142:	83bb      	strh	r3, [r7, #28]

		if(sock >= TCP_SOCK_MAX)
  404144:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404148:	2b06      	cmp	r3, #6
  40414a:	dd01      	ble.n	404150 <send+0x78>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  40414c:	2344      	movs	r3, #68	; 0x44
  40414e:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404150:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404154:	4a1a      	ldr	r2, [pc, #104]	; (4041c0 <send+0xe8>)
  404156:	011b      	lsls	r3, r3, #4
  404158:	4413      	add	r3, r2
  40415a:	330b      	adds	r3, #11
  40415c:	781b      	ldrb	r3, [r3, #0]
  40415e:	b2db      	uxtb	r3, r3
  404160:	f003 0301 	and.w	r3, r3, #1
  404164:	2b00      	cmp	r3, #0
  404166:	d00a      	beq.n	40417e <send+0xa6>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  404168:	234c      	movs	r3, #76	; 0x4c
  40416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  40416e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404172:	4a13      	ldr	r2, [pc, #76]	; (4041c0 <send+0xe8>)
  404174:	011b      	lsls	r3, r3, #4
  404176:	4413      	add	r3, r2
  404178:	3308      	adds	r3, #8
  40417a:	881b      	ldrh	r3, [r3, #0]
  40417c:	84bb      	strh	r3, [r7, #36]	; 0x24
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  40417e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  404182:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404186:	b2d9      	uxtb	r1, r3
  404188:	f107 0210 	add.w	r2, r7, #16
  40418c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40418e:	9302      	str	r3, [sp, #8]
  404190:	89bb      	ldrh	r3, [r7, #12]
  404192:	9301      	str	r3, [sp, #4]
  404194:	68bb      	ldr	r3, [r7, #8]
  404196:	9300      	str	r3, [sp, #0]
  404198:	2310      	movs	r3, #16
  40419a:	2002      	movs	r0, #2
  40419c:	4c09      	ldr	r4, [pc, #36]	; (4041c4 <send+0xec>)
  40419e:	47a0      	blx	r4
  4041a0:	4603      	mov	r3, r0
  4041a2:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(s16Ret != SOCK_ERR_NO_ERROR)
  4041a4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
  4041a8:	2b00      	cmp	r3, #0
  4041aa:	d002      	beq.n	4041b2 <send+0xda>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  4041ac:	f64f 73f2 	movw	r3, #65522	; 0xfff2
  4041b0:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
	}
	return s16Ret;
  4041b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
  4041b6:	4618      	mov	r0, r3
  4041b8:	372c      	adds	r7, #44	; 0x2c
  4041ba:	46bd      	mov	sp, r7
  4041bc:	bd90      	pop	{r4, r7, pc}
  4041be:	bf00      	nop
  4041c0:	20401ae4 	.word	0x20401ae4
  4041c4:	00400e95 	.word	0x00400e95

004041c8 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  4041c8:	b590      	push	{r4, r7, lr}
  4041ca:	b08d      	sub	sp, #52	; 0x34
  4041cc:	af04      	add	r7, sp, #16
  4041ce:	60b9      	str	r1, [r7, #8]
  4041d0:	607b      	str	r3, [r7, #4]
  4041d2:	4603      	mov	r3, r0
  4041d4:	73fb      	strb	r3, [r7, #15]
  4041d6:	4613      	mov	r3, r2
  4041d8:	81bb      	strh	r3, [r7, #12]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4041da:	f64f 73fa 	movw	r3, #65530	; 0xfffa
  4041de:	83fb      	strh	r3, [r7, #30]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  4041e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4041e4:	2b00      	cmp	r3, #0
  4041e6:	db6c      	blt.n	4042c2 <recv+0xfa>
  4041e8:	68bb      	ldr	r3, [r7, #8]
  4041ea:	2b00      	cmp	r3, #0
  4041ec:	d069      	beq.n	4042c2 <recv+0xfa>
  4041ee:	89bb      	ldrh	r3, [r7, #12]
  4041f0:	2b00      	cmp	r3, #0
  4041f2:	d066      	beq.n	4042c2 <recv+0xfa>
  4041f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4041f8:	4a35      	ldr	r2, [pc, #212]	; (4042d0 <recv+0x108>)
  4041fa:	011b      	lsls	r3, r3, #4
  4041fc:	4413      	add	r3, r2
  4041fe:	330a      	adds	r3, #10
  404200:	781b      	ldrb	r3, [r3, #0]
  404202:	b2db      	uxtb	r3, r3
  404204:	2b01      	cmp	r3, #1
  404206:	d15c      	bne.n	4042c2 <recv+0xfa>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
  404208:	2300      	movs	r3, #0
  40420a:	83fb      	strh	r3, [r7, #30]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  40420c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404210:	4a2f      	ldr	r2, [pc, #188]	; (4042d0 <recv+0x108>)
  404212:	011b      	lsls	r3, r3, #4
  404214:	4413      	add	r3, r2
  404216:	68ba      	ldr	r2, [r7, #8]
  404218:	601a      	str	r2, [r3, #0]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  40421a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40421e:	4a2c      	ldr	r2, [pc, #176]	; (4042d0 <recv+0x108>)
  404220:	011b      	lsls	r3, r3, #4
  404222:	4413      	add	r3, r2
  404224:	3304      	adds	r3, #4
  404226:	89ba      	ldrh	r2, [r7, #12]
  404228:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
  40422a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40422e:	4a28      	ldr	r2, [pc, #160]	; (4042d0 <recv+0x108>)
  404230:	011b      	lsls	r3, r3, #4
  404232:	4413      	add	r3, r2
  404234:	330c      	adds	r3, #12
  404236:	781b      	ldrb	r3, [r3, #0]
  404238:	b2db      	uxtb	r3, r3
  40423a:	2b00      	cmp	r3, #0
  40423c:	d141      	bne.n	4042c2 <recv+0xfa>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
  40423e:	2346      	movs	r3, #70	; 0x46
  404240:	777b      	strb	r3, [r7, #29]

			gastrSockets[sock].bIsRecvPending = 1;
  404242:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404246:	4a22      	ldr	r2, [pc, #136]	; (4042d0 <recv+0x108>)
  404248:	011b      	lsls	r3, r3, #4
  40424a:	4413      	add	r3, r2
  40424c:	330c      	adds	r3, #12
  40424e:	2201      	movs	r2, #1
  404250:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404252:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404256:	4a1e      	ldr	r2, [pc, #120]	; (4042d0 <recv+0x108>)
  404258:	011b      	lsls	r3, r3, #4
  40425a:	4413      	add	r3, r2
  40425c:	330b      	adds	r3, #11
  40425e:	781b      	ldrb	r3, [r3, #0]
  404260:	b2db      	uxtb	r3, r3
  404262:	f003 0301 	and.w	r3, r3, #1
  404266:	2b00      	cmp	r3, #0
  404268:	d001      	beq.n	40426e <recv+0xa6>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  40426a:	234d      	movs	r3, #77	; 0x4d
  40426c:	777b      	strb	r3, [r7, #29]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  40426e:	687b      	ldr	r3, [r7, #4]
  404270:	2b00      	cmp	r3, #0
  404272:	d103      	bne.n	40427c <recv+0xb4>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  404274:	f04f 33ff 	mov.w	r3, #4294967295
  404278:	617b      	str	r3, [r7, #20]
  40427a:	e001      	b.n	404280 <recv+0xb8>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  40427c:	687b      	ldr	r3, [r7, #4]
  40427e:	617b      	str	r3, [r7, #20]
			strRecv.sock = sock;
  404280:	7bfb      	ldrb	r3, [r7, #15]
  404282:	763b      	strb	r3, [r7, #24]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  404284:	f997 300f 	ldrsb.w	r3, [r7, #15]
  404288:	4a11      	ldr	r2, [pc, #68]	; (4042d0 <recv+0x108>)
  40428a:	011b      	lsls	r3, r3, #4
  40428c:	4413      	add	r3, r2
  40428e:	3306      	adds	r3, #6
  404290:	881b      	ldrh	r3, [r3, #0]
  404292:	b29b      	uxth	r3, r3
  404294:	837b      	strh	r3, [r7, #26]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  404296:	f107 0214 	add.w	r2, r7, #20
  40429a:	7f79      	ldrb	r1, [r7, #29]
  40429c:	2300      	movs	r3, #0
  40429e:	9302      	str	r3, [sp, #8]
  4042a0:	2300      	movs	r3, #0
  4042a2:	9301      	str	r3, [sp, #4]
  4042a4:	2300      	movs	r3, #0
  4042a6:	9300      	str	r3, [sp, #0]
  4042a8:	2308      	movs	r3, #8
  4042aa:	2002      	movs	r0, #2
  4042ac:	4c09      	ldr	r4, [pc, #36]	; (4042d4 <recv+0x10c>)
  4042ae:	47a0      	blx	r4
  4042b0:	4603      	mov	r3, r0
  4042b2:	83fb      	strh	r3, [r7, #30]
			if(s16Ret != SOCK_ERR_NO_ERROR)
  4042b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  4042b8:	2b00      	cmp	r3, #0
  4042ba:	d002      	beq.n	4042c2 <recv+0xfa>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  4042bc:	f64f 73f2 	movw	r3, #65522	; 0xfff2
  4042c0:	83fb      	strh	r3, [r7, #30]
			}
		}
	}
	return s16Ret;
  4042c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
  4042c6:	4618      	mov	r0, r3
  4042c8:	3724      	adds	r7, #36	; 0x24
  4042ca:	46bd      	mov	sp, r7
  4042cc:	bd90      	pop	{r4, r7, pc}
  4042ce:	bf00      	nop
  4042d0:	20401ae4 	.word	0x20401ae4
  4042d4:	00400e95 	.word	0x00400e95

004042d8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  4042d8:	b590      	push	{r4, r7, lr}
  4042da:	b089      	sub	sp, #36	; 0x24
  4042dc:	af04      	add	r7, sp, #16
  4042de:	4603      	mov	r3, r0
  4042e0:	71fb      	strb	r3, [r7, #7]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  4042e2:	23fa      	movs	r3, #250	; 0xfa
  4042e4:	73fb      	strb	r3, [r7, #15]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  4042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4042ea:	2b00      	cmp	r3, #0
  4042ec:	db53      	blt.n	404396 <close+0xbe>
  4042ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4042f2:	4a2c      	ldr	r2, [pc, #176]	; (4043a4 <close+0xcc>)
  4042f4:	011b      	lsls	r3, r3, #4
  4042f6:	4413      	add	r3, r2
  4042f8:	330a      	adds	r3, #10
  4042fa:	781b      	ldrb	r3, [r3, #0]
  4042fc:	b2db      	uxtb	r3, r3
  4042fe:	2b01      	cmp	r3, #1
  404300:	d149      	bne.n	404396 <close+0xbe>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
  404302:	2349      	movs	r3, #73	; 0x49
  404304:	73bb      	strb	r3, [r7, #14]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  404306:	79fb      	ldrb	r3, [r7, #7]
  404308:	723b      	strb	r3, [r7, #8]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  40430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40430e:	4a25      	ldr	r2, [pc, #148]	; (4043a4 <close+0xcc>)
  404310:	011b      	lsls	r3, r3, #4
  404312:	4413      	add	r3, r2
  404314:	3306      	adds	r3, #6
  404316:	881b      	ldrh	r3, [r3, #0]
  404318:	b29b      	uxth	r3, r3
  40431a:	817b      	strh	r3, [r7, #10]
		
		gastrSockets[sock].bIsUsed = 0;
  40431c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404320:	4a20      	ldr	r2, [pc, #128]	; (4043a4 <close+0xcc>)
  404322:	011b      	lsls	r3, r3, #4
  404324:	4413      	add	r3, r2
  404326:	330a      	adds	r3, #10
  404328:	2200      	movs	r2, #0
  40432a:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
  40432c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404330:	4a1c      	ldr	r2, [pc, #112]	; (4043a4 <close+0xcc>)
  404332:	011b      	lsls	r3, r3, #4
  404334:	4413      	add	r3, r2
  404336:	3306      	adds	r3, #6
  404338:	2200      	movs	r2, #0
  40433a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  40433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404340:	4a18      	ldr	r2, [pc, #96]	; (4043a4 <close+0xcc>)
  404342:	011b      	lsls	r3, r3, #4
  404344:	4413      	add	r3, r2
  404346:	330b      	adds	r3, #11
  404348:	781b      	ldrb	r3, [r3, #0]
  40434a:	b2db      	uxtb	r3, r3
  40434c:	f003 0301 	and.w	r3, r3, #1
  404350:	2b00      	cmp	r3, #0
  404352:	d001      	beq.n	404358 <close+0x80>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  404354:	234e      	movs	r3, #78	; 0x4e
  404356:	73bb      	strb	r3, [r7, #14]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  404358:	f107 0208 	add.w	r2, r7, #8
  40435c:	7bb9      	ldrb	r1, [r7, #14]
  40435e:	2300      	movs	r3, #0
  404360:	9302      	str	r3, [sp, #8]
  404362:	2300      	movs	r3, #0
  404364:	9301      	str	r3, [sp, #4]
  404366:	2300      	movs	r3, #0
  404368:	9300      	str	r3, [sp, #0]
  40436a:	2304      	movs	r3, #4
  40436c:	2002      	movs	r0, #2
  40436e:	4c0e      	ldr	r4, [pc, #56]	; (4043a8 <close+0xd0>)
  404370:	47a0      	blx	r4
  404372:	4603      	mov	r3, r0
  404374:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404376:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40437a:	2b00      	cmp	r3, #0
  40437c:	d001      	beq.n	404382 <close+0xaa>
		{
			s8Ret = SOCK_ERR_INVALID;
  40437e:	23f7      	movs	r3, #247	; 0xf7
  404380:	73fb      	strb	r3, [r7, #15]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  404382:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404386:	011b      	lsls	r3, r3, #4
  404388:	4a06      	ldr	r2, [pc, #24]	; (4043a4 <close+0xcc>)
  40438a:	4413      	add	r3, r2
  40438c:	2210      	movs	r2, #16
  40438e:	2100      	movs	r1, #0
  404390:	4618      	mov	r0, r3
  404392:	4b06      	ldr	r3, [pc, #24]	; (4043ac <close+0xd4>)
  404394:	4798      	blx	r3
	}
	return s8Ret;
  404396:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  40439a:	4618      	mov	r0, r3
  40439c:	3714      	adds	r7, #20
  40439e:	46bd      	mov	sp, r7
  4043a0:	bd90      	pop	{r4, r7, pc}
  4043a2:	bf00      	nop
  4043a4:	20401ae4 	.word	0x20401ae4
  4043a8:	00400e95 	.word	0x00400e95
  4043ac:	00400be9 	.word	0x00400be9

004043b0 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
  4043b0:	b580      	push	{r7, lr}
  4043b2:	b082      	sub	sp, #8
  4043b4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
  4043b6:	463b      	mov	r3, r7
  4043b8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
  4043ba:	687b      	ldr	r3, [r7, #4]
  4043bc:	22b9      	movs	r2, #185	; 0xb9
  4043be:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  4043c0:	2100      	movs	r1, #0
  4043c2:	4810      	ldr	r0, [pc, #64]	; (404404 <spi_flash_enter_low_power_mode+0x54>)
  4043c4:	4b10      	ldr	r3, [pc, #64]	; (404408 <spi_flash_enter_low_power_mode+0x58>)
  4043c6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  4043c8:	687b      	ldr	r3, [r7, #4]
  4043ca:	781b      	ldrb	r3, [r3, #0]
  4043cc:	4619      	mov	r1, r3
  4043ce:	480f      	ldr	r0, [pc, #60]	; (40440c <spi_flash_enter_low_power_mode+0x5c>)
  4043d0:	4b0d      	ldr	r3, [pc, #52]	; (404408 <spi_flash_enter_low_power_mode+0x58>)
  4043d2:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  4043d4:	2101      	movs	r1, #1
  4043d6:	480e      	ldr	r0, [pc, #56]	; (404410 <spi_flash_enter_low_power_mode+0x60>)
  4043d8:	4b0b      	ldr	r3, [pc, #44]	; (404408 <spi_flash_enter_low_power_mode+0x58>)
  4043da:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  4043dc:	2100      	movs	r1, #0
  4043de:	480d      	ldr	r0, [pc, #52]	; (404414 <spi_flash_enter_low_power_mode+0x64>)
  4043e0:	4b09      	ldr	r3, [pc, #36]	; (404408 <spi_flash_enter_low_power_mode+0x58>)
  4043e2:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  4043e4:	2181      	movs	r1, #129	; 0x81
  4043e6:	480c      	ldr	r0, [pc, #48]	; (404418 <spi_flash_enter_low_power_mode+0x68>)
  4043e8:	4b07      	ldr	r3, [pc, #28]	; (404408 <spi_flash_enter_low_power_mode+0x58>)
  4043ea:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  4043ec:	bf00      	nop
  4043ee:	480b      	ldr	r0, [pc, #44]	; (40441c <spi_flash_enter_low_power_mode+0x6c>)
  4043f0:	4b0b      	ldr	r3, [pc, #44]	; (404420 <spi_flash_enter_low_power_mode+0x70>)
  4043f2:	4798      	blx	r3
  4043f4:	4603      	mov	r3, r0
  4043f6:	2b01      	cmp	r3, #1
  4043f8:	d1f9      	bne.n	4043ee <spi_flash_enter_low_power_mode+0x3e>
}
  4043fa:	bf00      	nop
  4043fc:	3708      	adds	r7, #8
  4043fe:	46bd      	mov	sp, r7
  404400:	bd80      	pop	{r7, pc}
  404402:	bf00      	nop
  404404:	00010208 	.word	0x00010208
  404408:	004026d1 	.word	0x004026d1
  40440c:	0001020c 	.word	0x0001020c
  404410:	00010214 	.word	0x00010214
  404414:	0001021c 	.word	0x0001021c
  404418:	00010204 	.word	0x00010204
  40441c:	00010218 	.word	0x00010218
  404420:	00402695 	.word	0x00402695

00404424 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
  404424:	b580      	push	{r7, lr}
  404426:	b082      	sub	sp, #8
  404428:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
  40442a:	463b      	mov	r3, r7
  40442c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
  40442e:	687b      	ldr	r3, [r7, #4]
  404430:	22ab      	movs	r2, #171	; 0xab
  404432:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404434:	2100      	movs	r1, #0
  404436:	4810      	ldr	r0, [pc, #64]	; (404478 <spi_flash_leave_low_power_mode+0x54>)
  404438:	4b10      	ldr	r3, [pc, #64]	; (40447c <spi_flash_leave_low_power_mode+0x58>)
  40443a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  40443c:	687b      	ldr	r3, [r7, #4]
  40443e:	781b      	ldrb	r3, [r3, #0]
  404440:	4619      	mov	r1, r3
  404442:	480f      	ldr	r0, [pc, #60]	; (404480 <spi_flash_leave_low_power_mode+0x5c>)
  404444:	4b0d      	ldr	r3, [pc, #52]	; (40447c <spi_flash_leave_low_power_mode+0x58>)
  404446:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404448:	2101      	movs	r1, #1
  40444a:	480e      	ldr	r0, [pc, #56]	; (404484 <spi_flash_leave_low_power_mode+0x60>)
  40444c:	4b0b      	ldr	r3, [pc, #44]	; (40447c <spi_flash_leave_low_power_mode+0x58>)
  40444e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404450:	2100      	movs	r1, #0
  404452:	480d      	ldr	r0, [pc, #52]	; (404488 <spi_flash_leave_low_power_mode+0x64>)
  404454:	4b09      	ldr	r3, [pc, #36]	; (40447c <spi_flash_leave_low_power_mode+0x58>)
  404456:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  404458:	2181      	movs	r1, #129	; 0x81
  40445a:	480c      	ldr	r0, [pc, #48]	; (40448c <spi_flash_leave_low_power_mode+0x68>)
  40445c:	4b07      	ldr	r3, [pc, #28]	; (40447c <spi_flash_leave_low_power_mode+0x58>)
  40445e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404460:	bf00      	nop
  404462:	480b      	ldr	r0, [pc, #44]	; (404490 <spi_flash_leave_low_power_mode+0x6c>)
  404464:	4b0b      	ldr	r3, [pc, #44]	; (404494 <spi_flash_leave_low_power_mode+0x70>)
  404466:	4798      	blx	r3
  404468:	4603      	mov	r3, r0
  40446a:	2b01      	cmp	r3, #1
  40446c:	d1f9      	bne.n	404462 <spi_flash_leave_low_power_mode+0x3e>
}
  40446e:	bf00      	nop
  404470:	3708      	adds	r7, #8
  404472:	46bd      	mov	sp, r7
  404474:	bd80      	pop	{r7, pc}
  404476:	bf00      	nop
  404478:	00010208 	.word	0x00010208
  40447c:	004026d1 	.word	0x004026d1
  404480:	0001020c 	.word	0x0001020c
  404484:	00010214 	.word	0x00010214
  404488:	0001021c 	.word	0x0001021c
  40448c:	00010204 	.word	0x00010204
  404490:	00010218 	.word	0x00010218
  404494:	00402695 	.word	0x00402695

00404498 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  404498:	b580      	push	{r7, lr}
  40449a:	b084      	sub	sp, #16
  40449c:	af00      	add	r7, sp, #0
  40449e:	4603      	mov	r3, r0
  4044a0:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
  4044a2:	2300      	movs	r3, #0
  4044a4:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  4044a6:	4b20      	ldr	r3, [pc, #128]	; (404528 <spi_flash_enable+0x90>)
  4044a8:	4798      	blx	r3
  4044aa:	4603      	mov	r3, r0
  4044ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4044b0:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
  4044b4:	d332      	bcc.n	40451c <spi_flash_enable+0x84>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  4044b6:	f107 0308 	add.w	r3, r7, #8
  4044ba:	4619      	mov	r1, r3
  4044bc:	f241 4010 	movw	r0, #5136	; 0x1410
  4044c0:	4b1a      	ldr	r3, [pc, #104]	; (40452c <spi_flash_enable+0x94>)
  4044c2:	4798      	blx	r3
  4044c4:	4603      	mov	r3, r0
  4044c6:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
  4044c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4044cc:	2b00      	cmp	r3, #0
  4044ce:	d124      	bne.n	40451a <spi_flash_enable+0x82>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
  4044d0:	68ba      	ldr	r2, [r7, #8]
  4044d2:	4b17      	ldr	r3, [pc, #92]	; (404530 <spi_flash_enable+0x98>)
  4044d4:	4013      	ands	r3, r2
  4044d6:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
  4044d8:	68ba      	ldr	r2, [r7, #8]
  4044da:	4b16      	ldr	r3, [pc, #88]	; (404534 <spi_flash_enable+0x9c>)
  4044dc:	4313      	orrs	r3, r2
  4044de:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
  4044e0:	68bb      	ldr	r3, [r7, #8]
  4044e2:	4619      	mov	r1, r3
  4044e4:	f241 4010 	movw	r0, #5136	; 0x1410
  4044e8:	4b13      	ldr	r3, [pc, #76]	; (404538 <spi_flash_enable+0xa0>)
  4044ea:	4798      	blx	r3
		if(enable) {
  4044ec:	79fb      	ldrb	r3, [r7, #7]
  4044ee:	2b00      	cmp	r3, #0
  4044f0:	d002      	beq.n	4044f8 <spi_flash_enable+0x60>
			spi_flash_leave_low_power_mode();
  4044f2:	4b12      	ldr	r3, [pc, #72]	; (40453c <spi_flash_enable+0xa4>)
  4044f4:	4798      	blx	r3
  4044f6:	e001      	b.n	4044fc <spi_flash_enable+0x64>
		} else {
			spi_flash_enter_low_power_mode();
  4044f8:	4b11      	ldr	r3, [pc, #68]	; (404540 <spi_flash_enable+0xa8>)
  4044fa:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
  4044fc:	68ba      	ldr	r2, [r7, #8]
  4044fe:	4b0c      	ldr	r3, [pc, #48]	; (404530 <spi_flash_enable+0x98>)
  404500:	4013      	ands	r3, r2
  404502:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
  404504:	68bb      	ldr	r3, [r7, #8]
  404506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40450a:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
  40450c:	68bb      	ldr	r3, [r7, #8]
  40450e:	4619      	mov	r1, r3
  404510:	f241 4010 	movw	r0, #5136	; 0x1410
  404514:	4b08      	ldr	r3, [pc, #32]	; (404538 <spi_flash_enable+0xa0>)
  404516:	4798      	blx	r3
  404518:	e000      	b.n	40451c <spi_flash_enable+0x84>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
  40451a:	bf00      	nop
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
  40451c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  404520:	4618      	mov	r0, r3
  404522:	3710      	adds	r7, #16
  404524:	46bd      	mov	sp, r7
  404526:	bd80      	pop	{r7, pc}
  404528:	00402281 	.word	0x00402281
  40452c:	004026b1 	.word	0x004026b1
  404530:	f8888fff 	.word	0xf8888fff
  404534:	01111000 	.word	0x01111000
  404538:	004026d1 	.word	0x004026d1
  40453c:	00404425 	.word	0x00404425
  404540:	004043b1 	.word	0x004043b1

00404544 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  404544:	b580      	push	{r7, lr}
  404546:	b082      	sub	sp, #8
  404548:	af00      	add	r7, sp, #0
  40454a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40454c:	687b      	ldr	r3, [r7, #4]
  40454e:	2b07      	cmp	r3, #7
  404550:	d831      	bhi.n	4045b6 <osc_enable+0x72>
  404552:	a201      	add	r2, pc, #4	; (adr r2, 404558 <osc_enable+0x14>)
  404554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404558:	004045b5 	.word	0x004045b5
  40455c:	00404579 	.word	0x00404579
  404560:	00404581 	.word	0x00404581
  404564:	00404589 	.word	0x00404589
  404568:	00404591 	.word	0x00404591
  40456c:	00404599 	.word	0x00404599
  404570:	004045a1 	.word	0x004045a1
  404574:	004045ab 	.word	0x004045ab
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  404578:	2000      	movs	r0, #0
  40457a:	4b11      	ldr	r3, [pc, #68]	; (4045c0 <osc_enable+0x7c>)
  40457c:	4798      	blx	r3
		break;
  40457e:	e01a      	b.n	4045b6 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  404580:	2001      	movs	r0, #1
  404582:	4b0f      	ldr	r3, [pc, #60]	; (4045c0 <osc_enable+0x7c>)
  404584:	4798      	blx	r3
		break;
  404586:	e016      	b.n	4045b6 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  404588:	2000      	movs	r0, #0
  40458a:	4b0e      	ldr	r3, [pc, #56]	; (4045c4 <osc_enable+0x80>)
  40458c:	4798      	blx	r3
		break;
  40458e:	e012      	b.n	4045b6 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  404590:	2010      	movs	r0, #16
  404592:	4b0c      	ldr	r3, [pc, #48]	; (4045c4 <osc_enable+0x80>)
  404594:	4798      	blx	r3
		break;
  404596:	e00e      	b.n	4045b6 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  404598:	2020      	movs	r0, #32
  40459a:	4b0a      	ldr	r3, [pc, #40]	; (4045c4 <osc_enable+0x80>)
  40459c:	4798      	blx	r3
		break;
  40459e:	e00a      	b.n	4045b6 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4045a0:	213e      	movs	r1, #62	; 0x3e
  4045a2:	2000      	movs	r0, #0
  4045a4:	4b08      	ldr	r3, [pc, #32]	; (4045c8 <osc_enable+0x84>)
  4045a6:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4045a8:	e005      	b.n	4045b6 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4045aa:	213e      	movs	r1, #62	; 0x3e
  4045ac:	2001      	movs	r0, #1
  4045ae:	4b06      	ldr	r3, [pc, #24]	; (4045c8 <osc_enable+0x84>)
  4045b0:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4045b2:	e000      	b.n	4045b6 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  4045b4:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  4045b6:	bf00      	nop
  4045b8:	3708      	adds	r7, #8
  4045ba:	46bd      	mov	sp, r7
  4045bc:	bd80      	pop	{r7, pc}
  4045be:	bf00      	nop
  4045c0:	00405811 	.word	0x00405811
  4045c4:	0040587d 	.word	0x0040587d
  4045c8:	004058ed 	.word	0x004058ed

004045cc <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4045cc:	b580      	push	{r7, lr}
  4045ce:	b082      	sub	sp, #8
  4045d0:	af00      	add	r7, sp, #0
  4045d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4045d4:	687b      	ldr	r3, [r7, #4]
  4045d6:	2b07      	cmp	r3, #7
  4045d8:	d826      	bhi.n	404628 <osc_is_ready+0x5c>
  4045da:	a201      	add	r2, pc, #4	; (adr r2, 4045e0 <osc_is_ready+0x14>)
  4045dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4045e0:	00404601 	.word	0x00404601
  4045e4:	00404605 	.word	0x00404605
  4045e8:	00404605 	.word	0x00404605
  4045ec:	00404617 	.word	0x00404617
  4045f0:	00404617 	.word	0x00404617
  4045f4:	00404617 	.word	0x00404617
  4045f8:	00404617 	.word	0x00404617
  4045fc:	00404617 	.word	0x00404617
	case OSC_SLCK_32K_RC:
		return 1;
  404600:	2301      	movs	r3, #1
  404602:	e012      	b.n	40462a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  404604:	4b0b      	ldr	r3, [pc, #44]	; (404634 <osc_is_ready+0x68>)
  404606:	4798      	blx	r3
  404608:	4603      	mov	r3, r0
  40460a:	2b00      	cmp	r3, #0
  40460c:	bf14      	ite	ne
  40460e:	2301      	movne	r3, #1
  404610:	2300      	moveq	r3, #0
  404612:	b2db      	uxtb	r3, r3
  404614:	e009      	b.n	40462a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  404616:	4b08      	ldr	r3, [pc, #32]	; (404638 <osc_is_ready+0x6c>)
  404618:	4798      	blx	r3
  40461a:	4603      	mov	r3, r0
  40461c:	2b00      	cmp	r3, #0
  40461e:	bf14      	ite	ne
  404620:	2301      	movne	r3, #1
  404622:	2300      	moveq	r3, #0
  404624:	b2db      	uxtb	r3, r3
  404626:	e000      	b.n	40462a <osc_is_ready+0x5e>
	}

	return 0;
  404628:	2300      	movs	r3, #0
}
  40462a:	4618      	mov	r0, r3
  40462c:	3708      	adds	r7, #8
  40462e:	46bd      	mov	sp, r7
  404630:	bd80      	pop	{r7, pc}
  404632:	bf00      	nop
  404634:	00405849 	.word	0x00405849
  404638:	00405965 	.word	0x00405965

0040463c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40463c:	b480      	push	{r7}
  40463e:	b083      	sub	sp, #12
  404640:	af00      	add	r7, sp, #0
  404642:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404644:	687b      	ldr	r3, [r7, #4]
  404646:	2b07      	cmp	r3, #7
  404648:	d825      	bhi.n	404696 <osc_get_rate+0x5a>
  40464a:	a201      	add	r2, pc, #4	; (adr r2, 404650 <osc_get_rate+0x14>)
  40464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404650:	00404671 	.word	0x00404671
  404654:	00404677 	.word	0x00404677
  404658:	0040467d 	.word	0x0040467d
  40465c:	00404683 	.word	0x00404683
  404660:	00404687 	.word	0x00404687
  404664:	0040468b 	.word	0x0040468b
  404668:	0040468f 	.word	0x0040468f
  40466c:	00404693 	.word	0x00404693
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  404670:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  404674:	e010      	b.n	404698 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  404676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40467a:	e00d      	b.n	404698 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40467c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404680:	e00a      	b.n	404698 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  404682:	4b08      	ldr	r3, [pc, #32]	; (4046a4 <osc_get_rate+0x68>)
  404684:	e008      	b.n	404698 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  404686:	4b08      	ldr	r3, [pc, #32]	; (4046a8 <osc_get_rate+0x6c>)
  404688:	e006      	b.n	404698 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40468a:	4b08      	ldr	r3, [pc, #32]	; (4046ac <osc_get_rate+0x70>)
  40468c:	e004      	b.n	404698 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40468e:	4b07      	ldr	r3, [pc, #28]	; (4046ac <osc_get_rate+0x70>)
  404690:	e002      	b.n	404698 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  404692:	4b06      	ldr	r3, [pc, #24]	; (4046ac <osc_get_rate+0x70>)
  404694:	e000      	b.n	404698 <osc_get_rate+0x5c>
	}

	return 0;
  404696:	2300      	movs	r3, #0
}
  404698:	4618      	mov	r0, r3
  40469a:	370c      	adds	r7, #12
  40469c:	46bd      	mov	sp, r7
  40469e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4046a2:	4770      	bx	lr
  4046a4:	003d0900 	.word	0x003d0900
  4046a8:	007a1200 	.word	0x007a1200
  4046ac:	00b71b00 	.word	0x00b71b00

004046b0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4046b0:	b580      	push	{r7, lr}
  4046b2:	b082      	sub	sp, #8
  4046b4:	af00      	add	r7, sp, #0
  4046b6:	4603      	mov	r3, r0
  4046b8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4046ba:	bf00      	nop
  4046bc:	79fb      	ldrb	r3, [r7, #7]
  4046be:	4618      	mov	r0, r3
  4046c0:	4b05      	ldr	r3, [pc, #20]	; (4046d8 <osc_wait_ready+0x28>)
  4046c2:	4798      	blx	r3
  4046c4:	4603      	mov	r3, r0
  4046c6:	f083 0301 	eor.w	r3, r3, #1
  4046ca:	b2db      	uxtb	r3, r3
  4046cc:	2b00      	cmp	r3, #0
  4046ce:	d1f5      	bne.n	4046bc <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4046d0:	bf00      	nop
  4046d2:	3708      	adds	r7, #8
  4046d4:	46bd      	mov	sp, r7
  4046d6:	bd80      	pop	{r7, pc}
  4046d8:	004045cd 	.word	0x004045cd

004046dc <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4046dc:	b580      	push	{r7, lr}
  4046de:	b086      	sub	sp, #24
  4046e0:	af00      	add	r7, sp, #0
  4046e2:	60f8      	str	r0, [r7, #12]
  4046e4:	607a      	str	r2, [r7, #4]
  4046e6:	603b      	str	r3, [r7, #0]
  4046e8:	460b      	mov	r3, r1
  4046ea:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  4046ec:	687b      	ldr	r3, [r7, #4]
  4046ee:	2b00      	cmp	r3, #0
  4046f0:	d107      	bne.n	404702 <pll_config_init+0x26>
  4046f2:	683b      	ldr	r3, [r7, #0]
  4046f4:	2b00      	cmp	r3, #0
  4046f6:	d104      	bne.n	404702 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  4046f8:	68fb      	ldr	r3, [r7, #12]
  4046fa:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  4046fe:	601a      	str	r2, [r3, #0]
  404700:	e019      	b.n	404736 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  404702:	7afb      	ldrb	r3, [r7, #11]
  404704:	4618      	mov	r0, r3
  404706:	4b0e      	ldr	r3, [pc, #56]	; (404740 <pll_config_init+0x64>)
  404708:	4798      	blx	r3
  40470a:	4602      	mov	r2, r0
  40470c:	687b      	ldr	r3, [r7, #4]
  40470e:	fbb2 f3f3 	udiv	r3, r2, r3
  404712:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  404714:	697b      	ldr	r3, [r7, #20]
  404716:	683a      	ldr	r2, [r7, #0]
  404718:	fb02 f303 	mul.w	r3, r2, r3
  40471c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40471e:	683b      	ldr	r3, [r7, #0]
  404720:	3b01      	subs	r3, #1
  404722:	041a      	lsls	r2, r3, #16
  404724:	4b07      	ldr	r3, [pc, #28]	; (404744 <pll_config_init+0x68>)
  404726:	4013      	ands	r3, r2
  404728:	687a      	ldr	r2, [r7, #4]
  40472a:	b2d2      	uxtb	r2, r2
  40472c:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40472e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  404732:	68fb      	ldr	r3, [r7, #12]
  404734:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  404736:	bf00      	nop
  404738:	3718      	adds	r7, #24
  40473a:	46bd      	mov	sp, r7
  40473c:	bd80      	pop	{r7, pc}
  40473e:	bf00      	nop
  404740:	0040463d 	.word	0x0040463d
  404744:	07ff0000 	.word	0x07ff0000

00404748 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  404748:	b580      	push	{r7, lr}
  40474a:	b082      	sub	sp, #8
  40474c:	af00      	add	r7, sp, #0
  40474e:	6078      	str	r0, [r7, #4]
  404750:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  404752:	683b      	ldr	r3, [r7, #0]
  404754:	2b00      	cmp	r3, #0
  404756:	d108      	bne.n	40476a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  404758:	4b09      	ldr	r3, [pc, #36]	; (404780 <pll_enable+0x38>)
  40475a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40475c:	4a09      	ldr	r2, [pc, #36]	; (404784 <pll_enable+0x3c>)
  40475e:	687b      	ldr	r3, [r7, #4]
  404760:	681b      	ldr	r3, [r3, #0]
  404762:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  404766:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  404768:	e005      	b.n	404776 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  40476a:	4a06      	ldr	r2, [pc, #24]	; (404784 <pll_enable+0x3c>)
  40476c:	687b      	ldr	r3, [r7, #4]
  40476e:	681b      	ldr	r3, [r3, #0]
  404770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404774:	61d3      	str	r3, [r2, #28]
	}
}
  404776:	bf00      	nop
  404778:	3708      	adds	r7, #8
  40477a:	46bd      	mov	sp, r7
  40477c:	bd80      	pop	{r7, pc}
  40477e:	bf00      	nop
  404780:	00405981 	.word	0x00405981
  404784:	400e0600 	.word	0x400e0600

00404788 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  404788:	b580      	push	{r7, lr}
  40478a:	b082      	sub	sp, #8
  40478c:	af00      	add	r7, sp, #0
  40478e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  404790:	687b      	ldr	r3, [r7, #4]
  404792:	2b00      	cmp	r3, #0
  404794:	d103      	bne.n	40479e <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  404796:	4b05      	ldr	r3, [pc, #20]	; (4047ac <pll_is_locked+0x24>)
  404798:	4798      	blx	r3
  40479a:	4603      	mov	r3, r0
  40479c:	e002      	b.n	4047a4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  40479e:	4b04      	ldr	r3, [pc, #16]	; (4047b0 <pll_is_locked+0x28>)
  4047a0:	4798      	blx	r3
  4047a2:	4603      	mov	r3, r0
	}
}
  4047a4:	4618      	mov	r0, r3
  4047a6:	3708      	adds	r7, #8
  4047a8:	46bd      	mov	sp, r7
  4047aa:	bd80      	pop	{r7, pc}
  4047ac:	0040599d 	.word	0x0040599d
  4047b0:	004059b9 	.word	0x004059b9

004047b4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4047b4:	b580      	push	{r7, lr}
  4047b6:	b082      	sub	sp, #8
  4047b8:	af00      	add	r7, sp, #0
  4047ba:	4603      	mov	r3, r0
  4047bc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4047be:	79fb      	ldrb	r3, [r7, #7]
  4047c0:	3b03      	subs	r3, #3
  4047c2:	2b04      	cmp	r3, #4
  4047c4:	d808      	bhi.n	4047d8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4047c6:	79fb      	ldrb	r3, [r7, #7]
  4047c8:	4618      	mov	r0, r3
  4047ca:	4b06      	ldr	r3, [pc, #24]	; (4047e4 <pll_enable_source+0x30>)
  4047cc:	4798      	blx	r3
		osc_wait_ready(e_src);
  4047ce:	79fb      	ldrb	r3, [r7, #7]
  4047d0:	4618      	mov	r0, r3
  4047d2:	4b05      	ldr	r3, [pc, #20]	; (4047e8 <pll_enable_source+0x34>)
  4047d4:	4798      	blx	r3
		break;
  4047d6:	e000      	b.n	4047da <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4047d8:	bf00      	nop
	}
}
  4047da:	bf00      	nop
  4047dc:	3708      	adds	r7, #8
  4047de:	46bd      	mov	sp, r7
  4047e0:	bd80      	pop	{r7, pc}
  4047e2:	bf00      	nop
  4047e4:	00404545 	.word	0x00404545
  4047e8:	004046b1 	.word	0x004046b1

004047ec <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4047ec:	b580      	push	{r7, lr}
  4047ee:	b082      	sub	sp, #8
  4047f0:	af00      	add	r7, sp, #0
  4047f2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4047f4:	bf00      	nop
  4047f6:	6878      	ldr	r0, [r7, #4]
  4047f8:	4b04      	ldr	r3, [pc, #16]	; (40480c <pll_wait_for_lock+0x20>)
  4047fa:	4798      	blx	r3
  4047fc:	4603      	mov	r3, r0
  4047fe:	2b00      	cmp	r3, #0
  404800:	d0f9      	beq.n	4047f6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  404802:	2300      	movs	r3, #0
}
  404804:	4618      	mov	r0, r3
  404806:	3708      	adds	r7, #8
  404808:	46bd      	mov	sp, r7
  40480a:	bd80      	pop	{r7, pc}
  40480c:	00404789 	.word	0x00404789

00404810 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  404810:	b580      	push	{r7, lr}
  404812:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  404814:	2006      	movs	r0, #6
  404816:	4b05      	ldr	r3, [pc, #20]	; (40482c <sysclk_get_main_hz+0x1c>)
  404818:	4798      	blx	r3
  40481a:	4602      	mov	r2, r0
  40481c:	4613      	mov	r3, r2
  40481e:	009b      	lsls	r3, r3, #2
  404820:	4413      	add	r3, r2
  404822:	009a      	lsls	r2, r3, #2
  404824:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  404826:	4618      	mov	r0, r3
  404828:	bd80      	pop	{r7, pc}
  40482a:	bf00      	nop
  40482c:	0040463d 	.word	0x0040463d

00404830 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  404830:	b580      	push	{r7, lr}
  404832:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  404834:	4b02      	ldr	r3, [pc, #8]	; (404840 <sysclk_get_cpu_hz+0x10>)
  404836:	4798      	blx	r3
  404838:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40483a:	4618      	mov	r0, r3
  40483c:	bd80      	pop	{r7, pc}
  40483e:	bf00      	nop
  404840:	00404811 	.word	0x00404811

00404844 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404844:	b590      	push	{r4, r7, lr}
  404846:	b083      	sub	sp, #12
  404848:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40484a:	4813      	ldr	r0, [pc, #76]	; (404898 <sysclk_init+0x54>)
  40484c:	4b13      	ldr	r3, [pc, #76]	; (40489c <sysclk_init+0x58>)
  40484e:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  404850:	2006      	movs	r0, #6
  404852:	4b13      	ldr	r3, [pc, #76]	; (4048a0 <sysclk_init+0x5c>)
  404854:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  404856:	1d38      	adds	r0, r7, #4
  404858:	2319      	movs	r3, #25
  40485a:	2201      	movs	r2, #1
  40485c:	2106      	movs	r1, #6
  40485e:	4c11      	ldr	r4, [pc, #68]	; (4048a4 <sysclk_init+0x60>)
  404860:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  404862:	1d3b      	adds	r3, r7, #4
  404864:	2100      	movs	r1, #0
  404866:	4618      	mov	r0, r3
  404868:	4b0f      	ldr	r3, [pc, #60]	; (4048a8 <sysclk_init+0x64>)
  40486a:	4798      	blx	r3
		pll_wait_for_lock(0);
  40486c:	2000      	movs	r0, #0
  40486e:	4b0f      	ldr	r3, [pc, #60]	; (4048ac <sysclk_init+0x68>)
  404870:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  404872:	2002      	movs	r0, #2
  404874:	4b0e      	ldr	r3, [pc, #56]	; (4048b0 <sysclk_init+0x6c>)
  404876:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  404878:	2000      	movs	r0, #0
  40487a:	4b0e      	ldr	r3, [pc, #56]	; (4048b4 <sysclk_init+0x70>)
  40487c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40487e:	4b0e      	ldr	r3, [pc, #56]	; (4048b8 <sysclk_init+0x74>)
  404880:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404882:	4b0e      	ldr	r3, [pc, #56]	; (4048bc <sysclk_init+0x78>)
  404884:	4798      	blx	r3
  404886:	4603      	mov	r3, r0
  404888:	4618      	mov	r0, r3
  40488a:	4b04      	ldr	r3, [pc, #16]	; (40489c <sysclk_init+0x58>)
  40488c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40488e:	bf00      	nop
  404890:	370c      	adds	r7, #12
  404892:	46bd      	mov	sp, r7
  404894:	bd90      	pop	{r4, r7, pc}
  404896:	bf00      	nop
  404898:	11e1a300 	.word	0x11e1a300
  40489c:	0040655d 	.word	0x0040655d
  4048a0:	004047b5 	.word	0x004047b5
  4048a4:	004046dd 	.word	0x004046dd
  4048a8:	00404749 	.word	0x00404749
  4048ac:	004047ed 	.word	0x004047ed
  4048b0:	00405711 	.word	0x00405711
  4048b4:	0040578d 	.word	0x0040578d
  4048b8:	004063f1 	.word	0x004063f1
  4048bc:	00404831 	.word	0x00404831

004048c0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4048c0:	b580      	push	{r7, lr}
  4048c2:	b086      	sub	sp, #24
  4048c4:	af00      	add	r7, sp, #0
  4048c6:	60f8      	str	r0, [r7, #12]
  4048c8:	60b9      	str	r1, [r7, #8]
  4048ca:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4048cc:	2300      	movs	r3, #0
  4048ce:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  4048d0:	68fb      	ldr	r3, [r7, #12]
  4048d2:	2b00      	cmp	r3, #0
  4048d4:	d012      	beq.n	4048fc <_read+0x3c>
		return -1;
  4048d6:	f04f 33ff 	mov.w	r3, #4294967295
  4048da:	e013      	b.n	404904 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  4048dc:	4b0b      	ldr	r3, [pc, #44]	; (40490c <_read+0x4c>)
  4048de:	681b      	ldr	r3, [r3, #0]
  4048e0:	4a0b      	ldr	r2, [pc, #44]	; (404910 <_read+0x50>)
  4048e2:	6812      	ldr	r2, [r2, #0]
  4048e4:	68b9      	ldr	r1, [r7, #8]
  4048e6:	4610      	mov	r0, r2
  4048e8:	4798      	blx	r3
		ptr++;
  4048ea:	68bb      	ldr	r3, [r7, #8]
  4048ec:	3301      	adds	r3, #1
  4048ee:	60bb      	str	r3, [r7, #8]
		nChars++;
  4048f0:	697b      	ldr	r3, [r7, #20]
  4048f2:	3301      	adds	r3, #1
  4048f4:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4048f6:	687b      	ldr	r3, [r7, #4]
  4048f8:	3b01      	subs	r3, #1
  4048fa:	607b      	str	r3, [r7, #4]
  4048fc:	687b      	ldr	r3, [r7, #4]
  4048fe:	2b00      	cmp	r3, #0
  404900:	dcec      	bgt.n	4048dc <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  404902:	697b      	ldr	r3, [r7, #20]
}
  404904:	4618      	mov	r0, r3
  404906:	3718      	adds	r7, #24
  404908:	46bd      	mov	sp, r7
  40490a:	bd80      	pop	{r7, pc}
  40490c:	20401ba0 	.word	0x20401ba0
  404910:	20401ba8 	.word	0x20401ba8

00404914 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  404914:	b580      	push	{r7, lr}
  404916:	b086      	sub	sp, #24
  404918:	af00      	add	r7, sp, #0
  40491a:	60f8      	str	r0, [r7, #12]
  40491c:	60b9      	str	r1, [r7, #8]
  40491e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  404920:	2300      	movs	r3, #0
  404922:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  404924:	68fb      	ldr	r3, [r7, #12]
  404926:	2b01      	cmp	r3, #1
  404928:	d01e      	beq.n	404968 <_write+0x54>
  40492a:	68fb      	ldr	r3, [r7, #12]
  40492c:	2b02      	cmp	r3, #2
  40492e:	d01b      	beq.n	404968 <_write+0x54>
  404930:	68fb      	ldr	r3, [r7, #12]
  404932:	2b03      	cmp	r3, #3
  404934:	d018      	beq.n	404968 <_write+0x54>
		return -1;
  404936:	f04f 33ff 	mov.w	r3, #4294967295
  40493a:	e019      	b.n	404970 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40493c:	4b0e      	ldr	r3, [pc, #56]	; (404978 <_write+0x64>)
  40493e:	681a      	ldr	r2, [r3, #0]
  404940:	4b0e      	ldr	r3, [pc, #56]	; (40497c <_write+0x68>)
  404942:	6818      	ldr	r0, [r3, #0]
  404944:	68bb      	ldr	r3, [r7, #8]
  404946:	1c59      	adds	r1, r3, #1
  404948:	60b9      	str	r1, [r7, #8]
  40494a:	781b      	ldrb	r3, [r3, #0]
  40494c:	4619      	mov	r1, r3
  40494e:	4790      	blx	r2
  404950:	4603      	mov	r3, r0
  404952:	2b00      	cmp	r3, #0
  404954:	da02      	bge.n	40495c <_write+0x48>
			return -1;
  404956:	f04f 33ff 	mov.w	r3, #4294967295
  40495a:	e009      	b.n	404970 <_write+0x5c>
		}
		++nChars;
  40495c:	697b      	ldr	r3, [r7, #20]
  40495e:	3301      	adds	r3, #1
  404960:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  404962:	687b      	ldr	r3, [r7, #4]
  404964:	3b01      	subs	r3, #1
  404966:	607b      	str	r3, [r7, #4]
  404968:	687b      	ldr	r3, [r7, #4]
  40496a:	2b00      	cmp	r3, #0
  40496c:	d1e6      	bne.n	40493c <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  40496e:	697b      	ldr	r3, [r7, #20]
}
  404970:	4618      	mov	r0, r3
  404972:	3718      	adds	r7, #24
  404974:	46bd      	mov	sp, r7
  404976:	bd80      	pop	{r7, pc}
  404978:	20401ba4 	.word	0x20401ba4
  40497c:	20401ba8 	.word	0x20401ba8

00404980 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  404980:	b480      	push	{r7}
  404982:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  404984:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  404988:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40498c:	4b09      	ldr	r3, [pc, #36]	; (4049b4 <SCB_EnableICache+0x34>)
  40498e:	2200      	movs	r2, #0
  404990:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  404994:	4a07      	ldr	r2, [pc, #28]	; (4049b4 <SCB_EnableICache+0x34>)
  404996:	4b07      	ldr	r3, [pc, #28]	; (4049b4 <SCB_EnableICache+0x34>)
  404998:	695b      	ldr	r3, [r3, #20]
  40499a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  40499e:	6153      	str	r3, [r2, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4049a0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4049a4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  4049a8:	bf00      	nop
  4049aa:	46bd      	mov	sp, r7
  4049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049b0:	4770      	bx	lr
  4049b2:	bf00      	nop
  4049b4:	e000ed00 	.word	0xe000ed00

004049b8 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  4049b8:	b480      	push	{r7}
  4049ba:	b08b      	sub	sp, #44	; 0x2c
  4049bc:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4049be:	4b26      	ldr	r3, [pc, #152]	; (404a58 <SCB_EnableDCache+0xa0>)
  4049c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  4049c4:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  4049c6:	69fb      	ldr	r3, [r7, #28]
  4049c8:	0b5b      	lsrs	r3, r3, #13
  4049ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
  4049ce:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4049d0:	69fb      	ldr	r3, [r7, #28]
  4049d2:	f003 0307 	and.w	r3, r3, #7
  4049d6:	3304      	adds	r3, #4
  4049d8:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  4049da:	69fb      	ldr	r3, [r7, #28]
  4049dc:	08db      	lsrs	r3, r3, #3
  4049de:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4049e2:	617b      	str	r3, [r7, #20]
  4049e4:	697b      	ldr	r3, [r7, #20]
  4049e6:	60fb      	str	r3, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4049e8:	68fb      	ldr	r3, [r7, #12]
  4049ea:	fab3 f383 	clz	r3, r3
  4049ee:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  4049f0:	687b      	ldr	r3, [r7, #4]
  4049f2:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  4049f4:	f003 031f 	and.w	r3, r3, #31
  4049f8:	613b      	str	r3, [r7, #16]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4049fa:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4049fe:	697b      	ldr	r3, [r7, #20]
  404a00:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  404a02:	6a3a      	ldr	r2, [r7, #32]
  404a04:	693b      	ldr	r3, [r7, #16]
  404a06:	fa02 f303 	lsl.w	r3, r2, r3
  404a0a:	4619      	mov	r1, r3
  404a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  404a0e:	69bb      	ldr	r3, [r7, #24]
  404a10:	fa02 f303 	lsl.w	r3, r2, r3
  404a14:	430b      	orrs	r3, r1
  404a16:	60bb      	str	r3, [r7, #8]
              SCB->DCISW = sw;
  404a18:	4a0f      	ldr	r2, [pc, #60]	; (404a58 <SCB_EnableDCache+0xa0>)
  404a1a:	68bb      	ldr	r3, [r7, #8]
  404a1c:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  404a20:	6a3b      	ldr	r3, [r7, #32]
  404a22:	1e5a      	subs	r2, r3, #1
  404a24:	623a      	str	r2, [r7, #32]
  404a26:	2b00      	cmp	r3, #0
  404a28:	d1eb      	bne.n	404a02 <SCB_EnableDCache+0x4a>
        } while(sets--);
  404a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404a2c:	1e5a      	subs	r2, r3, #1
  404a2e:	627a      	str	r2, [r7, #36]	; 0x24
  404a30:	2b00      	cmp	r3, #0
  404a32:	d1e4      	bne.n	4049fe <SCB_EnableDCache+0x46>
  404a34:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  404a38:	4a07      	ldr	r2, [pc, #28]	; (404a58 <SCB_EnableDCache+0xa0>)
  404a3a:	4b07      	ldr	r3, [pc, #28]	; (404a58 <SCB_EnableDCache+0xa0>)
  404a3c:	695b      	ldr	r3, [r3, #20]
  404a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404a42:	6153      	str	r3, [r2, #20]
  404a44:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  404a48:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  404a4c:	bf00      	nop
  404a4e:	372c      	adds	r7, #44	; 0x2c
  404a50:	46bd      	mov	sp, r7
  404a52:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a56:	4770      	bx	lr
  404a58:	e000ed00 	.word	0xe000ed00

00404a5c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  404a5c:	b580      	push	{r7, lr}
  404a5e:	b082      	sub	sp, #8
  404a60:	af00      	add	r7, sp, #0
  404a62:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  404a64:	6878      	ldr	r0, [r7, #4]
  404a66:	4b03      	ldr	r3, [pc, #12]	; (404a74 <sysclk_enable_peripheral_clock+0x18>)
  404a68:	4798      	blx	r3
}
  404a6a:	bf00      	nop
  404a6c:	3708      	adds	r7, #8
  404a6e:	46bd      	mov	sp, r7
  404a70:	bd80      	pop	{r7, pc}
  404a72:	bf00      	nop
  404a74:	004059d5 	.word	0x004059d5

00404a78 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  404a78:	b580      	push	{r7, lr}
  404a7a:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  404a7c:	200a      	movs	r0, #10
  404a7e:	4b08      	ldr	r3, [pc, #32]	; (404aa0 <ioport_init+0x28>)
  404a80:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  404a82:	200b      	movs	r0, #11
  404a84:	4b06      	ldr	r3, [pc, #24]	; (404aa0 <ioport_init+0x28>)
  404a86:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  404a88:	200c      	movs	r0, #12
  404a8a:	4b05      	ldr	r3, [pc, #20]	; (404aa0 <ioport_init+0x28>)
  404a8c:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  404a8e:	2010      	movs	r0, #16
  404a90:	4b03      	ldr	r3, [pc, #12]	; (404aa0 <ioport_init+0x28>)
  404a92:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  404a94:	2011      	movs	r0, #17
  404a96:	4b02      	ldr	r3, [pc, #8]	; (404aa0 <ioport_init+0x28>)
  404a98:	4798      	blx	r3
	arch_ioport_init();
}
  404a9a:	bf00      	nop
  404a9c:	bd80      	pop	{r7, pc}
  404a9e:	bf00      	nop
  404aa0:	00404a5d 	.word	0x00404a5d

00404aa4 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  404aa4:	b480      	push	{r7}
  404aa6:	b089      	sub	sp, #36	; 0x24
  404aa8:	af00      	add	r7, sp, #0
  404aaa:	6078      	str	r0, [r7, #4]
  404aac:	687b      	ldr	r3, [r7, #4]
  404aae:	61fb      	str	r3, [r7, #28]
  404ab0:	69fb      	ldr	r3, [r7, #28]
  404ab2:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  404ab4:	69bb      	ldr	r3, [r7, #24]
  404ab6:	095a      	lsrs	r2, r3, #5
  404ab8:	69fb      	ldr	r3, [r7, #28]
  404aba:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404abc:	697b      	ldr	r3, [r7, #20]
  404abe:	f003 031f 	and.w	r3, r3, #31
  404ac2:	2101      	movs	r1, #1
  404ac4:	fa01 f303 	lsl.w	r3, r1, r3
  404ac8:	613a      	str	r2, [r7, #16]
  404aca:	60fb      	str	r3, [r7, #12]
  404acc:	693b      	ldr	r3, [r7, #16]
  404ace:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404ad0:	68ba      	ldr	r2, [r7, #8]
  404ad2:	4b06      	ldr	r3, [pc, #24]	; (404aec <ioport_disable_pin+0x48>)
  404ad4:	4413      	add	r3, r2
  404ad6:	025b      	lsls	r3, r3, #9
  404ad8:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404ada:	68fb      	ldr	r3, [r7, #12]
  404adc:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  404ade:	bf00      	nop
  404ae0:	3724      	adds	r7, #36	; 0x24
  404ae2:	46bd      	mov	sp, r7
  404ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ae8:	4770      	bx	lr
  404aea:	bf00      	nop
  404aec:	00200707 	.word	0x00200707

00404af0 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  404af0:	b480      	push	{r7}
  404af2:	b08d      	sub	sp, #52	; 0x34
  404af4:	af00      	add	r7, sp, #0
  404af6:	6078      	str	r0, [r7, #4]
  404af8:	6039      	str	r1, [r7, #0]
  404afa:	687b      	ldr	r3, [r7, #4]
  404afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  404afe:	683b      	ldr	r3, [r7, #0]
  404b00:	62bb      	str	r3, [r7, #40]	; 0x28
  404b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404b04:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  404b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404b08:	095a      	lsrs	r2, r3, #5
  404b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404b0c:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404b0e:	6a3b      	ldr	r3, [r7, #32]
  404b10:	f003 031f 	and.w	r3, r3, #31
  404b14:	2101      	movs	r1, #1
  404b16:	fa01 f303 	lsl.w	r3, r1, r3
  404b1a:	61fa      	str	r2, [r7, #28]
  404b1c:	61bb      	str	r3, [r7, #24]
  404b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404b20:	617b      	str	r3, [r7, #20]
  404b22:	69fb      	ldr	r3, [r7, #28]
  404b24:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404b26:	693a      	ldr	r2, [r7, #16]
  404b28:	4b37      	ldr	r3, [pc, #220]	; (404c08 <ioport_set_pin_mode+0x118>)
  404b2a:	4413      	add	r3, r2
  404b2c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  404b2e:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  404b30:	697b      	ldr	r3, [r7, #20]
  404b32:	f003 0308 	and.w	r3, r3, #8
  404b36:	2b00      	cmp	r3, #0
  404b38:	d003      	beq.n	404b42 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  404b3a:	68fb      	ldr	r3, [r7, #12]
  404b3c:	69ba      	ldr	r2, [r7, #24]
  404b3e:	665a      	str	r2, [r3, #100]	; 0x64
  404b40:	e002      	b.n	404b48 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  404b42:	68fb      	ldr	r3, [r7, #12]
  404b44:	69ba      	ldr	r2, [r7, #24]
  404b46:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  404b48:	697b      	ldr	r3, [r7, #20]
  404b4a:	f003 0310 	and.w	r3, r3, #16
  404b4e:	2b00      	cmp	r3, #0
  404b50:	d004      	beq.n	404b5c <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  404b52:	68fb      	ldr	r3, [r7, #12]
  404b54:	69ba      	ldr	r2, [r7, #24]
  404b56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  404b5a:	e003      	b.n	404b64 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  404b5c:	68fb      	ldr	r3, [r7, #12]
  404b5e:	69ba      	ldr	r2, [r7, #24]
  404b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  404b64:	697b      	ldr	r3, [r7, #20]
  404b66:	f003 0320 	and.w	r3, r3, #32
  404b6a:	2b00      	cmp	r3, #0
  404b6c:	d003      	beq.n	404b76 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  404b6e:	68fb      	ldr	r3, [r7, #12]
  404b70:	69ba      	ldr	r2, [r7, #24]
  404b72:	651a      	str	r2, [r3, #80]	; 0x50
  404b74:	e002      	b.n	404b7c <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  404b76:	68fb      	ldr	r3, [r7, #12]
  404b78:	69ba      	ldr	r2, [r7, #24]
  404b7a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  404b7c:	697b      	ldr	r3, [r7, #20]
  404b7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  404b82:	2b00      	cmp	r3, #0
  404b84:	d003      	beq.n	404b8e <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  404b86:	68fb      	ldr	r3, [r7, #12]
  404b88:	69ba      	ldr	r2, [r7, #24]
  404b8a:	621a      	str	r2, [r3, #32]
  404b8c:	e002      	b.n	404b94 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  404b8e:	68fb      	ldr	r3, [r7, #12]
  404b90:	69ba      	ldr	r2, [r7, #24]
  404b92:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  404b94:	697b      	ldr	r3, [r7, #20]
  404b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404b9a:	2b00      	cmp	r3, #0
  404b9c:	d004      	beq.n	404ba8 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  404b9e:	68fb      	ldr	r3, [r7, #12]
  404ba0:	69ba      	ldr	r2, [r7, #24]
  404ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  404ba6:	e003      	b.n	404bb0 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  404ba8:	68fb      	ldr	r3, [r7, #12]
  404baa:	69ba      	ldr	r2, [r7, #24]
  404bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  404bb0:	697b      	ldr	r3, [r7, #20]
  404bb2:	f003 0301 	and.w	r3, r3, #1
  404bb6:	2b00      	cmp	r3, #0
  404bb8:	d006      	beq.n	404bc8 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  404bba:	68fb      	ldr	r3, [r7, #12]
  404bbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  404bbe:	69bb      	ldr	r3, [r7, #24]
  404bc0:	431a      	orrs	r2, r3
  404bc2:	68fb      	ldr	r3, [r7, #12]
  404bc4:	671a      	str	r2, [r3, #112]	; 0x70
  404bc6:	e006      	b.n	404bd6 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  404bc8:	68fb      	ldr	r3, [r7, #12]
  404bca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  404bcc:	69bb      	ldr	r3, [r7, #24]
  404bce:	43db      	mvns	r3, r3
  404bd0:	401a      	ands	r2, r3
  404bd2:	68fb      	ldr	r3, [r7, #12]
  404bd4:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  404bd6:	697b      	ldr	r3, [r7, #20]
  404bd8:	f003 0302 	and.w	r3, r3, #2
  404bdc:	2b00      	cmp	r3, #0
  404bde:	d006      	beq.n	404bee <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  404be0:	68fb      	ldr	r3, [r7, #12]
  404be2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404be4:	69bb      	ldr	r3, [r7, #24]
  404be6:	431a      	orrs	r2, r3
  404be8:	68fb      	ldr	r3, [r7, #12]
  404bea:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  404bec:	e006      	b.n	404bfc <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  404bee:	68fb      	ldr	r3, [r7, #12]
  404bf0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404bf2:	69bb      	ldr	r3, [r7, #24]
  404bf4:	43db      	mvns	r3, r3
  404bf6:	401a      	ands	r2, r3
  404bf8:	68fb      	ldr	r3, [r7, #12]
  404bfa:	675a      	str	r2, [r3, #116]	; 0x74
  404bfc:	bf00      	nop
  404bfe:	3734      	adds	r7, #52	; 0x34
  404c00:	46bd      	mov	sp, r7
  404c02:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c06:	4770      	bx	lr
  404c08:	00200707 	.word	0x00200707

00404c0c <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  404c0c:	b480      	push	{r7}
  404c0e:	b08d      	sub	sp, #52	; 0x34
  404c10:	af00      	add	r7, sp, #0
  404c12:	6078      	str	r0, [r7, #4]
  404c14:	460b      	mov	r3, r1
  404c16:	70fb      	strb	r3, [r7, #3]
  404c18:	687b      	ldr	r3, [r7, #4]
  404c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  404c1c:	78fb      	ldrb	r3, [r7, #3]
  404c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  404c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404c24:	627b      	str	r3, [r7, #36]	; 0x24
  404c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404c28:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  404c2a:	6a3b      	ldr	r3, [r7, #32]
  404c2c:	095b      	lsrs	r3, r3, #5
  404c2e:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404c30:	69fa      	ldr	r2, [r7, #28]
  404c32:	4b17      	ldr	r3, [pc, #92]	; (404c90 <ioport_set_pin_dir+0x84>)
  404c34:	4413      	add	r3, r2
  404c36:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  404c38:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  404c3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  404c3e:	2b01      	cmp	r3, #1
  404c40:	d109      	bne.n	404c56 <ioport_set_pin_dir+0x4a>
  404c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404c44:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404c46:	697b      	ldr	r3, [r7, #20]
  404c48:	f003 031f 	and.w	r3, r3, #31
  404c4c:	2201      	movs	r2, #1
  404c4e:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404c50:	69bb      	ldr	r3, [r7, #24]
  404c52:	611a      	str	r2, [r3, #16]
  404c54:	e00c      	b.n	404c70 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  404c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  404c5a:	2b00      	cmp	r3, #0
  404c5c:	d108      	bne.n	404c70 <ioport_set_pin_dir+0x64>
  404c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404c60:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404c62:	693b      	ldr	r3, [r7, #16]
  404c64:	f003 031f 	and.w	r3, r3, #31
  404c68:	2201      	movs	r2, #1
  404c6a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404c6c:	69bb      	ldr	r3, [r7, #24]
  404c6e:	615a      	str	r2, [r3, #20]
  404c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404c72:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404c74:	68fb      	ldr	r3, [r7, #12]
  404c76:	f003 031f 	and.w	r3, r3, #31
  404c7a:	2201      	movs	r2, #1
  404c7c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404c7e:	69bb      	ldr	r3, [r7, #24]
  404c80:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  404c84:	bf00      	nop
  404c86:	3734      	adds	r7, #52	; 0x34
  404c88:	46bd      	mov	sp, r7
  404c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c8e:	4770      	bx	lr
  404c90:	00200707 	.word	0x00200707

00404c94 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  404c94:	b480      	push	{r7}
  404c96:	b08b      	sub	sp, #44	; 0x2c
  404c98:	af00      	add	r7, sp, #0
  404c9a:	6078      	str	r0, [r7, #4]
  404c9c:	460b      	mov	r3, r1
  404c9e:	70fb      	strb	r3, [r7, #3]
  404ca0:	687b      	ldr	r3, [r7, #4]
  404ca2:	627b      	str	r3, [r7, #36]	; 0x24
  404ca4:	78fb      	ldrb	r3, [r7, #3]
  404ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  404caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404cac:	61fb      	str	r3, [r7, #28]
  404cae:	69fb      	ldr	r3, [r7, #28]
  404cb0:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  404cb2:	69bb      	ldr	r3, [r7, #24]
  404cb4:	095b      	lsrs	r3, r3, #5
  404cb6:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404cb8:	697a      	ldr	r2, [r7, #20]
  404cba:	4b10      	ldr	r3, [pc, #64]	; (404cfc <ioport_set_pin_level+0x68>)
  404cbc:	4413      	add	r3, r2
  404cbe:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  404cc0:	613b      	str	r3, [r7, #16]

	if (level) {
  404cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  404cc6:	2b00      	cmp	r3, #0
  404cc8:	d009      	beq.n	404cde <ioport_set_pin_level+0x4a>
  404cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404ccc:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404cce:	68fb      	ldr	r3, [r7, #12]
  404cd0:	f003 031f 	and.w	r3, r3, #31
  404cd4:	2201      	movs	r2, #1
  404cd6:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404cd8:	693b      	ldr	r3, [r7, #16]
  404cda:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  404cdc:	e008      	b.n	404cf0 <ioport_set_pin_level+0x5c>
  404cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404ce0:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404ce2:	68bb      	ldr	r3, [r7, #8]
  404ce4:	f003 031f 	and.w	r3, r3, #31
  404ce8:	2201      	movs	r2, #1
  404cea:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404cec:	693b      	ldr	r3, [r7, #16]
  404cee:	635a      	str	r2, [r3, #52]	; 0x34
  404cf0:	bf00      	nop
  404cf2:	372c      	adds	r7, #44	; 0x2c
  404cf4:	46bd      	mov	sp, r7
  404cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
  404cfa:	4770      	bx	lr
  404cfc:	00200707 	.word	0x00200707

00404d00 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  404d00:	b480      	push	{r7}
  404d02:	b08d      	sub	sp, #52	; 0x34
  404d04:	af00      	add	r7, sp, #0
  404d06:	6078      	str	r0, [r7, #4]
  404d08:	460b      	mov	r3, r1
  404d0a:	70fb      	strb	r3, [r7, #3]
  404d0c:	687b      	ldr	r3, [r7, #4]
  404d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  404d10:	78fb      	ldrb	r3, [r7, #3]
  404d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  404d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404d18:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  404d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404d1c:	095a      	lsrs	r2, r3, #5
  404d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404d20:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404d22:	6a3b      	ldr	r3, [r7, #32]
  404d24:	f003 031f 	and.w	r3, r3, #31
  404d28:	2101      	movs	r1, #1
  404d2a:	fa01 f303 	lsl.w	r3, r1, r3
  404d2e:	61fa      	str	r2, [r7, #28]
  404d30:	61bb      	str	r3, [r7, #24]
  404d32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  404d36:	75fb      	strb	r3, [r7, #23]
  404d38:	69fb      	ldr	r3, [r7, #28]
  404d3a:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404d3c:	693a      	ldr	r2, [r7, #16]
  404d3e:	4b23      	ldr	r3, [pc, #140]	; (404dcc <ioport_set_pin_sense_mode+0xcc>)
  404d40:	4413      	add	r3, r2
  404d42:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  404d44:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  404d46:	7dfb      	ldrb	r3, [r7, #23]
  404d48:	3b01      	subs	r3, #1
  404d4a:	2b03      	cmp	r3, #3
  404d4c:	d82e      	bhi.n	404dac <ioport_set_pin_sense_mode+0xac>
  404d4e:	a201      	add	r2, pc, #4	; (adr r2, 404d54 <ioport_set_pin_sense_mode+0x54>)
  404d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404d54:	00404d89 	.word	0x00404d89
  404d58:	00404d9b 	.word	0x00404d9b
  404d5c:	00404d65 	.word	0x00404d65
  404d60:	00404d77 	.word	0x00404d77
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  404d64:	68fb      	ldr	r3, [r7, #12]
  404d66:	69ba      	ldr	r2, [r7, #24]
  404d68:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  404d6c:	68fb      	ldr	r3, [r7, #12]
  404d6e:	69ba      	ldr	r2, [r7, #24]
  404d70:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  404d74:	e01f      	b.n	404db6 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  404d76:	68fb      	ldr	r3, [r7, #12]
  404d78:	69ba      	ldr	r2, [r7, #24]
  404d7a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  404d7e:	68fb      	ldr	r3, [r7, #12]
  404d80:	69ba      	ldr	r2, [r7, #24]
  404d82:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  404d86:	e016      	b.n	404db6 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  404d88:	68fb      	ldr	r3, [r7, #12]
  404d8a:	69ba      	ldr	r2, [r7, #24]
  404d8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  404d90:	68fb      	ldr	r3, [r7, #12]
  404d92:	69ba      	ldr	r2, [r7, #24]
  404d94:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  404d98:	e00d      	b.n	404db6 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  404d9a:	68fb      	ldr	r3, [r7, #12]
  404d9c:	69ba      	ldr	r2, [r7, #24]
  404d9e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  404da2:	68fb      	ldr	r3, [r7, #12]
  404da4:	69ba      	ldr	r2, [r7, #24]
  404da6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  404daa:	e004      	b.n	404db6 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  404dac:	68fb      	ldr	r3, [r7, #12]
  404dae:	69ba      	ldr	r2, [r7, #24]
  404db0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  404db4:	e003      	b.n	404dbe <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  404db6:	68fb      	ldr	r3, [r7, #12]
  404db8:	69ba      	ldr	r2, [r7, #24]
  404dba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  404dbe:	bf00      	nop
  404dc0:	3734      	adds	r7, #52	; 0x34
  404dc2:	46bd      	mov	sp, r7
  404dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
  404dc8:	4770      	bx	lr
  404dca:	bf00      	nop
  404dcc:	00200707 	.word	0x00200707

00404dd0 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  404dd0:	b480      	push	{r7}
  404dd2:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  404dd4:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  404dd8:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  404ddc:	4a0c      	ldr	r2, [pc, #48]	; (404e10 <tcm_disable+0x40>)
  404dde:	4b0c      	ldr	r3, [pc, #48]	; (404e10 <tcm_disable+0x40>)
  404de0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  404de4:	f023 0301 	bic.w	r3, r3, #1
  404de8:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  404dec:	4a08      	ldr	r2, [pc, #32]	; (404e10 <tcm_disable+0x40>)
  404dee:	4b08      	ldr	r3, [pc, #32]	; (404e10 <tcm_disable+0x40>)
  404df0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  404df4:	f023 0301 	bic.w	r3, r3, #1
  404df8:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  404dfc:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  404e00:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  404e04:	bf00      	nop
  404e06:	46bd      	mov	sp, r7
  404e08:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e0c:	4770      	bx	lr
  404e0e:	bf00      	nop
  404e10:	e000ed00 	.word	0xe000ed00

00404e14 <board_init>:
#endif

void board_init(void)
{
  404e14:	b580      	push	{r7, lr}
  404e16:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404e18:	4b1e      	ldr	r3, [pc, #120]	; (404e94 <board_init+0x80>)
  404e1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404e1e:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  404e20:	4b1d      	ldr	r3, [pc, #116]	; (404e98 <board_init+0x84>)
  404e22:	4798      	blx	r3
	SCB_EnableDCache();
  404e24:	4b1d      	ldr	r3, [pc, #116]	; (404e9c <board_init+0x88>)
  404e26:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404e28:	4b1d      	ldr	r3, [pc, #116]	; (404ea0 <board_init+0x8c>)
  404e2a:	4a1e      	ldr	r2, [pc, #120]	; (404ea4 <board_init+0x90>)
  404e2c:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404e2e:	4b1c      	ldr	r3, [pc, #112]	; (404ea0 <board_init+0x8c>)
  404e30:	4a1d      	ldr	r2, [pc, #116]	; (404ea8 <board_init+0x94>)
  404e32:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  404e34:	4b1d      	ldr	r3, [pc, #116]	; (404eac <board_init+0x98>)
  404e36:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  404e38:	4b1d      	ldr	r3, [pc, #116]	; (404eb0 <board_init+0x9c>)
  404e3a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  404e3c:	2101      	movs	r1, #1
  404e3e:	2048      	movs	r0, #72	; 0x48
  404e40:	4b1c      	ldr	r3, [pc, #112]	; (404eb4 <board_init+0xa0>)
  404e42:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  404e44:	2101      	movs	r1, #1
  404e46:	2048      	movs	r0, #72	; 0x48
  404e48:	4b1b      	ldr	r3, [pc, #108]	; (404eb8 <board_init+0xa4>)
  404e4a:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  404e4c:	2100      	movs	r1, #0
  404e4e:	200b      	movs	r0, #11
  404e50:	4b18      	ldr	r3, [pc, #96]	; (404eb4 <board_init+0xa0>)
  404e52:	4798      	blx	r3
  404e54:	2188      	movs	r1, #136	; 0x88
  404e56:	200b      	movs	r0, #11
  404e58:	4b18      	ldr	r3, [pc, #96]	; (404ebc <board_init+0xa8>)
  404e5a:	4798      	blx	r3
  404e5c:	2102      	movs	r1, #2
  404e5e:	200b      	movs	r0, #11
  404e60:	4b17      	ldr	r3, [pc, #92]	; (404ec0 <board_init+0xac>)
  404e62:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  404e64:	2100      	movs	r1, #0
  404e66:	2015      	movs	r0, #21
  404e68:	4b14      	ldr	r3, [pc, #80]	; (404ebc <board_init+0xa8>)
  404e6a:	4798      	blx	r3
  404e6c:	2015      	movs	r0, #21
  404e6e:	4b15      	ldr	r3, [pc, #84]	; (404ec4 <board_init+0xb0>)
  404e70:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  404e72:	4a15      	ldr	r2, [pc, #84]	; (404ec8 <board_init+0xb4>)
  404e74:	4b14      	ldr	r3, [pc, #80]	; (404ec8 <board_init+0xb4>)
  404e76:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  404e7a:	f043 0310 	orr.w	r3, r3, #16
  404e7e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  404e82:	2103      	movs	r1, #3
  404e84:	2024      	movs	r0, #36	; 0x24
  404e86:	4b0d      	ldr	r3, [pc, #52]	; (404ebc <board_init+0xa8>)
  404e88:	4798      	blx	r3
  404e8a:	2024      	movs	r0, #36	; 0x24
  404e8c:	4b0d      	ldr	r3, [pc, #52]	; (404ec4 <board_init+0xb0>)
  404e8e:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  404e90:	bf00      	nop
  404e92:	bd80      	pop	{r7, pc}
  404e94:	400e1850 	.word	0x400e1850
  404e98:	00404981 	.word	0x00404981
  404e9c:	004049b9 	.word	0x004049b9
  404ea0:	400e0c00 	.word	0x400e0c00
  404ea4:	5a00080c 	.word	0x5a00080c
  404ea8:	5a00070c 	.word	0x5a00070c
  404eac:	00404dd1 	.word	0x00404dd1
  404eb0:	00404a79 	.word	0x00404a79
  404eb4:	00404c0d 	.word	0x00404c0d
  404eb8:	00404c95 	.word	0x00404c95
  404ebc:	00404af1 	.word	0x00404af1
  404ec0:	00404d01 	.word	0x00404d01
  404ec4:	00404aa5 	.word	0x00404aa5
  404ec8:	40088000 	.word	0x40088000

00404ecc <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  404ecc:	b480      	push	{r7}
  404ece:	b085      	sub	sp, #20
  404ed0:	af00      	add	r7, sp, #0
  404ed2:	60f8      	str	r0, [r7, #12]
  404ed4:	60b9      	str	r1, [r7, #8]
  404ed6:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404ed8:	687b      	ldr	r3, [r7, #4]
  404eda:	2b00      	cmp	r3, #0
  404edc:	d003      	beq.n	404ee6 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  404ede:	68fb      	ldr	r3, [r7, #12]
  404ee0:	68ba      	ldr	r2, [r7, #8]
  404ee2:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  404ee4:	e002      	b.n	404eec <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404ee6:	68fb      	ldr	r3, [r7, #12]
  404ee8:	68ba      	ldr	r2, [r7, #8]
  404eea:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  404eec:	bf00      	nop
  404eee:	3714      	adds	r7, #20
  404ef0:	46bd      	mov	sp, r7
  404ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ef6:	4770      	bx	lr

00404ef8 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  404ef8:	b480      	push	{r7}
  404efa:	b083      	sub	sp, #12
  404efc:	af00      	add	r7, sp, #0
  404efe:	6078      	str	r0, [r7, #4]
  404f00:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  404f02:	687b      	ldr	r3, [r7, #4]
  404f04:	683a      	ldr	r2, [r7, #0]
  404f06:	631a      	str	r2, [r3, #48]	; 0x30
}
  404f08:	bf00      	nop
  404f0a:	370c      	adds	r7, #12
  404f0c:	46bd      	mov	sp, r7
  404f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f12:	4770      	bx	lr

00404f14 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  404f14:	b480      	push	{r7}
  404f16:	b083      	sub	sp, #12
  404f18:	af00      	add	r7, sp, #0
  404f1a:	6078      	str	r0, [r7, #4]
  404f1c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  404f1e:	687b      	ldr	r3, [r7, #4]
  404f20:	683a      	ldr	r2, [r7, #0]
  404f22:	635a      	str	r2, [r3, #52]	; 0x34
}
  404f24:	bf00      	nop
  404f26:	370c      	adds	r7, #12
  404f28:	46bd      	mov	sp, r7
  404f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f2e:	4770      	bx	lr

00404f30 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  404f30:	b480      	push	{r7}
  404f32:	b087      	sub	sp, #28
  404f34:	af00      	add	r7, sp, #0
  404f36:	60f8      	str	r0, [r7, #12]
  404f38:	60b9      	str	r1, [r7, #8]
  404f3a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  404f3c:	68fb      	ldr	r3, [r7, #12]
  404f3e:	687a      	ldr	r2, [r7, #4]
  404f40:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404f42:	68bb      	ldr	r3, [r7, #8]
  404f44:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404f48:	d04a      	beq.n	404fe0 <pio_set_peripheral+0xb0>
  404f4a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404f4e:	d808      	bhi.n	404f62 <pio_set_peripheral+0x32>
  404f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404f54:	d016      	beq.n	404f84 <pio_set_peripheral+0x54>
  404f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  404f5a:	d02c      	beq.n	404fb6 <pio_set_peripheral+0x86>
  404f5c:	2b00      	cmp	r3, #0
  404f5e:	d069      	beq.n	405034 <pio_set_peripheral+0x104>
  404f60:	e064      	b.n	40502c <pio_set_peripheral+0xfc>
  404f62:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404f66:	d065      	beq.n	405034 <pio_set_peripheral+0x104>
  404f68:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404f6c:	d803      	bhi.n	404f76 <pio_set_peripheral+0x46>
  404f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404f72:	d04a      	beq.n	40500a <pio_set_peripheral+0xda>
  404f74:	e05a      	b.n	40502c <pio_set_peripheral+0xfc>
  404f76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  404f7a:	d05b      	beq.n	405034 <pio_set_peripheral+0x104>
  404f7c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404f80:	d058      	beq.n	405034 <pio_set_peripheral+0x104>
  404f82:	e053      	b.n	40502c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404f84:	68fb      	ldr	r3, [r7, #12]
  404f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  404f88:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404f8a:	68fb      	ldr	r3, [r7, #12]
  404f8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  404f8e:	687b      	ldr	r3, [r7, #4]
  404f90:	43d9      	mvns	r1, r3
  404f92:	697b      	ldr	r3, [r7, #20]
  404f94:	400b      	ands	r3, r1
  404f96:	401a      	ands	r2, r3
  404f98:	68fb      	ldr	r3, [r7, #12]
  404f9a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404f9c:	68fb      	ldr	r3, [r7, #12]
  404f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  404fa0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404fa2:	68fb      	ldr	r3, [r7, #12]
  404fa4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404fa6:	687b      	ldr	r3, [r7, #4]
  404fa8:	43d9      	mvns	r1, r3
  404faa:	697b      	ldr	r3, [r7, #20]
  404fac:	400b      	ands	r3, r1
  404fae:	401a      	ands	r2, r3
  404fb0:	68fb      	ldr	r3, [r7, #12]
  404fb2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  404fb4:	e03a      	b.n	40502c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404fb6:	68fb      	ldr	r3, [r7, #12]
  404fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  404fba:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404fbc:	687a      	ldr	r2, [r7, #4]
  404fbe:	697b      	ldr	r3, [r7, #20]
  404fc0:	431a      	orrs	r2, r3
  404fc2:	68fb      	ldr	r3, [r7, #12]
  404fc4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404fc6:	68fb      	ldr	r3, [r7, #12]
  404fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  404fca:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404fcc:	68fb      	ldr	r3, [r7, #12]
  404fce:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404fd0:	687b      	ldr	r3, [r7, #4]
  404fd2:	43d9      	mvns	r1, r3
  404fd4:	697b      	ldr	r3, [r7, #20]
  404fd6:	400b      	ands	r3, r1
  404fd8:	401a      	ands	r2, r3
  404fda:	68fb      	ldr	r3, [r7, #12]
  404fdc:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  404fde:	e025      	b.n	40502c <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404fe0:	68fb      	ldr	r3, [r7, #12]
  404fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  404fe4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404fe6:	68fb      	ldr	r3, [r7, #12]
  404fe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  404fea:	687b      	ldr	r3, [r7, #4]
  404fec:	43d9      	mvns	r1, r3
  404fee:	697b      	ldr	r3, [r7, #20]
  404ff0:	400b      	ands	r3, r1
  404ff2:	401a      	ands	r2, r3
  404ff4:	68fb      	ldr	r3, [r7, #12]
  404ff6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404ff8:	68fb      	ldr	r3, [r7, #12]
  404ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  404ffc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404ffe:	687a      	ldr	r2, [r7, #4]
  405000:	697b      	ldr	r3, [r7, #20]
  405002:	431a      	orrs	r2, r3
  405004:	68fb      	ldr	r3, [r7, #12]
  405006:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405008:	e010      	b.n	40502c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40500a:	68fb      	ldr	r3, [r7, #12]
  40500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40500e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  405010:	687a      	ldr	r2, [r7, #4]
  405012:	697b      	ldr	r3, [r7, #20]
  405014:	431a      	orrs	r2, r3
  405016:	68fb      	ldr	r3, [r7, #12]
  405018:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40501a:	68fb      	ldr	r3, [r7, #12]
  40501c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40501e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  405020:	687a      	ldr	r2, [r7, #4]
  405022:	697b      	ldr	r3, [r7, #20]
  405024:	431a      	orrs	r2, r3
  405026:	68fb      	ldr	r3, [r7, #12]
  405028:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40502a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40502c:	68fb      	ldr	r3, [r7, #12]
  40502e:	687a      	ldr	r2, [r7, #4]
  405030:	605a      	str	r2, [r3, #4]
  405032:	e000      	b.n	405036 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  405034:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  405036:	371c      	adds	r7, #28
  405038:	46bd      	mov	sp, r7
  40503a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40503e:	4770      	bx	lr

00405040 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  405040:	b580      	push	{r7, lr}
  405042:	b084      	sub	sp, #16
  405044:	af00      	add	r7, sp, #0
  405046:	60f8      	str	r0, [r7, #12]
  405048:	60b9      	str	r1, [r7, #8]
  40504a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40504c:	68b9      	ldr	r1, [r7, #8]
  40504e:	68f8      	ldr	r0, [r7, #12]
  405050:	4b19      	ldr	r3, [pc, #100]	; (4050b8 <pio_set_input+0x78>)
  405052:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  405054:	687b      	ldr	r3, [r7, #4]
  405056:	f003 0301 	and.w	r3, r3, #1
  40505a:	461a      	mov	r2, r3
  40505c:	68b9      	ldr	r1, [r7, #8]
  40505e:	68f8      	ldr	r0, [r7, #12]
  405060:	4b16      	ldr	r3, [pc, #88]	; (4050bc <pio_set_input+0x7c>)
  405062:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  405064:	687b      	ldr	r3, [r7, #4]
  405066:	f003 030a 	and.w	r3, r3, #10
  40506a:	2b00      	cmp	r3, #0
  40506c:	d003      	beq.n	405076 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40506e:	68fb      	ldr	r3, [r7, #12]
  405070:	68ba      	ldr	r2, [r7, #8]
  405072:	621a      	str	r2, [r3, #32]
  405074:	e002      	b.n	40507c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  405076:	68fb      	ldr	r3, [r7, #12]
  405078:	68ba      	ldr	r2, [r7, #8]
  40507a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40507c:	687b      	ldr	r3, [r7, #4]
  40507e:	f003 0302 	and.w	r3, r3, #2
  405082:	2b00      	cmp	r3, #0
  405084:	d004      	beq.n	405090 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  405086:	68fb      	ldr	r3, [r7, #12]
  405088:	68ba      	ldr	r2, [r7, #8]
  40508a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40508e:	e008      	b.n	4050a2 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  405090:	687b      	ldr	r3, [r7, #4]
  405092:	f003 0308 	and.w	r3, r3, #8
  405096:	2b00      	cmp	r3, #0
  405098:	d003      	beq.n	4050a2 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40509a:	68fb      	ldr	r3, [r7, #12]
  40509c:	68ba      	ldr	r2, [r7, #8]
  40509e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4050a2:	68fb      	ldr	r3, [r7, #12]
  4050a4:	68ba      	ldr	r2, [r7, #8]
  4050a6:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4050a8:	68fb      	ldr	r3, [r7, #12]
  4050aa:	68ba      	ldr	r2, [r7, #8]
  4050ac:	601a      	str	r2, [r3, #0]
}
  4050ae:	bf00      	nop
  4050b0:	3710      	adds	r7, #16
  4050b2:	46bd      	mov	sp, r7
  4050b4:	bd80      	pop	{r7, pc}
  4050b6:	bf00      	nop
  4050b8:	004051ad 	.word	0x004051ad
  4050bc:	00404ecd 	.word	0x00404ecd

004050c0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4050c0:	b580      	push	{r7, lr}
  4050c2:	b084      	sub	sp, #16
  4050c4:	af00      	add	r7, sp, #0
  4050c6:	60f8      	str	r0, [r7, #12]
  4050c8:	60b9      	str	r1, [r7, #8]
  4050ca:	607a      	str	r2, [r7, #4]
  4050cc:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4050ce:	68b9      	ldr	r1, [r7, #8]
  4050d0:	68f8      	ldr	r0, [r7, #12]
  4050d2:	4b12      	ldr	r3, [pc, #72]	; (40511c <pio_set_output+0x5c>)
  4050d4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4050d6:	69ba      	ldr	r2, [r7, #24]
  4050d8:	68b9      	ldr	r1, [r7, #8]
  4050da:	68f8      	ldr	r0, [r7, #12]
  4050dc:	4b10      	ldr	r3, [pc, #64]	; (405120 <pio_set_output+0x60>)
  4050de:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4050e0:	683b      	ldr	r3, [r7, #0]
  4050e2:	2b00      	cmp	r3, #0
  4050e4:	d003      	beq.n	4050ee <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4050e6:	68fb      	ldr	r3, [r7, #12]
  4050e8:	68ba      	ldr	r2, [r7, #8]
  4050ea:	651a      	str	r2, [r3, #80]	; 0x50
  4050ec:	e002      	b.n	4050f4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4050ee:	68fb      	ldr	r3, [r7, #12]
  4050f0:	68ba      	ldr	r2, [r7, #8]
  4050f2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4050f4:	687b      	ldr	r3, [r7, #4]
  4050f6:	2b00      	cmp	r3, #0
  4050f8:	d003      	beq.n	405102 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4050fa:	68fb      	ldr	r3, [r7, #12]
  4050fc:	68ba      	ldr	r2, [r7, #8]
  4050fe:	631a      	str	r2, [r3, #48]	; 0x30
  405100:	e002      	b.n	405108 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  405102:	68fb      	ldr	r3, [r7, #12]
  405104:	68ba      	ldr	r2, [r7, #8]
  405106:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  405108:	68fb      	ldr	r3, [r7, #12]
  40510a:	68ba      	ldr	r2, [r7, #8]
  40510c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40510e:	68fb      	ldr	r3, [r7, #12]
  405110:	68ba      	ldr	r2, [r7, #8]
  405112:	601a      	str	r2, [r3, #0]
}
  405114:	bf00      	nop
  405116:	3710      	adds	r7, #16
  405118:	46bd      	mov	sp, r7
  40511a:	bd80      	pop	{r7, pc}
  40511c:	004051ad 	.word	0x004051ad
  405120:	00404ecd 	.word	0x00404ecd

00405124 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  405124:	b480      	push	{r7}
  405126:	b085      	sub	sp, #20
  405128:	af00      	add	r7, sp, #0
  40512a:	60f8      	str	r0, [r7, #12]
  40512c:	60b9      	str	r1, [r7, #8]
  40512e:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  405130:	687b      	ldr	r3, [r7, #4]
  405132:	f003 0310 	and.w	r3, r3, #16
  405136:	2b00      	cmp	r3, #0
  405138:	d020      	beq.n	40517c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40513a:	68fb      	ldr	r3, [r7, #12]
  40513c:	68ba      	ldr	r2, [r7, #8]
  40513e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  405142:	687b      	ldr	r3, [r7, #4]
  405144:	f003 0320 	and.w	r3, r3, #32
  405148:	2b00      	cmp	r3, #0
  40514a:	d004      	beq.n	405156 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40514c:	68fb      	ldr	r3, [r7, #12]
  40514e:	68ba      	ldr	r2, [r7, #8]
  405150:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  405154:	e003      	b.n	40515e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  405156:	68fb      	ldr	r3, [r7, #12]
  405158:	68ba      	ldr	r2, [r7, #8]
  40515a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40515e:	687b      	ldr	r3, [r7, #4]
  405160:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405164:	2b00      	cmp	r3, #0
  405166:	d004      	beq.n	405172 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  405168:	68fb      	ldr	r3, [r7, #12]
  40516a:	68ba      	ldr	r2, [r7, #8]
  40516c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  405170:	e008      	b.n	405184 <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  405172:	68fb      	ldr	r3, [r7, #12]
  405174:	68ba      	ldr	r2, [r7, #8]
  405176:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  40517a:	e003      	b.n	405184 <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  40517c:	68fb      	ldr	r3, [r7, #12]
  40517e:	68ba      	ldr	r2, [r7, #8]
  405180:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  405184:	bf00      	nop
  405186:	3714      	adds	r7, #20
  405188:	46bd      	mov	sp, r7
  40518a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40518e:	4770      	bx	lr

00405190 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  405190:	b480      	push	{r7}
  405192:	b083      	sub	sp, #12
  405194:	af00      	add	r7, sp, #0
  405196:	6078      	str	r0, [r7, #4]
  405198:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  40519a:	687b      	ldr	r3, [r7, #4]
  40519c:	683a      	ldr	r2, [r7, #0]
  40519e:	641a      	str	r2, [r3, #64]	; 0x40
}
  4051a0:	bf00      	nop
  4051a2:	370c      	adds	r7, #12
  4051a4:	46bd      	mov	sp, r7
  4051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051aa:	4770      	bx	lr

004051ac <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4051ac:	b480      	push	{r7}
  4051ae:	b083      	sub	sp, #12
  4051b0:	af00      	add	r7, sp, #0
  4051b2:	6078      	str	r0, [r7, #4]
  4051b4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4051b6:	687b      	ldr	r3, [r7, #4]
  4051b8:	683a      	ldr	r2, [r7, #0]
  4051ba:	645a      	str	r2, [r3, #68]	; 0x44
}
  4051bc:	bf00      	nop
  4051be:	370c      	adds	r7, #12
  4051c0:	46bd      	mov	sp, r7
  4051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051c6:	4770      	bx	lr

004051c8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4051c8:	b480      	push	{r7}
  4051ca:	b083      	sub	sp, #12
  4051cc:	af00      	add	r7, sp, #0
  4051ce:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4051d0:	687b      	ldr	r3, [r7, #4]
  4051d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4051d4:	4618      	mov	r0, r3
  4051d6:	370c      	adds	r7, #12
  4051d8:	46bd      	mov	sp, r7
  4051da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051de:	4770      	bx	lr

004051e0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4051e0:	b480      	push	{r7}
  4051e2:	b083      	sub	sp, #12
  4051e4:	af00      	add	r7, sp, #0
  4051e6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4051e8:	687b      	ldr	r3, [r7, #4]
  4051ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4051ec:	4618      	mov	r0, r3
  4051ee:	370c      	adds	r7, #12
  4051f0:	46bd      	mov	sp, r7
  4051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051f6:	4770      	bx	lr

004051f8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4051f8:	b590      	push	{r4, r7, lr}
  4051fa:	b087      	sub	sp, #28
  4051fc:	af02      	add	r7, sp, #8
  4051fe:	6078      	str	r0, [r7, #4]
  405200:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  405202:	6878      	ldr	r0, [r7, #4]
  405204:	4b63      	ldr	r3, [pc, #396]	; (405394 <pio_configure_pin+0x19c>)
  405206:	4798      	blx	r3
  405208:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40520a:	683b      	ldr	r3, [r7, #0]
  40520c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  405210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  405214:	d067      	beq.n	4052e6 <pio_configure_pin+0xee>
  405216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40521a:	d809      	bhi.n	405230 <pio_configure_pin+0x38>
  40521c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  405220:	d02b      	beq.n	40527a <pio_configure_pin+0x82>
  405222:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405226:	d043      	beq.n	4052b0 <pio_configure_pin+0xb8>
  405228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40522c:	d00a      	beq.n	405244 <pio_configure_pin+0x4c>
  40522e:	e0a9      	b.n	405384 <pio_configure_pin+0x18c>
  405230:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  405234:	d07e      	beq.n	405334 <pio_configure_pin+0x13c>
  405236:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40523a:	d07b      	beq.n	405334 <pio_configure_pin+0x13c>
  40523c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  405240:	d06c      	beq.n	40531c <pio_configure_pin+0x124>
  405242:	e09f      	b.n	405384 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  405244:	687b      	ldr	r3, [r7, #4]
  405246:	f003 031f 	and.w	r3, r3, #31
  40524a:	2201      	movs	r2, #1
  40524c:	fa02 f303 	lsl.w	r3, r2, r3
  405250:	461a      	mov	r2, r3
  405252:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  405256:	68f8      	ldr	r0, [r7, #12]
  405258:	4b4f      	ldr	r3, [pc, #316]	; (405398 <pio_configure_pin+0x1a0>)
  40525a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40525c:	687b      	ldr	r3, [r7, #4]
  40525e:	f003 031f 	and.w	r3, r3, #31
  405262:	2201      	movs	r2, #1
  405264:	fa02 f303 	lsl.w	r3, r2, r3
  405268:	4619      	mov	r1, r3
  40526a:	683b      	ldr	r3, [r7, #0]
  40526c:	f003 0301 	and.w	r3, r3, #1
  405270:	461a      	mov	r2, r3
  405272:	68f8      	ldr	r0, [r7, #12]
  405274:	4b49      	ldr	r3, [pc, #292]	; (40539c <pio_configure_pin+0x1a4>)
  405276:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  405278:	e086      	b.n	405388 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40527a:	687b      	ldr	r3, [r7, #4]
  40527c:	f003 031f 	and.w	r3, r3, #31
  405280:	2201      	movs	r2, #1
  405282:	fa02 f303 	lsl.w	r3, r2, r3
  405286:	461a      	mov	r2, r3
  405288:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40528c:	68f8      	ldr	r0, [r7, #12]
  40528e:	4b42      	ldr	r3, [pc, #264]	; (405398 <pio_configure_pin+0x1a0>)
  405290:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  405292:	687b      	ldr	r3, [r7, #4]
  405294:	f003 031f 	and.w	r3, r3, #31
  405298:	2201      	movs	r2, #1
  40529a:	fa02 f303 	lsl.w	r3, r2, r3
  40529e:	4619      	mov	r1, r3
  4052a0:	683b      	ldr	r3, [r7, #0]
  4052a2:	f003 0301 	and.w	r3, r3, #1
  4052a6:	461a      	mov	r2, r3
  4052a8:	68f8      	ldr	r0, [r7, #12]
  4052aa:	4b3c      	ldr	r3, [pc, #240]	; (40539c <pio_configure_pin+0x1a4>)
  4052ac:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4052ae:	e06b      	b.n	405388 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4052b0:	687b      	ldr	r3, [r7, #4]
  4052b2:	f003 031f 	and.w	r3, r3, #31
  4052b6:	2201      	movs	r2, #1
  4052b8:	fa02 f303 	lsl.w	r3, r2, r3
  4052bc:	461a      	mov	r2, r3
  4052be:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4052c2:	68f8      	ldr	r0, [r7, #12]
  4052c4:	4b34      	ldr	r3, [pc, #208]	; (405398 <pio_configure_pin+0x1a0>)
  4052c6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4052c8:	687b      	ldr	r3, [r7, #4]
  4052ca:	f003 031f 	and.w	r3, r3, #31
  4052ce:	2201      	movs	r2, #1
  4052d0:	fa02 f303 	lsl.w	r3, r2, r3
  4052d4:	4619      	mov	r1, r3
  4052d6:	683b      	ldr	r3, [r7, #0]
  4052d8:	f003 0301 	and.w	r3, r3, #1
  4052dc:	461a      	mov	r2, r3
  4052de:	68f8      	ldr	r0, [r7, #12]
  4052e0:	4b2e      	ldr	r3, [pc, #184]	; (40539c <pio_configure_pin+0x1a4>)
  4052e2:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4052e4:	e050      	b.n	405388 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4052e6:	687b      	ldr	r3, [r7, #4]
  4052e8:	f003 031f 	and.w	r3, r3, #31
  4052ec:	2201      	movs	r2, #1
  4052ee:	fa02 f303 	lsl.w	r3, r2, r3
  4052f2:	461a      	mov	r2, r3
  4052f4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4052f8:	68f8      	ldr	r0, [r7, #12]
  4052fa:	4b27      	ldr	r3, [pc, #156]	; (405398 <pio_configure_pin+0x1a0>)
  4052fc:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4052fe:	687b      	ldr	r3, [r7, #4]
  405300:	f003 031f 	and.w	r3, r3, #31
  405304:	2201      	movs	r2, #1
  405306:	fa02 f303 	lsl.w	r3, r2, r3
  40530a:	4619      	mov	r1, r3
  40530c:	683b      	ldr	r3, [r7, #0]
  40530e:	f003 0301 	and.w	r3, r3, #1
  405312:	461a      	mov	r2, r3
  405314:	68f8      	ldr	r0, [r7, #12]
  405316:	4b21      	ldr	r3, [pc, #132]	; (40539c <pio_configure_pin+0x1a4>)
  405318:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40531a:	e035      	b.n	405388 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40531c:	687b      	ldr	r3, [r7, #4]
  40531e:	f003 031f 	and.w	r3, r3, #31
  405322:	2201      	movs	r2, #1
  405324:	fa02 f303 	lsl.w	r3, r2, r3
  405328:	683a      	ldr	r2, [r7, #0]
  40532a:	4619      	mov	r1, r3
  40532c:	68f8      	ldr	r0, [r7, #12]
  40532e:	4b1c      	ldr	r3, [pc, #112]	; (4053a0 <pio_configure_pin+0x1a8>)
  405330:	4798      	blx	r3
		break;
  405332:	e029      	b.n	405388 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  405334:	687b      	ldr	r3, [r7, #4]
  405336:	f003 031f 	and.w	r3, r3, #31
  40533a:	2201      	movs	r2, #1
  40533c:	fa02 f303 	lsl.w	r3, r2, r3
  405340:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  405342:	683b      	ldr	r3, [r7, #0]
  405344:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  405348:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40534c:	bf0c      	ite	eq
  40534e:	2301      	moveq	r3, #1
  405350:	2300      	movne	r3, #0
  405352:	b2db      	uxtb	r3, r3
  405354:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  405356:	683b      	ldr	r3, [r7, #0]
  405358:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40535c:	2b00      	cmp	r3, #0
  40535e:	bf14      	ite	ne
  405360:	2301      	movne	r3, #1
  405362:	2300      	moveq	r3, #0
  405364:	b2db      	uxtb	r3, r3
  405366:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  405368:	683b      	ldr	r3, [r7, #0]
  40536a:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40536e:	2b00      	cmp	r3, #0
  405370:	bf14      	ite	ne
  405372:	2301      	movne	r3, #1
  405374:	2300      	moveq	r3, #0
  405376:	b2db      	uxtb	r3, r3
  405378:	9300      	str	r3, [sp, #0]
  40537a:	4603      	mov	r3, r0
  40537c:	68f8      	ldr	r0, [r7, #12]
  40537e:	4c09      	ldr	r4, [pc, #36]	; (4053a4 <pio_configure_pin+0x1ac>)
  405380:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  405382:	e001      	b.n	405388 <pio_configure_pin+0x190>

	default:
		return 0;
  405384:	2300      	movs	r3, #0
  405386:	e000      	b.n	40538a <pio_configure_pin+0x192>
	}

	return 1;
  405388:	2301      	movs	r3, #1
}
  40538a:	4618      	mov	r0, r3
  40538c:	3714      	adds	r7, #20
  40538e:	46bd      	mov	sp, r7
  405390:	bd90      	pop	{r4, r7, pc}
  405392:	bf00      	nop
  405394:	004053a9 	.word	0x004053a9
  405398:	00404f31 	.word	0x00404f31
  40539c:	00404ecd 	.word	0x00404ecd
  4053a0:	00405041 	.word	0x00405041
  4053a4:	004050c1 	.word	0x004050c1

004053a8 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  4053a8:	b480      	push	{r7}
  4053aa:	b085      	sub	sp, #20
  4053ac:	af00      	add	r7, sp, #0
  4053ae:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4053b0:	687b      	ldr	r3, [r7, #4]
  4053b2:	095a      	lsrs	r2, r3, #5
  4053b4:	4b05      	ldr	r3, [pc, #20]	; (4053cc <pio_get_pin_group+0x24>)
  4053b6:	4413      	add	r3, r2
  4053b8:	025b      	lsls	r3, r3, #9
  4053ba:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4053bc:	68fb      	ldr	r3, [r7, #12]
}
  4053be:	4618      	mov	r0, r3
  4053c0:	3714      	adds	r7, #20
  4053c2:	46bd      	mov	sp, r7
  4053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053c8:	4770      	bx	lr
  4053ca:	bf00      	nop
  4053cc:	00200707 	.word	0x00200707

004053d0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4053d0:	b480      	push	{r7}
  4053d2:	b083      	sub	sp, #12
  4053d4:	af00      	add	r7, sp, #0
  4053d6:	4603      	mov	r3, r0
  4053d8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4053da:	4909      	ldr	r1, [pc, #36]	; (405400 <NVIC_EnableIRQ+0x30>)
  4053dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4053e0:	095b      	lsrs	r3, r3, #5
  4053e2:	79fa      	ldrb	r2, [r7, #7]
  4053e4:	f002 021f 	and.w	r2, r2, #31
  4053e8:	2001      	movs	r0, #1
  4053ea:	fa00 f202 	lsl.w	r2, r0, r2
  4053ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4053f2:	bf00      	nop
  4053f4:	370c      	adds	r7, #12
  4053f6:	46bd      	mov	sp, r7
  4053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053fc:	4770      	bx	lr
  4053fe:	bf00      	nop
  405400:	e000e100 	.word	0xe000e100

00405404 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  405404:	b480      	push	{r7}
  405406:	b083      	sub	sp, #12
  405408:	af00      	add	r7, sp, #0
  40540a:	4603      	mov	r3, r0
  40540c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40540e:	4909      	ldr	r1, [pc, #36]	; (405434 <NVIC_DisableIRQ+0x30>)
  405410:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405414:	095b      	lsrs	r3, r3, #5
  405416:	79fa      	ldrb	r2, [r7, #7]
  405418:	f002 021f 	and.w	r2, r2, #31
  40541c:	2001      	movs	r0, #1
  40541e:	fa00 f202 	lsl.w	r2, r0, r2
  405422:	3320      	adds	r3, #32
  405424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  405428:	bf00      	nop
  40542a:	370c      	adds	r7, #12
  40542c:	46bd      	mov	sp, r7
  40542e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405432:	4770      	bx	lr
  405434:	e000e100 	.word	0xe000e100

00405438 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  405438:	b480      	push	{r7}
  40543a:	b083      	sub	sp, #12
  40543c:	af00      	add	r7, sp, #0
  40543e:	4603      	mov	r3, r0
  405440:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405442:	4909      	ldr	r1, [pc, #36]	; (405468 <NVIC_ClearPendingIRQ+0x30>)
  405444:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405448:	095b      	lsrs	r3, r3, #5
  40544a:	79fa      	ldrb	r2, [r7, #7]
  40544c:	f002 021f 	and.w	r2, r2, #31
  405450:	2001      	movs	r0, #1
  405452:	fa00 f202 	lsl.w	r2, r0, r2
  405456:	3360      	adds	r3, #96	; 0x60
  405458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40545c:	bf00      	nop
  40545e:	370c      	adds	r7, #12
  405460:	46bd      	mov	sp, r7
  405462:	f85d 7b04 	ldr.w	r7, [sp], #4
  405466:	4770      	bx	lr
  405468:	e000e100 	.word	0xe000e100

0040546c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40546c:	b480      	push	{r7}
  40546e:	b083      	sub	sp, #12
  405470:	af00      	add	r7, sp, #0
  405472:	4603      	mov	r3, r0
  405474:	6039      	str	r1, [r7, #0]
  405476:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  405478:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40547c:	2b00      	cmp	r3, #0
  40547e:	da0b      	bge.n	405498 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  405480:	490d      	ldr	r1, [pc, #52]	; (4054b8 <NVIC_SetPriority+0x4c>)
  405482:	79fb      	ldrb	r3, [r7, #7]
  405484:	f003 030f 	and.w	r3, r3, #15
  405488:	3b04      	subs	r3, #4
  40548a:	683a      	ldr	r2, [r7, #0]
  40548c:	b2d2      	uxtb	r2, r2
  40548e:	0152      	lsls	r2, r2, #5
  405490:	b2d2      	uxtb	r2, r2
  405492:	440b      	add	r3, r1
  405494:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  405496:	e009      	b.n	4054ac <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  405498:	4908      	ldr	r1, [pc, #32]	; (4054bc <NVIC_SetPriority+0x50>)
  40549a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40549e:	683a      	ldr	r2, [r7, #0]
  4054a0:	b2d2      	uxtb	r2, r2
  4054a2:	0152      	lsls	r2, r2, #5
  4054a4:	b2d2      	uxtb	r2, r2
  4054a6:	440b      	add	r3, r1
  4054a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4054ac:	bf00      	nop
  4054ae:	370c      	adds	r7, #12
  4054b0:	46bd      	mov	sp, r7
  4054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054b6:	4770      	bx	lr
  4054b8:	e000ed00 	.word	0xe000ed00
  4054bc:	e000e100 	.word	0xe000e100

004054c0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4054c0:	b580      	push	{r7, lr}
  4054c2:	b084      	sub	sp, #16
  4054c4:	af00      	add	r7, sp, #0
  4054c6:	6078      	str	r0, [r7, #4]
  4054c8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4054ca:	6878      	ldr	r0, [r7, #4]
  4054cc:	4b26      	ldr	r3, [pc, #152]	; (405568 <pio_handler_process+0xa8>)
  4054ce:	4798      	blx	r3
  4054d0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4054d2:	6878      	ldr	r0, [r7, #4]
  4054d4:	4b25      	ldr	r3, [pc, #148]	; (40556c <pio_handler_process+0xac>)
  4054d6:	4798      	blx	r3
  4054d8:	4602      	mov	r2, r0
  4054da:	68fb      	ldr	r3, [r7, #12]
  4054dc:	4013      	ands	r3, r2
  4054de:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4054e0:	68fb      	ldr	r3, [r7, #12]
  4054e2:	2b00      	cmp	r3, #0
  4054e4:	d03c      	beq.n	405560 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4054e6:	2300      	movs	r3, #0
  4054e8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4054ea:	e034      	b.n	405556 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4054ec:	4a20      	ldr	r2, [pc, #128]	; (405570 <pio_handler_process+0xb0>)
  4054ee:	68bb      	ldr	r3, [r7, #8]
  4054f0:	011b      	lsls	r3, r3, #4
  4054f2:	4413      	add	r3, r2
  4054f4:	681a      	ldr	r2, [r3, #0]
  4054f6:	683b      	ldr	r3, [r7, #0]
  4054f8:	429a      	cmp	r2, r3
  4054fa:	d126      	bne.n	40554a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4054fc:	4a1c      	ldr	r2, [pc, #112]	; (405570 <pio_handler_process+0xb0>)
  4054fe:	68bb      	ldr	r3, [r7, #8]
  405500:	011b      	lsls	r3, r3, #4
  405502:	4413      	add	r3, r2
  405504:	3304      	adds	r3, #4
  405506:	681a      	ldr	r2, [r3, #0]
  405508:	68fb      	ldr	r3, [r7, #12]
  40550a:	4013      	ands	r3, r2
  40550c:	2b00      	cmp	r3, #0
  40550e:	d01c      	beq.n	40554a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  405510:	4a17      	ldr	r2, [pc, #92]	; (405570 <pio_handler_process+0xb0>)
  405512:	68bb      	ldr	r3, [r7, #8]
  405514:	011b      	lsls	r3, r3, #4
  405516:	4413      	add	r3, r2
  405518:	330c      	adds	r3, #12
  40551a:	681b      	ldr	r3, [r3, #0]
  40551c:	4914      	ldr	r1, [pc, #80]	; (405570 <pio_handler_process+0xb0>)
  40551e:	68ba      	ldr	r2, [r7, #8]
  405520:	0112      	lsls	r2, r2, #4
  405522:	440a      	add	r2, r1
  405524:	6810      	ldr	r0, [r2, #0]
  405526:	4912      	ldr	r1, [pc, #72]	; (405570 <pio_handler_process+0xb0>)
  405528:	68ba      	ldr	r2, [r7, #8]
  40552a:	0112      	lsls	r2, r2, #4
  40552c:	440a      	add	r2, r1
  40552e:	3204      	adds	r2, #4
  405530:	6812      	ldr	r2, [r2, #0]
  405532:	4611      	mov	r1, r2
  405534:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  405536:	4a0e      	ldr	r2, [pc, #56]	; (405570 <pio_handler_process+0xb0>)
  405538:	68bb      	ldr	r3, [r7, #8]
  40553a:	011b      	lsls	r3, r3, #4
  40553c:	4413      	add	r3, r2
  40553e:	3304      	adds	r3, #4
  405540:	681b      	ldr	r3, [r3, #0]
  405542:	43db      	mvns	r3, r3
  405544:	68fa      	ldr	r2, [r7, #12]
  405546:	4013      	ands	r3, r2
  405548:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40554a:	68bb      	ldr	r3, [r7, #8]
  40554c:	3301      	adds	r3, #1
  40554e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  405550:	68bb      	ldr	r3, [r7, #8]
  405552:	2b06      	cmp	r3, #6
  405554:	d803      	bhi.n	40555e <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  405556:	68fb      	ldr	r3, [r7, #12]
  405558:	2b00      	cmp	r3, #0
  40555a:	d1c7      	bne.n	4054ec <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  40555c:	e000      	b.n	405560 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  40555e:	bf00      	nop
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  405560:	bf00      	nop
  405562:	3710      	adds	r7, #16
  405564:	46bd      	mov	sp, r7
  405566:	bd80      	pop	{r7, pc}
  405568:	004051c9 	.word	0x004051c9
  40556c:	004051e1 	.word	0x004051e1
  405570:	2040090c 	.word	0x2040090c

00405574 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  405574:	b580      	push	{r7, lr}
  405576:	b086      	sub	sp, #24
  405578:	af00      	add	r7, sp, #0
  40557a:	60f8      	str	r0, [r7, #12]
  40557c:	60b9      	str	r1, [r7, #8]
  40557e:	607a      	str	r2, [r7, #4]
  405580:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  405582:	4b21      	ldr	r3, [pc, #132]	; (405608 <pio_handler_set+0x94>)
  405584:	681b      	ldr	r3, [r3, #0]
  405586:	2b06      	cmp	r3, #6
  405588:	d901      	bls.n	40558e <pio_handler_set+0x1a>
		return 1;
  40558a:	2301      	movs	r3, #1
  40558c:	e038      	b.n	405600 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40558e:	2300      	movs	r3, #0
  405590:	75fb      	strb	r3, [r7, #23]
  405592:	e011      	b.n	4055b8 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  405594:	7dfb      	ldrb	r3, [r7, #23]
  405596:	011b      	lsls	r3, r3, #4
  405598:	4a1c      	ldr	r2, [pc, #112]	; (40560c <pio_handler_set+0x98>)
  40559a:	4413      	add	r3, r2
  40559c:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40559e:	693b      	ldr	r3, [r7, #16]
  4055a0:	681a      	ldr	r2, [r3, #0]
  4055a2:	68bb      	ldr	r3, [r7, #8]
  4055a4:	429a      	cmp	r2, r3
  4055a6:	d104      	bne.n	4055b2 <pio_handler_set+0x3e>
  4055a8:	693b      	ldr	r3, [r7, #16]
  4055aa:	685a      	ldr	r2, [r3, #4]
  4055ac:	687b      	ldr	r3, [r7, #4]
  4055ae:	429a      	cmp	r2, r3
  4055b0:	d008      	beq.n	4055c4 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4055b2:	7dfb      	ldrb	r3, [r7, #23]
  4055b4:	3301      	adds	r3, #1
  4055b6:	75fb      	strb	r3, [r7, #23]
  4055b8:	7dfa      	ldrb	r2, [r7, #23]
  4055ba:	4b13      	ldr	r3, [pc, #76]	; (405608 <pio_handler_set+0x94>)
  4055bc:	681b      	ldr	r3, [r3, #0]
  4055be:	429a      	cmp	r2, r3
  4055c0:	d9e8      	bls.n	405594 <pio_handler_set+0x20>
  4055c2:	e000      	b.n	4055c6 <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  4055c4:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4055c6:	693b      	ldr	r3, [r7, #16]
  4055c8:	68ba      	ldr	r2, [r7, #8]
  4055ca:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4055cc:	693b      	ldr	r3, [r7, #16]
  4055ce:	687a      	ldr	r2, [r7, #4]
  4055d0:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4055d2:	693b      	ldr	r3, [r7, #16]
  4055d4:	683a      	ldr	r2, [r7, #0]
  4055d6:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  4055d8:	693b      	ldr	r3, [r7, #16]
  4055da:	6a3a      	ldr	r2, [r7, #32]
  4055dc:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  4055de:	7dfa      	ldrb	r2, [r7, #23]
  4055e0:	4b09      	ldr	r3, [pc, #36]	; (405608 <pio_handler_set+0x94>)
  4055e2:	681b      	ldr	r3, [r3, #0]
  4055e4:	3301      	adds	r3, #1
  4055e6:	429a      	cmp	r2, r3
  4055e8:	d104      	bne.n	4055f4 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  4055ea:	4b07      	ldr	r3, [pc, #28]	; (405608 <pio_handler_set+0x94>)
  4055ec:	681b      	ldr	r3, [r3, #0]
  4055ee:	3301      	adds	r3, #1
  4055f0:	4a05      	ldr	r2, [pc, #20]	; (405608 <pio_handler_set+0x94>)
  4055f2:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4055f4:	683a      	ldr	r2, [r7, #0]
  4055f6:	6879      	ldr	r1, [r7, #4]
  4055f8:	68f8      	ldr	r0, [r7, #12]
  4055fa:	4b05      	ldr	r3, [pc, #20]	; (405610 <pio_handler_set+0x9c>)
  4055fc:	4798      	blx	r3

	return 0;
  4055fe:	2300      	movs	r3, #0
}
  405600:	4618      	mov	r0, r3
  405602:	3718      	adds	r7, #24
  405604:	46bd      	mov	sp, r7
  405606:	bd80      	pop	{r7, pc}
  405608:	2040097c 	.word	0x2040097c
  40560c:	2040090c 	.word	0x2040090c
  405610:	00405125 	.word	0x00405125

00405614 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  405614:	b580      	push	{r7, lr}
  405616:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  405618:	210a      	movs	r1, #10
  40561a:	4802      	ldr	r0, [pc, #8]	; (405624 <PIOA_Handler+0x10>)
  40561c:	4b02      	ldr	r3, [pc, #8]	; (405628 <PIOA_Handler+0x14>)
  40561e:	4798      	blx	r3
}
  405620:	bf00      	nop
  405622:	bd80      	pop	{r7, pc}
  405624:	400e0e00 	.word	0x400e0e00
  405628:	004054c1 	.word	0x004054c1

0040562c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40562c:	b580      	push	{r7, lr}
  40562e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  405630:	210b      	movs	r1, #11
  405632:	4802      	ldr	r0, [pc, #8]	; (40563c <PIOB_Handler+0x10>)
  405634:	4b02      	ldr	r3, [pc, #8]	; (405640 <PIOB_Handler+0x14>)
  405636:	4798      	blx	r3
}
  405638:	bf00      	nop
  40563a:	bd80      	pop	{r7, pc}
  40563c:	400e1000 	.word	0x400e1000
  405640:	004054c1 	.word	0x004054c1

00405644 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  405644:	b580      	push	{r7, lr}
  405646:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  405648:	210c      	movs	r1, #12
  40564a:	4802      	ldr	r0, [pc, #8]	; (405654 <PIOC_Handler+0x10>)
  40564c:	4b02      	ldr	r3, [pc, #8]	; (405658 <PIOC_Handler+0x14>)
  40564e:	4798      	blx	r3
}
  405650:	bf00      	nop
  405652:	bd80      	pop	{r7, pc}
  405654:	400e1200 	.word	0x400e1200
  405658:	004054c1 	.word	0x004054c1

0040565c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40565c:	b580      	push	{r7, lr}
  40565e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  405660:	2110      	movs	r1, #16
  405662:	4802      	ldr	r0, [pc, #8]	; (40566c <PIOD_Handler+0x10>)
  405664:	4b02      	ldr	r3, [pc, #8]	; (405670 <PIOD_Handler+0x14>)
  405666:	4798      	blx	r3
}
  405668:	bf00      	nop
  40566a:	bd80      	pop	{r7, pc}
  40566c:	400e1400 	.word	0x400e1400
  405670:	004054c1 	.word	0x004054c1

00405674 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  405674:	b580      	push	{r7, lr}
  405676:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  405678:	2111      	movs	r1, #17
  40567a:	4802      	ldr	r0, [pc, #8]	; (405684 <PIOE_Handler+0x10>)
  40567c:	4b02      	ldr	r3, [pc, #8]	; (405688 <PIOE_Handler+0x14>)
  40567e:	4798      	blx	r3
}
  405680:	bf00      	nop
  405682:	bd80      	pop	{r7, pc}
  405684:	400e1600 	.word	0x400e1600
  405688:	004054c1 	.word	0x004054c1

0040568c <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  40568c:	b580      	push	{r7, lr}
  40568e:	b086      	sub	sp, #24
  405690:	af00      	add	r7, sp, #0
  405692:	60f8      	str	r0, [r7, #12]
  405694:	460b      	mov	r3, r1
  405696:	607a      	str	r2, [r7, #4]
  405698:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  40569a:	2300      	movs	r3, #0
  40569c:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  40569e:	68f8      	ldr	r0, [r7, #12]
  4056a0:	4b13      	ldr	r3, [pc, #76]	; (4056f0 <pio_handler_set_priority+0x64>)
  4056a2:	4798      	blx	r3
  4056a4:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4056a6:	f04f 31ff 	mov.w	r1, #4294967295
  4056aa:	68f8      	ldr	r0, [r7, #12]
  4056ac:	4b11      	ldr	r3, [pc, #68]	; (4056f4 <pio_handler_set_priority+0x68>)
  4056ae:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4056b0:	68f8      	ldr	r0, [r7, #12]
  4056b2:	4b11      	ldr	r3, [pc, #68]	; (4056f8 <pio_handler_set_priority+0x6c>)
  4056b4:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  4056b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4056ba:	4618      	mov	r0, r3
  4056bc:	4b0f      	ldr	r3, [pc, #60]	; (4056fc <pio_handler_set_priority+0x70>)
  4056be:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  4056c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4056c4:	4618      	mov	r0, r3
  4056c6:	4b0e      	ldr	r3, [pc, #56]	; (405700 <pio_handler_set_priority+0x74>)
  4056c8:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  4056ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4056ce:	6879      	ldr	r1, [r7, #4]
  4056d0:	4618      	mov	r0, r3
  4056d2:	4b0c      	ldr	r3, [pc, #48]	; (405704 <pio_handler_set_priority+0x78>)
  4056d4:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  4056d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4056da:	4618      	mov	r0, r3
  4056dc:	4b0a      	ldr	r3, [pc, #40]	; (405708 <pio_handler_set_priority+0x7c>)
  4056de:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  4056e0:	6979      	ldr	r1, [r7, #20]
  4056e2:	68f8      	ldr	r0, [r7, #12]
  4056e4:	4b09      	ldr	r3, [pc, #36]	; (40570c <pio_handler_set_priority+0x80>)
  4056e6:	4798      	blx	r3
}
  4056e8:	bf00      	nop
  4056ea:	3718      	adds	r7, #24
  4056ec:	46bd      	mov	sp, r7
  4056ee:	bd80      	pop	{r7, pc}
  4056f0:	004051e1 	.word	0x004051e1
  4056f4:	004051ad 	.word	0x004051ad
  4056f8:	004051c9 	.word	0x004051c9
  4056fc:	00405405 	.word	0x00405405
  405700:	00405439 	.word	0x00405439
  405704:	0040546d 	.word	0x0040546d
  405708:	004053d1 	.word	0x004053d1
  40570c:	00405191 	.word	0x00405191

00405710 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  405710:	b480      	push	{r7}
  405712:	b083      	sub	sp, #12
  405714:	af00      	add	r7, sp, #0
  405716:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  405718:	687b      	ldr	r3, [r7, #4]
  40571a:	3b01      	subs	r3, #1
  40571c:	2b03      	cmp	r3, #3
  40571e:	d81a      	bhi.n	405756 <pmc_mck_set_division+0x46>
  405720:	a201      	add	r2, pc, #4	; (adr r2, 405728 <pmc_mck_set_division+0x18>)
  405722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405726:	bf00      	nop
  405728:	00405739 	.word	0x00405739
  40572c:	0040573f 	.word	0x0040573f
  405730:	00405747 	.word	0x00405747
  405734:	0040574f 	.word	0x0040574f
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  405738:	2300      	movs	r3, #0
  40573a:	607b      	str	r3, [r7, #4]
			break;
  40573c:	e00e      	b.n	40575c <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  40573e:	f44f 7380 	mov.w	r3, #256	; 0x100
  405742:	607b      	str	r3, [r7, #4]
			break;
  405744:	e00a      	b.n	40575c <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  405746:	f44f 7340 	mov.w	r3, #768	; 0x300
  40574a:	607b      	str	r3, [r7, #4]
			break;
  40574c:	e006      	b.n	40575c <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40574e:	f44f 7300 	mov.w	r3, #512	; 0x200
  405752:	607b      	str	r3, [r7, #4]
			break;
  405754:	e002      	b.n	40575c <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  405756:	2300      	movs	r3, #0
  405758:	607b      	str	r3, [r7, #4]
			break;
  40575a:	bf00      	nop
	}
	PMC->PMC_MCKR =
  40575c:	490a      	ldr	r1, [pc, #40]	; (405788 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40575e:	4b0a      	ldr	r3, [pc, #40]	; (405788 <pmc_mck_set_division+0x78>)
  405760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405762:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  405766:	687b      	ldr	r3, [r7, #4]
  405768:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  40576a:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40576c:	bf00      	nop
  40576e:	4b06      	ldr	r3, [pc, #24]	; (405788 <pmc_mck_set_division+0x78>)
  405770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405772:	f003 0308 	and.w	r3, r3, #8
  405776:	2b00      	cmp	r3, #0
  405778:	d0f9      	beq.n	40576e <pmc_mck_set_division+0x5e>
}
  40577a:	bf00      	nop
  40577c:	370c      	adds	r7, #12
  40577e:	46bd      	mov	sp, r7
  405780:	f85d 7b04 	ldr.w	r7, [sp], #4
  405784:	4770      	bx	lr
  405786:	bf00      	nop
  405788:	400e0600 	.word	0x400e0600

0040578c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40578c:	b480      	push	{r7}
  40578e:	b085      	sub	sp, #20
  405790:	af00      	add	r7, sp, #0
  405792:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  405794:	491d      	ldr	r1, [pc, #116]	; (40580c <pmc_switch_mck_to_pllack+0x80>)
  405796:	4b1d      	ldr	r3, [pc, #116]	; (40580c <pmc_switch_mck_to_pllack+0x80>)
  405798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40579a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40579e:	687b      	ldr	r3, [r7, #4]
  4057a0:	4313      	orrs	r3, r2
  4057a2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4057a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4057a8:	60fb      	str	r3, [r7, #12]
  4057aa:	e007      	b.n	4057bc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4057ac:	68fb      	ldr	r3, [r7, #12]
  4057ae:	2b00      	cmp	r3, #0
  4057b0:	d101      	bne.n	4057b6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4057b2:	2301      	movs	r3, #1
  4057b4:	e023      	b.n	4057fe <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4057b6:	68fb      	ldr	r3, [r7, #12]
  4057b8:	3b01      	subs	r3, #1
  4057ba:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4057bc:	4b13      	ldr	r3, [pc, #76]	; (40580c <pmc_switch_mck_to_pllack+0x80>)
  4057be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4057c0:	f003 0308 	and.w	r3, r3, #8
  4057c4:	2b00      	cmp	r3, #0
  4057c6:	d0f1      	beq.n	4057ac <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4057c8:	4a10      	ldr	r2, [pc, #64]	; (40580c <pmc_switch_mck_to_pllack+0x80>)
  4057ca:	4b10      	ldr	r3, [pc, #64]	; (40580c <pmc_switch_mck_to_pllack+0x80>)
  4057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4057ce:	f023 0303 	bic.w	r3, r3, #3
  4057d2:	f043 0302 	orr.w	r3, r3, #2
  4057d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4057d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4057dc:	60fb      	str	r3, [r7, #12]
  4057de:	e007      	b.n	4057f0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4057e0:	68fb      	ldr	r3, [r7, #12]
  4057e2:	2b00      	cmp	r3, #0
  4057e4:	d101      	bne.n	4057ea <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4057e6:	2301      	movs	r3, #1
  4057e8:	e009      	b.n	4057fe <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4057ea:	68fb      	ldr	r3, [r7, #12]
  4057ec:	3b01      	subs	r3, #1
  4057ee:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4057f0:	4b06      	ldr	r3, [pc, #24]	; (40580c <pmc_switch_mck_to_pllack+0x80>)
  4057f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4057f4:	f003 0308 	and.w	r3, r3, #8
  4057f8:	2b00      	cmp	r3, #0
  4057fa:	d0f1      	beq.n	4057e0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4057fc:	2300      	movs	r3, #0
}
  4057fe:	4618      	mov	r0, r3
  405800:	3714      	adds	r7, #20
  405802:	46bd      	mov	sp, r7
  405804:	f85d 7b04 	ldr.w	r7, [sp], #4
  405808:	4770      	bx	lr
  40580a:	bf00      	nop
  40580c:	400e0600 	.word	0x400e0600

00405810 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  405810:	b480      	push	{r7}
  405812:	b083      	sub	sp, #12
  405814:	af00      	add	r7, sp, #0
  405816:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  405818:	687b      	ldr	r3, [r7, #4]
  40581a:	2b01      	cmp	r3, #1
  40581c:	d105      	bne.n	40582a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40581e:	4907      	ldr	r1, [pc, #28]	; (40583c <pmc_switch_sclk_to_32kxtal+0x2c>)
  405820:	4b06      	ldr	r3, [pc, #24]	; (40583c <pmc_switch_sclk_to_32kxtal+0x2c>)
  405822:	689a      	ldr	r2, [r3, #8]
  405824:	4b06      	ldr	r3, [pc, #24]	; (405840 <pmc_switch_sclk_to_32kxtal+0x30>)
  405826:	4313      	orrs	r3, r2
  405828:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40582a:	4b04      	ldr	r3, [pc, #16]	; (40583c <pmc_switch_sclk_to_32kxtal+0x2c>)
  40582c:	4a05      	ldr	r2, [pc, #20]	; (405844 <pmc_switch_sclk_to_32kxtal+0x34>)
  40582e:	601a      	str	r2, [r3, #0]
}
  405830:	bf00      	nop
  405832:	370c      	adds	r7, #12
  405834:	46bd      	mov	sp, r7
  405836:	f85d 7b04 	ldr.w	r7, [sp], #4
  40583a:	4770      	bx	lr
  40583c:	400e1810 	.word	0x400e1810
  405840:	a5100000 	.word	0xa5100000
  405844:	a5000008 	.word	0xa5000008

00405848 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  405848:	b480      	push	{r7}
  40584a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40584c:	4b09      	ldr	r3, [pc, #36]	; (405874 <pmc_osc_is_ready_32kxtal+0x2c>)
  40584e:	695b      	ldr	r3, [r3, #20]
  405850:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  405854:	2b00      	cmp	r3, #0
  405856:	d007      	beq.n	405868 <pmc_osc_is_ready_32kxtal+0x20>
  405858:	4b07      	ldr	r3, [pc, #28]	; (405878 <pmc_osc_is_ready_32kxtal+0x30>)
  40585a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405860:	2b00      	cmp	r3, #0
  405862:	d001      	beq.n	405868 <pmc_osc_is_ready_32kxtal+0x20>
  405864:	2301      	movs	r3, #1
  405866:	e000      	b.n	40586a <pmc_osc_is_ready_32kxtal+0x22>
  405868:	2300      	movs	r3, #0
}
  40586a:	4618      	mov	r0, r3
  40586c:	46bd      	mov	sp, r7
  40586e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405872:	4770      	bx	lr
  405874:	400e1810 	.word	0x400e1810
  405878:	400e0600 	.word	0x400e0600

0040587c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40587c:	b480      	push	{r7}
  40587e:	b083      	sub	sp, #12
  405880:	af00      	add	r7, sp, #0
  405882:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  405884:	4915      	ldr	r1, [pc, #84]	; (4058dc <pmc_switch_mainck_to_fastrc+0x60>)
  405886:	4b15      	ldr	r3, [pc, #84]	; (4058dc <pmc_switch_mainck_to_fastrc+0x60>)
  405888:	6a1a      	ldr	r2, [r3, #32]
  40588a:	4b15      	ldr	r3, [pc, #84]	; (4058e0 <pmc_switch_mainck_to_fastrc+0x64>)
  40588c:	4313      	orrs	r3, r2
  40588e:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  405890:	bf00      	nop
  405892:	4b12      	ldr	r3, [pc, #72]	; (4058dc <pmc_switch_mainck_to_fastrc+0x60>)
  405894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40589a:	2b00      	cmp	r3, #0
  40589c:	d0f9      	beq.n	405892 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40589e:	490f      	ldr	r1, [pc, #60]	; (4058dc <pmc_switch_mainck_to_fastrc+0x60>)
  4058a0:	4b0e      	ldr	r3, [pc, #56]	; (4058dc <pmc_switch_mainck_to_fastrc+0x60>)
  4058a2:	6a1a      	ldr	r2, [r3, #32]
  4058a4:	4b0f      	ldr	r3, [pc, #60]	; (4058e4 <pmc_switch_mainck_to_fastrc+0x68>)
  4058a6:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4058a8:	687a      	ldr	r2, [r7, #4]
  4058aa:	4313      	orrs	r3, r2
  4058ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4058b0:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4058b2:	bf00      	nop
  4058b4:	4b09      	ldr	r3, [pc, #36]	; (4058dc <pmc_switch_mainck_to_fastrc+0x60>)
  4058b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4058b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4058bc:	2b00      	cmp	r3, #0
  4058be:	d0f9      	beq.n	4058b4 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4058c0:	4906      	ldr	r1, [pc, #24]	; (4058dc <pmc_switch_mainck_to_fastrc+0x60>)
  4058c2:	4b06      	ldr	r3, [pc, #24]	; (4058dc <pmc_switch_mainck_to_fastrc+0x60>)
  4058c4:	6a1a      	ldr	r2, [r3, #32]
  4058c6:	4b08      	ldr	r3, [pc, #32]	; (4058e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4058c8:	4013      	ands	r3, r2
  4058ca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4058ce:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4058d0:	bf00      	nop
  4058d2:	370c      	adds	r7, #12
  4058d4:	46bd      	mov	sp, r7
  4058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4058da:	4770      	bx	lr
  4058dc:	400e0600 	.word	0x400e0600
  4058e0:	00370008 	.word	0x00370008
  4058e4:	ffc8ff8f 	.word	0xffc8ff8f
  4058e8:	fec8ffff 	.word	0xfec8ffff

004058ec <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4058ec:	b480      	push	{r7}
  4058ee:	b083      	sub	sp, #12
  4058f0:	af00      	add	r7, sp, #0
  4058f2:	6078      	str	r0, [r7, #4]
  4058f4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4058f6:	687b      	ldr	r3, [r7, #4]
  4058f8:	2b00      	cmp	r3, #0
  4058fa:	d008      	beq.n	40590e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4058fc:	4913      	ldr	r1, [pc, #76]	; (40594c <pmc_switch_mainck_to_xtal+0x60>)
  4058fe:	4b13      	ldr	r3, [pc, #76]	; (40594c <pmc_switch_mainck_to_xtal+0x60>)
  405900:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  405902:	4a13      	ldr	r2, [pc, #76]	; (405950 <pmc_switch_mainck_to_xtal+0x64>)
  405904:	401a      	ands	r2, r3
  405906:	4b13      	ldr	r3, [pc, #76]	; (405954 <pmc_switch_mainck_to_xtal+0x68>)
  405908:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40590a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40590c:	e018      	b.n	405940 <pmc_switch_mainck_to_xtal+0x54>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40590e:	490f      	ldr	r1, [pc, #60]	; (40594c <pmc_switch_mainck_to_xtal+0x60>)
  405910:	4b0e      	ldr	r3, [pc, #56]	; (40594c <pmc_switch_mainck_to_xtal+0x60>)
  405912:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  405914:	4b10      	ldr	r3, [pc, #64]	; (405958 <pmc_switch_mainck_to_xtal+0x6c>)
  405916:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  405918:	683a      	ldr	r2, [r7, #0]
  40591a:	0212      	lsls	r2, r2, #8
  40591c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40591e:	431a      	orrs	r2, r3
  405920:	4b0e      	ldr	r3, [pc, #56]	; (40595c <pmc_switch_mainck_to_xtal+0x70>)
  405922:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405924:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  405926:	bf00      	nop
  405928:	4b08      	ldr	r3, [pc, #32]	; (40594c <pmc_switch_mainck_to_xtal+0x60>)
  40592a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40592c:	f003 0301 	and.w	r3, r3, #1
  405930:	2b00      	cmp	r3, #0
  405932:	d0f9      	beq.n	405928 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  405934:	4905      	ldr	r1, [pc, #20]	; (40594c <pmc_switch_mainck_to_xtal+0x60>)
  405936:	4b05      	ldr	r3, [pc, #20]	; (40594c <pmc_switch_mainck_to_xtal+0x60>)
  405938:	6a1a      	ldr	r2, [r3, #32]
  40593a:	4b09      	ldr	r3, [pc, #36]	; (405960 <pmc_switch_mainck_to_xtal+0x74>)
  40593c:	4313      	orrs	r3, r2
  40593e:	620b      	str	r3, [r1, #32]
	}
}
  405940:	bf00      	nop
  405942:	370c      	adds	r7, #12
  405944:	46bd      	mov	sp, r7
  405946:	f85d 7b04 	ldr.w	r7, [sp], #4
  40594a:	4770      	bx	lr
  40594c:	400e0600 	.word	0x400e0600
  405950:	fec8fffc 	.word	0xfec8fffc
  405954:	01370002 	.word	0x01370002
  405958:	ffc8fffc 	.word	0xffc8fffc
  40595c:	00370001 	.word	0x00370001
  405960:	01370000 	.word	0x01370000

00405964 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  405964:	b480      	push	{r7}
  405966:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  405968:	4b04      	ldr	r3, [pc, #16]	; (40597c <pmc_osc_is_ready_mainck+0x18>)
  40596a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40596c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  405970:	4618      	mov	r0, r3
  405972:	46bd      	mov	sp, r7
  405974:	f85d 7b04 	ldr.w	r7, [sp], #4
  405978:	4770      	bx	lr
  40597a:	bf00      	nop
  40597c:	400e0600 	.word	0x400e0600

00405980 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  405980:	b480      	push	{r7}
  405982:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  405984:	4b04      	ldr	r3, [pc, #16]	; (405998 <pmc_disable_pllack+0x18>)
  405986:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40598a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40598c:	bf00      	nop
  40598e:	46bd      	mov	sp, r7
  405990:	f85d 7b04 	ldr.w	r7, [sp], #4
  405994:	4770      	bx	lr
  405996:	bf00      	nop
  405998:	400e0600 	.word	0x400e0600

0040599c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40599c:	b480      	push	{r7}
  40599e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4059a0:	4b04      	ldr	r3, [pc, #16]	; (4059b4 <pmc_is_locked_pllack+0x18>)
  4059a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4059a4:	f003 0302 	and.w	r3, r3, #2
}
  4059a8:	4618      	mov	r0, r3
  4059aa:	46bd      	mov	sp, r7
  4059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059b0:	4770      	bx	lr
  4059b2:	bf00      	nop
  4059b4:	400e0600 	.word	0x400e0600

004059b8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  4059b8:	b480      	push	{r7}
  4059ba:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4059bc:	4b04      	ldr	r3, [pc, #16]	; (4059d0 <pmc_is_locked_upll+0x18>)
  4059be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4059c4:	4618      	mov	r0, r3
  4059c6:	46bd      	mov	sp, r7
  4059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059cc:	4770      	bx	lr
  4059ce:	bf00      	nop
  4059d0:	400e0600 	.word	0x400e0600

004059d4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4059d4:	b480      	push	{r7}
  4059d6:	b083      	sub	sp, #12
  4059d8:	af00      	add	r7, sp, #0
  4059da:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4059dc:	687b      	ldr	r3, [r7, #4]
  4059de:	2b3f      	cmp	r3, #63	; 0x3f
  4059e0:	d901      	bls.n	4059e6 <pmc_enable_periph_clk+0x12>
		return 1;
  4059e2:	2301      	movs	r3, #1
  4059e4:	e02f      	b.n	405a46 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4059e6:	687b      	ldr	r3, [r7, #4]
  4059e8:	2b1f      	cmp	r3, #31
  4059ea:	d813      	bhi.n	405a14 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4059ec:	4b19      	ldr	r3, [pc, #100]	; (405a54 <pmc_enable_periph_clk+0x80>)
  4059ee:	699a      	ldr	r2, [r3, #24]
  4059f0:	2101      	movs	r1, #1
  4059f2:	687b      	ldr	r3, [r7, #4]
  4059f4:	fa01 f303 	lsl.w	r3, r1, r3
  4059f8:	401a      	ands	r2, r3
  4059fa:	2101      	movs	r1, #1
  4059fc:	687b      	ldr	r3, [r7, #4]
  4059fe:	fa01 f303 	lsl.w	r3, r1, r3
  405a02:	429a      	cmp	r2, r3
  405a04:	d01e      	beq.n	405a44 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  405a06:	4a13      	ldr	r2, [pc, #76]	; (405a54 <pmc_enable_periph_clk+0x80>)
  405a08:	2101      	movs	r1, #1
  405a0a:	687b      	ldr	r3, [r7, #4]
  405a0c:	fa01 f303 	lsl.w	r3, r1, r3
  405a10:	6113      	str	r3, [r2, #16]
  405a12:	e017      	b.n	405a44 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  405a14:	687b      	ldr	r3, [r7, #4]
  405a16:	3b20      	subs	r3, #32
  405a18:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  405a1a:	4b0e      	ldr	r3, [pc, #56]	; (405a54 <pmc_enable_periph_clk+0x80>)
  405a1c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  405a20:	2101      	movs	r1, #1
  405a22:	687b      	ldr	r3, [r7, #4]
  405a24:	fa01 f303 	lsl.w	r3, r1, r3
  405a28:	401a      	ands	r2, r3
  405a2a:	2101      	movs	r1, #1
  405a2c:	687b      	ldr	r3, [r7, #4]
  405a2e:	fa01 f303 	lsl.w	r3, r1, r3
  405a32:	429a      	cmp	r2, r3
  405a34:	d006      	beq.n	405a44 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  405a36:	4a07      	ldr	r2, [pc, #28]	; (405a54 <pmc_enable_periph_clk+0x80>)
  405a38:	2101      	movs	r1, #1
  405a3a:	687b      	ldr	r3, [r7, #4]
  405a3c:	fa01 f303 	lsl.w	r3, r1, r3
  405a40:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  405a44:	2300      	movs	r3, #0
}
  405a46:	4618      	mov	r0, r3
  405a48:	370c      	adds	r7, #12
  405a4a:	46bd      	mov	sp, r7
  405a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a50:	4770      	bx	lr
  405a52:	bf00      	nop
  405a54:	400e0600 	.word	0x400e0600

00405a58 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
  405a58:	b480      	push	{r7}
  405a5a:	b083      	sub	sp, #12
  405a5c:	af00      	add	r7, sp, #0
  405a5e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  405a60:	687b      	ldr	r3, [r7, #4]
  405a62:	685b      	ldr	r3, [r3, #4]
  405a64:	f003 0302 	and.w	r3, r3, #2
  405a68:	2b00      	cmp	r3, #0
  405a6a:	d001      	beq.n	405a70 <spi_get_peripheral_select_mode+0x18>
		return 1;
  405a6c:	2301      	movs	r3, #1
  405a6e:	e000      	b.n	405a72 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
  405a70:	2300      	movs	r3, #0
	}
}
  405a72:	4618      	mov	r0, r3
  405a74:	370c      	adds	r7, #12
  405a76:	46bd      	mov	sp, r7
  405a78:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a7c:	4770      	bx	lr
  405a7e:	bf00      	nop

00405a80 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  405a80:	b580      	push	{r7, lr}
  405a82:	b082      	sub	sp, #8
  405a84:	af00      	add	r7, sp, #0
  405a86:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  405a88:	6878      	ldr	r0, [r7, #4]
  405a8a:	4b03      	ldr	r3, [pc, #12]	; (405a98 <sysclk_enable_peripheral_clock+0x18>)
  405a8c:	4798      	blx	r3
}
  405a8e:	bf00      	nop
  405a90:	3708      	adds	r7, #8
  405a92:	46bd      	mov	sp, r7
  405a94:	bd80      	pop	{r7, pc}
  405a96:	bf00      	nop
  405a98:	004059d5 	.word	0x004059d5

00405a9c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  405a9c:	b580      	push	{r7, lr}
  405a9e:	b082      	sub	sp, #8
  405aa0:	af00      	add	r7, sp, #0
  405aa2:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  405aa4:	687b      	ldr	r3, [r7, #4]
  405aa6:	4a09      	ldr	r2, [pc, #36]	; (405acc <spi_enable_clock+0x30>)
  405aa8:	4293      	cmp	r3, r2
  405aaa:	d103      	bne.n	405ab4 <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  405aac:	2015      	movs	r0, #21
  405aae:	4b08      	ldr	r3, [pc, #32]	; (405ad0 <spi_enable_clock+0x34>)
  405ab0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  405ab2:	e006      	b.n	405ac2 <spi_enable_clock+0x26>
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  405ab4:	687b      	ldr	r3, [r7, #4]
  405ab6:	4a07      	ldr	r2, [pc, #28]	; (405ad4 <spi_enable_clock+0x38>)
  405ab8:	4293      	cmp	r3, r2
  405aba:	d102      	bne.n	405ac2 <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  405abc:	202a      	movs	r0, #42	; 0x2a
  405abe:	4b04      	ldr	r3, [pc, #16]	; (405ad0 <spi_enable_clock+0x34>)
  405ac0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  405ac2:	bf00      	nop
  405ac4:	3708      	adds	r7, #8
  405ac6:	46bd      	mov	sp, r7
  405ac8:	bd80      	pop	{r7, pc}
  405aca:	bf00      	nop
  405acc:	40008000 	.word	0x40008000
  405ad0:	00405a81 	.word	0x00405a81
  405ad4:	40058000 	.word	0x40058000

00405ad8 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  405ad8:	b480      	push	{r7}
  405ada:	b083      	sub	sp, #12
  405adc:	af00      	add	r7, sp, #0
  405ade:	6078      	str	r0, [r7, #4]
  405ae0:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  405ae2:	687b      	ldr	r3, [r7, #4]
  405ae4:	685b      	ldr	r3, [r3, #4]
  405ae6:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  405aea:	687b      	ldr	r3, [r7, #4]
  405aec:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  405aee:	687b      	ldr	r3, [r7, #4]
  405af0:	685a      	ldr	r2, [r3, #4]
  405af2:	683b      	ldr	r3, [r7, #0]
  405af4:	041b      	lsls	r3, r3, #16
  405af6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  405afa:	431a      	orrs	r2, r3
  405afc:	687b      	ldr	r3, [r7, #4]
  405afe:	605a      	str	r2, [r3, #4]
}
  405b00:	bf00      	nop
  405b02:	370c      	adds	r7, #12
  405b04:	46bd      	mov	sp, r7
  405b06:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b0a:	4770      	bx	lr

00405b0c <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  405b0c:	b580      	push	{r7, lr}
  405b0e:	b086      	sub	sp, #24
  405b10:	af00      	add	r7, sp, #0
  405b12:	60f8      	str	r0, [r7, #12]
  405b14:	60b9      	str	r1, [r7, #8]
  405b16:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
  405b18:	f643 2398 	movw	r3, #15000	; 0x3a98
  405b1c:	617b      	str	r3, [r7, #20]
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  405b1e:	e006      	b.n	405b2e <spi_read+0x22>
		if (!timeout--) {
  405b20:	697b      	ldr	r3, [r7, #20]
  405b22:	1e5a      	subs	r2, r3, #1
  405b24:	617a      	str	r2, [r7, #20]
  405b26:	2b00      	cmp	r3, #0
  405b28:	d101      	bne.n	405b2e <spi_read+0x22>
			return SPI_ERROR_TIMEOUT;
  405b2a:	2301      	movs	r3, #1
  405b2c:	e01e      	b.n	405b6c <spi_read+0x60>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  405b2e:	68fb      	ldr	r3, [r7, #12]
  405b30:	691b      	ldr	r3, [r3, #16]
  405b32:	f003 0301 	and.w	r3, r3, #1
  405b36:	2b00      	cmp	r3, #0
  405b38:	d0f2      	beq.n	405b20 <spi_read+0x14>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  405b3a:	68fb      	ldr	r3, [r7, #12]
  405b3c:	689b      	ldr	r3, [r3, #8]
  405b3e:	4a0d      	ldr	r2, [pc, #52]	; (405b74 <spi_read+0x68>)
  405b40:	6013      	str	r3, [r2, #0]
	if (spi_get_peripheral_select_mode(p_spi)) {
  405b42:	68f8      	ldr	r0, [r7, #12]
  405b44:	4b0c      	ldr	r3, [pc, #48]	; (405b78 <spi_read+0x6c>)
  405b46:	4798      	blx	r3
  405b48:	4603      	mov	r3, r0
  405b4a:	2b00      	cmp	r3, #0
  405b4c:	d008      	beq.n	405b60 <spi_read+0x54>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  405b4e:	4b09      	ldr	r3, [pc, #36]	; (405b74 <spi_read+0x68>)
  405b50:	681b      	ldr	r3, [r3, #0]
  405b52:	0c1b      	lsrs	r3, r3, #16
  405b54:	b2db      	uxtb	r3, r3
  405b56:	f003 030f 	and.w	r3, r3, #15
  405b5a:	b2da      	uxtb	r2, r3
  405b5c:	687b      	ldr	r3, [r7, #4]
  405b5e:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  405b60:	4b04      	ldr	r3, [pc, #16]	; (405b74 <spi_read+0x68>)
  405b62:	681b      	ldr	r3, [r3, #0]
  405b64:	b29a      	uxth	r2, r3
  405b66:	68bb      	ldr	r3, [r7, #8]
  405b68:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
  405b6a:	2300      	movs	r3, #0
}
  405b6c:	4618      	mov	r0, r3
  405b6e:	3718      	adds	r7, #24
  405b70:	46bd      	mov	sp, r7
  405b72:	bd80      	pop	{r7, pc}
  405b74:	20400980 	.word	0x20400980
  405b78:	00405a59 	.word	0x00405a59

00405b7c <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  405b7c:	b580      	push	{r7, lr}
  405b7e:	b084      	sub	sp, #16
  405b80:	af00      	add	r7, sp, #0
  405b82:	6078      	str	r0, [r7, #4]
  405b84:	4608      	mov	r0, r1
  405b86:	4611      	mov	r1, r2
  405b88:	461a      	mov	r2, r3
  405b8a:	4603      	mov	r3, r0
  405b8c:	807b      	strh	r3, [r7, #2]
  405b8e:	460b      	mov	r3, r1
  405b90:	707b      	strb	r3, [r7, #1]
  405b92:	4613      	mov	r3, r2
  405b94:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  405b96:	f643 2398 	movw	r3, #15000	; 0x3a98
  405b9a:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  405b9c:	e006      	b.n	405bac <spi_write+0x30>
		if (!timeout--) {
  405b9e:	68fb      	ldr	r3, [r7, #12]
  405ba0:	1e5a      	subs	r2, r3, #1
  405ba2:	60fa      	str	r2, [r7, #12]
  405ba4:	2b00      	cmp	r3, #0
  405ba6:	d101      	bne.n	405bac <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  405ba8:	2301      	movs	r3, #1
  405baa:	e020      	b.n	405bee <spi_write+0x72>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  405bac:	687b      	ldr	r3, [r7, #4]
  405bae:	691b      	ldr	r3, [r3, #16]
  405bb0:	f003 0302 	and.w	r3, r3, #2
  405bb4:	2b00      	cmp	r3, #0
  405bb6:	d0f2      	beq.n	405b9e <spi_write+0x22>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  405bb8:	6878      	ldr	r0, [r7, #4]
  405bba:	4b0f      	ldr	r3, [pc, #60]	; (405bf8 <spi_write+0x7c>)
  405bbc:	4798      	blx	r3
  405bbe:	4603      	mov	r3, r0
  405bc0:	2b00      	cmp	r3, #0
  405bc2:	d00e      	beq.n	405be2 <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  405bc4:	887a      	ldrh	r2, [r7, #2]
  405bc6:	787b      	ldrb	r3, [r7, #1]
  405bc8:	041b      	lsls	r3, r3, #16
  405bca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  405bce:	4313      	orrs	r3, r2
  405bd0:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  405bd2:	783b      	ldrb	r3, [r7, #0]
  405bd4:	2b00      	cmp	r3, #0
  405bd6:	d006      	beq.n	405be6 <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  405bd8:	68bb      	ldr	r3, [r7, #8]
  405bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  405bde:	60bb      	str	r3, [r7, #8]
  405be0:	e001      	b.n	405be6 <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  405be2:	887b      	ldrh	r3, [r7, #2]
  405be4:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  405be6:	687b      	ldr	r3, [r7, #4]
  405be8:	68ba      	ldr	r2, [r7, #8]
  405bea:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  405bec:	2300      	movs	r3, #0
}
  405bee:	4618      	mov	r0, r3
  405bf0:	3710      	adds	r7, #16
  405bf2:	46bd      	mov	sp, r7
  405bf4:	bd80      	pop	{r7, pc}
  405bf6:	bf00      	nop
  405bf8:	00405a59 	.word	0x00405a59

00405bfc <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  405bfc:	b480      	push	{r7}
  405bfe:	b085      	sub	sp, #20
  405c00:	af00      	add	r7, sp, #0
  405c02:	60f8      	str	r0, [r7, #12]
  405c04:	60b9      	str	r1, [r7, #8]
  405c06:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  405c08:	687b      	ldr	r3, [r7, #4]
  405c0a:	2b00      	cmp	r3, #0
  405c0c:	d00c      	beq.n	405c28 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  405c0e:	68fb      	ldr	r3, [r7, #12]
  405c10:	68ba      	ldr	r2, [r7, #8]
  405c12:	320c      	adds	r2, #12
  405c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405c18:	f043 0101 	orr.w	r1, r3, #1
  405c1c:	68fb      	ldr	r3, [r7, #12]
  405c1e:	68ba      	ldr	r2, [r7, #8]
  405c20:	320c      	adds	r2, #12
  405c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  405c26:	e00b      	b.n	405c40 <spi_set_clock_polarity+0x44>
		uint32_t ul_polarity)
{
	if (ul_polarity) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  405c28:	68fb      	ldr	r3, [r7, #12]
  405c2a:	68ba      	ldr	r2, [r7, #8]
  405c2c:	320c      	adds	r2, #12
  405c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405c32:	f023 0101 	bic.w	r1, r3, #1
  405c36:	68fb      	ldr	r3, [r7, #12]
  405c38:	68ba      	ldr	r2, [r7, #8]
  405c3a:	320c      	adds	r2, #12
  405c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
  405c40:	bf00      	nop
  405c42:	3714      	adds	r7, #20
  405c44:	46bd      	mov	sp, r7
  405c46:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c4a:	4770      	bx	lr

00405c4c <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  405c4c:	b480      	push	{r7}
  405c4e:	b085      	sub	sp, #20
  405c50:	af00      	add	r7, sp, #0
  405c52:	60f8      	str	r0, [r7, #12]
  405c54:	60b9      	str	r1, [r7, #8]
  405c56:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  405c58:	687b      	ldr	r3, [r7, #4]
  405c5a:	2b00      	cmp	r3, #0
  405c5c:	d00c      	beq.n	405c78 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  405c5e:	68fb      	ldr	r3, [r7, #12]
  405c60:	68ba      	ldr	r2, [r7, #8]
  405c62:	320c      	adds	r2, #12
  405c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405c68:	f043 0102 	orr.w	r1, r3, #2
  405c6c:	68fb      	ldr	r3, [r7, #12]
  405c6e:	68ba      	ldr	r2, [r7, #8]
  405c70:	320c      	adds	r2, #12
  405c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  405c76:	e00b      	b.n	405c90 <spi_set_clock_phase+0x44>
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  405c78:	68fb      	ldr	r3, [r7, #12]
  405c7a:	68ba      	ldr	r2, [r7, #8]
  405c7c:	320c      	adds	r2, #12
  405c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405c82:	f023 0102 	bic.w	r1, r3, #2
  405c86:	68fb      	ldr	r3, [r7, #12]
  405c88:	68ba      	ldr	r2, [r7, #8]
  405c8a:	320c      	adds	r2, #12
  405c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
  405c90:	bf00      	nop
  405c92:	3714      	adds	r7, #20
  405c94:	46bd      	mov	sp, r7
  405c96:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c9a:	4770      	bx	lr

00405c9c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  405c9c:	b480      	push	{r7}
  405c9e:	b085      	sub	sp, #20
  405ca0:	af00      	add	r7, sp, #0
  405ca2:	60f8      	str	r0, [r7, #12]
  405ca4:	60b9      	str	r1, [r7, #8]
  405ca6:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  405ca8:	68fb      	ldr	r3, [r7, #12]
  405caa:	68ba      	ldr	r2, [r7, #8]
  405cac:	320c      	adds	r2, #12
  405cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405cb2:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  405cb6:	68fb      	ldr	r3, [r7, #12]
  405cb8:	68ba      	ldr	r2, [r7, #8]
  405cba:	320c      	adds	r2, #12
  405cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  405cc0:	68fb      	ldr	r3, [r7, #12]
  405cc2:	68ba      	ldr	r2, [r7, #8]
  405cc4:	320c      	adds	r2, #12
  405cc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  405cca:	687b      	ldr	r3, [r7, #4]
  405ccc:	ea42 0103 	orr.w	r1, r2, r3
  405cd0:	68fb      	ldr	r3, [r7, #12]
  405cd2:	68ba      	ldr	r2, [r7, #8]
  405cd4:	320c      	adds	r2, #12
  405cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  405cda:	bf00      	nop
  405cdc:	3714      	adds	r7, #20
  405cde:	46bd      	mov	sp, r7
  405ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ce4:	4770      	bx	lr
  405ce6:	bf00      	nop

00405ce8 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  405ce8:	b480      	push	{r7}
  405cea:	b085      	sub	sp, #20
  405cec:	af00      	add	r7, sp, #0
  405cee:	6078      	str	r0, [r7, #4]
  405cf0:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  405cf2:	683a      	ldr	r2, [r7, #0]
  405cf4:	687b      	ldr	r3, [r7, #4]
  405cf6:	4413      	add	r3, r2
  405cf8:	1e5a      	subs	r2, r3, #1
  405cfa:	687b      	ldr	r3, [r7, #4]
  405cfc:	fbb2 f3f3 	udiv	r3, r2, r3
  405d00:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  405d02:	68fb      	ldr	r3, [r7, #12]
  405d04:	2b00      	cmp	r3, #0
  405d06:	dd02      	ble.n	405d0e <spi_calc_baudrate_div+0x26>
  405d08:	68fb      	ldr	r3, [r7, #12]
  405d0a:	2bff      	cmp	r3, #255	; 0xff
  405d0c:	dd02      	ble.n	405d14 <spi_calc_baudrate_div+0x2c>
		return -1;
  405d0e:	f04f 33ff 	mov.w	r3, #4294967295
  405d12:	e001      	b.n	405d18 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  405d14:	68fb      	ldr	r3, [r7, #12]
  405d16:	b21b      	sxth	r3, r3
}
  405d18:	4618      	mov	r0, r3
  405d1a:	3714      	adds	r7, #20
  405d1c:	46bd      	mov	sp, r7
  405d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d22:	4770      	bx	lr

00405d24 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  405d24:	b480      	push	{r7}
  405d26:	b085      	sub	sp, #20
  405d28:	af00      	add	r7, sp, #0
  405d2a:	60f8      	str	r0, [r7, #12]
  405d2c:	60b9      	str	r1, [r7, #8]
  405d2e:	4613      	mov	r3, r2
  405d30:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  405d32:	79fb      	ldrb	r3, [r7, #7]
  405d34:	2b00      	cmp	r3, #0
  405d36:	d102      	bne.n	405d3e <spi_set_baudrate_div+0x1a>
        return -1;
  405d38:	f04f 33ff 	mov.w	r3, #4294967295
  405d3c:	e01b      	b.n	405d76 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  405d3e:	68fb      	ldr	r3, [r7, #12]
  405d40:	68ba      	ldr	r2, [r7, #8]
  405d42:	320c      	adds	r2, #12
  405d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405d48:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  405d4c:	68fb      	ldr	r3, [r7, #12]
  405d4e:	68ba      	ldr	r2, [r7, #8]
  405d50:	320c      	adds	r2, #12
  405d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  405d56:	68fb      	ldr	r3, [r7, #12]
  405d58:	68ba      	ldr	r2, [r7, #8]
  405d5a:	320c      	adds	r2, #12
  405d5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  405d60:	79fb      	ldrb	r3, [r7, #7]
  405d62:	021b      	lsls	r3, r3, #8
  405d64:	b29b      	uxth	r3, r3
  405d66:	ea42 0103 	orr.w	r1, r2, r3
  405d6a:	68fb      	ldr	r3, [r7, #12]
  405d6c:	68ba      	ldr	r2, [r7, #8]
  405d6e:	320c      	adds	r2, #12
  405d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  405d74:	2300      	movs	r3, #0
}
  405d76:	4618      	mov	r0, r3
  405d78:	3714      	adds	r7, #20
  405d7a:	46bd      	mov	sp, r7
  405d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d80:	4770      	bx	lr
  405d82:	bf00      	nop

00405d84 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  405d84:	b480      	push	{r7}
  405d86:	b085      	sub	sp, #20
  405d88:	af00      	add	r7, sp, #0
  405d8a:	60f8      	str	r0, [r7, #12]
  405d8c:	60b9      	str	r1, [r7, #8]
  405d8e:	4611      	mov	r1, r2
  405d90:	461a      	mov	r2, r3
  405d92:	460b      	mov	r3, r1
  405d94:	71fb      	strb	r3, [r7, #7]
  405d96:	4613      	mov	r3, r2
  405d98:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  405d9a:	68fb      	ldr	r3, [r7, #12]
  405d9c:	68ba      	ldr	r2, [r7, #8]
  405d9e:	320c      	adds	r2, #12
  405da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405da4:	b299      	uxth	r1, r3
  405da6:	68fb      	ldr	r3, [r7, #12]
  405da8:	68ba      	ldr	r2, [r7, #8]
  405daa:	320c      	adds	r2, #12
  405dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  405db0:	68fb      	ldr	r3, [r7, #12]
  405db2:	68ba      	ldr	r2, [r7, #8]
  405db4:	320c      	adds	r2, #12
  405db6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  405dba:	79fb      	ldrb	r3, [r7, #7]
  405dbc:	041b      	lsls	r3, r3, #16
  405dbe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
  405dc2:	79b9      	ldrb	r1, [r7, #6]
  405dc4:	0609      	lsls	r1, r1, #24
  405dc6:	430b      	orrs	r3, r1
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  405dc8:	ea42 0103 	orr.w	r1, r2, r3
  405dcc:	68fb      	ldr	r3, [r7, #12]
  405dce:	68ba      	ldr	r2, [r7, #8]
  405dd0:	320c      	adds	r2, #12
  405dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  405dd6:	bf00      	nop
  405dd8:	3714      	adds	r7, #20
  405dda:	46bd      	mov	sp, r7
  405ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405de0:	4770      	bx	lr
  405de2:	bf00      	nop

00405de4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  405de4:	b480      	push	{r7}
  405de6:	b087      	sub	sp, #28
  405de8:	af00      	add	r7, sp, #0
  405dea:	60f8      	str	r0, [r7, #12]
  405dec:	60b9      	str	r1, [r7, #8]
  405dee:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  405df0:	68fa      	ldr	r2, [r7, #12]
  405df2:	68bb      	ldr	r3, [r7, #8]
  405df4:	019b      	lsls	r3, r3, #6
  405df6:	4413      	add	r3, r2
  405df8:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  405dfa:	697b      	ldr	r3, [r7, #20]
  405dfc:	2202      	movs	r2, #2
  405dfe:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  405e00:	697b      	ldr	r3, [r7, #20]
  405e02:	f04f 32ff 	mov.w	r2, #4294967295
  405e06:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  405e08:	697b      	ldr	r3, [r7, #20]
  405e0a:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  405e0c:	697b      	ldr	r3, [r7, #20]
  405e0e:	687a      	ldr	r2, [r7, #4]
  405e10:	605a      	str	r2, [r3, #4]
}
  405e12:	bf00      	nop
  405e14:	371c      	adds	r7, #28
  405e16:	46bd      	mov	sp, r7
  405e18:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e1c:	4770      	bx	lr
  405e1e:	bf00      	nop

00405e20 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  405e20:	b480      	push	{r7}
  405e22:	b083      	sub	sp, #12
  405e24:	af00      	add	r7, sp, #0
  405e26:	6078      	str	r0, [r7, #4]
  405e28:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  405e2a:	687a      	ldr	r2, [r7, #4]
  405e2c:	683b      	ldr	r3, [r7, #0]
  405e2e:	019b      	lsls	r3, r3, #6
  405e30:	4413      	add	r3, r2
  405e32:	2205      	movs	r2, #5
  405e34:	601a      	str	r2, [r3, #0]
}
  405e36:	bf00      	nop
  405e38:	370c      	adds	r7, #12
  405e3a:	46bd      	mov	sp, r7
  405e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e40:	4770      	bx	lr
  405e42:	bf00      	nop

00405e44 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  405e44:	b480      	push	{r7}
  405e46:	b085      	sub	sp, #20
  405e48:	af00      	add	r7, sp, #0
  405e4a:	60f8      	str	r0, [r7, #12]
  405e4c:	60b9      	str	r1, [r7, #8]
  405e4e:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  405e50:	68fa      	ldr	r2, [r7, #12]
  405e52:	68bb      	ldr	r3, [r7, #8]
  405e54:	019b      	lsls	r3, r3, #6
  405e56:	4413      	add	r3, r2
  405e58:	331c      	adds	r3, #28
  405e5a:	687a      	ldr	r2, [r7, #4]
  405e5c:	601a      	str	r2, [r3, #0]
}
  405e5e:	bf00      	nop
  405e60:	3714      	adds	r7, #20
  405e62:	46bd      	mov	sp, r7
  405e64:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e68:	4770      	bx	lr
  405e6a:	bf00      	nop

00405e6c <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  405e6c:	b480      	push	{r7}
  405e6e:	b087      	sub	sp, #28
  405e70:	af00      	add	r7, sp, #0
  405e72:	60f8      	str	r0, [r7, #12]
  405e74:	60b9      	str	r1, [r7, #8]
  405e76:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  405e78:	68fa      	ldr	r2, [r7, #12]
  405e7a:	68bb      	ldr	r3, [r7, #8]
  405e7c:	019b      	lsls	r3, r3, #6
  405e7e:	4413      	add	r3, r2
  405e80:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  405e82:	697b      	ldr	r3, [r7, #20]
  405e84:	687a      	ldr	r2, [r7, #4]
  405e86:	625a      	str	r2, [r3, #36]	; 0x24
}
  405e88:	bf00      	nop
  405e8a:	371c      	adds	r7, #28
  405e8c:	46bd      	mov	sp, r7
  405e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e92:	4770      	bx	lr

00405e94 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  405e94:	b480      	push	{r7}
  405e96:	b085      	sub	sp, #20
  405e98:	af00      	add	r7, sp, #0
  405e9a:	6078      	str	r0, [r7, #4]
  405e9c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  405e9e:	687a      	ldr	r2, [r7, #4]
  405ea0:	683b      	ldr	r3, [r7, #0]
  405ea2:	019b      	lsls	r3, r3, #6
  405ea4:	4413      	add	r3, r2
  405ea6:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  405ea8:	68fb      	ldr	r3, [r7, #12]
  405eaa:	6a1b      	ldr	r3, [r3, #32]
}
  405eac:	4618      	mov	r0, r3
  405eae:	3714      	adds	r7, #20
  405eb0:	46bd      	mov	sp, r7
  405eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405eb6:	4770      	bx	lr

00405eb8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  405eb8:	b480      	push	{r7}
  405eba:	b08d      	sub	sp, #52	; 0x34
  405ebc:	af00      	add	r7, sp, #0
  405ebe:	60f8      	str	r0, [r7, #12]
  405ec0:	60b9      	str	r1, [r7, #8]
  405ec2:	607a      	str	r2, [r7, #4]
  405ec4:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  405ec6:	2302      	movs	r3, #2
  405ec8:	613b      	str	r3, [r7, #16]
  405eca:	2308      	movs	r3, #8
  405ecc:	617b      	str	r3, [r7, #20]
  405ece:	2320      	movs	r3, #32
  405ed0:	61bb      	str	r3, [r7, #24]
  405ed2:	2380      	movs	r3, #128	; 0x80
  405ed4:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  405ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  405ed8:	0bdb      	lsrs	r3, r3, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  405eda:	623b      	str	r3, [r7, #32]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  405edc:	2300      	movs	r3, #0
  405ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  405ee0:	e01a      	b.n	405f18 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  405ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405ee4:	009b      	lsls	r3, r3, #2
  405ee6:	f107 0230 	add.w	r2, r7, #48	; 0x30
  405eea:	4413      	add	r3, r2
  405eec:	f853 3c20 	ldr.w	r3, [r3, #-32]
  405ef0:	68ba      	ldr	r2, [r7, #8]
  405ef2:	fbb2 f3f3 	udiv	r3, r2, r3
  405ef6:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  405ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  405efa:	0c1b      	lsrs	r3, r3, #16
  405efc:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  405efe:	68fa      	ldr	r2, [r7, #12]
  405f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
  405f02:	429a      	cmp	r2, r3
  405f04:	d901      	bls.n	405f0a <tc_find_mck_divisor+0x52>
			return 0;
  405f06:	2300      	movs	r3, #0
  405f08:	e023      	b.n	405f52 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  405f0a:	68fa      	ldr	r2, [r7, #12]
  405f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405f0e:	429a      	cmp	r2, r3
  405f10:	d206      	bcs.n	405f20 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  405f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405f14:	3301      	adds	r3, #1
  405f16:	62fb      	str	r3, [r7, #44]	; 0x2c
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  405f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405f1a:	2b04      	cmp	r3, #4
  405f1c:	d9e1      	bls.n	405ee2 <tc_find_mck_divisor+0x2a>
  405f1e:	e000      	b.n	405f22 <tc_find_mck_divisor+0x6a>
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
		} else if (ul_freq >= ul_low) {
			break;
  405f20:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  405f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405f24:	2b04      	cmp	r3, #4
  405f26:	d901      	bls.n	405f2c <tc_find_mck_divisor+0x74>
		return 0;
  405f28:	2300      	movs	r3, #0
  405f2a:	e012      	b.n	405f52 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  405f2c:	687b      	ldr	r3, [r7, #4]
  405f2e:	2b00      	cmp	r3, #0
  405f30:	d008      	beq.n	405f44 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  405f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405f34:	009b      	lsls	r3, r3, #2
  405f36:	f107 0230 	add.w	r2, r7, #48	; 0x30
  405f3a:	4413      	add	r3, r2
  405f3c:	f853 2c20 	ldr.w	r2, [r3, #-32]
  405f40:	687b      	ldr	r3, [r7, #4]
  405f42:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  405f44:	683b      	ldr	r3, [r7, #0]
  405f46:	2b00      	cmp	r3, #0
  405f48:	d002      	beq.n	405f50 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  405f4a:	683b      	ldr	r3, [r7, #0]
  405f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  405f4e:	601a      	str	r2, [r3, #0]
	}

	return 1;
  405f50:	2301      	movs	r3, #1
}
  405f52:	4618      	mov	r0, r3
  405f54:	3734      	adds	r7, #52	; 0x34
  405f56:	46bd      	mov	sp, r7
  405f58:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f5c:	4770      	bx	lr
  405f5e:	bf00      	nop

00405f60 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  405f60:	b480      	push	{r7}
  405f62:	b085      	sub	sp, #20
  405f64:	af00      	add	r7, sp, #0
  405f66:	6078      	str	r0, [r7, #4]
  405f68:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  405f6a:	2300      	movs	r3, #0
  405f6c:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  405f6e:	687b      	ldr	r3, [r7, #4]
  405f70:	22ac      	movs	r2, #172	; 0xac
  405f72:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  405f74:	683b      	ldr	r3, [r7, #0]
  405f76:	681a      	ldr	r2, [r3, #0]
  405f78:	683b      	ldr	r3, [r7, #0]
  405f7a:	685b      	ldr	r3, [r3, #4]
  405f7c:	fbb2 f3f3 	udiv	r3, r2, r3
  405f80:	091b      	lsrs	r3, r3, #4
  405f82:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  405f84:	68fb      	ldr	r3, [r7, #12]
  405f86:	2b00      	cmp	r3, #0
  405f88:	d003      	beq.n	405f92 <uart_init+0x32>
  405f8a:	68fb      	ldr	r3, [r7, #12]
  405f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  405f90:	d301      	bcc.n	405f96 <uart_init+0x36>
		return 1;
  405f92:	2301      	movs	r3, #1
  405f94:	e00a      	b.n	405fac <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  405f96:	687b      	ldr	r3, [r7, #4]
  405f98:	68fa      	ldr	r2, [r7, #12]
  405f9a:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  405f9c:	683b      	ldr	r3, [r7, #0]
  405f9e:	689a      	ldr	r2, [r3, #8]
  405fa0:	687b      	ldr	r3, [r7, #4]
  405fa2:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  405fa4:	687b      	ldr	r3, [r7, #4]
  405fa6:	2250      	movs	r2, #80	; 0x50
  405fa8:	601a      	str	r2, [r3, #0]

	return 0;
  405faa:	2300      	movs	r3, #0
}
  405fac:	4618      	mov	r0, r3
  405fae:	3714      	adds	r7, #20
  405fb0:	46bd      	mov	sp, r7
  405fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fb6:	4770      	bx	lr

00405fb8 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  405fb8:	b480      	push	{r7}
  405fba:	b083      	sub	sp, #12
  405fbc:	af00      	add	r7, sp, #0
  405fbe:	6078      	str	r0, [r7, #4]
  405fc0:	460b      	mov	r3, r1
  405fc2:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  405fc4:	687b      	ldr	r3, [r7, #4]
  405fc6:	695b      	ldr	r3, [r3, #20]
  405fc8:	f003 0302 	and.w	r3, r3, #2
  405fcc:	2b00      	cmp	r3, #0
  405fce:	d101      	bne.n	405fd4 <uart_write+0x1c>
		return 1;
  405fd0:	2301      	movs	r3, #1
  405fd2:	e003      	b.n	405fdc <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  405fd4:	78fa      	ldrb	r2, [r7, #3]
  405fd6:	687b      	ldr	r3, [r7, #4]
  405fd8:	61da      	str	r2, [r3, #28]
	return 0;
  405fda:	2300      	movs	r3, #0
}
  405fdc:	4618      	mov	r0, r3
  405fde:	370c      	adds	r7, #12
  405fe0:	46bd      	mov	sp, r7
  405fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fe6:	4770      	bx	lr

00405fe8 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  405fe8:	b480      	push	{r7}
  405fea:	b083      	sub	sp, #12
  405fec:	af00      	add	r7, sp, #0
  405fee:	6078      	str	r0, [r7, #4]
  405ff0:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  405ff2:	687b      	ldr	r3, [r7, #4]
  405ff4:	695b      	ldr	r3, [r3, #20]
  405ff6:	f003 0301 	and.w	r3, r3, #1
  405ffa:	2b00      	cmp	r3, #0
  405ffc:	d101      	bne.n	406002 <uart_read+0x1a>
		return 1;
  405ffe:	2301      	movs	r3, #1
  406000:	e005      	b.n	40600e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  406002:	687b      	ldr	r3, [r7, #4]
  406004:	699b      	ldr	r3, [r3, #24]
  406006:	b2da      	uxtb	r2, r3
  406008:	683b      	ldr	r3, [r7, #0]
  40600a:	701a      	strb	r2, [r3, #0]
	return 0;
  40600c:	2300      	movs	r3, #0
}
  40600e:	4618      	mov	r0, r3
  406010:	370c      	adds	r7, #12
  406012:	46bd      	mov	sp, r7
  406014:	f85d 7b04 	ldr.w	r7, [sp], #4
  406018:	4770      	bx	lr
  40601a:	bf00      	nop

0040601c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40601c:	b480      	push	{r7}
  40601e:	b089      	sub	sp, #36	; 0x24
  406020:	af00      	add	r7, sp, #0
  406022:	60f8      	str	r0, [r7, #12]
  406024:	60b9      	str	r1, [r7, #8]
  406026:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  406028:	68bb      	ldr	r3, [r7, #8]
  40602a:	011a      	lsls	r2, r3, #4
  40602c:	687b      	ldr	r3, [r7, #4]
  40602e:	429a      	cmp	r2, r3
  406030:	d802      	bhi.n	406038 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  406032:	2310      	movs	r3, #16
  406034:	61fb      	str	r3, [r7, #28]
  406036:	e001      	b.n	40603c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  406038:	2308      	movs	r3, #8
  40603a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40603c:	687b      	ldr	r3, [r7, #4]
  40603e:	00da      	lsls	r2, r3, #3
  406040:	69fb      	ldr	r3, [r7, #28]
  406042:	68b9      	ldr	r1, [r7, #8]
  406044:	fb01 f303 	mul.w	r3, r1, r3
  406048:	085b      	lsrs	r3, r3, #1
  40604a:	441a      	add	r2, r3
  40604c:	69fb      	ldr	r3, [r7, #28]
  40604e:	68b9      	ldr	r1, [r7, #8]
  406050:	fb01 f303 	mul.w	r3, r1, r3
  406054:	fbb2 f3f3 	udiv	r3, r2, r3
  406058:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40605a:	69bb      	ldr	r3, [r7, #24]
  40605c:	08db      	lsrs	r3, r3, #3
  40605e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  406060:	69bb      	ldr	r3, [r7, #24]
  406062:	f003 0307 	and.w	r3, r3, #7
  406066:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  406068:	697b      	ldr	r3, [r7, #20]
  40606a:	2b00      	cmp	r3, #0
  40606c:	d003      	beq.n	406076 <usart_set_async_baudrate+0x5a>
  40606e:	697b      	ldr	r3, [r7, #20]
  406070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  406074:	d301      	bcc.n	40607a <usart_set_async_baudrate+0x5e>
		return 1;
  406076:	2301      	movs	r3, #1
  406078:	e00f      	b.n	40609a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40607a:	69fb      	ldr	r3, [r7, #28]
  40607c:	2b08      	cmp	r3, #8
  40607e:	d105      	bne.n	40608c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  406080:	68fb      	ldr	r3, [r7, #12]
  406082:	685b      	ldr	r3, [r3, #4]
  406084:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  406088:	68fb      	ldr	r3, [r7, #12]
  40608a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40608c:	693b      	ldr	r3, [r7, #16]
  40608e:	041a      	lsls	r2, r3, #16
  406090:	697b      	ldr	r3, [r7, #20]
  406092:	431a      	orrs	r2, r3
  406094:	68fb      	ldr	r3, [r7, #12]
  406096:	621a      	str	r2, [r3, #32]

	return 0;
  406098:	2300      	movs	r3, #0
}
  40609a:	4618      	mov	r0, r3
  40609c:	3724      	adds	r7, #36	; 0x24
  40609e:	46bd      	mov	sp, r7
  4060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4060a4:	4770      	bx	lr
  4060a6:	bf00      	nop

004060a8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4060a8:	b580      	push	{r7, lr}
  4060aa:	b082      	sub	sp, #8
  4060ac:	af00      	add	r7, sp, #0
  4060ae:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4060b0:	6878      	ldr	r0, [r7, #4]
  4060b2:	4b0d      	ldr	r3, [pc, #52]	; (4060e8 <usart_reset+0x40>)
  4060b4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4060b6:	687b      	ldr	r3, [r7, #4]
  4060b8:	2200      	movs	r2, #0
  4060ba:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4060bc:	687b      	ldr	r3, [r7, #4]
  4060be:	2200      	movs	r2, #0
  4060c0:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4060c2:	687b      	ldr	r3, [r7, #4]
  4060c4:	2200      	movs	r2, #0
  4060c6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4060c8:	6878      	ldr	r0, [r7, #4]
  4060ca:	4b08      	ldr	r3, [pc, #32]	; (4060ec <usart_reset+0x44>)
  4060cc:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4060ce:	6878      	ldr	r0, [r7, #4]
  4060d0:	4b07      	ldr	r3, [pc, #28]	; (4060f0 <usart_reset+0x48>)
  4060d2:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4060d4:	6878      	ldr	r0, [r7, #4]
  4060d6:	4b07      	ldr	r3, [pc, #28]	; (4060f4 <usart_reset+0x4c>)
  4060d8:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4060da:	6878      	ldr	r0, [r7, #4]
  4060dc:	4b06      	ldr	r3, [pc, #24]	; (4060f8 <usart_reset+0x50>)
  4060de:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4060e0:	bf00      	nop
  4060e2:	3708      	adds	r7, #8
  4060e4:	46bd      	mov	sp, r7
  4060e6:	bd80      	pop	{r7, pc}
  4060e8:	00406291 	.word	0x00406291
  4060ec:	0040619d 	.word	0x0040619d
  4060f0:	004061d5 	.word	0x004061d5
  4060f4:	004061f1 	.word	0x004061f1
  4060f8:	0040620d 	.word	0x0040620d

004060fc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4060fc:	b580      	push	{r7, lr}
  4060fe:	b084      	sub	sp, #16
  406100:	af00      	add	r7, sp, #0
  406102:	60f8      	str	r0, [r7, #12]
  406104:	60b9      	str	r1, [r7, #8]
  406106:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  406108:	68f8      	ldr	r0, [r7, #12]
  40610a:	4b1a      	ldr	r3, [pc, #104]	; (406174 <usart_init_rs232+0x78>)
  40610c:	4798      	blx	r3

	ul_reg_val = 0;
  40610e:	4b1a      	ldr	r3, [pc, #104]	; (406178 <usart_init_rs232+0x7c>)
  406110:	2200      	movs	r2, #0
  406112:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  406114:	68bb      	ldr	r3, [r7, #8]
  406116:	2b00      	cmp	r3, #0
  406118:	d009      	beq.n	40612e <usart_init_rs232+0x32>
  40611a:	68bb      	ldr	r3, [r7, #8]
  40611c:	681b      	ldr	r3, [r3, #0]
  40611e:	687a      	ldr	r2, [r7, #4]
  406120:	4619      	mov	r1, r3
  406122:	68f8      	ldr	r0, [r7, #12]
  406124:	4b15      	ldr	r3, [pc, #84]	; (40617c <usart_init_rs232+0x80>)
  406126:	4798      	blx	r3
  406128:	4603      	mov	r3, r0
  40612a:	2b00      	cmp	r3, #0
  40612c:	d001      	beq.n	406132 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40612e:	2301      	movs	r3, #1
  406130:	e01b      	b.n	40616a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  406132:	68bb      	ldr	r3, [r7, #8]
  406134:	685a      	ldr	r2, [r3, #4]
  406136:	68bb      	ldr	r3, [r7, #8]
  406138:	689b      	ldr	r3, [r3, #8]
  40613a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40613c:	68bb      	ldr	r3, [r7, #8]
  40613e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  406140:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  406142:	68bb      	ldr	r3, [r7, #8]
  406144:	68db      	ldr	r3, [r3, #12]
  406146:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  406148:	4b0b      	ldr	r3, [pc, #44]	; (406178 <usart_init_rs232+0x7c>)
  40614a:	681b      	ldr	r3, [r3, #0]
  40614c:	4313      	orrs	r3, r2
  40614e:	4a0a      	ldr	r2, [pc, #40]	; (406178 <usart_init_rs232+0x7c>)
  406150:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  406152:	4b09      	ldr	r3, [pc, #36]	; (406178 <usart_init_rs232+0x7c>)
  406154:	681b      	ldr	r3, [r3, #0]
  406156:	4a08      	ldr	r2, [pc, #32]	; (406178 <usart_init_rs232+0x7c>)
  406158:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40615a:	68fb      	ldr	r3, [r7, #12]
  40615c:	685a      	ldr	r2, [r3, #4]
  40615e:	4b06      	ldr	r3, [pc, #24]	; (406178 <usart_init_rs232+0x7c>)
  406160:	681b      	ldr	r3, [r3, #0]
  406162:	431a      	orrs	r2, r3
  406164:	68fb      	ldr	r3, [r7, #12]
  406166:	605a      	str	r2, [r3, #4]

	return 0;
  406168:	2300      	movs	r3, #0
}
  40616a:	4618      	mov	r0, r3
  40616c:	3710      	adds	r7, #16
  40616e:	46bd      	mov	sp, r7
  406170:	bd80      	pop	{r7, pc}
  406172:	bf00      	nop
  406174:	004060a9 	.word	0x004060a9
  406178:	20400984 	.word	0x20400984
  40617c:	0040601d 	.word	0x0040601d

00406180 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  406180:	b480      	push	{r7}
  406182:	b083      	sub	sp, #12
  406184:	af00      	add	r7, sp, #0
  406186:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  406188:	687b      	ldr	r3, [r7, #4]
  40618a:	2240      	movs	r2, #64	; 0x40
  40618c:	601a      	str	r2, [r3, #0]
}
  40618e:	bf00      	nop
  406190:	370c      	adds	r7, #12
  406192:	46bd      	mov	sp, r7
  406194:	f85d 7b04 	ldr.w	r7, [sp], #4
  406198:	4770      	bx	lr
  40619a:	bf00      	nop

0040619c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  40619c:	b480      	push	{r7}
  40619e:	b083      	sub	sp, #12
  4061a0:	af00      	add	r7, sp, #0
  4061a2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4061a4:	687b      	ldr	r3, [r7, #4]
  4061a6:	2288      	movs	r2, #136	; 0x88
  4061a8:	601a      	str	r2, [r3, #0]
}
  4061aa:	bf00      	nop
  4061ac:	370c      	adds	r7, #12
  4061ae:	46bd      	mov	sp, r7
  4061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061b4:	4770      	bx	lr
  4061b6:	bf00      	nop

004061b8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4061b8:	b480      	push	{r7}
  4061ba:	b083      	sub	sp, #12
  4061bc:	af00      	add	r7, sp, #0
  4061be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4061c0:	687b      	ldr	r3, [r7, #4]
  4061c2:	2210      	movs	r2, #16
  4061c4:	601a      	str	r2, [r3, #0]
}
  4061c6:	bf00      	nop
  4061c8:	370c      	adds	r7, #12
  4061ca:	46bd      	mov	sp, r7
  4061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061d0:	4770      	bx	lr
  4061d2:	bf00      	nop

004061d4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4061d4:	b480      	push	{r7}
  4061d6:	b083      	sub	sp, #12
  4061d8:	af00      	add	r7, sp, #0
  4061da:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4061dc:	687b      	ldr	r3, [r7, #4]
  4061de:	2224      	movs	r2, #36	; 0x24
  4061e0:	601a      	str	r2, [r3, #0]
}
  4061e2:	bf00      	nop
  4061e4:	370c      	adds	r7, #12
  4061e6:	46bd      	mov	sp, r7
  4061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061ec:	4770      	bx	lr
  4061ee:	bf00      	nop

004061f0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  4061f0:	b480      	push	{r7}
  4061f2:	b083      	sub	sp, #12
  4061f4:	af00      	add	r7, sp, #0
  4061f6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4061f8:	687b      	ldr	r3, [r7, #4]
  4061fa:	f44f 7280 	mov.w	r2, #256	; 0x100
  4061fe:	601a      	str	r2, [r3, #0]
}
  406200:	bf00      	nop
  406202:	370c      	adds	r7, #12
  406204:	46bd      	mov	sp, r7
  406206:	f85d 7b04 	ldr.w	r7, [sp], #4
  40620a:	4770      	bx	lr

0040620c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  40620c:	b480      	push	{r7}
  40620e:	b083      	sub	sp, #12
  406210:	af00      	add	r7, sp, #0
  406212:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  406214:	687b      	ldr	r3, [r7, #4]
  406216:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40621a:	601a      	str	r2, [r3, #0]
}
  40621c:	bf00      	nop
  40621e:	370c      	adds	r7, #12
  406220:	46bd      	mov	sp, r7
  406222:	f85d 7b04 	ldr.w	r7, [sp], #4
  406226:	4770      	bx	lr

00406228 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  406228:	b480      	push	{r7}
  40622a:	b083      	sub	sp, #12
  40622c:	af00      	add	r7, sp, #0
  40622e:	6078      	str	r0, [r7, #4]
  406230:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  406232:	687b      	ldr	r3, [r7, #4]
  406234:	695b      	ldr	r3, [r3, #20]
  406236:	f003 0302 	and.w	r3, r3, #2
  40623a:	2b00      	cmp	r3, #0
  40623c:	d101      	bne.n	406242 <usart_write+0x1a>
		return 1;
  40623e:	2301      	movs	r3, #1
  406240:	e005      	b.n	40624e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  406242:	683b      	ldr	r3, [r7, #0]
  406244:	f3c3 0208 	ubfx	r2, r3, #0, #9
  406248:	687b      	ldr	r3, [r7, #4]
  40624a:	61da      	str	r2, [r3, #28]
	return 0;
  40624c:	2300      	movs	r3, #0
}
  40624e:	4618      	mov	r0, r3
  406250:	370c      	adds	r7, #12
  406252:	46bd      	mov	sp, r7
  406254:	f85d 7b04 	ldr.w	r7, [sp], #4
  406258:	4770      	bx	lr
  40625a:	bf00      	nop

0040625c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40625c:	b480      	push	{r7}
  40625e:	b083      	sub	sp, #12
  406260:	af00      	add	r7, sp, #0
  406262:	6078      	str	r0, [r7, #4]
  406264:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  406266:	687b      	ldr	r3, [r7, #4]
  406268:	695b      	ldr	r3, [r3, #20]
  40626a:	f003 0301 	and.w	r3, r3, #1
  40626e:	2b00      	cmp	r3, #0
  406270:	d101      	bne.n	406276 <usart_read+0x1a>
		return 1;
  406272:	2301      	movs	r3, #1
  406274:	e006      	b.n	406284 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  406276:	687b      	ldr	r3, [r7, #4]
  406278:	699b      	ldr	r3, [r3, #24]
  40627a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40627e:	683b      	ldr	r3, [r7, #0]
  406280:	601a      	str	r2, [r3, #0]

	return 0;
  406282:	2300      	movs	r3, #0
}
  406284:	4618      	mov	r0, r3
  406286:	370c      	adds	r7, #12
  406288:	46bd      	mov	sp, r7
  40628a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40628e:	4770      	bx	lr

00406290 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  406290:	b480      	push	{r7}
  406292:	b083      	sub	sp, #12
  406294:	af00      	add	r7, sp, #0
  406296:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  406298:	687b      	ldr	r3, [r7, #4]
  40629a:	4a04      	ldr	r2, [pc, #16]	; (4062ac <usart_disable_writeprotect+0x1c>)
  40629c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4062a0:	bf00      	nop
  4062a2:	370c      	adds	r7, #12
  4062a4:	46bd      	mov	sp, r7
  4062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4062aa:	4770      	bx	lr
  4062ac:	55534100 	.word	0x55534100

004062b0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4062b0:	b480      	push	{r7}
  4062b2:	b083      	sub	sp, #12
  4062b4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4062b6:	f3ef 8310 	mrs	r3, PRIMASK
  4062ba:	607b      	str	r3, [r7, #4]
  return(result);
  4062bc:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4062be:	2b00      	cmp	r3, #0
  4062c0:	bf0c      	ite	eq
  4062c2:	2301      	moveq	r3, #1
  4062c4:	2300      	movne	r3, #0
  4062c6:	b2db      	uxtb	r3, r3
  4062c8:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4062ca:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4062cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4062d0:	4b04      	ldr	r3, [pc, #16]	; (4062e4 <cpu_irq_save+0x34>)
  4062d2:	2200      	movs	r2, #0
  4062d4:	701a      	strb	r2, [r3, #0]
	return flags;
  4062d6:	683b      	ldr	r3, [r7, #0]
}
  4062d8:	4618      	mov	r0, r3
  4062da:	370c      	adds	r7, #12
  4062dc:	46bd      	mov	sp, r7
  4062de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4062e2:	4770      	bx	lr
  4062e4:	20400014 	.word	0x20400014

004062e8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4062e8:	b480      	push	{r7}
  4062ea:	b083      	sub	sp, #12
  4062ec:	af00      	add	r7, sp, #0
  4062ee:	6078      	str	r0, [r7, #4]
	return (flags);
  4062f0:	687b      	ldr	r3, [r7, #4]
  4062f2:	2b00      	cmp	r3, #0
  4062f4:	bf14      	ite	ne
  4062f6:	2301      	movne	r3, #1
  4062f8:	2300      	moveq	r3, #0
  4062fa:	b2db      	uxtb	r3, r3
}
  4062fc:	4618      	mov	r0, r3
  4062fe:	370c      	adds	r7, #12
  406300:	46bd      	mov	sp, r7
  406302:	f85d 7b04 	ldr.w	r7, [sp], #4
  406306:	4770      	bx	lr

00406308 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  406308:	b580      	push	{r7, lr}
  40630a:	b082      	sub	sp, #8
  40630c:	af00      	add	r7, sp, #0
  40630e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  406310:	6878      	ldr	r0, [r7, #4]
  406312:	4b07      	ldr	r3, [pc, #28]	; (406330 <cpu_irq_restore+0x28>)
  406314:	4798      	blx	r3
  406316:	4603      	mov	r3, r0
  406318:	2b00      	cmp	r3, #0
  40631a:	d005      	beq.n	406328 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  40631c:	4b05      	ldr	r3, [pc, #20]	; (406334 <cpu_irq_restore+0x2c>)
  40631e:	2201      	movs	r2, #1
  406320:	701a      	strb	r2, [r3, #0]
  406322:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  406326:	b662      	cpsie	i
}
  406328:	bf00      	nop
  40632a:	3708      	adds	r7, #8
  40632c:	46bd      	mov	sp, r7
  40632e:	bd80      	pop	{r7, pc}
  406330:	004062e9 	.word	0x004062e9
  406334:	20400014 	.word	0x20400014

00406338 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  406338:	b580      	push	{r7, lr}
  40633a:	b084      	sub	sp, #16
  40633c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40633e:	4b1e      	ldr	r3, [pc, #120]	; (4063b8 <Reset_Handler+0x80>)
  406340:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  406342:	4b1e      	ldr	r3, [pc, #120]	; (4063bc <Reset_Handler+0x84>)
  406344:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  406346:	68fa      	ldr	r2, [r7, #12]
  406348:	68bb      	ldr	r3, [r7, #8]
  40634a:	429a      	cmp	r2, r3
  40634c:	d00c      	beq.n	406368 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40634e:	e007      	b.n	406360 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  406350:	68bb      	ldr	r3, [r7, #8]
  406352:	1d1a      	adds	r2, r3, #4
  406354:	60ba      	str	r2, [r7, #8]
  406356:	68fa      	ldr	r2, [r7, #12]
  406358:	1d11      	adds	r1, r2, #4
  40635a:	60f9      	str	r1, [r7, #12]
  40635c:	6812      	ldr	r2, [r2, #0]
  40635e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  406360:	68bb      	ldr	r3, [r7, #8]
  406362:	4a17      	ldr	r2, [pc, #92]	; (4063c0 <Reset_Handler+0x88>)
  406364:	4293      	cmp	r3, r2
  406366:	d3f3      	bcc.n	406350 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  406368:	4b16      	ldr	r3, [pc, #88]	; (4063c4 <Reset_Handler+0x8c>)
  40636a:	60bb      	str	r3, [r7, #8]
  40636c:	e004      	b.n	406378 <Reset_Handler+0x40>
                *pDest++ = 0;
  40636e:	68bb      	ldr	r3, [r7, #8]
  406370:	1d1a      	adds	r2, r3, #4
  406372:	60ba      	str	r2, [r7, #8]
  406374:	2200      	movs	r2, #0
  406376:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  406378:	68bb      	ldr	r3, [r7, #8]
  40637a:	4a13      	ldr	r2, [pc, #76]	; (4063c8 <Reset_Handler+0x90>)
  40637c:	4293      	cmp	r3, r2
  40637e:	d3f6      	bcc.n	40636e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  406380:	4b12      	ldr	r3, [pc, #72]	; (4063cc <Reset_Handler+0x94>)
  406382:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  406384:	4a12      	ldr	r2, [pc, #72]	; (4063d0 <Reset_Handler+0x98>)
  406386:	68fb      	ldr	r3, [r7, #12]
  406388:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40638c:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  40638e:	4b11      	ldr	r3, [pc, #68]	; (4063d4 <Reset_Handler+0x9c>)
  406390:	4798      	blx	r3
  406392:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  406394:	4a10      	ldr	r2, [pc, #64]	; (4063d8 <Reset_Handler+0xa0>)
  406396:	4b10      	ldr	r3, [pc, #64]	; (4063d8 <Reset_Handler+0xa0>)
  406398:	681b      	ldr	r3, [r3, #0]
  40639a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40639e:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4063a0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4063a4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4063a8:	6878      	ldr	r0, [r7, #4]
  4063aa:	4b0c      	ldr	r3, [pc, #48]	; (4063dc <Reset_Handler+0xa4>)
  4063ac:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4063ae:	4b0c      	ldr	r3, [pc, #48]	; (4063e0 <Reset_Handler+0xa8>)
  4063b0:	4798      	blx	r3

        /* Branch to main function */
        main();
  4063b2:	4b0c      	ldr	r3, [pc, #48]	; (4063e4 <Reset_Handler+0xac>)
  4063b4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4063b6:	e7fe      	b.n	4063b6 <Reset_Handler+0x7e>
  4063b8:	0040f1d0 	.word	0x0040f1d0
  4063bc:	20400000 	.word	0x20400000
  4063c0:	204008bc 	.word	0x204008bc
  4063c4:	204008bc 	.word	0x204008bc
  4063c8:	20401be4 	.word	0x20401be4
  4063cc:	00400000 	.word	0x00400000
  4063d0:	e000ed00 	.word	0xe000ed00
  4063d4:	004062b1 	.word	0x004062b1
  4063d8:	e000ed88 	.word	0xe000ed88
  4063dc:	00406309 	.word	0x00406309
  4063e0:	00407995 	.word	0x00407995
  4063e4:	0040743d 	.word	0x0040743d

004063e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4063e8:	b480      	push	{r7}
  4063ea:	af00      	add	r7, sp, #0
        while (1) {
        }
  4063ec:	e7fe      	b.n	4063ec <Dummy_Handler+0x4>
  4063ee:	bf00      	nop

004063f0 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4063f0:	b480      	push	{r7}
  4063f2:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4063f4:	4b52      	ldr	r3, [pc, #328]	; (406540 <SystemCoreClockUpdate+0x150>)
  4063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4063f8:	f003 0303 	and.w	r3, r3, #3
  4063fc:	2b01      	cmp	r3, #1
  4063fe:	d014      	beq.n	40642a <SystemCoreClockUpdate+0x3a>
  406400:	2b01      	cmp	r3, #1
  406402:	d302      	bcc.n	40640a <SystemCoreClockUpdate+0x1a>
  406404:	2b02      	cmp	r3, #2
  406406:	d038      	beq.n	40647a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  406408:	e07a      	b.n	406500 <SystemCoreClockUpdate+0x110>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40640a:	4b4e      	ldr	r3, [pc, #312]	; (406544 <SystemCoreClockUpdate+0x154>)
  40640c:	695b      	ldr	r3, [r3, #20]
  40640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  406412:	2b00      	cmp	r3, #0
  406414:	d004      	beq.n	406420 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  406416:	4b4c      	ldr	r3, [pc, #304]	; (406548 <SystemCoreClockUpdate+0x158>)
  406418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40641c:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  40641e:	e06f      	b.n	406500 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  406420:	4b49      	ldr	r3, [pc, #292]	; (406548 <SystemCoreClockUpdate+0x158>)
  406422:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  406426:	601a      	str	r2, [r3, #0]
      }
    break;
  406428:	e06a      	b.n	406500 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40642a:	4b45      	ldr	r3, [pc, #276]	; (406540 <SystemCoreClockUpdate+0x150>)
  40642c:	6a1b      	ldr	r3, [r3, #32]
  40642e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  406432:	2b00      	cmp	r3, #0
  406434:	d003      	beq.n	40643e <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  406436:	4b44      	ldr	r3, [pc, #272]	; (406548 <SystemCoreClockUpdate+0x158>)
  406438:	4a44      	ldr	r2, [pc, #272]	; (40654c <SystemCoreClockUpdate+0x15c>)
  40643a:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
    break;
  40643c:	e060      	b.n	406500 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40643e:	4b42      	ldr	r3, [pc, #264]	; (406548 <SystemCoreClockUpdate+0x158>)
  406440:	4a43      	ldr	r2, [pc, #268]	; (406550 <SystemCoreClockUpdate+0x160>)
  406442:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  406444:	4b3e      	ldr	r3, [pc, #248]	; (406540 <SystemCoreClockUpdate+0x150>)
  406446:	6a1b      	ldr	r3, [r3, #32]
  406448:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40644c:	2b10      	cmp	r3, #16
  40644e:	d004      	beq.n	40645a <SystemCoreClockUpdate+0x6a>
  406450:	2b20      	cmp	r3, #32
  406452:	d008      	beq.n	406466 <SystemCoreClockUpdate+0x76>
  406454:	2b00      	cmp	r3, #0
  406456:	d00e      	beq.n	406476 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  406458:	e00e      	b.n	406478 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40645a:	4b3b      	ldr	r3, [pc, #236]	; (406548 <SystemCoreClockUpdate+0x158>)
  40645c:	681b      	ldr	r3, [r3, #0]
  40645e:	005b      	lsls	r3, r3, #1
  406460:	4a39      	ldr	r2, [pc, #228]	; (406548 <SystemCoreClockUpdate+0x158>)
  406462:	6013      	str	r3, [r2, #0]
          break;
  406464:	e008      	b.n	406478 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  406466:	4b38      	ldr	r3, [pc, #224]	; (406548 <SystemCoreClockUpdate+0x158>)
  406468:	681a      	ldr	r2, [r3, #0]
  40646a:	4613      	mov	r3, r2
  40646c:	005b      	lsls	r3, r3, #1
  40646e:	4413      	add	r3, r2
  406470:	4a35      	ldr	r2, [pc, #212]	; (406548 <SystemCoreClockUpdate+0x158>)
  406472:	6013      	str	r3, [r2, #0]
          break;
  406474:	e000      	b.n	406478 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  406476:	bf00      	nop

          default:
          break;
        }
      }
    break;
  406478:	e042      	b.n	406500 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40647a:	4b31      	ldr	r3, [pc, #196]	; (406540 <SystemCoreClockUpdate+0x150>)
  40647c:	6a1b      	ldr	r3, [r3, #32]
  40647e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  406482:	2b00      	cmp	r3, #0
  406484:	d003      	beq.n	40648e <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  406486:	4b30      	ldr	r3, [pc, #192]	; (406548 <SystemCoreClockUpdate+0x158>)
  406488:	4a30      	ldr	r2, [pc, #192]	; (40654c <SystemCoreClockUpdate+0x15c>)
  40648a:	601a      	str	r2, [r3, #0]
  40648c:	e01c      	b.n	4064c8 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40648e:	4b2e      	ldr	r3, [pc, #184]	; (406548 <SystemCoreClockUpdate+0x158>)
  406490:	4a2f      	ldr	r2, [pc, #188]	; (406550 <SystemCoreClockUpdate+0x160>)
  406492:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  406494:	4b2a      	ldr	r3, [pc, #168]	; (406540 <SystemCoreClockUpdate+0x150>)
  406496:	6a1b      	ldr	r3, [r3, #32]
  406498:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40649c:	2b10      	cmp	r3, #16
  40649e:	d004      	beq.n	4064aa <SystemCoreClockUpdate+0xba>
  4064a0:	2b20      	cmp	r3, #32
  4064a2:	d008      	beq.n	4064b6 <SystemCoreClockUpdate+0xc6>
  4064a4:	2b00      	cmp	r3, #0
  4064a6:	d00e      	beq.n	4064c6 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4064a8:	e00e      	b.n	4064c8 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4064aa:	4b27      	ldr	r3, [pc, #156]	; (406548 <SystemCoreClockUpdate+0x158>)
  4064ac:	681b      	ldr	r3, [r3, #0]
  4064ae:	005b      	lsls	r3, r3, #1
  4064b0:	4a25      	ldr	r2, [pc, #148]	; (406548 <SystemCoreClockUpdate+0x158>)
  4064b2:	6013      	str	r3, [r2, #0]
          break;
  4064b4:	e008      	b.n	4064c8 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4064b6:	4b24      	ldr	r3, [pc, #144]	; (406548 <SystemCoreClockUpdate+0x158>)
  4064b8:	681a      	ldr	r2, [r3, #0]
  4064ba:	4613      	mov	r3, r2
  4064bc:	005b      	lsls	r3, r3, #1
  4064be:	4413      	add	r3, r2
  4064c0:	4a21      	ldr	r2, [pc, #132]	; (406548 <SystemCoreClockUpdate+0x158>)
  4064c2:	6013      	str	r3, [r2, #0]
          break;
  4064c4:	e000      	b.n	4064c8 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4064c6:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4064c8:	4b1d      	ldr	r3, [pc, #116]	; (406540 <SystemCoreClockUpdate+0x150>)
  4064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4064cc:	f003 0303 	and.w	r3, r3, #3
  4064d0:	2b02      	cmp	r3, #2
  4064d2:	d114      	bne.n	4064fe <SystemCoreClockUpdate+0x10e>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4064d4:	4b1a      	ldr	r3, [pc, #104]	; (406540 <SystemCoreClockUpdate+0x150>)
  4064d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4064d8:	4b1e      	ldr	r3, [pc, #120]	; (406554 <SystemCoreClockUpdate+0x164>)
  4064da:	4013      	ands	r3, r2
  4064dc:	0c1b      	lsrs	r3, r3, #16
  4064de:	3301      	adds	r3, #1
  4064e0:	4a19      	ldr	r2, [pc, #100]	; (406548 <SystemCoreClockUpdate+0x158>)
  4064e2:	6812      	ldr	r2, [r2, #0]
  4064e4:	fb02 f303 	mul.w	r3, r2, r3
  4064e8:	4a17      	ldr	r2, [pc, #92]	; (406548 <SystemCoreClockUpdate+0x158>)
  4064ea:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4064ec:	4b14      	ldr	r3, [pc, #80]	; (406540 <SystemCoreClockUpdate+0x150>)
  4064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4064f0:	b2db      	uxtb	r3, r3
  4064f2:	4a15      	ldr	r2, [pc, #84]	; (406548 <SystemCoreClockUpdate+0x158>)
  4064f4:	6812      	ldr	r2, [r2, #0]
  4064f6:	fbb2 f3f3 	udiv	r3, r2, r3
  4064fa:	4a13      	ldr	r2, [pc, #76]	; (406548 <SystemCoreClockUpdate+0x158>)
  4064fc:	6013      	str	r3, [r2, #0]
      }
    break;
  4064fe:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  406500:	4b0f      	ldr	r3, [pc, #60]	; (406540 <SystemCoreClockUpdate+0x150>)
  406502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406504:	f003 0370 	and.w	r3, r3, #112	; 0x70
  406508:	2b70      	cmp	r3, #112	; 0x70
  40650a:	d108      	bne.n	40651e <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  40650c:	4b0e      	ldr	r3, [pc, #56]	; (406548 <SystemCoreClockUpdate+0x158>)
  40650e:	681b      	ldr	r3, [r3, #0]
  406510:	4a11      	ldr	r2, [pc, #68]	; (406558 <SystemCoreClockUpdate+0x168>)
  406512:	fba2 2303 	umull	r2, r3, r2, r3
  406516:	085b      	lsrs	r3, r3, #1
  406518:	4a0b      	ldr	r2, [pc, #44]	; (406548 <SystemCoreClockUpdate+0x158>)
  40651a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  40651c:	e00a      	b.n	406534 <SystemCoreClockUpdate+0x144>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40651e:	4b08      	ldr	r3, [pc, #32]	; (406540 <SystemCoreClockUpdate+0x150>)
  406520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406522:	f003 0370 	and.w	r3, r3, #112	; 0x70
  406526:	091b      	lsrs	r3, r3, #4
  406528:	4a07      	ldr	r2, [pc, #28]	; (406548 <SystemCoreClockUpdate+0x158>)
  40652a:	6812      	ldr	r2, [r2, #0]
  40652c:	fa22 f303 	lsr.w	r3, r2, r3
  406530:	4a05      	ldr	r2, [pc, #20]	; (406548 <SystemCoreClockUpdate+0x158>)
  406532:	6013      	str	r3, [r2, #0]
  }
}
  406534:	bf00      	nop
  406536:	46bd      	mov	sp, r7
  406538:	f85d 7b04 	ldr.w	r7, [sp], #4
  40653c:	4770      	bx	lr
  40653e:	bf00      	nop
  406540:	400e0600 	.word	0x400e0600
  406544:	400e1810 	.word	0x400e1810
  406548:	20400018 	.word	0x20400018
  40654c:	00b71b00 	.word	0x00b71b00
  406550:	003d0900 	.word	0x003d0900
  406554:	07ff0000 	.word	0x07ff0000
  406558:	aaaaaaab 	.word	0xaaaaaaab

0040655c <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  40655c:	b480      	push	{r7}
  40655e:	b083      	sub	sp, #12
  406560:	af00      	add	r7, sp, #0
  406562:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  406564:	687b      	ldr	r3, [r7, #4]
  406566:	4a19      	ldr	r2, [pc, #100]	; (4065cc <system_init_flash+0x70>)
  406568:	4293      	cmp	r3, r2
  40656a:	d804      	bhi.n	406576 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40656c:	4b18      	ldr	r3, [pc, #96]	; (4065d0 <system_init_flash+0x74>)
  40656e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  406572:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  406574:	e023      	b.n	4065be <system_init_flash+0x62>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  406576:	687b      	ldr	r3, [r7, #4]
  406578:	4a16      	ldr	r2, [pc, #88]	; (4065d4 <system_init_flash+0x78>)
  40657a:	4293      	cmp	r3, r2
  40657c:	d803      	bhi.n	406586 <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40657e:	4b14      	ldr	r3, [pc, #80]	; (4065d0 <system_init_flash+0x74>)
  406580:	4a15      	ldr	r2, [pc, #84]	; (4065d8 <system_init_flash+0x7c>)
  406582:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  406584:	e01b      	b.n	4065be <system_init_flash+0x62>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  406586:	687b      	ldr	r3, [r7, #4]
  406588:	4a14      	ldr	r2, [pc, #80]	; (4065dc <system_init_flash+0x80>)
  40658a:	4293      	cmp	r3, r2
  40658c:	d803      	bhi.n	406596 <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40658e:	4b10      	ldr	r3, [pc, #64]	; (4065d0 <system_init_flash+0x74>)
  406590:	4a13      	ldr	r2, [pc, #76]	; (4065e0 <system_init_flash+0x84>)
  406592:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  406594:	e013      	b.n	4065be <system_init_flash+0x62>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  406596:	687b      	ldr	r3, [r7, #4]
  406598:	4a12      	ldr	r2, [pc, #72]	; (4065e4 <system_init_flash+0x88>)
  40659a:	4293      	cmp	r3, r2
  40659c:	d803      	bhi.n	4065a6 <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40659e:	4b0c      	ldr	r3, [pc, #48]	; (4065d0 <system_init_flash+0x74>)
  4065a0:	4a11      	ldr	r2, [pc, #68]	; (4065e8 <system_init_flash+0x8c>)
  4065a2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4065a4:	e00b      	b.n	4065be <system_init_flash+0x62>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4065a6:	687b      	ldr	r3, [r7, #4]
  4065a8:	4a10      	ldr	r2, [pc, #64]	; (4065ec <system_init_flash+0x90>)
  4065aa:	4293      	cmp	r3, r2
  4065ac:	d804      	bhi.n	4065b8 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4065ae:	4b08      	ldr	r3, [pc, #32]	; (4065d0 <system_init_flash+0x74>)
  4065b0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4065b4:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4065b6:	e002      	b.n	4065be <system_init_flash+0x62>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4065b8:	4b05      	ldr	r3, [pc, #20]	; (4065d0 <system_init_flash+0x74>)
  4065ba:	4a0d      	ldr	r2, [pc, #52]	; (4065f0 <system_init_flash+0x94>)
  4065bc:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4065be:	bf00      	nop
  4065c0:	370c      	adds	r7, #12
  4065c2:	46bd      	mov	sp, r7
  4065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4065c8:	4770      	bx	lr
  4065ca:	bf00      	nop
  4065cc:	01312cff 	.word	0x01312cff
  4065d0:	400e0c00 	.word	0x400e0c00
  4065d4:	026259ff 	.word	0x026259ff
  4065d8:	04000100 	.word	0x04000100
  4065dc:	039386ff 	.word	0x039386ff
  4065e0:	04000200 	.word	0x04000200
  4065e4:	04c4b3ff 	.word	0x04c4b3ff
  4065e8:	04000300 	.word	0x04000300
  4065ec:	05f5e0ff 	.word	0x05f5e0ff
  4065f0:	04000500 	.word	0x04000500

004065f4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4065f4:	b480      	push	{r7}
  4065f6:	b085      	sub	sp, #20
  4065f8:	af00      	add	r7, sp, #0
  4065fa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4065fc:	4b10      	ldr	r3, [pc, #64]	; (406640 <_sbrk+0x4c>)
  4065fe:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  406600:	4b10      	ldr	r3, [pc, #64]	; (406644 <_sbrk+0x50>)
  406602:	681b      	ldr	r3, [r3, #0]
  406604:	2b00      	cmp	r3, #0
  406606:	d102      	bne.n	40660e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  406608:	4b0e      	ldr	r3, [pc, #56]	; (406644 <_sbrk+0x50>)
  40660a:	4a0f      	ldr	r2, [pc, #60]	; (406648 <_sbrk+0x54>)
  40660c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40660e:	4b0d      	ldr	r3, [pc, #52]	; (406644 <_sbrk+0x50>)
  406610:	681b      	ldr	r3, [r3, #0]
  406612:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  406614:	68ba      	ldr	r2, [r7, #8]
  406616:	687b      	ldr	r3, [r7, #4]
  406618:	441a      	add	r2, r3
  40661a:	68fb      	ldr	r3, [r7, #12]
  40661c:	429a      	cmp	r2, r3
  40661e:	dd02      	ble.n	406626 <_sbrk+0x32>
		return (caddr_t) -1;	
  406620:	f04f 33ff 	mov.w	r3, #4294967295
  406624:	e006      	b.n	406634 <_sbrk+0x40>
	}

	heap += incr;
  406626:	4b07      	ldr	r3, [pc, #28]	; (406644 <_sbrk+0x50>)
  406628:	681a      	ldr	r2, [r3, #0]
  40662a:	687b      	ldr	r3, [r7, #4]
  40662c:	4413      	add	r3, r2
  40662e:	4a05      	ldr	r2, [pc, #20]	; (406644 <_sbrk+0x50>)
  406630:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  406632:	68bb      	ldr	r3, [r7, #8]
}
  406634:	4618      	mov	r0, r3
  406636:	3714      	adds	r7, #20
  406638:	46bd      	mov	sp, r7
  40663a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40663e:	4770      	bx	lr
  406640:	2045fffc 	.word	0x2045fffc
  406644:	20400988 	.word	0x20400988
  406648:	20403de8 	.word	0x20403de8

0040664c <_close>:
{
	return -1;
}

extern int _close(int file)
{
  40664c:	b480      	push	{r7}
  40664e:	b083      	sub	sp, #12
  406650:	af00      	add	r7, sp, #0
  406652:	6078      	str	r0, [r7, #4]
	return -1;
  406654:	f04f 33ff 	mov.w	r3, #4294967295
}
  406658:	4618      	mov	r0, r3
  40665a:	370c      	adds	r7, #12
  40665c:	46bd      	mov	sp, r7
  40665e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406662:	4770      	bx	lr

00406664 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  406664:	b480      	push	{r7}
  406666:	b083      	sub	sp, #12
  406668:	af00      	add	r7, sp, #0
  40666a:	6078      	str	r0, [r7, #4]
  40666c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  40666e:	683b      	ldr	r3, [r7, #0]
  406670:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  406674:	605a      	str	r2, [r3, #4]

	return 0;
  406676:	2300      	movs	r3, #0
}
  406678:	4618      	mov	r0, r3
  40667a:	370c      	adds	r7, #12
  40667c:	46bd      	mov	sp, r7
  40667e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406682:	4770      	bx	lr

00406684 <_isatty>:

extern int _isatty(int file)
{
  406684:	b480      	push	{r7}
  406686:	b083      	sub	sp, #12
  406688:	af00      	add	r7, sp, #0
  40668a:	6078      	str	r0, [r7, #4]
	return 1;
  40668c:	2301      	movs	r3, #1
}
  40668e:	4618      	mov	r0, r3
  406690:	370c      	adds	r7, #12
  406692:	46bd      	mov	sp, r7
  406694:	f85d 7b04 	ldr.w	r7, [sp], #4
  406698:	4770      	bx	lr
  40669a:	bf00      	nop

0040669c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  40669c:	b480      	push	{r7}
  40669e:	b085      	sub	sp, #20
  4066a0:	af00      	add	r7, sp, #0
  4066a2:	60f8      	str	r0, [r7, #12]
  4066a4:	60b9      	str	r1, [r7, #8]
  4066a6:	607a      	str	r2, [r7, #4]
	return 0;
  4066a8:	2300      	movs	r3, #0
}
  4066aa:	4618      	mov	r0, r3
  4066ac:	3714      	adds	r7, #20
  4066ae:	46bd      	mov	sp, r7
  4066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066b4:	4770      	bx	lr
  4066b6:	bf00      	nop

004066b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4066b8:	b480      	push	{r7}
  4066ba:	b083      	sub	sp, #12
  4066bc:	af00      	add	r7, sp, #0
  4066be:	4603      	mov	r3, r0
  4066c0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4066c2:	4909      	ldr	r1, [pc, #36]	; (4066e8 <NVIC_EnableIRQ+0x30>)
  4066c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4066c8:	095b      	lsrs	r3, r3, #5
  4066ca:	79fa      	ldrb	r2, [r7, #7]
  4066cc:	f002 021f 	and.w	r2, r2, #31
  4066d0:	2001      	movs	r0, #1
  4066d2:	fa00 f202 	lsl.w	r2, r0, r2
  4066d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4066da:	bf00      	nop
  4066dc:	370c      	adds	r7, #12
  4066de:	46bd      	mov	sp, r7
  4066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066e4:	4770      	bx	lr
  4066e6:	bf00      	nop
  4066e8:	e000e100 	.word	0xe000e100

004066ec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4066ec:	b480      	push	{r7}
  4066ee:	b083      	sub	sp, #12
  4066f0:	af00      	add	r7, sp, #0
  4066f2:	4603      	mov	r3, r0
  4066f4:	6039      	str	r1, [r7, #0]
  4066f6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4066f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4066fc:	2b00      	cmp	r3, #0
  4066fe:	da0b      	bge.n	406718 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  406700:	490d      	ldr	r1, [pc, #52]	; (406738 <NVIC_SetPriority+0x4c>)
  406702:	79fb      	ldrb	r3, [r7, #7]
  406704:	f003 030f 	and.w	r3, r3, #15
  406708:	3b04      	subs	r3, #4
  40670a:	683a      	ldr	r2, [r7, #0]
  40670c:	b2d2      	uxtb	r2, r2
  40670e:	0152      	lsls	r2, r2, #5
  406710:	b2d2      	uxtb	r2, r2
  406712:	440b      	add	r3, r1
  406714:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  406716:	e009      	b.n	40672c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  406718:	4908      	ldr	r1, [pc, #32]	; (40673c <NVIC_SetPriority+0x50>)
  40671a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40671e:	683a      	ldr	r2, [r7, #0]
  406720:	b2d2      	uxtb	r2, r2
  406722:	0152      	lsls	r2, r2, #5
  406724:	b2d2      	uxtb	r2, r2
  406726:	440b      	add	r3, r1
  406728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40672c:	bf00      	nop
  40672e:	370c      	adds	r7, #12
  406730:	46bd      	mov	sp, r7
  406732:	f85d 7b04 	ldr.w	r7, [sp], #4
  406736:	4770      	bx	lr
  406738:	e000ed00 	.word	0xe000ed00
  40673c:	e000e100 	.word	0xe000e100

00406740 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  406740:	b480      	push	{r7}
  406742:	b083      	sub	sp, #12
  406744:	af00      	add	r7, sp, #0
  406746:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  406748:	687b      	ldr	r3, [r7, #4]
  40674a:	2b07      	cmp	r3, #7
  40674c:	d825      	bhi.n	40679a <osc_get_rate+0x5a>
  40674e:	a201      	add	r2, pc, #4	; (adr r2, 406754 <osc_get_rate+0x14>)
  406750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406754:	00406775 	.word	0x00406775
  406758:	0040677b 	.word	0x0040677b
  40675c:	00406781 	.word	0x00406781
  406760:	00406787 	.word	0x00406787
  406764:	0040678b 	.word	0x0040678b
  406768:	0040678f 	.word	0x0040678f
  40676c:	00406793 	.word	0x00406793
  406770:	00406797 	.word	0x00406797
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  406774:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  406778:	e010      	b.n	40679c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40677a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40677e:	e00d      	b.n	40679c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  406780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406784:	e00a      	b.n	40679c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  406786:	4b08      	ldr	r3, [pc, #32]	; (4067a8 <osc_get_rate+0x68>)
  406788:	e008      	b.n	40679c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40678a:	4b08      	ldr	r3, [pc, #32]	; (4067ac <osc_get_rate+0x6c>)
  40678c:	e006      	b.n	40679c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40678e:	4b08      	ldr	r3, [pc, #32]	; (4067b0 <osc_get_rate+0x70>)
  406790:	e004      	b.n	40679c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  406792:	4b07      	ldr	r3, [pc, #28]	; (4067b0 <osc_get_rate+0x70>)
  406794:	e002      	b.n	40679c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  406796:	4b06      	ldr	r3, [pc, #24]	; (4067b0 <osc_get_rate+0x70>)
  406798:	e000      	b.n	40679c <osc_get_rate+0x5c>
	}

	return 0;
  40679a:	2300      	movs	r3, #0
}
  40679c:	4618      	mov	r0, r3
  40679e:	370c      	adds	r7, #12
  4067a0:	46bd      	mov	sp, r7
  4067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067a6:	4770      	bx	lr
  4067a8:	003d0900 	.word	0x003d0900
  4067ac:	007a1200 	.word	0x007a1200
  4067b0:	00b71b00 	.word	0x00b71b00

004067b4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4067b4:	b580      	push	{r7, lr}
  4067b6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4067b8:	2006      	movs	r0, #6
  4067ba:	4b05      	ldr	r3, [pc, #20]	; (4067d0 <sysclk_get_main_hz+0x1c>)
  4067bc:	4798      	blx	r3
  4067be:	4602      	mov	r2, r0
  4067c0:	4613      	mov	r3, r2
  4067c2:	009b      	lsls	r3, r3, #2
  4067c4:	4413      	add	r3, r2
  4067c6:	009a      	lsls	r2, r3, #2
  4067c8:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4067ca:	4618      	mov	r0, r3
  4067cc:	bd80      	pop	{r7, pc}
  4067ce:	bf00      	nop
  4067d0:	00406741 	.word	0x00406741

004067d4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4067d4:	b580      	push	{r7, lr}
  4067d6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4067d8:	4b02      	ldr	r3, [pc, #8]	; (4067e4 <sysclk_get_cpu_hz+0x10>)
  4067da:	4798      	blx	r3
  4067dc:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4067de:	4618      	mov	r0, r3
  4067e0:	bd80      	pop	{r7, pc}
  4067e2:	bf00      	nop
  4067e4:	004067b5 	.word	0x004067b5

004067e8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4067e8:	b580      	push	{r7, lr}
  4067ea:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4067ec:	4b02      	ldr	r3, [pc, #8]	; (4067f8 <sysclk_get_peripheral_hz+0x10>)
  4067ee:	4798      	blx	r3
  4067f0:	4603      	mov	r3, r0
  4067f2:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  4067f4:	4618      	mov	r0, r3
  4067f6:	bd80      	pop	{r7, pc}
  4067f8:	004067b5 	.word	0x004067b5

004067fc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4067fc:	b580      	push	{r7, lr}
  4067fe:	b082      	sub	sp, #8
  406800:	af00      	add	r7, sp, #0
  406802:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  406804:	6878      	ldr	r0, [r7, #4]
  406806:	4b03      	ldr	r3, [pc, #12]	; (406814 <sysclk_enable_peripheral_clock+0x18>)
  406808:	4798      	blx	r3
}
  40680a:	bf00      	nop
  40680c:	3708      	adds	r7, #8
  40680e:	46bd      	mov	sp, r7
  406810:	bd80      	pop	{r7, pc}
  406812:	bf00      	nop
  406814:	004059d5 	.word	0x004059d5

00406818 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  406818:	b580      	push	{r7, lr}
  40681a:	b08c      	sub	sp, #48	; 0x30
  40681c:	af00      	add	r7, sp, #0
  40681e:	6078      	str	r0, [r7, #4]
  406820:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  406822:	4b49      	ldr	r3, [pc, #292]	; (406948 <usart_serial_init+0x130>)
  406824:	4798      	blx	r3
  406826:	4603      	mov	r3, r0
  406828:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40682a:	683b      	ldr	r3, [r7, #0]
  40682c:	681b      	ldr	r3, [r3, #0]
  40682e:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  406830:	683b      	ldr	r3, [r7, #0]
  406832:	689b      	ldr	r3, [r3, #8]
  406834:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  406836:	683b      	ldr	r3, [r7, #0]
  406838:	681b      	ldr	r3, [r3, #0]
  40683a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40683c:	683b      	ldr	r3, [r7, #0]
  40683e:	685b      	ldr	r3, [r3, #4]
  406840:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  406842:	683b      	ldr	r3, [r7, #0]
  406844:	689b      	ldr	r3, [r3, #8]
  406846:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  406848:	683b      	ldr	r3, [r7, #0]
  40684a:	68db      	ldr	r3, [r3, #12]
  40684c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40684e:	2300      	movs	r3, #0
  406850:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406852:	687b      	ldr	r3, [r7, #4]
  406854:	4a3d      	ldr	r2, [pc, #244]	; (40694c <usart_serial_init+0x134>)
  406856:	4293      	cmp	r3, r2
  406858:	d108      	bne.n	40686c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40685a:	2007      	movs	r0, #7
  40685c:	4b3c      	ldr	r3, [pc, #240]	; (406950 <usart_serial_init+0x138>)
  40685e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  406860:	f107 0324 	add.w	r3, r7, #36	; 0x24
  406864:	4619      	mov	r1, r3
  406866:	6878      	ldr	r0, [r7, #4]
  406868:	4b3a      	ldr	r3, [pc, #232]	; (406954 <usart_serial_init+0x13c>)
  40686a:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40686c:	687b      	ldr	r3, [r7, #4]
  40686e:	4a3a      	ldr	r2, [pc, #232]	; (406958 <usart_serial_init+0x140>)
  406870:	4293      	cmp	r3, r2
  406872:	d108      	bne.n	406886 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  406874:	2008      	movs	r0, #8
  406876:	4b36      	ldr	r3, [pc, #216]	; (406950 <usart_serial_init+0x138>)
  406878:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40687a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40687e:	4619      	mov	r1, r3
  406880:	6878      	ldr	r0, [r7, #4]
  406882:	4b34      	ldr	r3, [pc, #208]	; (406954 <usart_serial_init+0x13c>)
  406884:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406886:	687b      	ldr	r3, [r7, #4]
  406888:	4a34      	ldr	r2, [pc, #208]	; (40695c <usart_serial_init+0x144>)
  40688a:	4293      	cmp	r3, r2
  40688c:	d108      	bne.n	4068a0 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  40688e:	202c      	movs	r0, #44	; 0x2c
  406890:	4b2f      	ldr	r3, [pc, #188]	; (406950 <usart_serial_init+0x138>)
  406892:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  406894:	f107 0324 	add.w	r3, r7, #36	; 0x24
  406898:	4619      	mov	r1, r3
  40689a:	6878      	ldr	r0, [r7, #4]
  40689c:	4b2d      	ldr	r3, [pc, #180]	; (406954 <usart_serial_init+0x13c>)
  40689e:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4068a0:	687b      	ldr	r3, [r7, #4]
  4068a2:	4a2f      	ldr	r2, [pc, #188]	; (406960 <usart_serial_init+0x148>)
  4068a4:	4293      	cmp	r3, r2
  4068a6:	d108      	bne.n	4068ba <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  4068a8:	202d      	movs	r0, #45	; 0x2d
  4068aa:	4b29      	ldr	r3, [pc, #164]	; (406950 <usart_serial_init+0x138>)
  4068ac:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4068ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4068b2:	4619      	mov	r1, r3
  4068b4:	6878      	ldr	r0, [r7, #4]
  4068b6:	4b27      	ldr	r3, [pc, #156]	; (406954 <usart_serial_init+0x13c>)
  4068b8:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4068ba:	687b      	ldr	r3, [r7, #4]
  4068bc:	4a29      	ldr	r2, [pc, #164]	; (406964 <usart_serial_init+0x14c>)
  4068be:	4293      	cmp	r3, r2
  4068c0:	d111      	bne.n	4068e6 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4068c2:	200d      	movs	r0, #13
  4068c4:	4b22      	ldr	r3, [pc, #136]	; (406950 <usart_serial_init+0x138>)
  4068c6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4068c8:	4b1f      	ldr	r3, [pc, #124]	; (406948 <usart_serial_init+0x130>)
  4068ca:	4798      	blx	r3
  4068cc:	4602      	mov	r2, r0
  4068ce:	f107 030c 	add.w	r3, r7, #12
  4068d2:	4619      	mov	r1, r3
  4068d4:	6878      	ldr	r0, [r7, #4]
  4068d6:	4b24      	ldr	r3, [pc, #144]	; (406968 <usart_serial_init+0x150>)
  4068d8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4068da:	6878      	ldr	r0, [r7, #4]
  4068dc:	4b23      	ldr	r3, [pc, #140]	; (40696c <usart_serial_init+0x154>)
  4068de:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4068e0:	6878      	ldr	r0, [r7, #4]
  4068e2:	4b23      	ldr	r3, [pc, #140]	; (406970 <usart_serial_init+0x158>)
  4068e4:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4068e6:	687b      	ldr	r3, [r7, #4]
  4068e8:	4a22      	ldr	r2, [pc, #136]	; (406974 <usart_serial_init+0x15c>)
  4068ea:	4293      	cmp	r3, r2
  4068ec:	d111      	bne.n	406912 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4068ee:	200e      	movs	r0, #14
  4068f0:	4b17      	ldr	r3, [pc, #92]	; (406950 <usart_serial_init+0x138>)
  4068f2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4068f4:	4b14      	ldr	r3, [pc, #80]	; (406948 <usart_serial_init+0x130>)
  4068f6:	4798      	blx	r3
  4068f8:	4602      	mov	r2, r0
  4068fa:	f107 030c 	add.w	r3, r7, #12
  4068fe:	4619      	mov	r1, r3
  406900:	6878      	ldr	r0, [r7, #4]
  406902:	4b19      	ldr	r3, [pc, #100]	; (406968 <usart_serial_init+0x150>)
  406904:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406906:	6878      	ldr	r0, [r7, #4]
  406908:	4b18      	ldr	r3, [pc, #96]	; (40696c <usart_serial_init+0x154>)
  40690a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40690c:	6878      	ldr	r0, [r7, #4]
  40690e:	4b18      	ldr	r3, [pc, #96]	; (406970 <usart_serial_init+0x158>)
  406910:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406912:	687b      	ldr	r3, [r7, #4]
  406914:	4a18      	ldr	r2, [pc, #96]	; (406978 <usart_serial_init+0x160>)
  406916:	4293      	cmp	r3, r2
  406918:	d111      	bne.n	40693e <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  40691a:	200f      	movs	r0, #15
  40691c:	4b0c      	ldr	r3, [pc, #48]	; (406950 <usart_serial_init+0x138>)
  40691e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406920:	4b09      	ldr	r3, [pc, #36]	; (406948 <usart_serial_init+0x130>)
  406922:	4798      	blx	r3
  406924:	4602      	mov	r2, r0
  406926:	f107 030c 	add.w	r3, r7, #12
  40692a:	4619      	mov	r1, r3
  40692c:	6878      	ldr	r0, [r7, #4]
  40692e:	4b0e      	ldr	r3, [pc, #56]	; (406968 <usart_serial_init+0x150>)
  406930:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406932:	6878      	ldr	r0, [r7, #4]
  406934:	4b0d      	ldr	r3, [pc, #52]	; (40696c <usart_serial_init+0x154>)
  406936:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406938:	6878      	ldr	r0, [r7, #4]
  40693a:	4b0d      	ldr	r3, [pc, #52]	; (406970 <usart_serial_init+0x158>)
  40693c:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  40693e:	bf00      	nop
  406940:	3730      	adds	r7, #48	; 0x30
  406942:	46bd      	mov	sp, r7
  406944:	bd80      	pop	{r7, pc}
  406946:	bf00      	nop
  406948:	004067e9 	.word	0x004067e9
  40694c:	400e0800 	.word	0x400e0800
  406950:	004067fd 	.word	0x004067fd
  406954:	00405f61 	.word	0x00405f61
  406958:	400e0a00 	.word	0x400e0a00
  40695c:	400e1a00 	.word	0x400e1a00
  406960:	400e1c00 	.word	0x400e1c00
  406964:	40024000 	.word	0x40024000
  406968:	004060fd 	.word	0x004060fd
  40696c:	00406181 	.word	0x00406181
  406970:	004061b9 	.word	0x004061b9
  406974:	40028000 	.word	0x40028000
  406978:	4002c000 	.word	0x4002c000

0040697c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40697c:	b580      	push	{r7, lr}
  40697e:	b082      	sub	sp, #8
  406980:	af00      	add	r7, sp, #0
  406982:	6078      	str	r0, [r7, #4]
  406984:	460b      	mov	r3, r1
  406986:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406988:	687b      	ldr	r3, [r7, #4]
  40698a:	4a36      	ldr	r2, [pc, #216]	; (406a64 <usart_serial_putchar+0xe8>)
  40698c:	4293      	cmp	r3, r2
  40698e:	d10a      	bne.n	4069a6 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  406990:	bf00      	nop
  406992:	78fb      	ldrb	r3, [r7, #3]
  406994:	4619      	mov	r1, r3
  406996:	6878      	ldr	r0, [r7, #4]
  406998:	4b33      	ldr	r3, [pc, #204]	; (406a68 <usart_serial_putchar+0xec>)
  40699a:	4798      	blx	r3
  40699c:	4603      	mov	r3, r0
  40699e:	2b00      	cmp	r3, #0
  4069a0:	d1f7      	bne.n	406992 <usart_serial_putchar+0x16>
		return 1;
  4069a2:	2301      	movs	r3, #1
  4069a4:	e05a      	b.n	406a5c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4069a6:	687b      	ldr	r3, [r7, #4]
  4069a8:	4a30      	ldr	r2, [pc, #192]	; (406a6c <usart_serial_putchar+0xf0>)
  4069aa:	4293      	cmp	r3, r2
  4069ac:	d10a      	bne.n	4069c4 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  4069ae:	bf00      	nop
  4069b0:	78fb      	ldrb	r3, [r7, #3]
  4069b2:	4619      	mov	r1, r3
  4069b4:	6878      	ldr	r0, [r7, #4]
  4069b6:	4b2c      	ldr	r3, [pc, #176]	; (406a68 <usart_serial_putchar+0xec>)
  4069b8:	4798      	blx	r3
  4069ba:	4603      	mov	r3, r0
  4069bc:	2b00      	cmp	r3, #0
  4069be:	d1f7      	bne.n	4069b0 <usart_serial_putchar+0x34>
		return 1;
  4069c0:	2301      	movs	r3, #1
  4069c2:	e04b      	b.n	406a5c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4069c4:	687b      	ldr	r3, [r7, #4]
  4069c6:	4a2a      	ldr	r2, [pc, #168]	; (406a70 <usart_serial_putchar+0xf4>)
  4069c8:	4293      	cmp	r3, r2
  4069ca:	d10a      	bne.n	4069e2 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  4069cc:	bf00      	nop
  4069ce:	78fb      	ldrb	r3, [r7, #3]
  4069d0:	4619      	mov	r1, r3
  4069d2:	6878      	ldr	r0, [r7, #4]
  4069d4:	4b24      	ldr	r3, [pc, #144]	; (406a68 <usart_serial_putchar+0xec>)
  4069d6:	4798      	blx	r3
  4069d8:	4603      	mov	r3, r0
  4069da:	2b00      	cmp	r3, #0
  4069dc:	d1f7      	bne.n	4069ce <usart_serial_putchar+0x52>
		return 1;
  4069de:	2301      	movs	r3, #1
  4069e0:	e03c      	b.n	406a5c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4069e2:	687b      	ldr	r3, [r7, #4]
  4069e4:	4a23      	ldr	r2, [pc, #140]	; (406a74 <usart_serial_putchar+0xf8>)
  4069e6:	4293      	cmp	r3, r2
  4069e8:	d10a      	bne.n	406a00 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4069ea:	bf00      	nop
  4069ec:	78fb      	ldrb	r3, [r7, #3]
  4069ee:	4619      	mov	r1, r3
  4069f0:	6878      	ldr	r0, [r7, #4]
  4069f2:	4b1d      	ldr	r3, [pc, #116]	; (406a68 <usart_serial_putchar+0xec>)
  4069f4:	4798      	blx	r3
  4069f6:	4603      	mov	r3, r0
  4069f8:	2b00      	cmp	r3, #0
  4069fa:	d1f7      	bne.n	4069ec <usart_serial_putchar+0x70>
		return 1;
  4069fc:	2301      	movs	r3, #1
  4069fe:	e02d      	b.n	406a5c <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406a00:	687b      	ldr	r3, [r7, #4]
  406a02:	4a1d      	ldr	r2, [pc, #116]	; (406a78 <usart_serial_putchar+0xfc>)
  406a04:	4293      	cmp	r3, r2
  406a06:	d10a      	bne.n	406a1e <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  406a08:	bf00      	nop
  406a0a:	78fb      	ldrb	r3, [r7, #3]
  406a0c:	4619      	mov	r1, r3
  406a0e:	6878      	ldr	r0, [r7, #4]
  406a10:	4b1a      	ldr	r3, [pc, #104]	; (406a7c <usart_serial_putchar+0x100>)
  406a12:	4798      	blx	r3
  406a14:	4603      	mov	r3, r0
  406a16:	2b00      	cmp	r3, #0
  406a18:	d1f7      	bne.n	406a0a <usart_serial_putchar+0x8e>
		return 1;
  406a1a:	2301      	movs	r3, #1
  406a1c:	e01e      	b.n	406a5c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  406a1e:	687b      	ldr	r3, [r7, #4]
  406a20:	4a17      	ldr	r2, [pc, #92]	; (406a80 <usart_serial_putchar+0x104>)
  406a22:	4293      	cmp	r3, r2
  406a24:	d10a      	bne.n	406a3c <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  406a26:	bf00      	nop
  406a28:	78fb      	ldrb	r3, [r7, #3]
  406a2a:	4619      	mov	r1, r3
  406a2c:	6878      	ldr	r0, [r7, #4]
  406a2e:	4b13      	ldr	r3, [pc, #76]	; (406a7c <usart_serial_putchar+0x100>)
  406a30:	4798      	blx	r3
  406a32:	4603      	mov	r3, r0
  406a34:	2b00      	cmp	r3, #0
  406a36:	d1f7      	bne.n	406a28 <usart_serial_putchar+0xac>
		return 1;
  406a38:	2301      	movs	r3, #1
  406a3a:	e00f      	b.n	406a5c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406a3c:	687b      	ldr	r3, [r7, #4]
  406a3e:	4a11      	ldr	r2, [pc, #68]	; (406a84 <usart_serial_putchar+0x108>)
  406a40:	4293      	cmp	r3, r2
  406a42:	d10a      	bne.n	406a5a <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  406a44:	bf00      	nop
  406a46:	78fb      	ldrb	r3, [r7, #3]
  406a48:	4619      	mov	r1, r3
  406a4a:	6878      	ldr	r0, [r7, #4]
  406a4c:	4b0b      	ldr	r3, [pc, #44]	; (406a7c <usart_serial_putchar+0x100>)
  406a4e:	4798      	blx	r3
  406a50:	4603      	mov	r3, r0
  406a52:	2b00      	cmp	r3, #0
  406a54:	d1f7      	bne.n	406a46 <usart_serial_putchar+0xca>
		return 1;
  406a56:	2301      	movs	r3, #1
  406a58:	e000      	b.n	406a5c <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  406a5a:	2300      	movs	r3, #0
}
  406a5c:	4618      	mov	r0, r3
  406a5e:	3708      	adds	r7, #8
  406a60:	46bd      	mov	sp, r7
  406a62:	bd80      	pop	{r7, pc}
  406a64:	400e0800 	.word	0x400e0800
  406a68:	00405fb9 	.word	0x00405fb9
  406a6c:	400e0a00 	.word	0x400e0a00
  406a70:	400e1a00 	.word	0x400e1a00
  406a74:	400e1c00 	.word	0x400e1c00
  406a78:	40024000 	.word	0x40024000
  406a7c:	00406229 	.word	0x00406229
  406a80:	40028000 	.word	0x40028000
  406a84:	4002c000 	.word	0x4002c000

00406a88 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  406a88:	b580      	push	{r7, lr}
  406a8a:	b084      	sub	sp, #16
  406a8c:	af00      	add	r7, sp, #0
  406a8e:	6078      	str	r0, [r7, #4]
  406a90:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  406a92:	2300      	movs	r3, #0
  406a94:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406a96:	687b      	ldr	r3, [r7, #4]
  406a98:	4a34      	ldr	r2, [pc, #208]	; (406b6c <usart_serial_getchar+0xe4>)
  406a9a:	4293      	cmp	r3, r2
  406a9c:	d107      	bne.n	406aae <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  406a9e:	bf00      	nop
  406aa0:	6839      	ldr	r1, [r7, #0]
  406aa2:	6878      	ldr	r0, [r7, #4]
  406aa4:	4b32      	ldr	r3, [pc, #200]	; (406b70 <usart_serial_getchar+0xe8>)
  406aa6:	4798      	blx	r3
  406aa8:	4603      	mov	r3, r0
  406aaa:	2b00      	cmp	r3, #0
  406aac:	d1f8      	bne.n	406aa0 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  406aae:	687b      	ldr	r3, [r7, #4]
  406ab0:	4a30      	ldr	r2, [pc, #192]	; (406b74 <usart_serial_getchar+0xec>)
  406ab2:	4293      	cmp	r3, r2
  406ab4:	d107      	bne.n	406ac6 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  406ab6:	bf00      	nop
  406ab8:	6839      	ldr	r1, [r7, #0]
  406aba:	6878      	ldr	r0, [r7, #4]
  406abc:	4b2c      	ldr	r3, [pc, #176]	; (406b70 <usart_serial_getchar+0xe8>)
  406abe:	4798      	blx	r3
  406ac0:	4603      	mov	r3, r0
  406ac2:	2b00      	cmp	r3, #0
  406ac4:	d1f8      	bne.n	406ab8 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406ac6:	687b      	ldr	r3, [r7, #4]
  406ac8:	4a2b      	ldr	r2, [pc, #172]	; (406b78 <usart_serial_getchar+0xf0>)
  406aca:	4293      	cmp	r3, r2
  406acc:	d107      	bne.n	406ade <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  406ace:	bf00      	nop
  406ad0:	6839      	ldr	r1, [r7, #0]
  406ad2:	6878      	ldr	r0, [r7, #4]
  406ad4:	4b26      	ldr	r3, [pc, #152]	; (406b70 <usart_serial_getchar+0xe8>)
  406ad6:	4798      	blx	r3
  406ad8:	4603      	mov	r3, r0
  406ada:	2b00      	cmp	r3, #0
  406adc:	d1f8      	bne.n	406ad0 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  406ade:	687b      	ldr	r3, [r7, #4]
  406ae0:	4a26      	ldr	r2, [pc, #152]	; (406b7c <usart_serial_getchar+0xf4>)
  406ae2:	4293      	cmp	r3, r2
  406ae4:	d107      	bne.n	406af6 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  406ae6:	bf00      	nop
  406ae8:	6839      	ldr	r1, [r7, #0]
  406aea:	6878      	ldr	r0, [r7, #4]
  406aec:	4b20      	ldr	r3, [pc, #128]	; (406b70 <usart_serial_getchar+0xe8>)
  406aee:	4798      	blx	r3
  406af0:	4603      	mov	r3, r0
  406af2:	2b00      	cmp	r3, #0
  406af4:	d1f8      	bne.n	406ae8 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406af6:	687b      	ldr	r3, [r7, #4]
  406af8:	4a21      	ldr	r2, [pc, #132]	; (406b80 <usart_serial_getchar+0xf8>)
  406afa:	4293      	cmp	r3, r2
  406afc:	d10d      	bne.n	406b1a <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  406afe:	bf00      	nop
  406b00:	f107 030c 	add.w	r3, r7, #12
  406b04:	4619      	mov	r1, r3
  406b06:	6878      	ldr	r0, [r7, #4]
  406b08:	4b1e      	ldr	r3, [pc, #120]	; (406b84 <usart_serial_getchar+0xfc>)
  406b0a:	4798      	blx	r3
  406b0c:	4603      	mov	r3, r0
  406b0e:	2b00      	cmp	r3, #0
  406b10:	d1f6      	bne.n	406b00 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  406b12:	68fb      	ldr	r3, [r7, #12]
  406b14:	b2da      	uxtb	r2, r3
  406b16:	683b      	ldr	r3, [r7, #0]
  406b18:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  406b1a:	687b      	ldr	r3, [r7, #4]
  406b1c:	4a1a      	ldr	r2, [pc, #104]	; (406b88 <usart_serial_getchar+0x100>)
  406b1e:	4293      	cmp	r3, r2
  406b20:	d10d      	bne.n	406b3e <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  406b22:	bf00      	nop
  406b24:	f107 030c 	add.w	r3, r7, #12
  406b28:	4619      	mov	r1, r3
  406b2a:	6878      	ldr	r0, [r7, #4]
  406b2c:	4b15      	ldr	r3, [pc, #84]	; (406b84 <usart_serial_getchar+0xfc>)
  406b2e:	4798      	blx	r3
  406b30:	4603      	mov	r3, r0
  406b32:	2b00      	cmp	r3, #0
  406b34:	d1f6      	bne.n	406b24 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  406b36:	68fb      	ldr	r3, [r7, #12]
  406b38:	b2da      	uxtb	r2, r3
  406b3a:	683b      	ldr	r3, [r7, #0]
  406b3c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406b3e:	687b      	ldr	r3, [r7, #4]
  406b40:	4a12      	ldr	r2, [pc, #72]	; (406b8c <usart_serial_getchar+0x104>)
  406b42:	4293      	cmp	r3, r2
  406b44:	d10d      	bne.n	406b62 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  406b46:	bf00      	nop
  406b48:	f107 030c 	add.w	r3, r7, #12
  406b4c:	4619      	mov	r1, r3
  406b4e:	6878      	ldr	r0, [r7, #4]
  406b50:	4b0c      	ldr	r3, [pc, #48]	; (406b84 <usart_serial_getchar+0xfc>)
  406b52:	4798      	blx	r3
  406b54:	4603      	mov	r3, r0
  406b56:	2b00      	cmp	r3, #0
  406b58:	d1f6      	bne.n	406b48 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  406b5a:	68fb      	ldr	r3, [r7, #12]
  406b5c:	b2da      	uxtb	r2, r3
  406b5e:	683b      	ldr	r3, [r7, #0]
  406b60:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  406b62:	bf00      	nop
  406b64:	3710      	adds	r7, #16
  406b66:	46bd      	mov	sp, r7
  406b68:	bd80      	pop	{r7, pc}
  406b6a:	bf00      	nop
  406b6c:	400e0800 	.word	0x400e0800
  406b70:	00405fe9 	.word	0x00405fe9
  406b74:	400e0a00 	.word	0x400e0a00
  406b78:	400e1a00 	.word	0x400e1a00
  406b7c:	400e1c00 	.word	0x400e1c00
  406b80:	40024000 	.word	0x40024000
  406b84:	0040625d 	.word	0x0040625d
  406b88:	40028000 	.word	0x40028000
  406b8c:	4002c000 	.word	0x4002c000

00406b90 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  406b90:	b580      	push	{r7, lr}
  406b92:	b082      	sub	sp, #8
  406b94:	af00      	add	r7, sp, #0
  406b96:	6078      	str	r0, [r7, #4]
  406b98:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  406b9a:	4a0f      	ldr	r2, [pc, #60]	; (406bd8 <stdio_serial_init+0x48>)
  406b9c:	687b      	ldr	r3, [r7, #4]
  406b9e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  406ba0:	4b0e      	ldr	r3, [pc, #56]	; (406bdc <stdio_serial_init+0x4c>)
  406ba2:	4a0f      	ldr	r2, [pc, #60]	; (406be0 <stdio_serial_init+0x50>)
  406ba4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  406ba6:	4b0f      	ldr	r3, [pc, #60]	; (406be4 <stdio_serial_init+0x54>)
  406ba8:	4a0f      	ldr	r2, [pc, #60]	; (406be8 <stdio_serial_init+0x58>)
  406baa:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  406bac:	6839      	ldr	r1, [r7, #0]
  406bae:	6878      	ldr	r0, [r7, #4]
  406bb0:	4b0e      	ldr	r3, [pc, #56]	; (406bec <stdio_serial_init+0x5c>)
  406bb2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  406bb4:	4b0e      	ldr	r3, [pc, #56]	; (406bf0 <stdio_serial_init+0x60>)
  406bb6:	681b      	ldr	r3, [r3, #0]
  406bb8:	689b      	ldr	r3, [r3, #8]
  406bba:	2100      	movs	r1, #0
  406bbc:	4618      	mov	r0, r3
  406bbe:	4b0d      	ldr	r3, [pc, #52]	; (406bf4 <stdio_serial_init+0x64>)
  406bc0:	4798      	blx	r3
	setbuf(stdin, NULL);
  406bc2:	4b0b      	ldr	r3, [pc, #44]	; (406bf0 <stdio_serial_init+0x60>)
  406bc4:	681b      	ldr	r3, [r3, #0]
  406bc6:	685b      	ldr	r3, [r3, #4]
  406bc8:	2100      	movs	r1, #0
  406bca:	4618      	mov	r0, r3
  406bcc:	4b09      	ldr	r3, [pc, #36]	; (406bf4 <stdio_serial_init+0x64>)
  406bce:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  406bd0:	bf00      	nop
  406bd2:	3708      	adds	r7, #8
  406bd4:	46bd      	mov	sp, r7
  406bd6:	bd80      	pop	{r7, pc}
  406bd8:	20401ba8 	.word	0x20401ba8
  406bdc:	20401ba4 	.word	0x20401ba4
  406be0:	0040697d 	.word	0x0040697d
  406be4:	20401ba0 	.word	0x20401ba0
  406be8:	00406a89 	.word	0x00406a89
  406bec:	00406819 	.word	0x00406819
  406bf0:	20400448 	.word	0x20400448
  406bf4:	00407aa9 	.word	0x00407aa9

00406bf8 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
  406bf8:	b590      	push	{r4, r7, lr}
  406bfa:	b085      	sub	sp, #20
  406bfc:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  406bfe:	4b08      	ldr	r3, [pc, #32]	; (406c20 <configure_console+0x28>)
  406c00:	463c      	mov	r4, r7
  406c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  406c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype =	CONF_UART_PARITY,
		.stopbits =		CONF_UART_STOP_BITS,
	};

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  406c08:	200e      	movs	r0, #14
  406c0a:	4b06      	ldr	r3, [pc, #24]	; (406c24 <configure_console+0x2c>)
  406c0c:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  406c0e:	463b      	mov	r3, r7
  406c10:	4619      	mov	r1, r3
  406c12:	4805      	ldr	r0, [pc, #20]	; (406c28 <configure_console+0x30>)
  406c14:	4b05      	ldr	r3, [pc, #20]	; (406c2c <configure_console+0x34>)
  406c16:	4798      	blx	r3
}
  406c18:	bf00      	nop
  406c1a:	3714      	adds	r7, #20
  406c1c:	46bd      	mov	sp, r7
  406c1e:	bd90      	pop	{r4, r7, pc}
  406c20:	0040ed48 	.word	0x0040ed48
  406c24:	004067fd 	.word	0x004067fd
  406c28:	40028000 	.word	0x40028000
  406c2c:	00406b91 	.word	0x00406b91

00406c30 <TC_init>:

/**
 * @Brief Inicializa o pino do LED
 */

void TC_init( Tc *TC, uint32_t ID_TC,  uint32_t channel, uint32_t freq ){
  406c30:	b590      	push	{r4, r7, lr}
  406c32:	b08b      	sub	sp, #44	; 0x2c
  406c34:	af02      	add	r7, sp, #8
  406c36:	60f8      	str	r0, [r7, #12]
  406c38:	60b9      	str	r1, [r7, #8]
  406c3a:	607a      	str	r2, [r7, #4]
  406c3c:	603b      	str	r3, [r7, #0]
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
  406c3e:	4b1b      	ldr	r3, [pc, #108]	; (406cac <TC_init+0x7c>)
  406c40:	4798      	blx	r3
  406c42:	61f8      	str	r0, [r7, #28]
	
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_TC);
  406c44:	68b8      	ldr	r0, [r7, #8]
  406c46:	4b1a      	ldr	r3, [pc, #104]	; (406cb0 <TC_init+0x80>)
  406c48:	4798      	blx	r3

	/** Configura o TC para operar em  4Mhz e interrup�c�o no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  406c4a:	f107 0114 	add.w	r1, r7, #20
  406c4e:	f107 0218 	add.w	r2, r7, #24
  406c52:	69fb      	ldr	r3, [r7, #28]
  406c54:	9300      	str	r3, [sp, #0]
  406c56:	460b      	mov	r3, r1
  406c58:	69f9      	ldr	r1, [r7, #28]
  406c5a:	6838      	ldr	r0, [r7, #0]
  406c5c:	4c15      	ldr	r4, [pc, #84]	; (406cb4 <TC_init+0x84>)
  406c5e:	47a0      	blx	r4
	tc_init(TC, channel, ul_tcclks | TC_CMR_CPCTRG);
  406c60:	697b      	ldr	r3, [r7, #20]
  406c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  406c66:	461a      	mov	r2, r3
  406c68:	6879      	ldr	r1, [r7, #4]
  406c6a:	68f8      	ldr	r0, [r7, #12]
  406c6c:	4b12      	ldr	r3, [pc, #72]	; (406cb8 <TC_init+0x88>)
  406c6e:	4798      	blx	r3
	tc_write_rc(TC, channel, (ul_sysclk / ul_div) / freq);
  406c70:	69bb      	ldr	r3, [r7, #24]
  406c72:	69fa      	ldr	r2, [r7, #28]
  406c74:	fbb2 f2f3 	udiv	r2, r2, r3
  406c78:	683b      	ldr	r3, [r7, #0]
  406c7a:	fbb2 f3f3 	udiv	r3, r2, r3
  406c7e:	461a      	mov	r2, r3
  406c80:	6879      	ldr	r1, [r7, #4]
  406c82:	68f8      	ldr	r0, [r7, #12]
  406c84:	4b0d      	ldr	r3, [pc, #52]	; (406cbc <TC_init+0x8c>)
  406c86:	4798      	blx	r3

	/* Configura e ativa interrup�c�o no TC canal 0 */
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
  406c88:	68bb      	ldr	r3, [r7, #8]
  406c8a:	b25b      	sxtb	r3, r3
  406c8c:	4618      	mov	r0, r3
  406c8e:	4b0c      	ldr	r3, [pc, #48]	; (406cc0 <TC_init+0x90>)
  406c90:	4798      	blx	r3
	tc_enable_interrupt(TC, channel, TC_IER_CPCS);
  406c92:	2210      	movs	r2, #16
  406c94:	6879      	ldr	r1, [r7, #4]
  406c96:	68f8      	ldr	r0, [r7, #12]
  406c98:	4b0a      	ldr	r3, [pc, #40]	; (406cc4 <TC_init+0x94>)
  406c9a:	4798      	blx	r3


	/* Inicializa o canal 0 do TC */
	tc_start(TC, channel);
  406c9c:	6879      	ldr	r1, [r7, #4]
  406c9e:	68f8      	ldr	r0, [r7, #12]
  406ca0:	4b09      	ldr	r3, [pc, #36]	; (406cc8 <TC_init+0x98>)
  406ca2:	4798      	blx	r3
}
  406ca4:	bf00      	nop
  406ca6:	3724      	adds	r7, #36	; 0x24
  406ca8:	46bd      	mov	sp, r7
  406caa:	bd90      	pop	{r4, r7, pc}
  406cac:	004067d5 	.word	0x004067d5
  406cb0:	004059d5 	.word	0x004059d5
  406cb4:	00405eb9 	.word	0x00405eb9
  406cb8:	00405de5 	.word	0x00405de5
  406cbc:	00405e45 	.word	0x00405e45
  406cc0:	004066b9 	.word	0x004066b9
  406cc4:	00405e6d 	.word	0x00405e6d
  406cc8:	00405e21 	.word	0x00405e21

00406ccc <TC0_Handler>:

/************************************************************************/
/*  Handlers                                                           */
/************************************************************************/
void TC0_Handler(void){
  406ccc:	b590      	push	{r4, r7, lr}
  406cce:	b083      	sub	sp, #12
  406cd0:	af00      	add	r7, sp, #0
	volatile uint32_t ul_dummy;

    /****************************************************************
	* Devemos indicar ao TC que a interrup��o foi satisfeita.
    ******************************************************************/
	ul_dummy = tc_get_status(TC0, 0);
  406cd2:	2100      	movs	r1, #0
  406cd4:	481f      	ldr	r0, [pc, #124]	; (406d54 <TC0_Handler+0x88>)
  406cd6:	4b20      	ldr	r3, [pc, #128]	; (406d58 <TC0_Handler+0x8c>)
  406cd8:	4798      	blx	r3
  406cda:	4603      	mov	r3, r0
  406cdc:	607b      	str	r3, [r7, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  406cde:	687b      	ldr	r3, [r7, #4]

	if(ready_to_send){
  406ce0:	4b1e      	ldr	r3, [pc, #120]	; (406d5c <TC0_Handler+0x90>)
  406ce2:	681b      	ldr	r3, [r3, #0]
  406ce4:	2b00      	cmp	r3, #0
  406ce6:	d031      	beq.n	406d4c <TC0_Handler+0x80>
	  memset(gau8SentBuffer, 0, sizeof(gau8SentBuffer));
  406ce8:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406cec:	2100      	movs	r1, #0
  406cee:	481c      	ldr	r0, [pc, #112]	; (406d60 <TC0_Handler+0x94>)
  406cf0:	4b1c      	ldr	r3, [pc, #112]	; (406d64 <TC0_Handler+0x98>)
  406cf2:	4798      	blx	r3
		memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  406cf4:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406cf8:	2100      	movs	r1, #0
  406cfa:	481b      	ldr	r0, [pc, #108]	; (406d68 <TC0_Handler+0x9c>)
  406cfc:	4b19      	ldr	r3, [pc, #100]	; (406d64 <TC0_Handler+0x98>)
  406cfe:	4798      	blx	r3
	  sprintf((char *)gau8SentBuffer, "%s%s",MAIN_PREFIX_BUFFER,MAIN_POST);
  406d00:	4b1a      	ldr	r3, [pc, #104]	; (406d6c <TC0_Handler+0xa0>)
  406d02:	4a1b      	ldr	r2, [pc, #108]	; (406d70 <TC0_Handler+0xa4>)
  406d04:	491b      	ldr	r1, [pc, #108]	; (406d74 <TC0_Handler+0xa8>)
  406d06:	4816      	ldr	r0, [pc, #88]	; (406d60 <TC0_Handler+0x94>)
  406d08:	4c1b      	ldr	r4, [pc, #108]	; (406d78 <TC0_Handler+0xac>)
  406d0a:	47a0      	blx	r4
		rtn = send(tcp_client_socket, gau8SentBuffer, strlen((char *)gau8SentBuffer), 0);
  406d0c:	4b1b      	ldr	r3, [pc, #108]	; (406d7c <TC0_Handler+0xb0>)
  406d0e:	f993 4000 	ldrsb.w	r4, [r3]
  406d12:	4813      	ldr	r0, [pc, #76]	; (406d60 <TC0_Handler+0x94>)
  406d14:	4b1a      	ldr	r3, [pc, #104]	; (406d80 <TC0_Handler+0xb4>)
  406d16:	4798      	blx	r3
  406d18:	4603      	mov	r3, r0
  406d1a:	b29a      	uxth	r2, r3
  406d1c:	2300      	movs	r3, #0
  406d1e:	4910      	ldr	r1, [pc, #64]	; (406d60 <TC0_Handler+0x94>)
  406d20:	4620      	mov	r0, r4
  406d22:	4c18      	ldr	r4, [pc, #96]	; (406d84 <TC0_Handler+0xb8>)
  406d24:	47a0      	blx	r4
  406d26:	4603      	mov	r3, r0
  406d28:	b29a      	uxth	r2, r3
  406d2a:	4b17      	ldr	r3, [pc, #92]	; (406d88 <TC0_Handler+0xbc>)
  406d2c:	801a      	strh	r2, [r3, #0]
	  recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  406d2e:	4b13      	ldr	r3, [pc, #76]	; (406d7c <TC0_Handler+0xb0>)
  406d30:	f993 0000 	ldrsb.w	r0, [r3]
  406d34:	2300      	movs	r3, #0
  406d36:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406d3a:	4914      	ldr	r1, [pc, #80]	; (406d8c <TC0_Handler+0xc0>)
  406d3c:	4c14      	ldr	r4, [pc, #80]	; (406d90 <TC0_Handler+0xc4>)
  406d3e:	47a0      	blx	r4
		printf("Pronto para enviar: %d \n", rtn);
  406d40:	4b11      	ldr	r3, [pc, #68]	; (406d88 <TC0_Handler+0xbc>)
  406d42:	881b      	ldrh	r3, [r3, #0]
  406d44:	4619      	mov	r1, r3
  406d46:	4813      	ldr	r0, [pc, #76]	; (406d94 <TC0_Handler+0xc8>)
  406d48:	4b13      	ldr	r3, [pc, #76]	; (406d98 <TC0_Handler+0xcc>)
  406d4a:	4798      	blx	r3
	}
}
  406d4c:	bf00      	nop
  406d4e:	370c      	adds	r7, #12
  406d50:	46bd      	mov	sp, r7
  406d52:	bd90      	pop	{r4, r7, pc}
  406d54:	4000c000 	.word	0x4000c000
  406d58:	00405e95 	.word	0x00405e95
  406d5c:	20401bd8 	.word	0x20401bd8
  406d60:	204014f8 	.word	0x204014f8
  406d64:	00407a0d 	.word	0x00407a0d
  406d68:	20400f44 	.word	0x20400f44
  406d6c:	0040ed58 	.word	0x0040ed58
  406d70:	0040ed74 	.word	0x0040ed74
  406d74:	0040ed84 	.word	0x0040ed84
  406d78:	00407c09 	.word	0x00407c09
  406d7c:	2040001c 	.word	0x2040001c
  406d80:	00407c81 	.word	0x00407c81
  406d84:	004040d9 	.word	0x004040d9
  406d88:	20401bc4 	.word	0x20401bc4
  406d8c:	2040098c 	.word	0x2040098c
  406d90:	004041c9 	.word	0x004041c9
  406d94:	0040ed8c 	.word	0x0040ed8c
  406d98:	004079e5 	.word	0x004079e5

00406d9c <but_Handler>:
/************************************************************************/
/*  CallBacks                                                           */
/************************************************************************/

void but_Handler(uint32_t id, uint32_t mask) {
  406d9c:	b590      	push	{r4, r7, lr}
  406d9e:	b087      	sub	sp, #28
  406da0:	af02      	add	r7, sp, #8
  406da2:	6078      	str	r0, [r7, #4]
  406da4:	6039      	str	r1, [r7, #0]
	printf("oi, sou o handler \n");
  406da6:	4821      	ldr	r0, [pc, #132]	; (406e2c <but_Handler+0x90>)
  406da8:	4b21      	ldr	r3, [pc, #132]	; (406e30 <but_Handler+0x94>)
  406daa:	4798      	blx	r3
	//limpa interrupcao do PIO
	uint32_t pioIntStatus;
	pioIntStatus =  pio_get_interrupt_status(BUT_PIO);
  406dac:	4821      	ldr	r0, [pc, #132]	; (406e34 <but_Handler+0x98>)
  406dae:	4b22      	ldr	r3, [pc, #136]	; (406e38 <but_Handler+0x9c>)
  406db0:	4798      	blx	r3
  406db2:	60f8      	str	r0, [r7, #12]
	
	uint16_t rtn_err;
	memset(gau8SentBuffer, 0, sizeof(gau8SentBuffer));
  406db4:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406db8:	2100      	movs	r1, #0
  406dba:	4820      	ldr	r0, [pc, #128]	; (406e3c <but_Handler+0xa0>)
  406dbc:	4b20      	ldr	r3, [pc, #128]	; (406e40 <but_Handler+0xa4>)
  406dbe:	4798      	blx	r3
	sprintf((char *)gau8SentBuffer, "%s%s%s", MAIN_PREFIX_BUFFER_POST, "0", MAIN_POST);
  406dc0:	4b20      	ldr	r3, [pc, #128]	; (406e44 <but_Handler+0xa8>)
  406dc2:	9300      	str	r3, [sp, #0]
  406dc4:	4b20      	ldr	r3, [pc, #128]	; (406e48 <but_Handler+0xac>)
  406dc6:	4a21      	ldr	r2, [pc, #132]	; (406e4c <but_Handler+0xb0>)
  406dc8:	4921      	ldr	r1, [pc, #132]	; (406e50 <but_Handler+0xb4>)
  406dca:	481c      	ldr	r0, [pc, #112]	; (406e3c <but_Handler+0xa0>)
  406dcc:	4c21      	ldr	r4, [pc, #132]	; (406e54 <but_Handler+0xb8>)
  406dce:	47a0      	blx	r4
	rtn_err = send(tcp_client_socket, gau8SentBuffer, strlen((char *)gau8SentBuffer), 0);
  406dd0:	4b21      	ldr	r3, [pc, #132]	; (406e58 <but_Handler+0xbc>)
  406dd2:	f993 4000 	ldrsb.w	r4, [r3]
  406dd6:	4819      	ldr	r0, [pc, #100]	; (406e3c <but_Handler+0xa0>)
  406dd8:	4b20      	ldr	r3, [pc, #128]	; (406e5c <but_Handler+0xc0>)
  406dda:	4798      	blx	r3
  406ddc:	4603      	mov	r3, r0
  406dde:	b29a      	uxth	r2, r3
  406de0:	2300      	movs	r3, #0
  406de2:	4916      	ldr	r1, [pc, #88]	; (406e3c <but_Handler+0xa0>)
  406de4:	4620      	mov	r0, r4
  406de6:	4c1e      	ldr	r4, [pc, #120]	; (406e60 <but_Handler+0xc4>)
  406de8:	47a0      	blx	r4
  406dea:	4603      	mov	r3, r0
  406dec:	817b      	strh	r3, [r7, #10]
	
	memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);	
  406dee:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406df2:	2100      	movs	r1, #0
  406df4:	481b      	ldr	r0, [pc, #108]	; (406e64 <but_Handler+0xc8>)
  406df6:	4b12      	ldr	r3, [pc, #72]	; (406e40 <but_Handler+0xa4>)
  406df8:	4798      	blx	r3
	recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  406dfa:	4b17      	ldr	r3, [pc, #92]	; (406e58 <but_Handler+0xbc>)
  406dfc:	f993 0000 	ldrsb.w	r0, [r3]
  406e00:	2300      	movs	r3, #0
  406e02:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406e06:	4918      	ldr	r1, [pc, #96]	; (406e68 <but_Handler+0xcc>)
  406e08:	4c18      	ldr	r4, [pc, #96]	; (406e6c <but_Handler+0xd0>)
  406e0a:	47a0      	blx	r4

	printf("rtn_err: %d \n", rtn_err);
  406e0c:	897b      	ldrh	r3, [r7, #10]
  406e0e:	4619      	mov	r1, r3
  406e10:	4817      	ldr	r0, [pc, #92]	; (406e70 <but_Handler+0xd4>)
  406e12:	4b07      	ldr	r3, [pc, #28]	; (406e30 <but_Handler+0x94>)
  406e14:	4798      	blx	r3
	memset(gau8SentBuffer, 0, sizeof(gau8SentBuffer));
  406e16:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406e1a:	2100      	movs	r1, #0
  406e1c:	4807      	ldr	r0, [pc, #28]	; (406e3c <but_Handler+0xa0>)
  406e1e:	4b08      	ldr	r3, [pc, #32]	; (406e40 <but_Handler+0xa4>)
  406e20:	4798      	blx	r3
}
  406e22:	bf00      	nop
  406e24:	3714      	adds	r7, #20
  406e26:	46bd      	mov	sp, r7
  406e28:	bd90      	pop	{r4, r7, pc}
  406e2a:	bf00      	nop
  406e2c:	0040eda8 	.word	0x0040eda8
  406e30:	004079e5 	.word	0x004079e5
  406e34:	400e0e00 	.word	0x400e0e00
  406e38:	004051c9 	.word	0x004051c9
  406e3c:	204014f8 	.word	0x204014f8
  406e40:	00407a0d 	.word	0x00407a0d
  406e44:	0040ed58 	.word	0x0040ed58
  406e48:	0040edbc 	.word	0x0040edbc
  406e4c:	0040edc0 	.word	0x0040edc0
  406e50:	0040edd8 	.word	0x0040edd8
  406e54:	00407c09 	.word	0x00407c09
  406e58:	2040001c 	.word	0x2040001c
  406e5c:	00407c81 	.word	0x00407c81
  406e60:	004040d9 	.word	0x004040d9
  406e64:	20400f44 	.word	0x20400f44
  406e68:	2040098c 	.word	0x2040098c
  406e6c:	004041c9 	.word	0x004041c9
  406e70:	0040ede0 	.word	0x0040ede0

00406e74 <but1_Handler>:

void but1_Handler(uint32_t id, uint32_t mask) {
  406e74:	b590      	push	{r4, r7, lr}
  406e76:	b087      	sub	sp, #28
  406e78:	af02      	add	r7, sp, #8
  406e7a:	6078      	str	r0, [r7, #4]
  406e7c:	6039      	str	r1, [r7, #0]
	printf("oi, sou o handler \n");
  406e7e:	4821      	ldr	r0, [pc, #132]	; (406f04 <but1_Handler+0x90>)
  406e80:	4b21      	ldr	r3, [pc, #132]	; (406f08 <but1_Handler+0x94>)
  406e82:	4798      	blx	r3
	//limpa interrupcao do PIO
	uint32_t pioIntStatus;
	pioIntStatus =  pio_get_interrupt_status(BUT1_PIO);
  406e84:	4821      	ldr	r0, [pc, #132]	; (406f0c <but1_Handler+0x98>)
  406e86:	4b22      	ldr	r3, [pc, #136]	; (406f10 <but1_Handler+0x9c>)
  406e88:	4798      	blx	r3
  406e8a:	60f8      	str	r0, [r7, #12]
	
	uint16_t rtn_err;
	memset(gau8SentBuffer, 0, sizeof(gau8SentBuffer));
  406e8c:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406e90:	2100      	movs	r1, #0
  406e92:	4820      	ldr	r0, [pc, #128]	; (406f14 <but1_Handler+0xa0>)
  406e94:	4b20      	ldr	r3, [pc, #128]	; (406f18 <but1_Handler+0xa4>)
  406e96:	4798      	blx	r3
	sprintf((char *)gau8SentBuffer, "%s%s%s", MAIN_PREFIX_BUFFER_POST, "1", MAIN_POST);
  406e98:	4b20      	ldr	r3, [pc, #128]	; (406f1c <but1_Handler+0xa8>)
  406e9a:	9300      	str	r3, [sp, #0]
  406e9c:	4b20      	ldr	r3, [pc, #128]	; (406f20 <but1_Handler+0xac>)
  406e9e:	4a21      	ldr	r2, [pc, #132]	; (406f24 <but1_Handler+0xb0>)
  406ea0:	4921      	ldr	r1, [pc, #132]	; (406f28 <but1_Handler+0xb4>)
  406ea2:	481c      	ldr	r0, [pc, #112]	; (406f14 <but1_Handler+0xa0>)
  406ea4:	4c21      	ldr	r4, [pc, #132]	; (406f2c <but1_Handler+0xb8>)
  406ea6:	47a0      	blx	r4
	rtn_err = send(tcp_client_socket, gau8SentBuffer, strlen((char *)gau8SentBuffer), 0);
  406ea8:	4b21      	ldr	r3, [pc, #132]	; (406f30 <but1_Handler+0xbc>)
  406eaa:	f993 4000 	ldrsb.w	r4, [r3]
  406eae:	4819      	ldr	r0, [pc, #100]	; (406f14 <but1_Handler+0xa0>)
  406eb0:	4b20      	ldr	r3, [pc, #128]	; (406f34 <but1_Handler+0xc0>)
  406eb2:	4798      	blx	r3
  406eb4:	4603      	mov	r3, r0
  406eb6:	b29a      	uxth	r2, r3
  406eb8:	2300      	movs	r3, #0
  406eba:	4916      	ldr	r1, [pc, #88]	; (406f14 <but1_Handler+0xa0>)
  406ebc:	4620      	mov	r0, r4
  406ebe:	4c1e      	ldr	r4, [pc, #120]	; (406f38 <but1_Handler+0xc4>)
  406ec0:	47a0      	blx	r4
  406ec2:	4603      	mov	r3, r0
  406ec4:	817b      	strh	r3, [r7, #10]
	
	memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  406ec6:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406eca:	2100      	movs	r1, #0
  406ecc:	481b      	ldr	r0, [pc, #108]	; (406f3c <but1_Handler+0xc8>)
  406ece:	4b12      	ldr	r3, [pc, #72]	; (406f18 <but1_Handler+0xa4>)
  406ed0:	4798      	blx	r3
	recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  406ed2:	4b17      	ldr	r3, [pc, #92]	; (406f30 <but1_Handler+0xbc>)
  406ed4:	f993 0000 	ldrsb.w	r0, [r3]
  406ed8:	2300      	movs	r3, #0
  406eda:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406ede:	4918      	ldr	r1, [pc, #96]	; (406f40 <but1_Handler+0xcc>)
  406ee0:	4c18      	ldr	r4, [pc, #96]	; (406f44 <but1_Handler+0xd0>)
  406ee2:	47a0      	blx	r4

	printf("rtn_err: %d \n", rtn_err);
  406ee4:	897b      	ldrh	r3, [r7, #10]
  406ee6:	4619      	mov	r1, r3
  406ee8:	4817      	ldr	r0, [pc, #92]	; (406f48 <but1_Handler+0xd4>)
  406eea:	4b07      	ldr	r3, [pc, #28]	; (406f08 <but1_Handler+0x94>)
  406eec:	4798      	blx	r3
	memset(gau8SentBuffer, 0, sizeof(gau8SentBuffer));
  406eee:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406ef2:	2100      	movs	r1, #0
  406ef4:	4807      	ldr	r0, [pc, #28]	; (406f14 <but1_Handler+0xa0>)
  406ef6:	4b08      	ldr	r3, [pc, #32]	; (406f18 <but1_Handler+0xa4>)
  406ef8:	4798      	blx	r3
}
  406efa:	bf00      	nop
  406efc:	3714      	adds	r7, #20
  406efe:	46bd      	mov	sp, r7
  406f00:	bd90      	pop	{r4, r7, pc}
  406f02:	bf00      	nop
  406f04:	0040eda8 	.word	0x0040eda8
  406f08:	004079e5 	.word	0x004079e5
  406f0c:	400e0e00 	.word	0x400e0e00
  406f10:	004051c9 	.word	0x004051c9
  406f14:	204014f8 	.word	0x204014f8
  406f18:	00407a0d 	.word	0x00407a0d
  406f1c:	0040ed58 	.word	0x0040ed58
  406f20:	0040edf0 	.word	0x0040edf0
  406f24:	0040edc0 	.word	0x0040edc0
  406f28:	0040edd8 	.word	0x0040edd8
  406f2c:	00407c09 	.word	0x00407c09
  406f30:	2040001c 	.word	0x2040001c
  406f34:	00407c81 	.word	0x00407c81
  406f38:	004040d9 	.word	0x004040d9
  406f3c:	20400f44 	.word	0x20400f44
  406f40:	2040098c 	.word	0x2040098c
  406f44:	004041c9 	.word	0x004041c9
  406f48:	0040ede0 	.word	0x0040ede0

00406f4c <but2_Handler>:


void but2_Handler(uint32_t id, uint32_t mask) {
  406f4c:	b590      	push	{r4, r7, lr}
  406f4e:	b087      	sub	sp, #28
  406f50:	af02      	add	r7, sp, #8
  406f52:	6078      	str	r0, [r7, #4]
  406f54:	6039      	str	r1, [r7, #0]
	printf("oi, sou o handler \n");
  406f56:	4821      	ldr	r0, [pc, #132]	; (406fdc <but2_Handler+0x90>)
  406f58:	4b21      	ldr	r3, [pc, #132]	; (406fe0 <but2_Handler+0x94>)
  406f5a:	4798      	blx	r3
	//limpa interrupcao do PIO
	uint32_t pioIntStatus;
	pioIntStatus =  pio_get_interrupt_status(BUT2_PIO);
  406f5c:	4821      	ldr	r0, [pc, #132]	; (406fe4 <but2_Handler+0x98>)
  406f5e:	4b22      	ldr	r3, [pc, #136]	; (406fe8 <but2_Handler+0x9c>)
  406f60:	4798      	blx	r3
  406f62:	60f8      	str	r0, [r7, #12]
	
	uint16_t rtn_err;
	memset(gau8SentBuffer, 0, sizeof(gau8SentBuffer));
  406f64:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406f68:	2100      	movs	r1, #0
  406f6a:	4820      	ldr	r0, [pc, #128]	; (406fec <but2_Handler+0xa0>)
  406f6c:	4b20      	ldr	r3, [pc, #128]	; (406ff0 <but2_Handler+0xa4>)
  406f6e:	4798      	blx	r3
	sprintf((char *)gau8SentBuffer, "%s%s%s", MAIN_PREFIX_BUFFER_POST, "2", MAIN_POST);
  406f70:	4b20      	ldr	r3, [pc, #128]	; (406ff4 <but2_Handler+0xa8>)
  406f72:	9300      	str	r3, [sp, #0]
  406f74:	4b20      	ldr	r3, [pc, #128]	; (406ff8 <but2_Handler+0xac>)
  406f76:	4a21      	ldr	r2, [pc, #132]	; (406ffc <but2_Handler+0xb0>)
  406f78:	4921      	ldr	r1, [pc, #132]	; (407000 <but2_Handler+0xb4>)
  406f7a:	481c      	ldr	r0, [pc, #112]	; (406fec <but2_Handler+0xa0>)
  406f7c:	4c21      	ldr	r4, [pc, #132]	; (407004 <but2_Handler+0xb8>)
  406f7e:	47a0      	blx	r4
	rtn_err = send(tcp_client_socket, gau8SentBuffer, strlen((char *)gau8SentBuffer), 0);
  406f80:	4b21      	ldr	r3, [pc, #132]	; (407008 <but2_Handler+0xbc>)
  406f82:	f993 4000 	ldrsb.w	r4, [r3]
  406f86:	4819      	ldr	r0, [pc, #100]	; (406fec <but2_Handler+0xa0>)
  406f88:	4b20      	ldr	r3, [pc, #128]	; (40700c <but2_Handler+0xc0>)
  406f8a:	4798      	blx	r3
  406f8c:	4603      	mov	r3, r0
  406f8e:	b29a      	uxth	r2, r3
  406f90:	2300      	movs	r3, #0
  406f92:	4916      	ldr	r1, [pc, #88]	; (406fec <but2_Handler+0xa0>)
  406f94:	4620      	mov	r0, r4
  406f96:	4c1e      	ldr	r4, [pc, #120]	; (407010 <but2_Handler+0xc4>)
  406f98:	47a0      	blx	r4
  406f9a:	4603      	mov	r3, r0
  406f9c:	817b      	strh	r3, [r7, #10]
	
	memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  406f9e:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406fa2:	2100      	movs	r1, #0
  406fa4:	481b      	ldr	r0, [pc, #108]	; (407014 <but2_Handler+0xc8>)
  406fa6:	4b12      	ldr	r3, [pc, #72]	; (406ff0 <but2_Handler+0xa4>)
  406fa8:	4798      	blx	r3
	recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  406faa:	4b17      	ldr	r3, [pc, #92]	; (407008 <but2_Handler+0xbc>)
  406fac:	f993 0000 	ldrsb.w	r0, [r3]
  406fb0:	2300      	movs	r3, #0
  406fb2:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406fb6:	4918      	ldr	r1, [pc, #96]	; (407018 <but2_Handler+0xcc>)
  406fb8:	4c18      	ldr	r4, [pc, #96]	; (40701c <but2_Handler+0xd0>)
  406fba:	47a0      	blx	r4

	printf("rtn_err: %d \n", rtn_err);
  406fbc:	897b      	ldrh	r3, [r7, #10]
  406fbe:	4619      	mov	r1, r3
  406fc0:	4817      	ldr	r0, [pc, #92]	; (407020 <but2_Handler+0xd4>)
  406fc2:	4b07      	ldr	r3, [pc, #28]	; (406fe0 <but2_Handler+0x94>)
  406fc4:	4798      	blx	r3
	memset(gau8SentBuffer, 0, sizeof(gau8SentBuffer));
  406fc6:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406fca:	2100      	movs	r1, #0
  406fcc:	4807      	ldr	r0, [pc, #28]	; (406fec <but2_Handler+0xa0>)
  406fce:	4b08      	ldr	r3, [pc, #32]	; (406ff0 <but2_Handler+0xa4>)
  406fd0:	4798      	blx	r3
}
  406fd2:	bf00      	nop
  406fd4:	3714      	adds	r7, #20
  406fd6:	46bd      	mov	sp, r7
  406fd8:	bd90      	pop	{r4, r7, pc}
  406fda:	bf00      	nop
  406fdc:	0040eda8 	.word	0x0040eda8
  406fe0:	004079e5 	.word	0x004079e5
  406fe4:	400e1400 	.word	0x400e1400
  406fe8:	004051c9 	.word	0x004051c9
  406fec:	204014f8 	.word	0x204014f8
  406ff0:	00407a0d 	.word	0x00407a0d
  406ff4:	0040ed58 	.word	0x0040ed58
  406ff8:	0040edf4 	.word	0x0040edf4
  406ffc:	0040edc0 	.word	0x0040edc0
  407000:	0040edd8 	.word	0x0040edd8
  407004:	00407c09 	.word	0x00407c09
  407008:	2040001c 	.word	0x2040001c
  40700c:	00407c81 	.word	0x00407c81
  407010:	004040d9 	.word	0x004040d9
  407014:	20400f44 	.word	0x20400f44
  407018:	2040098c 	.word	0x2040098c
  40701c:	004041c9 	.word	0x004041c9
  407020:	0040ede0 	.word	0x0040ede0

00407024 <but3_Handler>:


void but3_Handler(uint32_t id, uint32_t mask) {
  407024:	b590      	push	{r4, r7, lr}
  407026:	b087      	sub	sp, #28
  407028:	af02      	add	r7, sp, #8
  40702a:	6078      	str	r0, [r7, #4]
  40702c:	6039      	str	r1, [r7, #0]
	printf("oi, sou o handler \n");
  40702e:	4821      	ldr	r0, [pc, #132]	; (4070b4 <but3_Handler+0x90>)
  407030:	4b21      	ldr	r3, [pc, #132]	; (4070b8 <but3_Handler+0x94>)
  407032:	4798      	blx	r3
	//limpa interrupcao do PIO
	uint32_t pioIntStatus;
	pioIntStatus =  pio_get_interrupt_status(BUT3_PIO);
  407034:	4821      	ldr	r0, [pc, #132]	; (4070bc <but3_Handler+0x98>)
  407036:	4b22      	ldr	r3, [pc, #136]	; (4070c0 <but3_Handler+0x9c>)
  407038:	4798      	blx	r3
  40703a:	60f8      	str	r0, [r7, #12]
	
	uint16_t rtn_err;
	memset(gau8SentBuffer, 0, sizeof(gau8SentBuffer));
  40703c:	f240 52b4 	movw	r2, #1460	; 0x5b4
  407040:	2100      	movs	r1, #0
  407042:	4820      	ldr	r0, [pc, #128]	; (4070c4 <but3_Handler+0xa0>)
  407044:	4b20      	ldr	r3, [pc, #128]	; (4070c8 <but3_Handler+0xa4>)
  407046:	4798      	blx	r3
	sprintf((char *)gau8SentBuffer, "%s%s%s", MAIN_PREFIX_BUFFER_POST, "3", MAIN_POST);
  407048:	4b20      	ldr	r3, [pc, #128]	; (4070cc <but3_Handler+0xa8>)
  40704a:	9300      	str	r3, [sp, #0]
  40704c:	4b20      	ldr	r3, [pc, #128]	; (4070d0 <but3_Handler+0xac>)
  40704e:	4a21      	ldr	r2, [pc, #132]	; (4070d4 <but3_Handler+0xb0>)
  407050:	4921      	ldr	r1, [pc, #132]	; (4070d8 <but3_Handler+0xb4>)
  407052:	481c      	ldr	r0, [pc, #112]	; (4070c4 <but3_Handler+0xa0>)
  407054:	4c21      	ldr	r4, [pc, #132]	; (4070dc <but3_Handler+0xb8>)
  407056:	47a0      	blx	r4
	rtn_err = send(tcp_client_socket, gau8SentBuffer, strlen((char *)gau8SentBuffer), 0);
  407058:	4b21      	ldr	r3, [pc, #132]	; (4070e0 <but3_Handler+0xbc>)
  40705a:	f993 4000 	ldrsb.w	r4, [r3]
  40705e:	4819      	ldr	r0, [pc, #100]	; (4070c4 <but3_Handler+0xa0>)
  407060:	4b20      	ldr	r3, [pc, #128]	; (4070e4 <but3_Handler+0xc0>)
  407062:	4798      	blx	r3
  407064:	4603      	mov	r3, r0
  407066:	b29a      	uxth	r2, r3
  407068:	2300      	movs	r3, #0
  40706a:	4916      	ldr	r1, [pc, #88]	; (4070c4 <but3_Handler+0xa0>)
  40706c:	4620      	mov	r0, r4
  40706e:	4c1e      	ldr	r4, [pc, #120]	; (4070e8 <but3_Handler+0xc4>)
  407070:	47a0      	blx	r4
  407072:	4603      	mov	r3, r0
  407074:	817b      	strh	r3, [r7, #10]
	
	memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  407076:	f240 52b4 	movw	r2, #1460	; 0x5b4
  40707a:	2100      	movs	r1, #0
  40707c:	481b      	ldr	r0, [pc, #108]	; (4070ec <but3_Handler+0xc8>)
  40707e:	4b12      	ldr	r3, [pc, #72]	; (4070c8 <but3_Handler+0xa4>)
  407080:	4798      	blx	r3
	recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  407082:	4b17      	ldr	r3, [pc, #92]	; (4070e0 <but3_Handler+0xbc>)
  407084:	f993 0000 	ldrsb.w	r0, [r3]
  407088:	2300      	movs	r3, #0
  40708a:	f240 52b4 	movw	r2, #1460	; 0x5b4
  40708e:	4918      	ldr	r1, [pc, #96]	; (4070f0 <but3_Handler+0xcc>)
  407090:	4c18      	ldr	r4, [pc, #96]	; (4070f4 <but3_Handler+0xd0>)
  407092:	47a0      	blx	r4

	printf("rtn_err: %d \n", rtn_err);
  407094:	897b      	ldrh	r3, [r7, #10]
  407096:	4619      	mov	r1, r3
  407098:	4817      	ldr	r0, [pc, #92]	; (4070f8 <but3_Handler+0xd4>)
  40709a:	4b07      	ldr	r3, [pc, #28]	; (4070b8 <but3_Handler+0x94>)
  40709c:	4798      	blx	r3
	memset(gau8SentBuffer, 0, sizeof(gau8SentBuffer));
  40709e:	f240 52b4 	movw	r2, #1460	; 0x5b4
  4070a2:	2100      	movs	r1, #0
  4070a4:	4807      	ldr	r0, [pc, #28]	; (4070c4 <but3_Handler+0xa0>)
  4070a6:	4b08      	ldr	r3, [pc, #32]	; (4070c8 <but3_Handler+0xa4>)
  4070a8:	4798      	blx	r3
}
  4070aa:	bf00      	nop
  4070ac:	3714      	adds	r7, #20
  4070ae:	46bd      	mov	sp, r7
  4070b0:	bd90      	pop	{r4, r7, pc}
  4070b2:	bf00      	nop
  4070b4:	0040eda8 	.word	0x0040eda8
  4070b8:	004079e5 	.word	0x004079e5
  4070bc:	400e1200 	.word	0x400e1200
  4070c0:	004051c9 	.word	0x004051c9
  4070c4:	204014f8 	.word	0x204014f8
  4070c8:	00407a0d 	.word	0x00407a0d
  4070cc:	0040ed58 	.word	0x0040ed58
  4070d0:	0040edf8 	.word	0x0040edf8
  4070d4:	0040edc0 	.word	0x0040edc0
  4070d8:	0040edd8 	.word	0x0040edd8
  4070dc:	00407c09 	.word	0x00407c09
  4070e0:	2040001c 	.word	0x2040001c
  4070e4:	00407c81 	.word	0x00407c81
  4070e8:	004040d9 	.word	0x004040d9
  4070ec:	20400f44 	.word	0x20400f44
  4070f0:	2040098c 	.word	0x2040098c
  4070f4:	004041c9 	.word	0x004041c9
  4070f8:	0040ede0 	.word	0x0040ede0

004070fc <but_init>:

void but_init(Pio *p_but_pio, const u_int32_t pio_id, const u_int32_t but_pin_mask) {
  4070fc:	b590      	push	{r4, r7, lr}
  4070fe:	b087      	sub	sp, #28
  407100:	af02      	add	r7, sp, #8
  407102:	60f8      	str	r0, [r7, #12]
  407104:	60b9      	str	r1, [r7, #8]
  407106:	607a      	str	r2, [r7, #4]
	printf("oi, sou o init \n");
  407108:	4829      	ldr	r0, [pc, #164]	; (4071b0 <but_init+0xb4>)
  40710a:	4b2a      	ldr	r3, [pc, #168]	; (4071b4 <but_init+0xb8>)
  40710c:	4798      	blx	r3
	/* config. pino botao em modo de entrada */
	pmc_enable_periph_clk(pio_id);
  40710e:	68b8      	ldr	r0, [r7, #8]
  407110:	4b29      	ldr	r3, [pc, #164]	; (4071b8 <but_init+0xbc>)
  407112:	4798      	blx	r3
	pio_set_input(p_but_pio, but_pin_mask, PIO_PULLUP | PIO_DEBOUNCE);
  407114:	2209      	movs	r2, #9
  407116:	6879      	ldr	r1, [r7, #4]
  407118:	68f8      	ldr	r0, [r7, #12]
  40711a:	4b28      	ldr	r3, [pc, #160]	; (4071bc <but_init+0xc0>)
  40711c:	4798      	blx	r3
	
	/* config. interrupcao em borda de descida no botao do kit */
	/* indica funcao (but_Handler) a ser chamada quando houver uma interrupção */
	pio_enable_interrupt(p_but_pio, but_pin_mask);
  40711e:	6879      	ldr	r1, [r7, #4]
  407120:	68f8      	ldr	r0, [r7, #12]
  407122:	4b27      	ldr	r3, [pc, #156]	; (4071c0 <but_init+0xc4>)
  407124:	4798      	blx	r3
	
	switch (but_pin_mask) {
  407126:	687b      	ldr	r3, [r7, #4]
  407128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  40712c:	d00c      	beq.n	407148 <but_init+0x4c>
  40712e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  407132:	d802      	bhi.n	40713a <but_init+0x3e>
  407134:	2b04      	cmp	r3, #4
  407136:	d010      	beq.n	40715a <but_init+0x5e>
  407138:	e02a      	b.n	407190 <but_init+0x94>
  40713a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  40713e:	d01e      	beq.n	40717e <but_init+0x82>
  407140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  407144:	d012      	beq.n	40716c <but_init+0x70>
  407146:	e023      	b.n	407190 <but_init+0x94>
		case BUT_PIN_MASK:
		pio_handler_set(p_but_pio, pio_id, but_pin_mask, PIO_IT_FALL_EDGE, but_Handler);
  407148:	4b1e      	ldr	r3, [pc, #120]	; (4071c4 <but_init+0xc8>)
  40714a:	9300      	str	r3, [sp, #0]
  40714c:	2350      	movs	r3, #80	; 0x50
  40714e:	687a      	ldr	r2, [r7, #4]
  407150:	68b9      	ldr	r1, [r7, #8]
  407152:	68f8      	ldr	r0, [r7, #12]
  407154:	4c1c      	ldr	r4, [pc, #112]	; (4071c8 <but_init+0xcc>)
  407156:	47a0      	blx	r4
		break;
  407158:	e01a      	b.n	407190 <but_init+0x94>
		case BUT1_PIN_MASK:
		pio_handler_set(p_but_pio, pio_id, but_pin_mask, PIO_IT_FALL_EDGE, but1_Handler);
  40715a:	4b1c      	ldr	r3, [pc, #112]	; (4071cc <but_init+0xd0>)
  40715c:	9300      	str	r3, [sp, #0]
  40715e:	2350      	movs	r3, #80	; 0x50
  407160:	687a      	ldr	r2, [r7, #4]
  407162:	68b9      	ldr	r1, [r7, #8]
  407164:	68f8      	ldr	r0, [r7, #12]
  407166:	4c18      	ldr	r4, [pc, #96]	; (4071c8 <but_init+0xcc>)
  407168:	47a0      	blx	r4
		break;
  40716a:	e011      	b.n	407190 <but_init+0x94>
		case BUT2_PIN_MASK:
		pio_handler_set(p_but_pio, pio_id, but_pin_mask, PIO_IT_FALL_EDGE, but2_Handler);
  40716c:	4b18      	ldr	r3, [pc, #96]	; (4071d0 <but_init+0xd4>)
  40716e:	9300      	str	r3, [sp, #0]
  407170:	2350      	movs	r3, #80	; 0x50
  407172:	687a      	ldr	r2, [r7, #4]
  407174:	68b9      	ldr	r1, [r7, #8]
  407176:	68f8      	ldr	r0, [r7, #12]
  407178:	4c13      	ldr	r4, [pc, #76]	; (4071c8 <but_init+0xcc>)
  40717a:	47a0      	blx	r4
		break;
  40717c:	e008      	b.n	407190 <but_init+0x94>
		case BUT3_PIN_MASK:
		pio_handler_set(p_but_pio, pio_id, but_pin_mask, PIO_IT_FALL_EDGE, but3_Handler);
  40717e:	4b15      	ldr	r3, [pc, #84]	; (4071d4 <but_init+0xd8>)
  407180:	9300      	str	r3, [sp, #0]
  407182:	2350      	movs	r3, #80	; 0x50
  407184:	687a      	ldr	r2, [r7, #4]
  407186:	68b9      	ldr	r1, [r7, #8]
  407188:	68f8      	ldr	r0, [r7, #12]
  40718a:	4c0f      	ldr	r4, [pc, #60]	; (4071c8 <but_init+0xcc>)
  40718c:	47a0      	blx	r4
		break;
  40718e:	bf00      	nop
	}
	
	NVIC_EnableIRQ(pio_id);
  407190:	68bb      	ldr	r3, [r7, #8]
  407192:	b25b      	sxtb	r3, r3
  407194:	4618      	mov	r0, r3
  407196:	4b10      	ldr	r3, [pc, #64]	; (4071d8 <but_init+0xdc>)
  407198:	4798      	blx	r3
	NVIC_SetPriority(pio_id, 1);
  40719a:	68bb      	ldr	r3, [r7, #8]
  40719c:	b25b      	sxtb	r3, r3
  40719e:	2101      	movs	r1, #1
  4071a0:	4618      	mov	r0, r3
  4071a2:	4b0e      	ldr	r3, [pc, #56]	; (4071dc <but_init+0xe0>)
  4071a4:	4798      	blx	r3
	
}
  4071a6:	bf00      	nop
  4071a8:	3714      	adds	r7, #20
  4071aa:	46bd      	mov	sp, r7
  4071ac:	bd90      	pop	{r4, r7, pc}
  4071ae:	bf00      	nop
  4071b0:	0040edfc 	.word	0x0040edfc
  4071b4:	004079e5 	.word	0x004079e5
  4071b8:	004059d5 	.word	0x004059d5
  4071bc:	00405041 	.word	0x00405041
  4071c0:	00405191 	.word	0x00405191
  4071c4:	00406d9d 	.word	0x00406d9d
  4071c8:	00405575 	.word	0x00405575
  4071cc:	00406e75 	.word	0x00406e75
  4071d0:	00406f4d 	.word	0x00406f4d
  4071d4:	00407025 	.word	0x00407025
  4071d8:	004066b9 	.word	0x004066b9
  4071dc:	004066ed 	.word	0x004066ed

004071e0 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  4071e0:	b580      	push	{r7, lr}
  4071e2:	b096      	sub	sp, #88	; 0x58
  4071e4:	af00      	add	r7, sp, #0
  4071e6:	4603      	mov	r3, r0
  4071e8:	603a      	str	r2, [r7, #0]
  4071ea:	71fb      	strb	r3, [r7, #7]
  4071ec:	460b      	mov	r3, r1
  4071ee:	71bb      	strb	r3, [r7, #6]
	switch (u8Msg) {
  4071f0:	79bb      	ldrb	r3, [r7, #6]
  4071f2:	2b06      	cmp	r3, #6
  4071f4:	d023      	beq.n	40723e <socket_cb+0x5e>
  4071f6:	2b07      	cmp	r3, #7
  4071f8:	f000 80a7 	beq.w	40734a <socket_cb+0x16a>
  4071fc:	2b05      	cmp	r3, #5
  4071fe:	d000      	beq.n	407202 <socket_cb+0x22>
	}

	break;

	default:
		break;
  407200:	e0a4      	b.n	40734c <socket_cb+0x16c>
  case SOCKET_MSG_CONNECT:
  {
    //memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
    //sprintf((char *)gau8ReceivedBuffer, "%s%s",MAIN_PREFIX_BUFFER,MAIN_POST);

    tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
  407202:	683b      	ldr	r3, [r7, #0]
  407204:	657b      	str	r3, [r7, #84]	; 0x54
    if (pstrConnect && pstrConnect->s8Error >= 0) {
  407206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  407208:	2b00      	cmp	r3, #0
  40720a:	d008      	beq.n	40721e <socket_cb+0x3e>
  40720c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  40720e:	f993 3001 	ldrsb.w	r3, [r3, #1]
  407212:	2b00      	cmp	r3, #0
  407214:	db03      	blt.n	40721e <socket_cb+0x3e>
		ready_to_send = 1;
  407216:	4b4f      	ldr	r3, [pc, #316]	; (407354 <socket_cb+0x174>)
  407218:	2201      	movs	r2, #1
  40721a:	601a      	str	r2, [r3, #0]
		  ready_to_send = 0;
		  close(tcp_client_socket);
		  tcp_client_socket = -1;
    }
  }
  break;
  40721c:	e096      	b.n	40734c <socket_cb+0x16c>
		//printf("socket_cb: connect success!\r\n");
		//rtn = send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
		//memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
      //recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
      } else {
		  printf("socket_cb: connect error!\r\n");
  40721e:	484e      	ldr	r0, [pc, #312]	; (407358 <socket_cb+0x178>)
  407220:	4b4e      	ldr	r3, [pc, #312]	; (40735c <socket_cb+0x17c>)
  407222:	4798      	blx	r3
		  ready_to_send = 0;
  407224:	4b4b      	ldr	r3, [pc, #300]	; (407354 <socket_cb+0x174>)
  407226:	2200      	movs	r2, #0
  407228:	601a      	str	r2, [r3, #0]
		  close(tcp_client_socket);
  40722a:	4b4d      	ldr	r3, [pc, #308]	; (407360 <socket_cb+0x180>)
  40722c:	f993 3000 	ldrsb.w	r3, [r3]
  407230:	4618      	mov	r0, r3
  407232:	4b4c      	ldr	r3, [pc, #304]	; (407364 <socket_cb+0x184>)
  407234:	4798      	blx	r3
		  tcp_client_socket = -1;
  407236:	4b4a      	ldr	r3, [pc, #296]	; (407360 <socket_cb+0x180>)
  407238:	22ff      	movs	r2, #255	; 0xff
  40723a:	701a      	strb	r2, [r3, #0]
    }
  }
  break;
  40723c:	e086      	b.n	40734c <socket_cb+0x16c>
	break;

	/* Message receive */
	case SOCKET_MSG_RECV:
	{
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
  40723e:	683b      	ldr	r3, [r7, #0]
  407240:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t  messageAck[64];
    uint16_t messageAckSize;
    uint8_t  command;

		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  407242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  407244:	2b00      	cmp	r3, #0
  407246:	d073      	beq.n	407330 <socket_cb+0x150>
  407248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40724a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  40724e:	2b00      	cmp	r3, #0
  407250:	dd6e      	ble.n	407330 <socket_cb+0x150>

			// Para debug das mensagens do socket
			printf("%s",pstrRecv->pu8Buffer);
  407252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  407254:	681b      	ldr	r3, [r3, #0]
  407256:	4619      	mov	r1, r3
  407258:	4843      	ldr	r0, [pc, #268]	; (407368 <socket_cb+0x188>)
  40725a:	4b40      	ldr	r3, [pc, #256]	; (40735c <socket_cb+0x17c>)
  40725c:	4798      	blx	r3
			const char *last = &pstrRecv->pu8Buffer[pstrRecv->s16BufferSize-4];
  40725e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  407260:	681a      	ldr	r2, [r3, #0]
  407262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  407264:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  407268:	3b04      	subs	r3, #4
  40726a:	4413      	add	r3, r2
  40726c:	64fb      	str	r3, [r7, #76]	; 0x4c
			printf("%s", last);
  40726e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
  407270:	483d      	ldr	r0, [pc, #244]	; (407368 <socket_cb+0x188>)
  407272:	4b3a      	ldr	r3, [pc, #232]	; (40735c <socket_cb+0x17c>)
  407274:	4798      	blx	r3
			if(last[0] == '1')
  407276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407278:	781b      	ldrb	r3, [r3, #0]
  40727a:	2b31      	cmp	r3, #49	; 0x31
  40727c:	d105      	bne.n	40728a <socket_cb+0xaa>
			pio_clear(LED_PIO, LED_PIN_MASK);
  40727e:	f44f 7180 	mov.w	r1, #256	; 0x100
  407282:	483a      	ldr	r0, [pc, #232]	; (40736c <socket_cb+0x18c>)
  407284:	4b3a      	ldr	r3, [pc, #232]	; (407370 <socket_cb+0x190>)
  407286:	4798      	blx	r3
  407288:	e008      	b.n	40729c <socket_cb+0xbc>
			else if(last[0] == '0')
  40728a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40728c:	781b      	ldrb	r3, [r3, #0]
  40728e:	2b30      	cmp	r3, #48	; 0x30
  407290:	d104      	bne.n	40729c <socket_cb+0xbc>
			pio_set(LED_PIO, LED_PIN_MASK);
  407292:	f44f 7180 	mov.w	r1, #256	; 0x100
  407296:	4835      	ldr	r0, [pc, #212]	; (40736c <socket_cb+0x18c>)
  407298:	4b36      	ldr	r3, [pc, #216]	; (407374 <socket_cb+0x194>)
  40729a:	4798      	blx	r3
			if(last[1] == '1')
  40729c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40729e:	3301      	adds	r3, #1
  4072a0:	781b      	ldrb	r3, [r3, #0]
  4072a2:	2b31      	cmp	r3, #49	; 0x31
  4072a4:	d105      	bne.n	4072b2 <socket_cb+0xd2>
			pio_clear(LED1_PIO, LED1_PIN_MASK);
  4072a6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4072aa:	4830      	ldr	r0, [pc, #192]	; (40736c <socket_cb+0x18c>)
  4072ac:	4b30      	ldr	r3, [pc, #192]	; (407370 <socket_cb+0x190>)
  4072ae:	4798      	blx	r3
  4072b0:	e009      	b.n	4072c6 <socket_cb+0xe6>
			else if(last[1] == '0')
  4072b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4072b4:	3301      	adds	r3, #1
  4072b6:	781b      	ldrb	r3, [r3, #0]
  4072b8:	2b30      	cmp	r3, #48	; 0x30
  4072ba:	d104      	bne.n	4072c6 <socket_cb+0xe6>
			pio_set(LED1_PIO, LED1_PIN_MASK);
  4072bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4072c0:	482a      	ldr	r0, [pc, #168]	; (40736c <socket_cb+0x18c>)
  4072c2:	4b2c      	ldr	r3, [pc, #176]	; (407374 <socket_cb+0x194>)
  4072c4:	4798      	blx	r3
			if(last[2] == '1')
  4072c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4072c8:	3302      	adds	r3, #2
  4072ca:	781b      	ldrb	r3, [r3, #0]
  4072cc:	2b31      	cmp	r3, #49	; 0x31
  4072ce:	d105      	bne.n	4072dc <socket_cb+0xfc>
			pio_clear(LED2_PIO, LED2_PIN_MASK);
  4072d0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4072d4:	4828      	ldr	r0, [pc, #160]	; (407378 <socket_cb+0x198>)
  4072d6:	4b26      	ldr	r3, [pc, #152]	; (407370 <socket_cb+0x190>)
  4072d8:	4798      	blx	r3
  4072da:	e009      	b.n	4072f0 <socket_cb+0x110>
			else if(last[2] == '0')
  4072dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4072de:	3302      	adds	r3, #2
  4072e0:	781b      	ldrb	r3, [r3, #0]
  4072e2:	2b30      	cmp	r3, #48	; 0x30
  4072e4:	d104      	bne.n	4072f0 <socket_cb+0x110>
			pio_set(LED2_PIO, LED2_PIN_MASK);
  4072e6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4072ea:	4823      	ldr	r0, [pc, #140]	; (407378 <socket_cb+0x198>)
  4072ec:	4b21      	ldr	r3, [pc, #132]	; (407374 <socket_cb+0x194>)
  4072ee:	4798      	blx	r3
			if(last[3] == '1')
  4072f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4072f2:	3303      	adds	r3, #3
  4072f4:	781b      	ldrb	r3, [r3, #0]
  4072f6:	2b31      	cmp	r3, #49	; 0x31
  4072f8:	d105      	bne.n	407306 <socket_cb+0x126>
			pio_clear(LED3_PIO, LED3_PIN_MASK);
  4072fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4072fe:	481e      	ldr	r0, [pc, #120]	; (407378 <socket_cb+0x198>)
  407300:	4b1b      	ldr	r3, [pc, #108]	; (407370 <socket_cb+0x190>)
  407302:	4798      	blx	r3
  407304:	e009      	b.n	40731a <socket_cb+0x13a>
			else if(last[3] == '0')
  407306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407308:	3303      	adds	r3, #3
  40730a:	781b      	ldrb	r3, [r3, #0]
  40730c:	2b30      	cmp	r3, #48	; 0x30
  40730e:	d104      	bne.n	40731a <socket_cb+0x13a>
			pio_set(LED3_PIO, LED3_PIN_MASK);
  407310:	f44f 6100 	mov.w	r1, #2048	; 0x800
  407314:	4818      	ldr	r0, [pc, #96]	; (407378 <socket_cb+0x198>)
  407316:	4b17      	ldr	r3, [pc, #92]	; (407374 <socket_cb+0x194>)
  407318:	4798      	blx	r3

      // limpa o buffer de recepcao e tx
      memset(pstrRecv->pu8Buffer, 0, pstrRecv->s16BufferSize);
  40731a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40731c:	6818      	ldr	r0, [r3, #0]
  40731e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  407320:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  407324:	461a      	mov	r2, r3
  407326:	2100      	movs	r1, #0
  407328:	4b14      	ldr	r3, [pc, #80]	; (40737c <socket_cb+0x19c>)
  40732a:	4798      	blx	r3
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
    uint8_t  messageAck[64];
    uint16_t messageAckSize;
    uint8_t  command;

		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  40732c:	bf00      	nop
			close(tcp_client_socket);
			tcp_client_socket = -1;
		}
	}

	break;
  40732e:	e00d      	b.n	40734c <socket_cb+0x16c>

      // Requista novos dados
      //recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);

 		} else {
			printf("socket_cb: recv error!\r\n");
  407330:	4813      	ldr	r0, [pc, #76]	; (407380 <socket_cb+0x1a0>)
  407332:	4b0a      	ldr	r3, [pc, #40]	; (40735c <socket_cb+0x17c>)
  407334:	4798      	blx	r3
			close(tcp_client_socket);
  407336:	4b0a      	ldr	r3, [pc, #40]	; (407360 <socket_cb+0x180>)
  407338:	f993 3000 	ldrsb.w	r3, [r3]
  40733c:	4618      	mov	r0, r3
  40733e:	4b09      	ldr	r3, [pc, #36]	; (407364 <socket_cb+0x184>)
  407340:	4798      	blx	r3
			tcp_client_socket = -1;
  407342:	4b07      	ldr	r3, [pc, #28]	; (407360 <socket_cb+0x180>)
  407344:	22ff      	movs	r2, #255	; 0xff
  407346:	701a      	strb	r2, [r3, #0]
		}
	}

	break;
  407348:	e000      	b.n	40734c <socket_cb+0x16c>
	  //printf("TCP Server Test Complete!\r\n");
		//printf("close socket\n");
		//close(tcp_client_socket);
		//close(tcp_server_socket);
	}
	break;
  40734a:	bf00      	nop
	break;

	default:
		break;
	}
}
  40734c:	bf00      	nop
  40734e:	3758      	adds	r7, #88	; 0x58
  407350:	46bd      	mov	sp, r7
  407352:	bd80      	pop	{r7, pc}
  407354:	20401bd8 	.word	0x20401bd8
  407358:	0040ee10 	.word	0x0040ee10
  40735c:	004079e5 	.word	0x004079e5
  407360:	2040001c 	.word	0x2040001c
  407364:	004042d9 	.word	0x004042d9
  407368:	0040ee2c 	.word	0x0040ee2c
  40736c:	400e1200 	.word	0x400e1200
  407370:	00404f15 	.word	0x00404f15
  407374:	00404ef9 	.word	0x00404ef9
  407378:	400e1400 	.word	0x400e1400
  40737c:	00407a0d 	.word	0x00407a0d
  407380:	0040ee30 	.word	0x0040ee30

00407384 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  407384:	b590      	push	{r4, r7, lr}
  407386:	b087      	sub	sp, #28
  407388:	af02      	add	r7, sp, #8
  40738a:	4603      	mov	r3, r0
  40738c:	6039      	str	r1, [r7, #0]
  40738e:	71fb      	strb	r3, [r7, #7]
	switch (u8MsgType) {
  407390:	79fb      	ldrb	r3, [r7, #7]
  407392:	2b2c      	cmp	r3, #44	; 0x2c
  407394:	d002      	beq.n	40739c <wifi_cb+0x18>
  407396:	2b32      	cmp	r3, #50	; 0x32
  407398:	d01f      	beq.n	4073da <wifi_cb+0x56>
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
	}
	break;

	default:
		break;
  40739a:	e038      	b.n	40740e <wifi_cb+0x8a>
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
  40739c:	683b      	ldr	r3, [r7, #0]
  40739e:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  4073a0:	68fb      	ldr	r3, [r7, #12]
  4073a2:	781b      	ldrb	r3, [r3, #0]
  4073a4:	2b01      	cmp	r3, #1
  4073a6:	d105      	bne.n	4073b4 <wifi_cb+0x30>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
  4073a8:	481b      	ldr	r0, [pc, #108]	; (407418 <wifi_cb+0x94>)
  4073aa:	4b1c      	ldr	r3, [pc, #112]	; (40741c <wifi_cb+0x98>)
  4073ac:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  4073ae:	4b1c      	ldr	r3, [pc, #112]	; (407420 <wifi_cb+0x9c>)
  4073b0:	4798      	blx	r3
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
			wifi_connected = 0;
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
		}
	}
	break;
  4073b2:	e02b      	b.n	40740c <wifi_cb+0x88>
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
			m2m_wifi_request_dhcp_client();
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  4073b4:	68fb      	ldr	r3, [r7, #12]
  4073b6:	781b      	ldrb	r3, [r3, #0]
  4073b8:	2b00      	cmp	r3, #0
  4073ba:	d127      	bne.n	40740c <wifi_cb+0x88>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
  4073bc:	4819      	ldr	r0, [pc, #100]	; (407424 <wifi_cb+0xa0>)
  4073be:	4b17      	ldr	r3, [pc, #92]	; (40741c <wifi_cb+0x98>)
  4073c0:	4798      	blx	r3
			wifi_connected = 0;
  4073c2:	4b19      	ldr	r3, [pc, #100]	; (407428 <wifi_cb+0xa4>)
  4073c4:	2200      	movs	r2, #0
  4073c6:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  4073c8:	23ff      	movs	r3, #255	; 0xff
  4073ca:	9300      	str	r3, [sp, #0]
  4073cc:	4b17      	ldr	r3, [pc, #92]	; (40742c <wifi_cb+0xa8>)
  4073ce:	2202      	movs	r2, #2
  4073d0:	2105      	movs	r1, #5
  4073d2:	4817      	ldr	r0, [pc, #92]	; (407430 <wifi_cb+0xac>)
  4073d4:	4c17      	ldr	r4, [pc, #92]	; (407434 <wifi_cb+0xb0>)
  4073d6:	47a0      	blx	r4
		}
	}
	break;
  4073d8:	e018      	b.n	40740c <wifi_cb+0x88>

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
  4073da:	683b      	ldr	r3, [r7, #0]
  4073dc:	60bb      	str	r3, [r7, #8]
		wifi_connected = 1;
  4073de:	4b12      	ldr	r3, [pc, #72]	; (407428 <wifi_cb+0xa4>)
  4073e0:	2201      	movs	r2, #1
  4073e2:	701a      	strb	r2, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
  4073e4:	68bb      	ldr	r3, [r7, #8]
  4073e6:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		wifi_connected = 1;
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
  4073e8:	4619      	mov	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
  4073ea:	68bb      	ldr	r3, [r7, #8]
  4073ec:	3301      	adds	r3, #1
  4073ee:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		wifi_connected = 1;
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
  4073f0:	461a      	mov	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
  4073f2:	68bb      	ldr	r3, [r7, #8]
  4073f4:	3302      	adds	r3, #2
  4073f6:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		wifi_connected = 1;
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
  4073f8:	4618      	mov	r0, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
  4073fa:	68bb      	ldr	r3, [r7, #8]
  4073fc:	3303      	adds	r3, #3
  4073fe:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		wifi_connected = 1;
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
  407400:	9300      	str	r3, [sp, #0]
  407402:	4603      	mov	r3, r0
  407404:	480c      	ldr	r0, [pc, #48]	; (407438 <wifi_cb+0xb4>)
  407406:	4c05      	ldr	r4, [pc, #20]	; (40741c <wifi_cb+0x98>)
  407408:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
	}
	break;
  40740a:	e000      	b.n	40740e <wifi_cb+0x8a>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
			wifi_connected = 0;
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
		}
	}
	break;
  40740c:	bf00      	nop
	break;

	default:
		break;
	}
}
  40740e:	bf00      	nop
  407410:	3714      	adds	r7, #20
  407412:	46bd      	mov	sp, r7
  407414:	bd90      	pop	{r4, r7, pc}
  407416:	bf00      	nop
  407418:	0040ee4c 	.word	0x0040ee4c
  40741c:	004079e5 	.word	0x004079e5
  407420:	00401fc5 	.word	0x00401fc5
  407424:	0040ee84 	.word	0x0040ee84
  407428:	20400f40 	.word	0x20400f40
  40742c:	0040eec0 	.word	0x0040eec0
  407430:	0040eecc 	.word	0x0040eecc
  407434:	00401c19 	.word	0x00401c19
  407438:	0040eed4 	.word	0x0040eed4

0040743c <main>:
 * Initialize system, UART console, network then test function of TCP server.
 *
 * \return program return value.
 */
int main(void)
{
  40743c:	b590      	push	{r4, r7, lr}
  40743e:	b083      	sub	sp, #12
  407440:	af02      	add	r7, sp, #8
	ready_to_send = 0;
  407442:	4b68      	ldr	r3, [pc, #416]	; (4075e4 <main+0x1a8>)
  407444:	2200      	movs	r2, #0
  407446:	601a      	str	r2, [r3, #0]
	/* Initialize the board. */
	sysclk_init();
  407448:	4b67      	ldr	r3, [pc, #412]	; (4075e8 <main+0x1ac>)
  40744a:	4798      	blx	r3
	board_init();
  40744c:	4b67      	ldr	r3, [pc, #412]	; (4075ec <main+0x1b0>)
  40744e:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
  407450:	4b67      	ldr	r3, [pc, #412]	; (4075f0 <main+0x1b4>)
  407452:	4798      	blx	r3
	printf(STRING_HEADER);
  407454:	4867      	ldr	r0, [pc, #412]	; (4075f4 <main+0x1b8>)
  407456:	4b68      	ldr	r3, [pc, #416]	; (4075f8 <main+0x1bc>)
  407458:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  40745a:	4b68      	ldr	r3, [pc, #416]	; (4075fc <main+0x1c0>)
  40745c:	4798      	blx	r3

	pmc_enable_periph_clk(LED_PIO_ID);
  40745e:	200c      	movs	r0, #12
  407460:	4b67      	ldr	r3, [pc, #412]	; (407600 <main+0x1c4>)
  407462:	4798      	blx	r3
	pio_set_output(LED_PIO, LED_PIN_MASK, 0, 0, 0);
  407464:	2300      	movs	r3, #0
  407466:	9300      	str	r3, [sp, #0]
  407468:	2300      	movs	r3, #0
  40746a:	2200      	movs	r2, #0
  40746c:	f44f 7180 	mov.w	r1, #256	; 0x100
  407470:	4864      	ldr	r0, [pc, #400]	; (407604 <main+0x1c8>)
  407472:	4c65      	ldr	r4, [pc, #404]	; (407608 <main+0x1cc>)
  407474:	47a0      	blx	r4

	pmc_enable_periph_clk(LED_PIO_ID);
  407476:	200c      	movs	r0, #12
  407478:	4b61      	ldr	r3, [pc, #388]	; (407600 <main+0x1c4>)
  40747a:	4798      	blx	r3
	pio_set_output(LED_PIO, LED_PIN_MASK, 0, 0, 0);
  40747c:	2300      	movs	r3, #0
  40747e:	9300      	str	r3, [sp, #0]
  407480:	2300      	movs	r3, #0
  407482:	2200      	movs	r2, #0
  407484:	f44f 7180 	mov.w	r1, #256	; 0x100
  407488:	485e      	ldr	r0, [pc, #376]	; (407604 <main+0x1c8>)
  40748a:	4c5f      	ldr	r4, [pc, #380]	; (407608 <main+0x1cc>)
  40748c:	47a0      	blx	r4
	pmc_enable_periph_clk(LED1_PIO_ID);
  40748e:	200c      	movs	r0, #12
  407490:	4b5b      	ldr	r3, [pc, #364]	; (407600 <main+0x1c4>)
  407492:	4798      	blx	r3
	pio_set_output(LED1_PIO, LED1_PIN_MASK, 0, 0, 0);
  407494:	2300      	movs	r3, #0
  407496:	9300      	str	r3, [sp, #0]
  407498:	2300      	movs	r3, #0
  40749a:	2200      	movs	r2, #0
  40749c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4074a0:	4858      	ldr	r0, [pc, #352]	; (407604 <main+0x1c8>)
  4074a2:	4c59      	ldr	r4, [pc, #356]	; (407608 <main+0x1cc>)
  4074a4:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_PIO_ID);
  4074a6:	2010      	movs	r0, #16
  4074a8:	4b55      	ldr	r3, [pc, #340]	; (407600 <main+0x1c4>)
  4074aa:	4798      	blx	r3
	pio_set_output(LED2_PIO, LED2_PIN_MASK, 0, 0, 0);
  4074ac:	2300      	movs	r3, #0
  4074ae:	9300      	str	r3, [sp, #0]
  4074b0:	2300      	movs	r3, #0
  4074b2:	2200      	movs	r2, #0
  4074b4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4074b8:	4854      	ldr	r0, [pc, #336]	; (40760c <main+0x1d0>)
  4074ba:	4c53      	ldr	r4, [pc, #332]	; (407608 <main+0x1cc>)
  4074bc:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_PIO_ID);
  4074be:	2010      	movs	r0, #16
  4074c0:	4b4f      	ldr	r3, [pc, #316]	; (407600 <main+0x1c4>)
  4074c2:	4798      	blx	r3
	pio_set_output(LED3_PIO, LED3_PIN_MASK, 0, 0, 0);
  4074c4:	2300      	movs	r3, #0
  4074c6:	9300      	str	r3, [sp, #0]
  4074c8:	2300      	movs	r3, #0
  4074ca:	2200      	movs	r2, #0
  4074cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4074d0:	484e      	ldr	r0, [pc, #312]	; (40760c <main+0x1d0>)
  4074d2:	4c4d      	ldr	r4, [pc, #308]	; (407608 <main+0x1cc>)
  4074d4:	47a0      	blx	r4

	but_init(BUT_PIO, BUT_PIO_ID, BUT_PIN_MASK);
  4074d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4074da:	210a      	movs	r1, #10
  4074dc:	484c      	ldr	r0, [pc, #304]	; (407610 <main+0x1d4>)
  4074de:	4b4d      	ldr	r3, [pc, #308]	; (407614 <main+0x1d8>)
  4074e0:	4798      	blx	r3
	but_init(BUT1_PIO, BUT1_PIO_ID, BUT1_PIN_MASK);
  4074e2:	2204      	movs	r2, #4
  4074e4:	210a      	movs	r1, #10
  4074e6:	484a      	ldr	r0, [pc, #296]	; (407610 <main+0x1d4>)
  4074e8:	4b4a      	ldr	r3, [pc, #296]	; (407614 <main+0x1d8>)
  4074ea:	4798      	blx	r3
	but_init(BUT2_PIO, BUT2_PIO_ID, BUT2_PIN_MASK);
  4074ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4074f0:	2110      	movs	r1, #16
  4074f2:	4846      	ldr	r0, [pc, #280]	; (40760c <main+0x1d0>)
  4074f4:	4b47      	ldr	r3, [pc, #284]	; (407614 <main+0x1d8>)
  4074f6:	4798      	blx	r3
	but_init(BUT3_PIO, BUT3_PIO_ID, BUT3_PIN_MASK);
  4074f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4074fc:	210c      	movs	r1, #12
  4074fe:	4841      	ldr	r0, [pc, #260]	; (407604 <main+0x1c8>)
  407500:	4b44      	ldr	r3, [pc, #272]	; (407614 <main+0x1d8>)
  407502:	4798      	blx	r3
	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
  407504:	4b44      	ldr	r3, [pc, #272]	; (407618 <main+0x1dc>)
  407506:	2202      	movs	r2, #2
  407508:	801a      	strh	r2, [r3, #0]
	addr.sin_port = _htons(MAIN_SERVER_PORT);
  40750a:	4b43      	ldr	r3, [pc, #268]	; (407618 <main+0x1dc>)
  40750c:	f648 0213 	movw	r2, #34835	; 0x8813
  407510:	805a      	strh	r2, [r3, #2]
	addr.sin_addr.s_addr = MAIN_SERVER_IP;
  407512:	4b41      	ldr	r3, [pc, #260]	; (407618 <main+0x1dc>)
  407514:	4a41      	ldr	r2, [pc, #260]	; (40761c <main+0x1e0>)
  407516:	605a      	str	r2, [r3, #4]

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  407518:	2218      	movs	r2, #24
  40751a:	2100      	movs	r1, #0
  40751c:	4840      	ldr	r0, [pc, #256]	; (407620 <main+0x1e4>)
  40751e:	4b41      	ldr	r3, [pc, #260]	; (407624 <main+0x1e8>)
  407520:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  407522:	4b3f      	ldr	r3, [pc, #252]	; (407620 <main+0x1e4>)
  407524:	4a40      	ldr	r2, [pc, #256]	; (407628 <main+0x1ec>)
  407526:	601a      	str	r2, [r3, #0]
	ret = m2m_wifi_init(&param);
  407528:	483d      	ldr	r0, [pc, #244]	; (407620 <main+0x1e4>)
  40752a:	4b40      	ldr	r3, [pc, #256]	; (40762c <main+0x1f0>)
  40752c:	4798      	blx	r3
  40752e:	4603      	mov	r3, r0
  407530:	461a      	mov	r2, r3
  407532:	4b3f      	ldr	r3, [pc, #252]	; (407630 <main+0x1f4>)
  407534:	701a      	strb	r2, [r3, #0]
	if (M2M_SUCCESS != ret) {
  407536:	4b3e      	ldr	r3, [pc, #248]	; (407630 <main+0x1f4>)
  407538:	f993 3000 	ldrsb.w	r3, [r3]
  40753c:	2b00      	cmp	r3, #0
  40753e:	d007      	beq.n	407550 <main+0x114>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  407540:	4b3b      	ldr	r3, [pc, #236]	; (407630 <main+0x1f4>)
  407542:	f993 3000 	ldrsb.w	r3, [r3]
  407546:	4619      	mov	r1, r3
  407548:	483a      	ldr	r0, [pc, #232]	; (407634 <main+0x1f8>)
  40754a:	4b2b      	ldr	r3, [pc, #172]	; (4075f8 <main+0x1bc>)
  40754c:	4798      	blx	r3
		while (1) {
		}
  40754e:	e7fe      	b.n	40754e <main+0x112>
	}
	/* Initialize GET TC */
	TC_init(TC0, ID_TC0, 0, 10);
  407550:	230a      	movs	r3, #10
  407552:	2200      	movs	r2, #0
  407554:	2117      	movs	r1, #23
  407556:	4838      	ldr	r0, [pc, #224]	; (407638 <main+0x1fc>)
  407558:	4c38      	ldr	r4, [pc, #224]	; (40763c <main+0x200>)
  40755a:	47a0      	blx	r4

	/* Initialize socket module */
	socketInit();
  40755c:	4b38      	ldr	r3, [pc, #224]	; (407640 <main+0x204>)
  40755e:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);
  407560:	2100      	movs	r1, #0
  407562:	4838      	ldr	r0, [pc, #224]	; (407644 <main+0x208>)
  407564:	4b38      	ldr	r3, [pc, #224]	; (407648 <main+0x20c>)
  407566:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  407568:	23ff      	movs	r3, #255	; 0xff
  40756a:	9300      	str	r3, [sp, #0]
  40756c:	4b37      	ldr	r3, [pc, #220]	; (40764c <main+0x210>)
  40756e:	2202      	movs	r2, #2
  407570:	2105      	movs	r1, #5
  407572:	4837      	ldr	r0, [pc, #220]	; (407650 <main+0x214>)
  407574:	4c37      	ldr	r4, [pc, #220]	; (407654 <main+0x218>)
  407576:	47a0      	blx	r4
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  407578:	2000      	movs	r0, #0
  40757a:	4b37      	ldr	r3, [pc, #220]	; (407658 <main+0x21c>)
  40757c:	4798      	blx	r3

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  40757e:	4b37      	ldr	r3, [pc, #220]	; (40765c <main+0x220>)
  407580:	781b      	ldrb	r3, [r3, #0]
  407582:	2b01      	cmp	r3, #1
  407584:	d1f8      	bne.n	407578 <main+0x13c>
			if (tcp_client_socket < 0) {
  407586:	4b36      	ldr	r3, [pc, #216]	; (407660 <main+0x224>)
  407588:	f993 3000 	ldrsb.w	r3, [r3]
  40758c:	2b00      	cmp	r3, #0
  40758e:	daf3      	bge.n	407578 <main+0x13c>
				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  407590:	2200      	movs	r2, #0
  407592:	2101      	movs	r1, #1
  407594:	2002      	movs	r0, #2
  407596:	4b33      	ldr	r3, [pc, #204]	; (407664 <main+0x228>)
  407598:	4798      	blx	r3
  40759a:	4603      	mov	r3, r0
  40759c:	461a      	mov	r2, r3
  40759e:	4b30      	ldr	r3, [pc, #192]	; (407660 <main+0x224>)
  4075a0:	701a      	strb	r2, [r3, #0]
  4075a2:	4b2f      	ldr	r3, [pc, #188]	; (407660 <main+0x224>)
  4075a4:	f993 3000 	ldrsb.w	r3, [r3]
  4075a8:	2b00      	cmp	r3, #0
  4075aa:	da02      	bge.n	4075b2 <main+0x176>
					printf("main: failed to create TCP client socket error!\r\n");
  4075ac:	482e      	ldr	r0, [pc, #184]	; (407668 <main+0x22c>)
  4075ae:	4b12      	ldr	r3, [pc, #72]	; (4075f8 <main+0x1bc>)
  4075b0:	4798      	blx	r3
				}

				/* Connect TCP client socket. */
				if (connect(tcp_client_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR ) {
  4075b2:	4b2b      	ldr	r3, [pc, #172]	; (407660 <main+0x224>)
  4075b4:	f993 3000 	ldrsb.w	r3, [r3]
  4075b8:	2210      	movs	r2, #16
  4075ba:	4917      	ldr	r1, [pc, #92]	; (407618 <main+0x1dc>)
  4075bc:	4618      	mov	r0, r3
  4075be:	4b2b      	ldr	r3, [pc, #172]	; (40766c <main+0x230>)
  4075c0:	4798      	blx	r3
  4075c2:	4603      	mov	r3, r0
  4075c4:	2b00      	cmp	r3, #0
  4075c6:	d009      	beq.n	4075dc <main+0x1a0>
					printf("main: failed to connect socket error!\r\n");
  4075c8:	4829      	ldr	r0, [pc, #164]	; (407670 <main+0x234>)
  4075ca:	4b0b      	ldr	r3, [pc, #44]	; (4075f8 <main+0x1bc>)
  4075cc:	4798      	blx	r3
					close(tcp_client_socket);
  4075ce:	4b24      	ldr	r3, [pc, #144]	; (407660 <main+0x224>)
  4075d0:	f993 3000 	ldrsb.w	r3, [r3]
  4075d4:	4618      	mov	r0, r3
  4075d6:	4b27      	ldr	r3, [pc, #156]	; (407674 <main+0x238>)
  4075d8:	4798      	blx	r3
  4075da:	e7cd      	b.n	407578 <main+0x13c>
					}else{
					printf("Conectado ! \n");
  4075dc:	4826      	ldr	r0, [pc, #152]	; (407678 <main+0x23c>)
  4075de:	4b06      	ldr	r3, [pc, #24]	; (4075f8 <main+0x1bc>)
  4075e0:	4798      	blx	r3
				}
			}
		}
	}
  4075e2:	e7c9      	b.n	407578 <main+0x13c>
  4075e4:	20401bd8 	.word	0x20401bd8
  4075e8:	00404845 	.word	0x00404845
  4075ec:	00404e15 	.word	0x00404e15
  4075f0:	00406bf9 	.word	0x00406bf9
  4075f4:	0040ef0c 	.word	0x0040ef0c
  4075f8:	004079e5 	.word	0x004079e5
  4075fc:	00400431 	.word	0x00400431
  407600:	004059d5 	.word	0x004059d5
  407604:	400e1200 	.word	0x400e1200
  407608:	004050c1 	.word	0x004050c1
  40760c:	400e1400 	.word	0x400e1400
  407610:	400e0e00 	.word	0x400e0e00
  407614:	004070fd 	.word	0x004070fd
  407618:	20401bc8 	.word	0x20401bc8
  40761c:	9000a8c0 	.word	0x9000a8c0
  407620:	20401bac 	.word	0x20401bac
  407624:	00407a0d 	.word	0x00407a0d
  407628:	00407385 	.word	0x00407385
  40762c:	00401ab5 	.word	0x00401ab5
  407630:	20401bdc 	.word	0x20401bdc
  407634:	0040ef6c 	.word	0x0040ef6c
  407638:	4000c000 	.word	0x4000c000
  40763c:	00406c31 	.word	0x00406c31
  407640:	00403e95 	.word	0x00403e95
  407644:	004071e1 	.word	0x004071e1
  407648:	00403edd 	.word	0x00403edd
  40764c:	0040eec0 	.word	0x0040eec0
  407650:	0040eecc 	.word	0x0040eecc
  407654:	00401c19 	.word	0x00401c19
  407658:	00401bfd 	.word	0x00401bfd
  40765c:	20400f40 	.word	0x20400f40
  407660:	2040001c 	.word	0x2040001c
  407664:	00403f09 	.word	0x00403f09
  407668:	0040ef94 	.word	0x0040ef94
  40766c:	00404005 	.word	0x00404005
  407670:	0040efc8 	.word	0x0040efc8
  407674:	004042d9 	.word	0x004042d9
  407678:	0040eff0 	.word	0x0040eff0

0040767c <__aeabi_uldivmod>:
  40767c:	b953      	cbnz	r3, 407694 <__aeabi_uldivmod+0x18>
  40767e:	b94a      	cbnz	r2, 407694 <__aeabi_uldivmod+0x18>
  407680:	2900      	cmp	r1, #0
  407682:	bf08      	it	eq
  407684:	2800      	cmpeq	r0, #0
  407686:	bf1c      	itt	ne
  407688:	f04f 31ff 	movne.w	r1, #4294967295
  40768c:	f04f 30ff 	movne.w	r0, #4294967295
  407690:	f000 b97e 	b.w	407990 <__aeabi_idiv0>
  407694:	f1ad 0c08 	sub.w	ip, sp, #8
  407698:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40769c:	f000 f806 	bl	4076ac <__udivmoddi4>
  4076a0:	f8dd e004 	ldr.w	lr, [sp, #4]
  4076a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4076a8:	b004      	add	sp, #16
  4076aa:	4770      	bx	lr

004076ac <__udivmoddi4>:
  4076ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4076b0:	468c      	mov	ip, r1
  4076b2:	460e      	mov	r6, r1
  4076b4:	4604      	mov	r4, r0
  4076b6:	9d08      	ldr	r5, [sp, #32]
  4076b8:	2b00      	cmp	r3, #0
  4076ba:	d150      	bne.n	40775e <__udivmoddi4+0xb2>
  4076bc:	428a      	cmp	r2, r1
  4076be:	4617      	mov	r7, r2
  4076c0:	d96c      	bls.n	40779c <__udivmoddi4+0xf0>
  4076c2:	fab2 fe82 	clz	lr, r2
  4076c6:	f1be 0f00 	cmp.w	lr, #0
  4076ca:	d00b      	beq.n	4076e4 <__udivmoddi4+0x38>
  4076cc:	f1ce 0420 	rsb	r4, lr, #32
  4076d0:	fa20 f404 	lsr.w	r4, r0, r4
  4076d4:	fa01 f60e 	lsl.w	r6, r1, lr
  4076d8:	ea44 0c06 	orr.w	ip, r4, r6
  4076dc:	fa02 f70e 	lsl.w	r7, r2, lr
  4076e0:	fa00 f40e 	lsl.w	r4, r0, lr
  4076e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4076e8:	0c22      	lsrs	r2, r4, #16
  4076ea:	fbbc f0f9 	udiv	r0, ip, r9
  4076ee:	fa1f f887 	uxth.w	r8, r7
  4076f2:	fb09 c610 	mls	r6, r9, r0, ip
  4076f6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4076fa:	fb00 f308 	mul.w	r3, r0, r8
  4076fe:	42b3      	cmp	r3, r6
  407700:	d909      	bls.n	407716 <__udivmoddi4+0x6a>
  407702:	19f6      	adds	r6, r6, r7
  407704:	f100 32ff 	add.w	r2, r0, #4294967295
  407708:	f080 8122 	bcs.w	407950 <__udivmoddi4+0x2a4>
  40770c:	42b3      	cmp	r3, r6
  40770e:	f240 811f 	bls.w	407950 <__udivmoddi4+0x2a4>
  407712:	3802      	subs	r0, #2
  407714:	443e      	add	r6, r7
  407716:	1af6      	subs	r6, r6, r3
  407718:	b2a2      	uxth	r2, r4
  40771a:	fbb6 f3f9 	udiv	r3, r6, r9
  40771e:	fb09 6613 	mls	r6, r9, r3, r6
  407722:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  407726:	fb03 f808 	mul.w	r8, r3, r8
  40772a:	45a0      	cmp	r8, r4
  40772c:	d909      	bls.n	407742 <__udivmoddi4+0x96>
  40772e:	19e4      	adds	r4, r4, r7
  407730:	f103 32ff 	add.w	r2, r3, #4294967295
  407734:	f080 810a 	bcs.w	40794c <__udivmoddi4+0x2a0>
  407738:	45a0      	cmp	r8, r4
  40773a:	f240 8107 	bls.w	40794c <__udivmoddi4+0x2a0>
  40773e:	3b02      	subs	r3, #2
  407740:	443c      	add	r4, r7
  407742:	ebc8 0404 	rsb	r4, r8, r4
  407746:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40774a:	2100      	movs	r1, #0
  40774c:	2d00      	cmp	r5, #0
  40774e:	d062      	beq.n	407816 <__udivmoddi4+0x16a>
  407750:	fa24 f40e 	lsr.w	r4, r4, lr
  407754:	2300      	movs	r3, #0
  407756:	602c      	str	r4, [r5, #0]
  407758:	606b      	str	r3, [r5, #4]
  40775a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40775e:	428b      	cmp	r3, r1
  407760:	d907      	bls.n	407772 <__udivmoddi4+0xc6>
  407762:	2d00      	cmp	r5, #0
  407764:	d055      	beq.n	407812 <__udivmoddi4+0x166>
  407766:	2100      	movs	r1, #0
  407768:	e885 0041 	stmia.w	r5, {r0, r6}
  40776c:	4608      	mov	r0, r1
  40776e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407772:	fab3 f183 	clz	r1, r3
  407776:	2900      	cmp	r1, #0
  407778:	f040 8090 	bne.w	40789c <__udivmoddi4+0x1f0>
  40777c:	42b3      	cmp	r3, r6
  40777e:	d302      	bcc.n	407786 <__udivmoddi4+0xda>
  407780:	4282      	cmp	r2, r0
  407782:	f200 80f8 	bhi.w	407976 <__udivmoddi4+0x2ca>
  407786:	1a84      	subs	r4, r0, r2
  407788:	eb66 0603 	sbc.w	r6, r6, r3
  40778c:	2001      	movs	r0, #1
  40778e:	46b4      	mov	ip, r6
  407790:	2d00      	cmp	r5, #0
  407792:	d040      	beq.n	407816 <__udivmoddi4+0x16a>
  407794:	e885 1010 	stmia.w	r5, {r4, ip}
  407798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40779c:	b912      	cbnz	r2, 4077a4 <__udivmoddi4+0xf8>
  40779e:	2701      	movs	r7, #1
  4077a0:	fbb7 f7f2 	udiv	r7, r7, r2
  4077a4:	fab7 fe87 	clz	lr, r7
  4077a8:	f1be 0f00 	cmp.w	lr, #0
  4077ac:	d135      	bne.n	40781a <__udivmoddi4+0x16e>
  4077ae:	1bf3      	subs	r3, r6, r7
  4077b0:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4077b4:	fa1f fc87 	uxth.w	ip, r7
  4077b8:	2101      	movs	r1, #1
  4077ba:	fbb3 f0f8 	udiv	r0, r3, r8
  4077be:	0c22      	lsrs	r2, r4, #16
  4077c0:	fb08 3610 	mls	r6, r8, r0, r3
  4077c4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4077c8:	fb0c f300 	mul.w	r3, ip, r0
  4077cc:	42b3      	cmp	r3, r6
  4077ce:	d907      	bls.n	4077e0 <__udivmoddi4+0x134>
  4077d0:	19f6      	adds	r6, r6, r7
  4077d2:	f100 32ff 	add.w	r2, r0, #4294967295
  4077d6:	d202      	bcs.n	4077de <__udivmoddi4+0x132>
  4077d8:	42b3      	cmp	r3, r6
  4077da:	f200 80ce 	bhi.w	40797a <__udivmoddi4+0x2ce>
  4077de:	4610      	mov	r0, r2
  4077e0:	1af6      	subs	r6, r6, r3
  4077e2:	b2a2      	uxth	r2, r4
  4077e4:	fbb6 f3f8 	udiv	r3, r6, r8
  4077e8:	fb08 6613 	mls	r6, r8, r3, r6
  4077ec:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4077f0:	fb0c fc03 	mul.w	ip, ip, r3
  4077f4:	45a4      	cmp	ip, r4
  4077f6:	d907      	bls.n	407808 <__udivmoddi4+0x15c>
  4077f8:	19e4      	adds	r4, r4, r7
  4077fa:	f103 32ff 	add.w	r2, r3, #4294967295
  4077fe:	d202      	bcs.n	407806 <__udivmoddi4+0x15a>
  407800:	45a4      	cmp	ip, r4
  407802:	f200 80b5 	bhi.w	407970 <__udivmoddi4+0x2c4>
  407806:	4613      	mov	r3, r2
  407808:	ebcc 0404 	rsb	r4, ip, r4
  40780c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  407810:	e79c      	b.n	40774c <__udivmoddi4+0xa0>
  407812:	4629      	mov	r1, r5
  407814:	4628      	mov	r0, r5
  407816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40781a:	f1ce 0120 	rsb	r1, lr, #32
  40781e:	fa06 f30e 	lsl.w	r3, r6, lr
  407822:	fa07 f70e 	lsl.w	r7, r7, lr
  407826:	fa20 f901 	lsr.w	r9, r0, r1
  40782a:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40782e:	40ce      	lsrs	r6, r1
  407830:	ea49 0903 	orr.w	r9, r9, r3
  407834:	fbb6 faf8 	udiv	sl, r6, r8
  407838:	ea4f 4419 	mov.w	r4, r9, lsr #16
  40783c:	fb08 661a 	mls	r6, r8, sl, r6
  407840:	fa1f fc87 	uxth.w	ip, r7
  407844:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  407848:	fb0a f20c 	mul.w	r2, sl, ip
  40784c:	429a      	cmp	r2, r3
  40784e:	fa00 f40e 	lsl.w	r4, r0, lr
  407852:	d90a      	bls.n	40786a <__udivmoddi4+0x1be>
  407854:	19db      	adds	r3, r3, r7
  407856:	f10a 31ff 	add.w	r1, sl, #4294967295
  40785a:	f080 8087 	bcs.w	40796c <__udivmoddi4+0x2c0>
  40785e:	429a      	cmp	r2, r3
  407860:	f240 8084 	bls.w	40796c <__udivmoddi4+0x2c0>
  407864:	f1aa 0a02 	sub.w	sl, sl, #2
  407868:	443b      	add	r3, r7
  40786a:	1a9b      	subs	r3, r3, r2
  40786c:	fa1f f989 	uxth.w	r9, r9
  407870:	fbb3 f1f8 	udiv	r1, r3, r8
  407874:	fb08 3311 	mls	r3, r8, r1, r3
  407878:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  40787c:	fb01 f60c 	mul.w	r6, r1, ip
  407880:	429e      	cmp	r6, r3
  407882:	d907      	bls.n	407894 <__udivmoddi4+0x1e8>
  407884:	19db      	adds	r3, r3, r7
  407886:	f101 32ff 	add.w	r2, r1, #4294967295
  40788a:	d26b      	bcs.n	407964 <__udivmoddi4+0x2b8>
  40788c:	429e      	cmp	r6, r3
  40788e:	d969      	bls.n	407964 <__udivmoddi4+0x2b8>
  407890:	3902      	subs	r1, #2
  407892:	443b      	add	r3, r7
  407894:	1b9b      	subs	r3, r3, r6
  407896:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40789a:	e78e      	b.n	4077ba <__udivmoddi4+0x10e>
  40789c:	f1c1 0e20 	rsb	lr, r1, #32
  4078a0:	fa22 f40e 	lsr.w	r4, r2, lr
  4078a4:	408b      	lsls	r3, r1
  4078a6:	4323      	orrs	r3, r4
  4078a8:	fa20 f70e 	lsr.w	r7, r0, lr
  4078ac:	fa06 f401 	lsl.w	r4, r6, r1
  4078b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4078b4:	fa26 f60e 	lsr.w	r6, r6, lr
  4078b8:	433c      	orrs	r4, r7
  4078ba:	fbb6 f9fc 	udiv	r9, r6, ip
  4078be:	0c27      	lsrs	r7, r4, #16
  4078c0:	fb0c 6619 	mls	r6, ip, r9, r6
  4078c4:	fa1f f883 	uxth.w	r8, r3
  4078c8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4078cc:	fb09 f708 	mul.w	r7, r9, r8
  4078d0:	42b7      	cmp	r7, r6
  4078d2:	fa02 f201 	lsl.w	r2, r2, r1
  4078d6:	fa00 fa01 	lsl.w	sl, r0, r1
  4078da:	d908      	bls.n	4078ee <__udivmoddi4+0x242>
  4078dc:	18f6      	adds	r6, r6, r3
  4078de:	f109 30ff 	add.w	r0, r9, #4294967295
  4078e2:	d241      	bcs.n	407968 <__udivmoddi4+0x2bc>
  4078e4:	42b7      	cmp	r7, r6
  4078e6:	d93f      	bls.n	407968 <__udivmoddi4+0x2bc>
  4078e8:	f1a9 0902 	sub.w	r9, r9, #2
  4078ec:	441e      	add	r6, r3
  4078ee:	1bf6      	subs	r6, r6, r7
  4078f0:	b2a0      	uxth	r0, r4
  4078f2:	fbb6 f4fc 	udiv	r4, r6, ip
  4078f6:	fb0c 6614 	mls	r6, ip, r4, r6
  4078fa:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4078fe:	fb04 f808 	mul.w	r8, r4, r8
  407902:	45b8      	cmp	r8, r7
  407904:	d907      	bls.n	407916 <__udivmoddi4+0x26a>
  407906:	18ff      	adds	r7, r7, r3
  407908:	f104 30ff 	add.w	r0, r4, #4294967295
  40790c:	d228      	bcs.n	407960 <__udivmoddi4+0x2b4>
  40790e:	45b8      	cmp	r8, r7
  407910:	d926      	bls.n	407960 <__udivmoddi4+0x2b4>
  407912:	3c02      	subs	r4, #2
  407914:	441f      	add	r7, r3
  407916:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  40791a:	ebc8 0707 	rsb	r7, r8, r7
  40791e:	fba0 8902 	umull	r8, r9, r0, r2
  407922:	454f      	cmp	r7, r9
  407924:	4644      	mov	r4, r8
  407926:	464e      	mov	r6, r9
  407928:	d314      	bcc.n	407954 <__udivmoddi4+0x2a8>
  40792a:	d029      	beq.n	407980 <__udivmoddi4+0x2d4>
  40792c:	b365      	cbz	r5, 407988 <__udivmoddi4+0x2dc>
  40792e:	ebba 0304 	subs.w	r3, sl, r4
  407932:	eb67 0706 	sbc.w	r7, r7, r6
  407936:	fa07 fe0e 	lsl.w	lr, r7, lr
  40793a:	40cb      	lsrs	r3, r1
  40793c:	40cf      	lsrs	r7, r1
  40793e:	ea4e 0303 	orr.w	r3, lr, r3
  407942:	e885 0088 	stmia.w	r5, {r3, r7}
  407946:	2100      	movs	r1, #0
  407948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40794c:	4613      	mov	r3, r2
  40794e:	e6f8      	b.n	407742 <__udivmoddi4+0x96>
  407950:	4610      	mov	r0, r2
  407952:	e6e0      	b.n	407716 <__udivmoddi4+0x6a>
  407954:	ebb8 0402 	subs.w	r4, r8, r2
  407958:	eb69 0603 	sbc.w	r6, r9, r3
  40795c:	3801      	subs	r0, #1
  40795e:	e7e5      	b.n	40792c <__udivmoddi4+0x280>
  407960:	4604      	mov	r4, r0
  407962:	e7d8      	b.n	407916 <__udivmoddi4+0x26a>
  407964:	4611      	mov	r1, r2
  407966:	e795      	b.n	407894 <__udivmoddi4+0x1e8>
  407968:	4681      	mov	r9, r0
  40796a:	e7c0      	b.n	4078ee <__udivmoddi4+0x242>
  40796c:	468a      	mov	sl, r1
  40796e:	e77c      	b.n	40786a <__udivmoddi4+0x1be>
  407970:	3b02      	subs	r3, #2
  407972:	443c      	add	r4, r7
  407974:	e748      	b.n	407808 <__udivmoddi4+0x15c>
  407976:	4608      	mov	r0, r1
  407978:	e70a      	b.n	407790 <__udivmoddi4+0xe4>
  40797a:	3802      	subs	r0, #2
  40797c:	443e      	add	r6, r7
  40797e:	e72f      	b.n	4077e0 <__udivmoddi4+0x134>
  407980:	45c2      	cmp	sl, r8
  407982:	d3e7      	bcc.n	407954 <__udivmoddi4+0x2a8>
  407984:	463e      	mov	r6, r7
  407986:	e7d1      	b.n	40792c <__udivmoddi4+0x280>
  407988:	4629      	mov	r1, r5
  40798a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40798e:	bf00      	nop

00407990 <__aeabi_idiv0>:
  407990:	4770      	bx	lr
  407992:	bf00      	nop

00407994 <__libc_init_array>:
  407994:	b570      	push	{r4, r5, r6, lr}
  407996:	4e0f      	ldr	r6, [pc, #60]	; (4079d4 <__libc_init_array+0x40>)
  407998:	4d0f      	ldr	r5, [pc, #60]	; (4079d8 <__libc_init_array+0x44>)
  40799a:	1b76      	subs	r6, r6, r5
  40799c:	10b6      	asrs	r6, r6, #2
  40799e:	bf18      	it	ne
  4079a0:	2400      	movne	r4, #0
  4079a2:	d005      	beq.n	4079b0 <__libc_init_array+0x1c>
  4079a4:	3401      	adds	r4, #1
  4079a6:	f855 3b04 	ldr.w	r3, [r5], #4
  4079aa:	4798      	blx	r3
  4079ac:	42a6      	cmp	r6, r4
  4079ae:	d1f9      	bne.n	4079a4 <__libc_init_array+0x10>
  4079b0:	4e0a      	ldr	r6, [pc, #40]	; (4079dc <__libc_init_array+0x48>)
  4079b2:	4d0b      	ldr	r5, [pc, #44]	; (4079e0 <__libc_init_array+0x4c>)
  4079b4:	1b76      	subs	r6, r6, r5
  4079b6:	f007 fbf5 	bl	40f1a4 <_init>
  4079ba:	10b6      	asrs	r6, r6, #2
  4079bc:	bf18      	it	ne
  4079be:	2400      	movne	r4, #0
  4079c0:	d006      	beq.n	4079d0 <__libc_init_array+0x3c>
  4079c2:	3401      	adds	r4, #1
  4079c4:	f855 3b04 	ldr.w	r3, [r5], #4
  4079c8:	4798      	blx	r3
  4079ca:	42a6      	cmp	r6, r4
  4079cc:	d1f9      	bne.n	4079c2 <__libc_init_array+0x2e>
  4079ce:	bd70      	pop	{r4, r5, r6, pc}
  4079d0:	bd70      	pop	{r4, r5, r6, pc}
  4079d2:	bf00      	nop
  4079d4:	0040f1b0 	.word	0x0040f1b0
  4079d8:	0040f1b0 	.word	0x0040f1b0
  4079dc:	0040f1b8 	.word	0x0040f1b8
  4079e0:	0040f1b0 	.word	0x0040f1b0

004079e4 <iprintf>:
  4079e4:	b40f      	push	{r0, r1, r2, r3}
  4079e6:	b500      	push	{lr}
  4079e8:	4907      	ldr	r1, [pc, #28]	; (407a08 <iprintf+0x24>)
  4079ea:	b083      	sub	sp, #12
  4079ec:	ab04      	add	r3, sp, #16
  4079ee:	6808      	ldr	r0, [r1, #0]
  4079f0:	f853 2b04 	ldr.w	r2, [r3], #4
  4079f4:	6881      	ldr	r1, [r0, #8]
  4079f6:	9301      	str	r3, [sp, #4]
  4079f8:	f001 fd3a 	bl	409470 <_vfiprintf_r>
  4079fc:	b003      	add	sp, #12
  4079fe:	f85d eb04 	ldr.w	lr, [sp], #4
  407a02:	b004      	add	sp, #16
  407a04:	4770      	bx	lr
  407a06:	bf00      	nop
  407a08:	20400448 	.word	0x20400448

00407a0c <memset>:
  407a0c:	b470      	push	{r4, r5, r6}
  407a0e:	0784      	lsls	r4, r0, #30
  407a10:	d046      	beq.n	407aa0 <memset+0x94>
  407a12:	1e54      	subs	r4, r2, #1
  407a14:	2a00      	cmp	r2, #0
  407a16:	d041      	beq.n	407a9c <memset+0x90>
  407a18:	b2cd      	uxtb	r5, r1
  407a1a:	4603      	mov	r3, r0
  407a1c:	e002      	b.n	407a24 <memset+0x18>
  407a1e:	1e62      	subs	r2, r4, #1
  407a20:	b3e4      	cbz	r4, 407a9c <memset+0x90>
  407a22:	4614      	mov	r4, r2
  407a24:	f803 5b01 	strb.w	r5, [r3], #1
  407a28:	079a      	lsls	r2, r3, #30
  407a2a:	d1f8      	bne.n	407a1e <memset+0x12>
  407a2c:	2c03      	cmp	r4, #3
  407a2e:	d92e      	bls.n	407a8e <memset+0x82>
  407a30:	b2cd      	uxtb	r5, r1
  407a32:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  407a36:	2c0f      	cmp	r4, #15
  407a38:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407a3c:	d919      	bls.n	407a72 <memset+0x66>
  407a3e:	f103 0210 	add.w	r2, r3, #16
  407a42:	4626      	mov	r6, r4
  407a44:	3e10      	subs	r6, #16
  407a46:	2e0f      	cmp	r6, #15
  407a48:	f842 5c10 	str.w	r5, [r2, #-16]
  407a4c:	f842 5c0c 	str.w	r5, [r2, #-12]
  407a50:	f842 5c08 	str.w	r5, [r2, #-8]
  407a54:	f842 5c04 	str.w	r5, [r2, #-4]
  407a58:	f102 0210 	add.w	r2, r2, #16
  407a5c:	d8f2      	bhi.n	407a44 <memset+0x38>
  407a5e:	f1a4 0210 	sub.w	r2, r4, #16
  407a62:	f022 020f 	bic.w	r2, r2, #15
  407a66:	f004 040f 	and.w	r4, r4, #15
  407a6a:	3210      	adds	r2, #16
  407a6c:	2c03      	cmp	r4, #3
  407a6e:	4413      	add	r3, r2
  407a70:	d90d      	bls.n	407a8e <memset+0x82>
  407a72:	461e      	mov	r6, r3
  407a74:	4622      	mov	r2, r4
  407a76:	3a04      	subs	r2, #4
  407a78:	2a03      	cmp	r2, #3
  407a7a:	f846 5b04 	str.w	r5, [r6], #4
  407a7e:	d8fa      	bhi.n	407a76 <memset+0x6a>
  407a80:	1f22      	subs	r2, r4, #4
  407a82:	f022 0203 	bic.w	r2, r2, #3
  407a86:	3204      	adds	r2, #4
  407a88:	4413      	add	r3, r2
  407a8a:	f004 0403 	and.w	r4, r4, #3
  407a8e:	b12c      	cbz	r4, 407a9c <memset+0x90>
  407a90:	b2c9      	uxtb	r1, r1
  407a92:	441c      	add	r4, r3
  407a94:	f803 1b01 	strb.w	r1, [r3], #1
  407a98:	42a3      	cmp	r3, r4
  407a9a:	d1fb      	bne.n	407a94 <memset+0x88>
  407a9c:	bc70      	pop	{r4, r5, r6}
  407a9e:	4770      	bx	lr
  407aa0:	4614      	mov	r4, r2
  407aa2:	4603      	mov	r3, r0
  407aa4:	e7c2      	b.n	407a2c <memset+0x20>
  407aa6:	bf00      	nop

00407aa8 <setbuf>:
  407aa8:	2900      	cmp	r1, #0
  407aaa:	bf0c      	ite	eq
  407aac:	2202      	moveq	r2, #2
  407aae:	2200      	movne	r2, #0
  407ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407ab4:	f000 b800 	b.w	407ab8 <setvbuf>

00407ab8 <setvbuf>:
  407ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407abc:	4c51      	ldr	r4, [pc, #324]	; (407c04 <setvbuf+0x14c>)
  407abe:	6825      	ldr	r5, [r4, #0]
  407ac0:	b083      	sub	sp, #12
  407ac2:	4604      	mov	r4, r0
  407ac4:	460f      	mov	r7, r1
  407ac6:	4690      	mov	r8, r2
  407ac8:	461e      	mov	r6, r3
  407aca:	b115      	cbz	r5, 407ad2 <setvbuf+0x1a>
  407acc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407ace:	2b00      	cmp	r3, #0
  407ad0:	d079      	beq.n	407bc6 <setvbuf+0x10e>
  407ad2:	f1b8 0f02 	cmp.w	r8, #2
  407ad6:	d004      	beq.n	407ae2 <setvbuf+0x2a>
  407ad8:	f1b8 0f01 	cmp.w	r8, #1
  407adc:	d87f      	bhi.n	407bde <setvbuf+0x126>
  407ade:	2e00      	cmp	r6, #0
  407ae0:	db7d      	blt.n	407bde <setvbuf+0x126>
  407ae2:	4621      	mov	r1, r4
  407ae4:	4628      	mov	r0, r5
  407ae6:	f003 fccf 	bl	40b488 <_fflush_r>
  407aea:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407aec:	b141      	cbz	r1, 407b00 <setvbuf+0x48>
  407aee:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407af2:	4299      	cmp	r1, r3
  407af4:	d002      	beq.n	407afc <setvbuf+0x44>
  407af6:	4628      	mov	r0, r5
  407af8:	f003 fe24 	bl	40b744 <_free_r>
  407afc:	2300      	movs	r3, #0
  407afe:	6323      	str	r3, [r4, #48]	; 0x30
  407b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407b04:	2200      	movs	r2, #0
  407b06:	61a2      	str	r2, [r4, #24]
  407b08:	6062      	str	r2, [r4, #4]
  407b0a:	061a      	lsls	r2, r3, #24
  407b0c:	d454      	bmi.n	407bb8 <setvbuf+0x100>
  407b0e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  407b12:	f023 0303 	bic.w	r3, r3, #3
  407b16:	f1b8 0f02 	cmp.w	r8, #2
  407b1a:	81a3      	strh	r3, [r4, #12]
  407b1c:	d039      	beq.n	407b92 <setvbuf+0xda>
  407b1e:	ab01      	add	r3, sp, #4
  407b20:	466a      	mov	r2, sp
  407b22:	4621      	mov	r1, r4
  407b24:	4628      	mov	r0, r5
  407b26:	f004 f8af 	bl	40bc88 <__swhatbuf_r>
  407b2a:	89a3      	ldrh	r3, [r4, #12]
  407b2c:	4318      	orrs	r0, r3
  407b2e:	81a0      	strh	r0, [r4, #12]
  407b30:	b326      	cbz	r6, 407b7c <setvbuf+0xc4>
  407b32:	b327      	cbz	r7, 407b7e <setvbuf+0xc6>
  407b34:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407b36:	2b00      	cmp	r3, #0
  407b38:	d04d      	beq.n	407bd6 <setvbuf+0x11e>
  407b3a:	9b00      	ldr	r3, [sp, #0]
  407b3c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  407b40:	6027      	str	r7, [r4, #0]
  407b42:	429e      	cmp	r6, r3
  407b44:	bf1c      	itt	ne
  407b46:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  407b4a:	81a0      	strhne	r0, [r4, #12]
  407b4c:	f1b8 0f01 	cmp.w	r8, #1
  407b50:	bf08      	it	eq
  407b52:	f040 0001 	orreq.w	r0, r0, #1
  407b56:	b283      	uxth	r3, r0
  407b58:	bf08      	it	eq
  407b5a:	81a0      	strheq	r0, [r4, #12]
  407b5c:	f003 0008 	and.w	r0, r3, #8
  407b60:	b280      	uxth	r0, r0
  407b62:	6127      	str	r7, [r4, #16]
  407b64:	6166      	str	r6, [r4, #20]
  407b66:	b318      	cbz	r0, 407bb0 <setvbuf+0xf8>
  407b68:	f013 0001 	ands.w	r0, r3, #1
  407b6c:	d02f      	beq.n	407bce <setvbuf+0x116>
  407b6e:	2000      	movs	r0, #0
  407b70:	4276      	negs	r6, r6
  407b72:	61a6      	str	r6, [r4, #24]
  407b74:	60a0      	str	r0, [r4, #8]
  407b76:	b003      	add	sp, #12
  407b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407b7c:	9e00      	ldr	r6, [sp, #0]
  407b7e:	4630      	mov	r0, r6
  407b80:	f004 f8f6 	bl	40bd70 <malloc>
  407b84:	4607      	mov	r7, r0
  407b86:	b368      	cbz	r0, 407be4 <setvbuf+0x12c>
  407b88:	89a3      	ldrh	r3, [r4, #12]
  407b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407b8e:	81a3      	strh	r3, [r4, #12]
  407b90:	e7d0      	b.n	407b34 <setvbuf+0x7c>
  407b92:	2000      	movs	r0, #0
  407b94:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407b98:	f043 0302 	orr.w	r3, r3, #2
  407b9c:	2500      	movs	r5, #0
  407b9e:	2101      	movs	r1, #1
  407ba0:	81a3      	strh	r3, [r4, #12]
  407ba2:	60a5      	str	r5, [r4, #8]
  407ba4:	6022      	str	r2, [r4, #0]
  407ba6:	6122      	str	r2, [r4, #16]
  407ba8:	6161      	str	r1, [r4, #20]
  407baa:	b003      	add	sp, #12
  407bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407bb0:	60a0      	str	r0, [r4, #8]
  407bb2:	b003      	add	sp, #12
  407bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407bb8:	6921      	ldr	r1, [r4, #16]
  407bba:	4628      	mov	r0, r5
  407bbc:	f003 fdc2 	bl	40b744 <_free_r>
  407bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407bc4:	e7a3      	b.n	407b0e <setvbuf+0x56>
  407bc6:	4628      	mov	r0, r5
  407bc8:	f003 fcf2 	bl	40b5b0 <__sinit>
  407bcc:	e781      	b.n	407ad2 <setvbuf+0x1a>
  407bce:	60a6      	str	r6, [r4, #8]
  407bd0:	b003      	add	sp, #12
  407bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407bd6:	4628      	mov	r0, r5
  407bd8:	f003 fcea 	bl	40b5b0 <__sinit>
  407bdc:	e7ad      	b.n	407b3a <setvbuf+0x82>
  407bde:	f04f 30ff 	mov.w	r0, #4294967295
  407be2:	e7e2      	b.n	407baa <setvbuf+0xf2>
  407be4:	f8dd 9000 	ldr.w	r9, [sp]
  407be8:	45b1      	cmp	r9, r6
  407bea:	d006      	beq.n	407bfa <setvbuf+0x142>
  407bec:	4648      	mov	r0, r9
  407bee:	f004 f8bf 	bl	40bd70 <malloc>
  407bf2:	4607      	mov	r7, r0
  407bf4:	b108      	cbz	r0, 407bfa <setvbuf+0x142>
  407bf6:	464e      	mov	r6, r9
  407bf8:	e7c6      	b.n	407b88 <setvbuf+0xd0>
  407bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407bfe:	f04f 30ff 	mov.w	r0, #4294967295
  407c02:	e7c7      	b.n	407b94 <setvbuf+0xdc>
  407c04:	20400448 	.word	0x20400448

00407c08 <sprintf>:
  407c08:	b40e      	push	{r1, r2, r3}
  407c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
  407c0c:	b09c      	sub	sp, #112	; 0x70
  407c0e:	ab21      	add	r3, sp, #132	; 0x84
  407c10:	490f      	ldr	r1, [pc, #60]	; (407c50 <sprintf+0x48>)
  407c12:	f853 2b04 	ldr.w	r2, [r3], #4
  407c16:	9301      	str	r3, [sp, #4]
  407c18:	4605      	mov	r5, r0
  407c1a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  407c1e:	6808      	ldr	r0, [r1, #0]
  407c20:	9502      	str	r5, [sp, #8]
  407c22:	f44f 7702 	mov.w	r7, #520	; 0x208
  407c26:	f64f 76ff 	movw	r6, #65535	; 0xffff
  407c2a:	a902      	add	r1, sp, #8
  407c2c:	9506      	str	r5, [sp, #24]
  407c2e:	f8ad 7014 	strh.w	r7, [sp, #20]
  407c32:	9404      	str	r4, [sp, #16]
  407c34:	9407      	str	r4, [sp, #28]
  407c36:	f8ad 6016 	strh.w	r6, [sp, #22]
  407c3a:	f000 f88f 	bl	407d5c <_svfprintf_r>
  407c3e:	9b02      	ldr	r3, [sp, #8]
  407c40:	2200      	movs	r2, #0
  407c42:	701a      	strb	r2, [r3, #0]
  407c44:	b01c      	add	sp, #112	; 0x70
  407c46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407c4a:	b003      	add	sp, #12
  407c4c:	4770      	bx	lr
  407c4e:	bf00      	nop
  407c50:	20400448 	.word	0x20400448
	...

00407c80 <strlen>:
  407c80:	f890 f000 	pld	[r0]
  407c84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407c88:	f020 0107 	bic.w	r1, r0, #7
  407c8c:	f06f 0c00 	mvn.w	ip, #0
  407c90:	f010 0407 	ands.w	r4, r0, #7
  407c94:	f891 f020 	pld	[r1, #32]
  407c98:	f040 8049 	bne.w	407d2e <strlen+0xae>
  407c9c:	f04f 0400 	mov.w	r4, #0
  407ca0:	f06f 0007 	mvn.w	r0, #7
  407ca4:	e9d1 2300 	ldrd	r2, r3, [r1]
  407ca8:	f891 f040 	pld	[r1, #64]	; 0x40
  407cac:	f100 0008 	add.w	r0, r0, #8
  407cb0:	fa82 f24c 	uadd8	r2, r2, ip
  407cb4:	faa4 f28c 	sel	r2, r4, ip
  407cb8:	fa83 f34c 	uadd8	r3, r3, ip
  407cbc:	faa2 f38c 	sel	r3, r2, ip
  407cc0:	bb4b      	cbnz	r3, 407d16 <strlen+0x96>
  407cc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407cc6:	fa82 f24c 	uadd8	r2, r2, ip
  407cca:	f100 0008 	add.w	r0, r0, #8
  407cce:	faa4 f28c 	sel	r2, r4, ip
  407cd2:	fa83 f34c 	uadd8	r3, r3, ip
  407cd6:	faa2 f38c 	sel	r3, r2, ip
  407cda:	b9e3      	cbnz	r3, 407d16 <strlen+0x96>
  407cdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407ce0:	fa82 f24c 	uadd8	r2, r2, ip
  407ce4:	f100 0008 	add.w	r0, r0, #8
  407ce8:	faa4 f28c 	sel	r2, r4, ip
  407cec:	fa83 f34c 	uadd8	r3, r3, ip
  407cf0:	faa2 f38c 	sel	r3, r2, ip
  407cf4:	b97b      	cbnz	r3, 407d16 <strlen+0x96>
  407cf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  407cfa:	f101 0120 	add.w	r1, r1, #32
  407cfe:	fa82 f24c 	uadd8	r2, r2, ip
  407d02:	f100 0008 	add.w	r0, r0, #8
  407d06:	faa4 f28c 	sel	r2, r4, ip
  407d0a:	fa83 f34c 	uadd8	r3, r3, ip
  407d0e:	faa2 f38c 	sel	r3, r2, ip
  407d12:	2b00      	cmp	r3, #0
  407d14:	d0c6      	beq.n	407ca4 <strlen+0x24>
  407d16:	2a00      	cmp	r2, #0
  407d18:	bf04      	itt	eq
  407d1a:	3004      	addeq	r0, #4
  407d1c:	461a      	moveq	r2, r3
  407d1e:	ba12      	rev	r2, r2
  407d20:	fab2 f282 	clz	r2, r2
  407d24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407d28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  407d2c:	4770      	bx	lr
  407d2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407d32:	f004 0503 	and.w	r5, r4, #3
  407d36:	f1c4 0000 	rsb	r0, r4, #0
  407d3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  407d3e:	f014 0f04 	tst.w	r4, #4
  407d42:	f891 f040 	pld	[r1, #64]	; 0x40
  407d46:	fa0c f505 	lsl.w	r5, ip, r5
  407d4a:	ea62 0205 	orn	r2, r2, r5
  407d4e:	bf1c      	itt	ne
  407d50:	ea63 0305 	ornne	r3, r3, r5
  407d54:	4662      	movne	r2, ip
  407d56:	f04f 0400 	mov.w	r4, #0
  407d5a:	e7a9      	b.n	407cb0 <strlen+0x30>

00407d5c <_svfprintf_r>:
  407d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d60:	b0c1      	sub	sp, #260	; 0x104
  407d62:	460c      	mov	r4, r1
  407d64:	9109      	str	r1, [sp, #36]	; 0x24
  407d66:	4615      	mov	r5, r2
  407d68:	930e      	str	r3, [sp, #56]	; 0x38
  407d6a:	900a      	str	r0, [sp, #40]	; 0x28
  407d6c:	f003 ff88 	bl	40bc80 <_localeconv_r>
  407d70:	6803      	ldr	r3, [r0, #0]
  407d72:	9317      	str	r3, [sp, #92]	; 0x5c
  407d74:	4618      	mov	r0, r3
  407d76:	f7ff ff83 	bl	407c80 <strlen>
  407d7a:	89a3      	ldrh	r3, [r4, #12]
  407d7c:	9016      	str	r0, [sp, #88]	; 0x58
  407d7e:	061e      	lsls	r6, r3, #24
  407d80:	d503      	bpl.n	407d8a <_svfprintf_r+0x2e>
  407d82:	6923      	ldr	r3, [r4, #16]
  407d84:	2b00      	cmp	r3, #0
  407d86:	f001 8119 	beq.w	408fbc <_svfprintf_r+0x1260>
  407d8a:	2300      	movs	r3, #0
  407d8c:	461a      	mov	r2, r3
  407d8e:	9312      	str	r3, [sp, #72]	; 0x48
  407d90:	9325      	str	r3, [sp, #148]	; 0x94
  407d92:	9324      	str	r3, [sp, #144]	; 0x90
  407d94:	9319      	str	r3, [sp, #100]	; 0x64
  407d96:	930b      	str	r3, [sp, #44]	; 0x2c
  407d98:	f8df a464 	ldr.w	sl, [pc, #1124]	; 408200 <_svfprintf_r+0x4a4>
  407d9c:	9214      	str	r2, [sp, #80]	; 0x50
  407d9e:	ab30      	add	r3, sp, #192	; 0xc0
  407da0:	9323      	str	r3, [sp, #140]	; 0x8c
  407da2:	4699      	mov	r9, r3
  407da4:	9215      	str	r2, [sp, #84]	; 0x54
  407da6:	46a8      	mov	r8, r5
  407da8:	f898 3000 	ldrb.w	r3, [r8]
  407dac:	4644      	mov	r4, r8
  407dae:	b1eb      	cbz	r3, 407dec <_svfprintf_r+0x90>
  407db0:	2b25      	cmp	r3, #37	; 0x25
  407db2:	d102      	bne.n	407dba <_svfprintf_r+0x5e>
  407db4:	e01a      	b.n	407dec <_svfprintf_r+0x90>
  407db6:	2b25      	cmp	r3, #37	; 0x25
  407db8:	d003      	beq.n	407dc2 <_svfprintf_r+0x66>
  407dba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  407dbe:	2b00      	cmp	r3, #0
  407dc0:	d1f9      	bne.n	407db6 <_svfprintf_r+0x5a>
  407dc2:	ebc8 0504 	rsb	r5, r8, r4
  407dc6:	b18d      	cbz	r5, 407dec <_svfprintf_r+0x90>
  407dc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407dca:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407dcc:	f8c9 8000 	str.w	r8, [r9]
  407dd0:	3301      	adds	r3, #1
  407dd2:	442a      	add	r2, r5
  407dd4:	2b07      	cmp	r3, #7
  407dd6:	f8c9 5004 	str.w	r5, [r9, #4]
  407dda:	9225      	str	r2, [sp, #148]	; 0x94
  407ddc:	9324      	str	r3, [sp, #144]	; 0x90
  407dde:	f300 80a6 	bgt.w	407f2e <_svfprintf_r+0x1d2>
  407de2:	f109 0908 	add.w	r9, r9, #8
  407de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407de8:	442b      	add	r3, r5
  407dea:	930b      	str	r3, [sp, #44]	; 0x2c
  407dec:	7823      	ldrb	r3, [r4, #0]
  407dee:	2b00      	cmp	r3, #0
  407df0:	f000 80a6 	beq.w	407f40 <_svfprintf_r+0x1e4>
  407df4:	2300      	movs	r3, #0
  407df6:	461a      	mov	r2, r3
  407df8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407dfc:	4619      	mov	r1, r3
  407dfe:	930c      	str	r3, [sp, #48]	; 0x30
  407e00:	9307      	str	r3, [sp, #28]
  407e02:	f04f 3bff 	mov.w	fp, #4294967295
  407e06:	7863      	ldrb	r3, [r4, #1]
  407e08:	f104 0801 	add.w	r8, r4, #1
  407e0c:	465d      	mov	r5, fp
  407e0e:	f108 0801 	add.w	r8, r8, #1
  407e12:	f1a3 0020 	sub.w	r0, r3, #32
  407e16:	2858      	cmp	r0, #88	; 0x58
  407e18:	f200 8425 	bhi.w	408666 <_svfprintf_r+0x90a>
  407e1c:	e8df f010 	tbh	[pc, r0, lsl #1]
  407e20:	04230388 	.word	0x04230388
  407e24:	03900423 	.word	0x03900423
  407e28:	04230423 	.word	0x04230423
  407e2c:	04230423 	.word	0x04230423
  407e30:	04230423 	.word	0x04230423
  407e34:	03a50397 	.word	0x03a50397
  407e38:	005d0423 	.word	0x005d0423
  407e3c:	042300e2 	.word	0x042300e2
  407e40:	010500fe 	.word	0x010500fe
  407e44:	01050105 	.word	0x01050105
  407e48:	01050105 	.word	0x01050105
  407e4c:	01050105 	.word	0x01050105
  407e50:	01050105 	.word	0x01050105
  407e54:	04230423 	.word	0x04230423
  407e58:	04230423 	.word	0x04230423
  407e5c:	04230423 	.word	0x04230423
  407e60:	04230423 	.word	0x04230423
  407e64:	04230423 	.word	0x04230423
  407e68:	02810115 	.word	0x02810115
  407e6c:	02810423 	.word	0x02810423
  407e70:	04230423 	.word	0x04230423
  407e74:	04230423 	.word	0x04230423
  407e78:	042302c6 	.word	0x042302c6
  407e7c:	02cd0423 	.word	0x02cd0423
  407e80:	04230423 	.word	0x04230423
  407e84:	04230423 	.word	0x04230423
  407e88:	02f70423 	.word	0x02f70423
  407e8c:	04230423 	.word	0x04230423
  407e90:	04230325 	.word	0x04230325
  407e94:	04230423 	.word	0x04230423
  407e98:	04230423 	.word	0x04230423
  407e9c:	04230423 	.word	0x04230423
  407ea0:	04230423 	.word	0x04230423
  407ea4:	03660423 	.word	0x03660423
  407ea8:	02810379 	.word	0x02810379
  407eac:	02810281 	.word	0x02810281
  407eb0:	03790381 	.word	0x03790381
  407eb4:	04230423 	.word	0x04230423
  407eb8:	042303d1 	.word	0x042303d1
  407ebc:	00a303db 	.word	0x00a303db
  407ec0:	03ee0064 	.word	0x03ee0064
  407ec4:	03f50423 	.word	0x03f50423
  407ec8:	03aa0423 	.word	0x03aa0423
  407ecc:	04230423 	.word	0x04230423
  407ed0:	03bc      	.short	0x03bc
  407ed2:	980c      	ldr	r0, [sp, #48]	; 0x30
  407ed4:	930e      	str	r3, [sp, #56]	; 0x38
  407ed6:	4240      	negs	r0, r0
  407ed8:	900c      	str	r0, [sp, #48]	; 0x30
  407eda:	9b07      	ldr	r3, [sp, #28]
  407edc:	f043 0304 	orr.w	r3, r3, #4
  407ee0:	9307      	str	r3, [sp, #28]
  407ee2:	f898 3000 	ldrb.w	r3, [r8]
  407ee6:	e792      	b.n	407e0e <_svfprintf_r+0xb2>
  407ee8:	980e      	ldr	r0, [sp, #56]	; 0x38
  407eea:	46ab      	mov	fp, r5
  407eec:	2100      	movs	r1, #0
  407eee:	6804      	ldr	r4, [r0, #0]
  407ef0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407ef4:	1d07      	adds	r7, r0, #4
  407ef6:	9807      	ldr	r0, [sp, #28]
  407ef8:	2330      	movs	r3, #48	; 0x30
  407efa:	2278      	movs	r2, #120	; 0x78
  407efc:	458b      	cmp	fp, r1
  407efe:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  407f02:	f04f 0500 	mov.w	r5, #0
  407f06:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  407f0a:	f040 0302 	orr.w	r3, r0, #2
  407f0e:	f2c0 83c7 	blt.w	4086a0 <_svfprintf_r+0x944>
  407f12:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  407f16:	f043 0302 	orr.w	r3, r3, #2
  407f1a:	9307      	str	r3, [sp, #28]
  407f1c:	ea54 0305 	orrs.w	r3, r4, r5
  407f20:	970e      	str	r7, [sp, #56]	; 0x38
  407f22:	f000 8393 	beq.w	40864c <_svfprintf_r+0x8f0>
  407f26:	460f      	mov	r7, r1
  407f28:	9211      	str	r2, [sp, #68]	; 0x44
  407f2a:	48b3      	ldr	r0, [pc, #716]	; (4081f8 <_svfprintf_r+0x49c>)
  407f2c:	e2ce      	b.n	4084cc <_svfprintf_r+0x770>
  407f2e:	aa23      	add	r2, sp, #140	; 0x8c
  407f30:	9909      	ldr	r1, [sp, #36]	; 0x24
  407f32:	980a      	ldr	r0, [sp, #40]	; 0x28
  407f34:	f005 f882 	bl	40d03c <__ssprint_r>
  407f38:	b948      	cbnz	r0, 407f4e <_svfprintf_r+0x1f2>
  407f3a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  407f3e:	e752      	b.n	407de6 <_svfprintf_r+0x8a>
  407f40:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407f42:	b123      	cbz	r3, 407f4e <_svfprintf_r+0x1f2>
  407f44:	980a      	ldr	r0, [sp, #40]	; 0x28
  407f46:	9909      	ldr	r1, [sp, #36]	; 0x24
  407f48:	aa23      	add	r2, sp, #140	; 0x8c
  407f4a:	f005 f877 	bl	40d03c <__ssprint_r>
  407f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407f50:	899b      	ldrh	r3, [r3, #12]
  407f52:	f013 0f40 	tst.w	r3, #64	; 0x40
  407f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407f58:	bf18      	it	ne
  407f5a:	f04f 33ff 	movne.w	r3, #4294967295
  407f5e:	4618      	mov	r0, r3
  407f60:	b041      	add	sp, #260	; 0x104
  407f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f66:	9311      	str	r3, [sp, #68]	; 0x44
  407f68:	46ab      	mov	fp, r5
  407f6a:	2a00      	cmp	r2, #0
  407f6c:	f041 8223 	bne.w	4093b6 <_svfprintf_r+0x165a>
  407f70:	9a07      	ldr	r2, [sp, #28]
  407f72:	f012 0320 	ands.w	r3, r2, #32
  407f76:	f000 822e 	beq.w	4083d6 <_svfprintf_r+0x67a>
  407f7a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  407f7c:	3707      	adds	r7, #7
  407f7e:	f027 0307 	bic.w	r3, r7, #7
  407f82:	2700      	movs	r7, #0
  407f84:	f103 0108 	add.w	r1, r3, #8
  407f88:	45bb      	cmp	fp, r7
  407f8a:	910e      	str	r1, [sp, #56]	; 0x38
  407f8c:	e9d3 4500 	ldrd	r4, r5, [r3]
  407f90:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  407f94:	f2c0 8752 	blt.w	408e3c <_svfprintf_r+0x10e0>
  407f98:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  407f9c:	9307      	str	r3, [sp, #28]
  407f9e:	ea54 0305 	orrs.w	r3, r4, r5
  407fa2:	f000 8375 	beq.w	408690 <_svfprintf_r+0x934>
  407fa6:	ae30      	add	r6, sp, #192	; 0xc0
  407fa8:	08e2      	lsrs	r2, r4, #3
  407faa:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  407fae:	08e9      	lsrs	r1, r5, #3
  407fb0:	f004 0307 	and.w	r3, r4, #7
  407fb4:	460d      	mov	r5, r1
  407fb6:	4614      	mov	r4, r2
  407fb8:	3330      	adds	r3, #48	; 0x30
  407fba:	ea54 0205 	orrs.w	r2, r4, r5
  407fbe:	f806 3d01 	strb.w	r3, [r6, #-1]!
  407fc2:	d1f1      	bne.n	407fa8 <_svfprintf_r+0x24c>
  407fc4:	9a07      	ldr	r2, [sp, #28]
  407fc6:	07d1      	lsls	r1, r2, #31
  407fc8:	f140 8084 	bpl.w	4080d4 <_svfprintf_r+0x378>
  407fcc:	2b30      	cmp	r3, #48	; 0x30
  407fce:	f000 8081 	beq.w	4080d4 <_svfprintf_r+0x378>
  407fd2:	2230      	movs	r2, #48	; 0x30
  407fd4:	1e73      	subs	r3, r6, #1
  407fd6:	f806 2c01 	strb.w	r2, [r6, #-1]
  407fda:	aa30      	add	r2, sp, #192	; 0xc0
  407fdc:	1ad2      	subs	r2, r2, r3
  407fde:	920d      	str	r2, [sp, #52]	; 0x34
  407fe0:	461e      	mov	r6, r3
  407fe2:	e07a      	b.n	4080da <_svfprintf_r+0x37e>
  407fe4:	f898 3000 	ldrb.w	r3, [r8]
  407fe8:	2b2a      	cmp	r3, #42	; 0x2a
  407fea:	f108 0401 	add.w	r4, r8, #1
  407fee:	f001 81b1 	beq.w	409354 <_svfprintf_r+0x15f8>
  407ff2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407ff6:	2809      	cmp	r0, #9
  407ff8:	bf98      	it	ls
  407ffa:	2500      	movls	r5, #0
  407ffc:	f201 8164 	bhi.w	4092c8 <_svfprintf_r+0x156c>
  408000:	f814 3b01 	ldrb.w	r3, [r4], #1
  408004:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  408008:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  40800c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408010:	2809      	cmp	r0, #9
  408012:	d9f5      	bls.n	408000 <_svfprintf_r+0x2a4>
  408014:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  408018:	46a0      	mov	r8, r4
  40801a:	e6fa      	b.n	407e12 <_svfprintf_r+0xb6>
  40801c:	9b07      	ldr	r3, [sp, #28]
  40801e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408022:	9307      	str	r3, [sp, #28]
  408024:	f898 3000 	ldrb.w	r3, [r8]
  408028:	e6f1      	b.n	407e0e <_svfprintf_r+0xb2>
  40802a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40802e:	2300      	movs	r3, #0
  408030:	461c      	mov	r4, r3
  408032:	f818 3b01 	ldrb.w	r3, [r8], #1
  408036:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40803a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40803e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408042:	2809      	cmp	r0, #9
  408044:	d9f5      	bls.n	408032 <_svfprintf_r+0x2d6>
  408046:	940c      	str	r4, [sp, #48]	; 0x30
  408048:	e6e3      	b.n	407e12 <_svfprintf_r+0xb6>
  40804a:	9311      	str	r3, [sp, #68]	; 0x44
  40804c:	46ab      	mov	fp, r5
  40804e:	2a00      	cmp	r2, #0
  408050:	f041 81c9 	bne.w	4093e6 <_svfprintf_r+0x168a>
  408054:	9b07      	ldr	r3, [sp, #28]
  408056:	f043 0310 	orr.w	r3, r3, #16
  40805a:	9307      	str	r3, [sp, #28]
  40805c:	9b07      	ldr	r3, [sp, #28]
  40805e:	0698      	lsls	r0, r3, #26
  408060:	f140 8530 	bpl.w	408ac4 <_svfprintf_r+0xd68>
  408064:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408066:	3707      	adds	r7, #7
  408068:	f027 0707 	bic.w	r7, r7, #7
  40806c:	e9d7 2300 	ldrd	r2, r3, [r7]
  408070:	f107 0108 	add.w	r1, r7, #8
  408074:	910e      	str	r1, [sp, #56]	; 0x38
  408076:	4614      	mov	r4, r2
  408078:	461d      	mov	r5, r3
  40807a:	2a00      	cmp	r2, #0
  40807c:	f173 0300 	sbcs.w	r3, r3, #0
  408080:	f2c0 855b 	blt.w	408b3a <_svfprintf_r+0xdde>
  408084:	f1bb 0f00 	cmp.w	fp, #0
  408088:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40808c:	f2c0 8538 	blt.w	408b00 <_svfprintf_r+0xda4>
  408090:	9b07      	ldr	r3, [sp, #28]
  408092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408096:	9307      	str	r3, [sp, #28]
  408098:	ea54 0305 	orrs.w	r3, r4, r5
  40809c:	f000 81db 	beq.w	408456 <_svfprintf_r+0x6fa>
  4080a0:	2d00      	cmp	r5, #0
  4080a2:	bf08      	it	eq
  4080a4:	2c0a      	cmpeq	r4, #10
  4080a6:	f0c0 81db 	bcc.w	408460 <_svfprintf_r+0x704>
  4080aa:	ae30      	add	r6, sp, #192	; 0xc0
  4080ac:	4620      	mov	r0, r4
  4080ae:	4629      	mov	r1, r5
  4080b0:	220a      	movs	r2, #10
  4080b2:	2300      	movs	r3, #0
  4080b4:	f7ff fae2 	bl	40767c <__aeabi_uldivmod>
  4080b8:	3230      	adds	r2, #48	; 0x30
  4080ba:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4080be:	4620      	mov	r0, r4
  4080c0:	4629      	mov	r1, r5
  4080c2:	2300      	movs	r3, #0
  4080c4:	220a      	movs	r2, #10
  4080c6:	f7ff fad9 	bl	40767c <__aeabi_uldivmod>
  4080ca:	4604      	mov	r4, r0
  4080cc:	460d      	mov	r5, r1
  4080ce:	ea54 0305 	orrs.w	r3, r4, r5
  4080d2:	d1eb      	bne.n	4080ac <_svfprintf_r+0x350>
  4080d4:	ab30      	add	r3, sp, #192	; 0xc0
  4080d6:	1b9b      	subs	r3, r3, r6
  4080d8:	930d      	str	r3, [sp, #52]	; 0x34
  4080da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4080dc:	455b      	cmp	r3, fp
  4080de:	bfb8      	it	lt
  4080e0:	465b      	movlt	r3, fp
  4080e2:	9308      	str	r3, [sp, #32]
  4080e4:	2300      	movs	r3, #0
  4080e6:	9313      	str	r3, [sp, #76]	; 0x4c
  4080e8:	b117      	cbz	r7, 4080f0 <_svfprintf_r+0x394>
  4080ea:	9b08      	ldr	r3, [sp, #32]
  4080ec:	3301      	adds	r3, #1
  4080ee:	9308      	str	r3, [sp, #32]
  4080f0:	9b07      	ldr	r3, [sp, #28]
  4080f2:	f013 0302 	ands.w	r3, r3, #2
  4080f6:	930f      	str	r3, [sp, #60]	; 0x3c
  4080f8:	d002      	beq.n	408100 <_svfprintf_r+0x3a4>
  4080fa:	9b08      	ldr	r3, [sp, #32]
  4080fc:	3302      	adds	r3, #2
  4080fe:	9308      	str	r3, [sp, #32]
  408100:	9b07      	ldr	r3, [sp, #28]
  408102:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  408106:	9310      	str	r3, [sp, #64]	; 0x40
  408108:	f040 82d7 	bne.w	4086ba <_svfprintf_r+0x95e>
  40810c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40810e:	9a08      	ldr	r2, [sp, #32]
  408110:	1a9d      	subs	r5, r3, r2
  408112:	2d00      	cmp	r5, #0
  408114:	f340 82d1 	ble.w	4086ba <_svfprintf_r+0x95e>
  408118:	2d10      	cmp	r5, #16
  40811a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40811c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40811e:	4f37      	ldr	r7, [pc, #220]	; (4081fc <_svfprintf_r+0x4a0>)
  408120:	dd27      	ble.n	408172 <_svfprintf_r+0x416>
  408122:	9618      	str	r6, [sp, #96]	; 0x60
  408124:	4648      	mov	r0, r9
  408126:	2410      	movs	r4, #16
  408128:	46b9      	mov	r9, r7
  40812a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40812c:	462f      	mov	r7, r5
  40812e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  408130:	e004      	b.n	40813c <_svfprintf_r+0x3e0>
  408132:	3f10      	subs	r7, #16
  408134:	2f10      	cmp	r7, #16
  408136:	f100 0008 	add.w	r0, r0, #8
  40813a:	dd16      	ble.n	40816a <_svfprintf_r+0x40e>
  40813c:	3201      	adds	r2, #1
  40813e:	4b2f      	ldr	r3, [pc, #188]	; (4081fc <_svfprintf_r+0x4a0>)
  408140:	9224      	str	r2, [sp, #144]	; 0x90
  408142:	3110      	adds	r1, #16
  408144:	2a07      	cmp	r2, #7
  408146:	9125      	str	r1, [sp, #148]	; 0x94
  408148:	e880 0018 	stmia.w	r0, {r3, r4}
  40814c:	ddf1      	ble.n	408132 <_svfprintf_r+0x3d6>
  40814e:	aa23      	add	r2, sp, #140	; 0x8c
  408150:	4631      	mov	r1, r6
  408152:	4628      	mov	r0, r5
  408154:	f004 ff72 	bl	40d03c <__ssprint_r>
  408158:	2800      	cmp	r0, #0
  40815a:	f47f aef8 	bne.w	407f4e <_svfprintf_r+0x1f2>
  40815e:	3f10      	subs	r7, #16
  408160:	2f10      	cmp	r7, #16
  408162:	9925      	ldr	r1, [sp, #148]	; 0x94
  408164:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408166:	a830      	add	r0, sp, #192	; 0xc0
  408168:	dce8      	bgt.n	40813c <_svfprintf_r+0x3e0>
  40816a:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40816c:	463d      	mov	r5, r7
  40816e:	464f      	mov	r7, r9
  408170:	4681      	mov	r9, r0
  408172:	3201      	adds	r2, #1
  408174:	186c      	adds	r4, r5, r1
  408176:	2a07      	cmp	r2, #7
  408178:	9425      	str	r4, [sp, #148]	; 0x94
  40817a:	9224      	str	r2, [sp, #144]	; 0x90
  40817c:	f8c9 7000 	str.w	r7, [r9]
  408180:	f8c9 5004 	str.w	r5, [r9, #4]
  408184:	f300 8428 	bgt.w	4089d8 <_svfprintf_r+0xc7c>
  408188:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40818c:	f109 0908 	add.w	r9, r9, #8
  408190:	b177      	cbz	r7, 4081b0 <_svfprintf_r+0x454>
  408192:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408194:	3301      	adds	r3, #1
  408196:	3401      	adds	r4, #1
  408198:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40819c:	2201      	movs	r2, #1
  40819e:	2b07      	cmp	r3, #7
  4081a0:	9425      	str	r4, [sp, #148]	; 0x94
  4081a2:	9324      	str	r3, [sp, #144]	; 0x90
  4081a4:	e889 0006 	stmia.w	r9, {r1, r2}
  4081a8:	f300 83a0 	bgt.w	4088ec <_svfprintf_r+0xb90>
  4081ac:	f109 0908 	add.w	r9, r9, #8
  4081b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4081b2:	b16b      	cbz	r3, 4081d0 <_svfprintf_r+0x474>
  4081b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4081b6:	3301      	adds	r3, #1
  4081b8:	3402      	adds	r4, #2
  4081ba:	a91c      	add	r1, sp, #112	; 0x70
  4081bc:	2202      	movs	r2, #2
  4081be:	2b07      	cmp	r3, #7
  4081c0:	9425      	str	r4, [sp, #148]	; 0x94
  4081c2:	9324      	str	r3, [sp, #144]	; 0x90
  4081c4:	e889 0006 	stmia.w	r9, {r1, r2}
  4081c8:	f300 839c 	bgt.w	408904 <_svfprintf_r+0xba8>
  4081cc:	f109 0908 	add.w	r9, r9, #8
  4081d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4081d2:	2b80      	cmp	r3, #128	; 0x80
  4081d4:	f000 82d5 	beq.w	408782 <_svfprintf_r+0xa26>
  4081d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4081da:	ebc3 070b 	rsb	r7, r3, fp
  4081de:	2f00      	cmp	r7, #0
  4081e0:	dd39      	ble.n	408256 <_svfprintf_r+0x4fa>
  4081e2:	4a07      	ldr	r2, [pc, #28]	; (408200 <_svfprintf_r+0x4a4>)
  4081e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4081e6:	920f      	str	r2, [sp, #60]	; 0x3c
  4081e8:	2f10      	cmp	r7, #16
  4081ea:	dd28      	ble.n	40823e <_svfprintf_r+0x4e2>
  4081ec:	4622      	mov	r2, r4
  4081ee:	f04f 0b10 	mov.w	fp, #16
  4081f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4081f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4081f6:	e00a      	b.n	40820e <_svfprintf_r+0x4b2>
  4081f8:	0040f03c 	.word	0x0040f03c
  4081fc:	0040f05c 	.word	0x0040f05c
  408200:	0040f008 	.word	0x0040f008
  408204:	3f10      	subs	r7, #16
  408206:	2f10      	cmp	r7, #16
  408208:	f109 0908 	add.w	r9, r9, #8
  40820c:	dd16      	ble.n	40823c <_svfprintf_r+0x4e0>
  40820e:	3301      	adds	r3, #1
  408210:	3210      	adds	r2, #16
  408212:	2b07      	cmp	r3, #7
  408214:	9225      	str	r2, [sp, #148]	; 0x94
  408216:	9324      	str	r3, [sp, #144]	; 0x90
  408218:	e889 0c00 	stmia.w	r9, {sl, fp}
  40821c:	ddf2      	ble.n	408204 <_svfprintf_r+0x4a8>
  40821e:	aa23      	add	r2, sp, #140	; 0x8c
  408220:	4621      	mov	r1, r4
  408222:	4628      	mov	r0, r5
  408224:	f004 ff0a 	bl	40d03c <__ssprint_r>
  408228:	2800      	cmp	r0, #0
  40822a:	f47f ae90 	bne.w	407f4e <_svfprintf_r+0x1f2>
  40822e:	3f10      	subs	r7, #16
  408230:	2f10      	cmp	r7, #16
  408232:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408234:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408236:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40823a:	dce8      	bgt.n	40820e <_svfprintf_r+0x4b2>
  40823c:	4614      	mov	r4, r2
  40823e:	3301      	adds	r3, #1
  408240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408242:	9324      	str	r3, [sp, #144]	; 0x90
  408244:	443c      	add	r4, r7
  408246:	2b07      	cmp	r3, #7
  408248:	9425      	str	r4, [sp, #148]	; 0x94
  40824a:	e889 0084 	stmia.w	r9, {r2, r7}
  40824e:	f300 8341 	bgt.w	4088d4 <_svfprintf_r+0xb78>
  408252:	f109 0908 	add.w	r9, r9, #8
  408256:	9b07      	ldr	r3, [sp, #28]
  408258:	05da      	lsls	r2, r3, #23
  40825a:	f100 8230 	bmi.w	4086be <_svfprintf_r+0x962>
  40825e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408260:	990d      	ldr	r1, [sp, #52]	; 0x34
  408262:	f8c9 6000 	str.w	r6, [r9]
  408266:	3301      	adds	r3, #1
  408268:	440c      	add	r4, r1
  40826a:	2b07      	cmp	r3, #7
  40826c:	9425      	str	r4, [sp, #148]	; 0x94
  40826e:	f8c9 1004 	str.w	r1, [r9, #4]
  408272:	9324      	str	r3, [sp, #144]	; 0x90
  408274:	f300 8318 	bgt.w	4088a8 <_svfprintf_r+0xb4c>
  408278:	f109 0908 	add.w	r9, r9, #8
  40827c:	9b07      	ldr	r3, [sp, #28]
  40827e:	0759      	lsls	r1, r3, #29
  408280:	d53f      	bpl.n	408302 <_svfprintf_r+0x5a6>
  408282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408284:	9a08      	ldr	r2, [sp, #32]
  408286:	1a9d      	subs	r5, r3, r2
  408288:	2d00      	cmp	r5, #0
  40828a:	dd3a      	ble.n	408302 <_svfprintf_r+0x5a6>
  40828c:	2d10      	cmp	r5, #16
  40828e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408290:	4fbc      	ldr	r7, [pc, #752]	; (408584 <_svfprintf_r+0x828>)
  408292:	dd23      	ble.n	4082dc <_svfprintf_r+0x580>
  408294:	4622      	mov	r2, r4
  408296:	2610      	movs	r6, #16
  408298:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40829c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40829e:	e004      	b.n	4082aa <_svfprintf_r+0x54e>
  4082a0:	3d10      	subs	r5, #16
  4082a2:	2d10      	cmp	r5, #16
  4082a4:	f109 0908 	add.w	r9, r9, #8
  4082a8:	dd17      	ble.n	4082da <_svfprintf_r+0x57e>
  4082aa:	3301      	adds	r3, #1
  4082ac:	49b5      	ldr	r1, [pc, #724]	; (408584 <_svfprintf_r+0x828>)
  4082ae:	9324      	str	r3, [sp, #144]	; 0x90
  4082b0:	3210      	adds	r2, #16
  4082b2:	2b07      	cmp	r3, #7
  4082b4:	9225      	str	r2, [sp, #148]	; 0x94
  4082b6:	e889 0042 	stmia.w	r9, {r1, r6}
  4082ba:	ddf1      	ble.n	4082a0 <_svfprintf_r+0x544>
  4082bc:	aa23      	add	r2, sp, #140	; 0x8c
  4082be:	4621      	mov	r1, r4
  4082c0:	4658      	mov	r0, fp
  4082c2:	f004 febb 	bl	40d03c <__ssprint_r>
  4082c6:	2800      	cmp	r0, #0
  4082c8:	f47f ae41 	bne.w	407f4e <_svfprintf_r+0x1f2>
  4082cc:	3d10      	subs	r5, #16
  4082ce:	2d10      	cmp	r5, #16
  4082d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4082d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4082d4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4082d8:	dce7      	bgt.n	4082aa <_svfprintf_r+0x54e>
  4082da:	4614      	mov	r4, r2
  4082dc:	3301      	adds	r3, #1
  4082de:	442c      	add	r4, r5
  4082e0:	2b07      	cmp	r3, #7
  4082e2:	9425      	str	r4, [sp, #148]	; 0x94
  4082e4:	9324      	str	r3, [sp, #144]	; 0x90
  4082e6:	f8c9 7000 	str.w	r7, [r9]
  4082ea:	f8c9 5004 	str.w	r5, [r9, #4]
  4082ee:	dd08      	ble.n	408302 <_svfprintf_r+0x5a6>
  4082f0:	aa23      	add	r2, sp, #140	; 0x8c
  4082f2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4082f4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4082f6:	f004 fea1 	bl	40d03c <__ssprint_r>
  4082fa:	2800      	cmp	r0, #0
  4082fc:	f47f ae27 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408300:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408306:	9908      	ldr	r1, [sp, #32]
  408308:	428a      	cmp	r2, r1
  40830a:	bfac      	ite	ge
  40830c:	189b      	addge	r3, r3, r2
  40830e:	185b      	addlt	r3, r3, r1
  408310:	930b      	str	r3, [sp, #44]	; 0x2c
  408312:	2c00      	cmp	r4, #0
  408314:	f040 82d4 	bne.w	4088c0 <_svfprintf_r+0xb64>
  408318:	2300      	movs	r3, #0
  40831a:	9324      	str	r3, [sp, #144]	; 0x90
  40831c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408320:	e542      	b.n	407da8 <_svfprintf_r+0x4c>
  408322:	9311      	str	r3, [sp, #68]	; 0x44
  408324:	46ab      	mov	fp, r5
  408326:	2a00      	cmp	r2, #0
  408328:	f041 8059 	bne.w	4093de <_svfprintf_r+0x1682>
  40832c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40832e:	3707      	adds	r7, #7
  408330:	f027 0307 	bic.w	r3, r7, #7
  408334:	f103 0208 	add.w	r2, r3, #8
  408338:	920e      	str	r2, [sp, #56]	; 0x38
  40833a:	681a      	ldr	r2, [r3, #0]
  40833c:	9214      	str	r2, [sp, #80]	; 0x50
  40833e:	685b      	ldr	r3, [r3, #4]
  408340:	9315      	str	r3, [sp, #84]	; 0x54
  408342:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408344:	9d14      	ldr	r5, [sp, #80]	; 0x50
  408346:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40834a:	4628      	mov	r0, r5
  40834c:	4621      	mov	r1, r4
  40834e:	f04f 32ff 	mov.w	r2, #4294967295
  408352:	4b8d      	ldr	r3, [pc, #564]	; (408588 <_svfprintf_r+0x82c>)
  408354:	f005 fd10 	bl	40dd78 <__aeabi_dcmpun>
  408358:	2800      	cmp	r0, #0
  40835a:	f040 84c1 	bne.w	408ce0 <_svfprintf_r+0xf84>
  40835e:	4628      	mov	r0, r5
  408360:	4621      	mov	r1, r4
  408362:	f04f 32ff 	mov.w	r2, #4294967295
  408366:	4b88      	ldr	r3, [pc, #544]	; (408588 <_svfprintf_r+0x82c>)
  408368:	f005 fce8 	bl	40dd3c <__aeabi_dcmple>
  40836c:	2800      	cmp	r0, #0
  40836e:	f040 84b7 	bne.w	408ce0 <_svfprintf_r+0xf84>
  408372:	9814      	ldr	r0, [sp, #80]	; 0x50
  408374:	9915      	ldr	r1, [sp, #84]	; 0x54
  408376:	2200      	movs	r2, #0
  408378:	2300      	movs	r3, #0
  40837a:	f005 fcd5 	bl	40dd28 <__aeabi_dcmplt>
  40837e:	2800      	cmp	r0, #0
  408380:	f040 874b 	bne.w	40921a <_svfprintf_r+0x14be>
  408384:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408388:	4e80      	ldr	r6, [pc, #512]	; (40858c <_svfprintf_r+0x830>)
  40838a:	4b81      	ldr	r3, [pc, #516]	; (408590 <_svfprintf_r+0x834>)
  40838c:	9907      	ldr	r1, [sp, #28]
  40838e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  408392:	9107      	str	r1, [sp, #28]
  408394:	9911      	ldr	r1, [sp, #68]	; 0x44
  408396:	2203      	movs	r2, #3
  408398:	f04f 0b00 	mov.w	fp, #0
  40839c:	9208      	str	r2, [sp, #32]
  40839e:	2947      	cmp	r1, #71	; 0x47
  4083a0:	bfd8      	it	le
  4083a2:	461e      	movle	r6, r3
  4083a4:	920d      	str	r2, [sp, #52]	; 0x34
  4083a6:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  4083aa:	e69d      	b.n	4080e8 <_svfprintf_r+0x38c>
  4083ac:	9b07      	ldr	r3, [sp, #28]
  4083ae:	f043 0308 	orr.w	r3, r3, #8
  4083b2:	9307      	str	r3, [sp, #28]
  4083b4:	f898 3000 	ldrb.w	r3, [r8]
  4083b8:	e529      	b.n	407e0e <_svfprintf_r+0xb2>
  4083ba:	9311      	str	r3, [sp, #68]	; 0x44
  4083bc:	46ab      	mov	fp, r5
  4083be:	2a00      	cmp	r2, #0
  4083c0:	f041 8009 	bne.w	4093d6 <_svfprintf_r+0x167a>
  4083c4:	9b07      	ldr	r3, [sp, #28]
  4083c6:	f043 0310 	orr.w	r3, r3, #16
  4083ca:	9307      	str	r3, [sp, #28]
  4083cc:	9a07      	ldr	r2, [sp, #28]
  4083ce:	f012 0320 	ands.w	r3, r2, #32
  4083d2:	f47f add2 	bne.w	407f7a <_svfprintf_r+0x21e>
  4083d6:	9907      	ldr	r1, [sp, #28]
  4083d8:	f011 0210 	ands.w	r2, r1, #16
  4083dc:	f000 8507 	beq.w	408dee <_svfprintf_r+0x1092>
  4083e0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4083e2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4083e6:	f1bb 0f00 	cmp.w	fp, #0
  4083ea:	6804      	ldr	r4, [r0, #0]
  4083ec:	f100 0704 	add.w	r7, r0, #4
  4083f0:	f04f 0500 	mov.w	r5, #0
  4083f4:	f2c0 8521 	blt.w	408e3a <_svfprintf_r+0x10de>
  4083f8:	460a      	mov	r2, r1
  4083fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4083fe:	9207      	str	r2, [sp, #28]
  408400:	ea54 0205 	orrs.w	r2, r4, r5
  408404:	970e      	str	r7, [sp, #56]	; 0x38
  408406:	f000 8143 	beq.w	408690 <_svfprintf_r+0x934>
  40840a:	461f      	mov	r7, r3
  40840c:	e5cb      	b.n	407fa6 <_svfprintf_r+0x24a>
  40840e:	9311      	str	r3, [sp, #68]	; 0x44
  408410:	46ab      	mov	fp, r5
  408412:	2a00      	cmp	r2, #0
  408414:	f040 87d7 	bne.w	4093c6 <_svfprintf_r+0x166a>
  408418:	9b07      	ldr	r3, [sp, #28]
  40841a:	f043 0310 	orr.w	r3, r3, #16
  40841e:	9307      	str	r3, [sp, #28]
  408420:	9a07      	ldr	r2, [sp, #28]
  408422:	f012 0320 	ands.w	r3, r2, #32
  408426:	f000 8332 	beq.w	408a8e <_svfprintf_r+0xd32>
  40842a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40842c:	3707      	adds	r7, #7
  40842e:	f027 0307 	bic.w	r3, r7, #7
  408432:	2700      	movs	r7, #0
  408434:	f103 0108 	add.w	r1, r3, #8
  408438:	45bb      	cmp	fp, r7
  40843a:	910e      	str	r1, [sp, #56]	; 0x38
  40843c:	e9d3 4500 	ldrd	r4, r5, [r3]
  408440:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408444:	f2c0 835c 	blt.w	408b00 <_svfprintf_r+0xda4>
  408448:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40844c:	9307      	str	r3, [sp, #28]
  40844e:	ea54 0305 	orrs.w	r3, r4, r5
  408452:	f47f ae25 	bne.w	4080a0 <_svfprintf_r+0x344>
  408456:	f1bb 0f00 	cmp.w	fp, #0
  40845a:	f000 80fe 	beq.w	40865a <_svfprintf_r+0x8fe>
  40845e:	2400      	movs	r4, #0
  408460:	ae40      	add	r6, sp, #256	; 0x100
  408462:	3430      	adds	r4, #48	; 0x30
  408464:	f806 4d41 	strb.w	r4, [r6, #-65]!
  408468:	e634      	b.n	4080d4 <_svfprintf_r+0x378>
  40846a:	9311      	str	r3, [sp, #68]	; 0x44
  40846c:	46ab      	mov	fp, r5
  40846e:	2a00      	cmp	r2, #0
  408470:	f040 87a5 	bne.w	4093be <_svfprintf_r+0x1662>
  408474:	9b07      	ldr	r3, [sp, #28]
  408476:	4847      	ldr	r0, [pc, #284]	; (408594 <_svfprintf_r+0x838>)
  408478:	069d      	lsls	r5, r3, #26
  40847a:	f140 8097 	bpl.w	4085ac <_svfprintf_r+0x850>
  40847e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408480:	3707      	adds	r7, #7
  408482:	f027 0307 	bic.w	r3, r7, #7
  408486:	e9d3 4500 	ldrd	r4, r5, [r3]
  40848a:	f103 0208 	add.w	r2, r3, #8
  40848e:	920e      	str	r2, [sp, #56]	; 0x38
  408490:	9a07      	ldr	r2, [sp, #28]
  408492:	f012 0701 	ands.w	r7, r2, #1
  408496:	f000 8241 	beq.w	40891c <_svfprintf_r+0xbc0>
  40849a:	ea54 0305 	orrs.w	r3, r4, r5
  40849e:	f000 84f5 	beq.w	408e8c <_svfprintf_r+0x1130>
  4084a2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4084a6:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  4084aa:	2700      	movs	r7, #0
  4084ac:	9a07      	ldr	r2, [sp, #28]
  4084ae:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4084b2:	2330      	movs	r3, #48	; 0x30
  4084b4:	45bb      	cmp	fp, r7
  4084b6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4084ba:	f042 0302 	orr.w	r3, r2, #2
  4084be:	f2c0 86a9 	blt.w	409214 <_svfprintf_r+0x14b8>
  4084c2:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4084c6:	f043 0302 	orr.w	r3, r3, #2
  4084ca:	9307      	str	r3, [sp, #28]
  4084cc:	ae30      	add	r6, sp, #192	; 0xc0
  4084ce:	0923      	lsrs	r3, r4, #4
  4084d0:	f004 010f 	and.w	r1, r4, #15
  4084d4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4084d8:	092a      	lsrs	r2, r5, #4
  4084da:	461c      	mov	r4, r3
  4084dc:	4615      	mov	r5, r2
  4084de:	5c43      	ldrb	r3, [r0, r1]
  4084e0:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4084e4:	ea54 0305 	orrs.w	r3, r4, r5
  4084e8:	d1f1      	bne.n	4084ce <_svfprintf_r+0x772>
  4084ea:	e5f3      	b.n	4080d4 <_svfprintf_r+0x378>
  4084ec:	990e      	ldr	r1, [sp, #56]	; 0x38
  4084ee:	9311      	str	r3, [sp, #68]	; 0x44
  4084f0:	680a      	ldr	r2, [r1, #0]
  4084f2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4084f6:	2300      	movs	r3, #0
  4084f8:	460a      	mov	r2, r1
  4084fa:	461f      	mov	r7, r3
  4084fc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408500:	3204      	adds	r2, #4
  408502:	2301      	movs	r3, #1
  408504:	9308      	str	r3, [sp, #32]
  408506:	46bb      	mov	fp, r7
  408508:	9713      	str	r7, [sp, #76]	; 0x4c
  40850a:	920e      	str	r2, [sp, #56]	; 0x38
  40850c:	930d      	str	r3, [sp, #52]	; 0x34
  40850e:	ae26      	add	r6, sp, #152	; 0x98
  408510:	e5ee      	b.n	4080f0 <_svfprintf_r+0x394>
  408512:	9311      	str	r3, [sp, #68]	; 0x44
  408514:	46ab      	mov	fp, r5
  408516:	2a00      	cmp	r2, #0
  408518:	f43f ada0 	beq.w	40805c <_svfprintf_r+0x300>
  40851c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408520:	e59c      	b.n	40805c <_svfprintf_r+0x300>
  408522:	9b07      	ldr	r3, [sp, #28]
  408524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408528:	9307      	str	r3, [sp, #28]
  40852a:	f898 3000 	ldrb.w	r3, [r8]
  40852e:	e46e      	b.n	407e0e <_svfprintf_r+0xb2>
  408530:	f898 3000 	ldrb.w	r3, [r8]
  408534:	2900      	cmp	r1, #0
  408536:	f47f ac6a 	bne.w	407e0e <_svfprintf_r+0xb2>
  40853a:	2201      	movs	r2, #1
  40853c:	2120      	movs	r1, #32
  40853e:	e466      	b.n	407e0e <_svfprintf_r+0xb2>
  408540:	9b07      	ldr	r3, [sp, #28]
  408542:	f043 0301 	orr.w	r3, r3, #1
  408546:	9307      	str	r3, [sp, #28]
  408548:	f898 3000 	ldrb.w	r3, [r8]
  40854c:	e45f      	b.n	407e0e <_svfprintf_r+0xb2>
  40854e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  408550:	6823      	ldr	r3, [r4, #0]
  408552:	930c      	str	r3, [sp, #48]	; 0x30
  408554:	4618      	mov	r0, r3
  408556:	2800      	cmp	r0, #0
  408558:	4623      	mov	r3, r4
  40855a:	f103 0304 	add.w	r3, r3, #4
  40855e:	f6ff acb8 	blt.w	407ed2 <_svfprintf_r+0x176>
  408562:	930e      	str	r3, [sp, #56]	; 0x38
  408564:	f898 3000 	ldrb.w	r3, [r8]
  408568:	e451      	b.n	407e0e <_svfprintf_r+0xb2>
  40856a:	f898 3000 	ldrb.w	r3, [r8]
  40856e:	2201      	movs	r2, #1
  408570:	212b      	movs	r1, #43	; 0x2b
  408572:	e44c      	b.n	407e0e <_svfprintf_r+0xb2>
  408574:	9311      	str	r3, [sp, #68]	; 0x44
  408576:	46ab      	mov	fp, r5
  408578:	2a00      	cmp	r2, #0
  40857a:	f43f af51 	beq.w	408420 <_svfprintf_r+0x6c4>
  40857e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408582:	e74d      	b.n	408420 <_svfprintf_r+0x6c4>
  408584:	0040f05c 	.word	0x0040f05c
  408588:	7fefffff 	.word	0x7fefffff
  40858c:	0040f01c 	.word	0x0040f01c
  408590:	0040f018 	.word	0x0040f018
  408594:	0040f028 	.word	0x0040f028
  408598:	9311      	str	r3, [sp, #68]	; 0x44
  40859a:	46ab      	mov	fp, r5
  40859c:	2a00      	cmp	r2, #0
  40859e:	f040 8703 	bne.w	4093a8 <_svfprintf_r+0x164c>
  4085a2:	9b07      	ldr	r3, [sp, #28]
  4085a4:	4899      	ldr	r0, [pc, #612]	; (40880c <_svfprintf_r+0xab0>)
  4085a6:	069d      	lsls	r5, r3, #26
  4085a8:	f53f af69 	bmi.w	40847e <_svfprintf_r+0x722>
  4085ac:	9b07      	ldr	r3, [sp, #28]
  4085ae:	06dc      	lsls	r4, r3, #27
  4085b0:	f140 845e 	bpl.w	408e70 <_svfprintf_r+0x1114>
  4085b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4085b6:	4613      	mov	r3, r2
  4085b8:	3304      	adds	r3, #4
  4085ba:	6814      	ldr	r4, [r2, #0]
  4085bc:	930e      	str	r3, [sp, #56]	; 0x38
  4085be:	2500      	movs	r5, #0
  4085c0:	e766      	b.n	408490 <_svfprintf_r+0x734>
  4085c2:	f898 3000 	ldrb.w	r3, [r8]
  4085c6:	2b6c      	cmp	r3, #108	; 0x6c
  4085c8:	f000 84e1 	beq.w	408f8e <_svfprintf_r+0x1232>
  4085cc:	9807      	ldr	r0, [sp, #28]
  4085ce:	f040 0010 	orr.w	r0, r0, #16
  4085d2:	9007      	str	r0, [sp, #28]
  4085d4:	e41b      	b.n	407e0e <_svfprintf_r+0xb2>
  4085d6:	2a00      	cmp	r2, #0
  4085d8:	f040 86db 	bne.w	409392 <_svfprintf_r+0x1636>
  4085dc:	9b07      	ldr	r3, [sp, #28]
  4085de:	069b      	lsls	r3, r3, #26
  4085e0:	f140 842f 	bpl.w	408e42 <_svfprintf_r+0x10e6>
  4085e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4085e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4085e8:	6813      	ldr	r3, [r2, #0]
  4085ea:	17cd      	asrs	r5, r1, #31
  4085ec:	4608      	mov	r0, r1
  4085ee:	3204      	adds	r2, #4
  4085f0:	4629      	mov	r1, r5
  4085f2:	920e      	str	r2, [sp, #56]	; 0x38
  4085f4:	e9c3 0100 	strd	r0, r1, [r3]
  4085f8:	f7ff bbd6 	b.w	407da8 <_svfprintf_r+0x4c>
  4085fc:	9b07      	ldr	r3, [sp, #28]
  4085fe:	f043 0320 	orr.w	r3, r3, #32
  408602:	9307      	str	r3, [sp, #28]
  408604:	f898 3000 	ldrb.w	r3, [r8]
  408608:	e401      	b.n	407e0e <_svfprintf_r+0xb2>
  40860a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40860c:	9311      	str	r3, [sp, #68]	; 0x44
  40860e:	6816      	ldr	r6, [r2, #0]
  408610:	2400      	movs	r4, #0
  408612:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  408616:	1d17      	adds	r7, r2, #4
  408618:	2e00      	cmp	r6, #0
  40861a:	f000 85bd 	beq.w	409198 <_svfprintf_r+0x143c>
  40861e:	2d00      	cmp	r5, #0
  408620:	f2c0 850f 	blt.w	409042 <_svfprintf_r+0x12e6>
  408624:	462a      	mov	r2, r5
  408626:	4621      	mov	r1, r4
  408628:	4630      	mov	r0, r6
  40862a:	f003 fe61 	bl	40c2f0 <memchr>
  40862e:	2800      	cmp	r0, #0
  408630:	f000 8604 	beq.w	40923c <_svfprintf_r+0x14e0>
  408634:	1b83      	subs	r3, r0, r6
  408636:	930d      	str	r3, [sp, #52]	; 0x34
  408638:	46a3      	mov	fp, r4
  40863a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40863e:	970e      	str	r7, [sp, #56]	; 0x38
  408640:	9308      	str	r3, [sp, #32]
  408642:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  408646:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40864a:	e54d      	b.n	4080e8 <_svfprintf_r+0x38c>
  40864c:	486f      	ldr	r0, [pc, #444]	; (40880c <_svfprintf_r+0xab0>)
  40864e:	9211      	str	r2, [sp, #68]	; 0x44
  408650:	f1bb 0f00 	cmp.w	fp, #0
  408654:	f040 8173 	bne.w	40893e <_svfprintf_r+0xbe2>
  408658:	465f      	mov	r7, fp
  40865a:	f04f 0b00 	mov.w	fp, #0
  40865e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  408662:	ae30      	add	r6, sp, #192	; 0xc0
  408664:	e539      	b.n	4080da <_svfprintf_r+0x37e>
  408666:	9311      	str	r3, [sp, #68]	; 0x44
  408668:	2a00      	cmp	r2, #0
  40866a:	f040 86b0 	bne.w	4093ce <_svfprintf_r+0x1672>
  40866e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408670:	2a00      	cmp	r2, #0
  408672:	f43f ac65 	beq.w	407f40 <_svfprintf_r+0x1e4>
  408676:	2300      	movs	r3, #0
  408678:	2101      	movs	r1, #1
  40867a:	461f      	mov	r7, r3
  40867c:	9108      	str	r1, [sp, #32]
  40867e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  408682:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408686:	469b      	mov	fp, r3
  408688:	9313      	str	r3, [sp, #76]	; 0x4c
  40868a:	910d      	str	r1, [sp, #52]	; 0x34
  40868c:	ae26      	add	r6, sp, #152	; 0x98
  40868e:	e52f      	b.n	4080f0 <_svfprintf_r+0x394>
  408690:	f1bb 0f00 	cmp.w	fp, #0
  408694:	f000 85dd 	beq.w	409252 <_svfprintf_r+0x14f6>
  408698:	2700      	movs	r7, #0
  40869a:	2400      	movs	r4, #0
  40869c:	2500      	movs	r5, #0
  40869e:	e482      	b.n	407fa6 <_svfprintf_r+0x24a>
  4086a0:	485a      	ldr	r0, [pc, #360]	; (40880c <_svfprintf_r+0xab0>)
  4086a2:	9307      	str	r3, [sp, #28]
  4086a4:	9211      	str	r2, [sp, #68]	; 0x44
  4086a6:	ea54 0305 	orrs.w	r3, r4, r5
  4086aa:	970e      	str	r7, [sp, #56]	; 0x38
  4086ac:	f04f 0700 	mov.w	r7, #0
  4086b0:	f47f af0c 	bne.w	4084cc <_svfprintf_r+0x770>
  4086b4:	2400      	movs	r4, #0
  4086b6:	2500      	movs	r5, #0
  4086b8:	e708      	b.n	4084cc <_svfprintf_r+0x770>
  4086ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4086bc:	e568      	b.n	408190 <_svfprintf_r+0x434>
  4086be:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4086c0:	2b65      	cmp	r3, #101	; 0x65
  4086c2:	f340 80a9 	ble.w	408818 <_svfprintf_r+0xabc>
  4086c6:	9814      	ldr	r0, [sp, #80]	; 0x50
  4086c8:	9915      	ldr	r1, [sp, #84]	; 0x54
  4086ca:	2200      	movs	r2, #0
  4086cc:	2300      	movs	r3, #0
  4086ce:	f005 fb21 	bl	40dd14 <__aeabi_dcmpeq>
  4086d2:	2800      	cmp	r0, #0
  4086d4:	f000 8135 	beq.w	408942 <_svfprintf_r+0xbe6>
  4086d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4086da:	4a4d      	ldr	r2, [pc, #308]	; (408810 <_svfprintf_r+0xab4>)
  4086dc:	f8c9 2000 	str.w	r2, [r9]
  4086e0:	3301      	adds	r3, #1
  4086e2:	3401      	adds	r4, #1
  4086e4:	2201      	movs	r2, #1
  4086e6:	2b07      	cmp	r3, #7
  4086e8:	9425      	str	r4, [sp, #148]	; 0x94
  4086ea:	9324      	str	r3, [sp, #144]	; 0x90
  4086ec:	f8c9 2004 	str.w	r2, [r9, #4]
  4086f0:	f300 83e6 	bgt.w	408ec0 <_svfprintf_r+0x1164>
  4086f4:	f109 0908 	add.w	r9, r9, #8
  4086f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4086fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4086fc:	4293      	cmp	r3, r2
  4086fe:	db03      	blt.n	408708 <_svfprintf_r+0x9ac>
  408700:	9b07      	ldr	r3, [sp, #28]
  408702:	07db      	lsls	r3, r3, #31
  408704:	f57f adba 	bpl.w	40827c <_svfprintf_r+0x520>
  408708:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40870a:	9916      	ldr	r1, [sp, #88]	; 0x58
  40870c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40870e:	f8c9 2000 	str.w	r2, [r9]
  408712:	3301      	adds	r3, #1
  408714:	440c      	add	r4, r1
  408716:	2b07      	cmp	r3, #7
  408718:	9425      	str	r4, [sp, #148]	; 0x94
  40871a:	f8c9 1004 	str.w	r1, [r9, #4]
  40871e:	9324      	str	r3, [sp, #144]	; 0x90
  408720:	f300 843f 	bgt.w	408fa2 <_svfprintf_r+0x1246>
  408724:	f109 0908 	add.w	r9, r9, #8
  408728:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40872a:	1e5d      	subs	r5, r3, #1
  40872c:	2d00      	cmp	r5, #0
  40872e:	f77f ada5 	ble.w	40827c <_svfprintf_r+0x520>
  408732:	4a38      	ldr	r2, [pc, #224]	; (408814 <_svfprintf_r+0xab8>)
  408734:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408736:	920f      	str	r2, [sp, #60]	; 0x3c
  408738:	2d10      	cmp	r5, #16
  40873a:	f340 81e6 	ble.w	408b0a <_svfprintf_r+0xdae>
  40873e:	2610      	movs	r6, #16
  408740:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408742:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  408746:	e005      	b.n	408754 <_svfprintf_r+0x9f8>
  408748:	f109 0908 	add.w	r9, r9, #8
  40874c:	3d10      	subs	r5, #16
  40874e:	2d10      	cmp	r5, #16
  408750:	f340 81db 	ble.w	408b0a <_svfprintf_r+0xdae>
  408754:	3301      	adds	r3, #1
  408756:	3410      	adds	r4, #16
  408758:	2b07      	cmp	r3, #7
  40875a:	9425      	str	r4, [sp, #148]	; 0x94
  40875c:	9324      	str	r3, [sp, #144]	; 0x90
  40875e:	f8c9 a000 	str.w	sl, [r9]
  408762:	f8c9 6004 	str.w	r6, [r9, #4]
  408766:	ddef      	ble.n	408748 <_svfprintf_r+0x9ec>
  408768:	aa23      	add	r2, sp, #140	; 0x8c
  40876a:	4659      	mov	r1, fp
  40876c:	4638      	mov	r0, r7
  40876e:	f004 fc65 	bl	40d03c <__ssprint_r>
  408772:	2800      	cmp	r0, #0
  408774:	f47f abeb 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408778:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40877a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40877c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408780:	e7e4      	b.n	40874c <_svfprintf_r+0x9f0>
  408782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408784:	9a08      	ldr	r2, [sp, #32]
  408786:	1a9f      	subs	r7, r3, r2
  408788:	2f00      	cmp	r7, #0
  40878a:	f77f ad25 	ble.w	4081d8 <_svfprintf_r+0x47c>
  40878e:	4a21      	ldr	r2, [pc, #132]	; (408814 <_svfprintf_r+0xab8>)
  408790:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408792:	920f      	str	r2, [sp, #60]	; 0x3c
  408794:	2f10      	cmp	r7, #16
  408796:	dd2b      	ble.n	4087f0 <_svfprintf_r+0xa94>
  408798:	464a      	mov	r2, r9
  40879a:	4621      	mov	r1, r4
  40879c:	46b9      	mov	r9, r7
  40879e:	2510      	movs	r5, #16
  4087a0:	4637      	mov	r7, r6
  4087a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4087a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4087a6:	e006      	b.n	4087b6 <_svfprintf_r+0xa5a>
  4087a8:	f1a9 0910 	sub.w	r9, r9, #16
  4087ac:	f1b9 0f10 	cmp.w	r9, #16
  4087b0:	f102 0208 	add.w	r2, r2, #8
  4087b4:	dd18      	ble.n	4087e8 <_svfprintf_r+0xa8c>
  4087b6:	3301      	adds	r3, #1
  4087b8:	3110      	adds	r1, #16
  4087ba:	2b07      	cmp	r3, #7
  4087bc:	9125      	str	r1, [sp, #148]	; 0x94
  4087be:	9324      	str	r3, [sp, #144]	; 0x90
  4087c0:	f8c2 a000 	str.w	sl, [r2]
  4087c4:	6055      	str	r5, [r2, #4]
  4087c6:	ddef      	ble.n	4087a8 <_svfprintf_r+0xa4c>
  4087c8:	aa23      	add	r2, sp, #140	; 0x8c
  4087ca:	4631      	mov	r1, r6
  4087cc:	4620      	mov	r0, r4
  4087ce:	f004 fc35 	bl	40d03c <__ssprint_r>
  4087d2:	2800      	cmp	r0, #0
  4087d4:	f47f abbb 	bne.w	407f4e <_svfprintf_r+0x1f2>
  4087d8:	f1a9 0910 	sub.w	r9, r9, #16
  4087dc:	f1b9 0f10 	cmp.w	r9, #16
  4087e0:	9925      	ldr	r1, [sp, #148]	; 0x94
  4087e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4087e4:	aa30      	add	r2, sp, #192	; 0xc0
  4087e6:	dce6      	bgt.n	4087b6 <_svfprintf_r+0xa5a>
  4087e8:	463e      	mov	r6, r7
  4087ea:	460c      	mov	r4, r1
  4087ec:	464f      	mov	r7, r9
  4087ee:	4691      	mov	r9, r2
  4087f0:	3301      	adds	r3, #1
  4087f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4087f4:	9324      	str	r3, [sp, #144]	; 0x90
  4087f6:	443c      	add	r4, r7
  4087f8:	2b07      	cmp	r3, #7
  4087fa:	9425      	str	r4, [sp, #148]	; 0x94
  4087fc:	e889 0084 	stmia.w	r9, {r2, r7}
  408800:	f300 8245 	bgt.w	408c8e <_svfprintf_r+0xf32>
  408804:	f109 0908 	add.w	r9, r9, #8
  408808:	e4e6      	b.n	4081d8 <_svfprintf_r+0x47c>
  40880a:	bf00      	nop
  40880c:	0040f03c 	.word	0x0040f03c
  408810:	0040f058 	.word	0x0040f058
  408814:	0040f008 	.word	0x0040f008
  408818:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40881a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40881c:	2b01      	cmp	r3, #1
  40881e:	f340 8208 	ble.w	408c32 <_svfprintf_r+0xed6>
  408822:	3501      	adds	r5, #1
  408824:	3401      	adds	r4, #1
  408826:	2301      	movs	r3, #1
  408828:	2d07      	cmp	r5, #7
  40882a:	9425      	str	r4, [sp, #148]	; 0x94
  40882c:	9524      	str	r5, [sp, #144]	; 0x90
  40882e:	f8c9 6000 	str.w	r6, [r9]
  408832:	f8c9 3004 	str.w	r3, [r9, #4]
  408836:	f300 820d 	bgt.w	408c54 <_svfprintf_r+0xef8>
  40883a:	f109 0908 	add.w	r9, r9, #8
  40883e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408842:	f8c9 3000 	str.w	r3, [r9]
  408846:	3501      	adds	r5, #1
  408848:	4414      	add	r4, r2
  40884a:	2d07      	cmp	r5, #7
  40884c:	9425      	str	r4, [sp, #148]	; 0x94
  40884e:	9524      	str	r5, [sp, #144]	; 0x90
  408850:	f8c9 2004 	str.w	r2, [r9, #4]
  408854:	f300 820e 	bgt.w	408c74 <_svfprintf_r+0xf18>
  408858:	f109 0908 	add.w	r9, r9, #8
  40885c:	2300      	movs	r3, #0
  40885e:	9814      	ldr	r0, [sp, #80]	; 0x50
  408860:	9915      	ldr	r1, [sp, #84]	; 0x54
  408862:	2200      	movs	r2, #0
  408864:	f005 fa56 	bl	40dd14 <__aeabi_dcmpeq>
  408868:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40886a:	2800      	cmp	r0, #0
  40886c:	f040 80c3 	bne.w	4089f6 <_svfprintf_r+0xc9a>
  408870:	3b01      	subs	r3, #1
  408872:	3501      	adds	r5, #1
  408874:	3601      	adds	r6, #1
  408876:	441c      	add	r4, r3
  408878:	2d07      	cmp	r5, #7
  40887a:	9524      	str	r5, [sp, #144]	; 0x90
  40887c:	9425      	str	r4, [sp, #148]	; 0x94
  40887e:	f8c9 6000 	str.w	r6, [r9]
  408882:	f8c9 3004 	str.w	r3, [r9, #4]
  408886:	f300 80f5 	bgt.w	408a74 <_svfprintf_r+0xd18>
  40888a:	f109 0908 	add.w	r9, r9, #8
  40888e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408890:	f8c9 2004 	str.w	r2, [r9, #4]
  408894:	3501      	adds	r5, #1
  408896:	4414      	add	r4, r2
  408898:	ab1f      	add	r3, sp, #124	; 0x7c
  40889a:	2d07      	cmp	r5, #7
  40889c:	9425      	str	r4, [sp, #148]	; 0x94
  40889e:	9524      	str	r5, [sp, #144]	; 0x90
  4088a0:	f8c9 3000 	str.w	r3, [r9]
  4088a4:	f77f ace8 	ble.w	408278 <_svfprintf_r+0x51c>
  4088a8:	aa23      	add	r2, sp, #140	; 0x8c
  4088aa:	9909      	ldr	r1, [sp, #36]	; 0x24
  4088ac:	980a      	ldr	r0, [sp, #40]	; 0x28
  4088ae:	f004 fbc5 	bl	40d03c <__ssprint_r>
  4088b2:	2800      	cmp	r0, #0
  4088b4:	f47f ab4b 	bne.w	407f4e <_svfprintf_r+0x1f2>
  4088b8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4088ba:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4088be:	e4dd      	b.n	40827c <_svfprintf_r+0x520>
  4088c0:	aa23      	add	r2, sp, #140	; 0x8c
  4088c2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4088c4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4088c6:	f004 fbb9 	bl	40d03c <__ssprint_r>
  4088ca:	2800      	cmp	r0, #0
  4088cc:	f43f ad24 	beq.w	408318 <_svfprintf_r+0x5bc>
  4088d0:	f7ff bb3d 	b.w	407f4e <_svfprintf_r+0x1f2>
  4088d4:	aa23      	add	r2, sp, #140	; 0x8c
  4088d6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4088d8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4088da:	f004 fbaf 	bl	40d03c <__ssprint_r>
  4088de:	2800      	cmp	r0, #0
  4088e0:	f47f ab35 	bne.w	407f4e <_svfprintf_r+0x1f2>
  4088e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4088e6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4088ea:	e4b4      	b.n	408256 <_svfprintf_r+0x4fa>
  4088ec:	aa23      	add	r2, sp, #140	; 0x8c
  4088ee:	9909      	ldr	r1, [sp, #36]	; 0x24
  4088f0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4088f2:	f004 fba3 	bl	40d03c <__ssprint_r>
  4088f6:	2800      	cmp	r0, #0
  4088f8:	f47f ab29 	bne.w	407f4e <_svfprintf_r+0x1f2>
  4088fc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4088fe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408902:	e455      	b.n	4081b0 <_svfprintf_r+0x454>
  408904:	aa23      	add	r2, sp, #140	; 0x8c
  408906:	9909      	ldr	r1, [sp, #36]	; 0x24
  408908:	980a      	ldr	r0, [sp, #40]	; 0x28
  40890a:	f004 fb97 	bl	40d03c <__ssprint_r>
  40890e:	2800      	cmp	r0, #0
  408910:	f47f ab1d 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408914:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408916:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40891a:	e459      	b.n	4081d0 <_svfprintf_r+0x474>
  40891c:	f1bb 0f00 	cmp.w	fp, #0
  408920:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408924:	f2c0 82d8 	blt.w	408ed8 <_svfprintf_r+0x117c>
  408928:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40892c:	9307      	str	r3, [sp, #28]
  40892e:	ea54 0305 	orrs.w	r3, r4, r5
  408932:	f47f adcb 	bne.w	4084cc <_svfprintf_r+0x770>
  408936:	f1bb 0f00 	cmp.w	fp, #0
  40893a:	f43f ae8d 	beq.w	408658 <_svfprintf_r+0x8fc>
  40893e:	2700      	movs	r7, #0
  408940:	e6b8      	b.n	4086b4 <_svfprintf_r+0x958>
  408942:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  408944:	2d00      	cmp	r5, #0
  408946:	f340 82ca 	ble.w	408ede <_svfprintf_r+0x1182>
  40894a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40894c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40894e:	4293      	cmp	r3, r2
  408950:	bfa8      	it	ge
  408952:	4613      	movge	r3, r2
  408954:	2b00      	cmp	r3, #0
  408956:	461d      	mov	r5, r3
  408958:	dd0d      	ble.n	408976 <_svfprintf_r+0xc1a>
  40895a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40895c:	f8c9 6000 	str.w	r6, [r9]
  408960:	3301      	adds	r3, #1
  408962:	442c      	add	r4, r5
  408964:	2b07      	cmp	r3, #7
  408966:	9425      	str	r4, [sp, #148]	; 0x94
  408968:	f8c9 5004 	str.w	r5, [r9, #4]
  40896c:	9324      	str	r3, [sp, #144]	; 0x90
  40896e:	f300 839c 	bgt.w	4090aa <_svfprintf_r+0x134e>
  408972:	f109 0908 	add.w	r9, r9, #8
  408976:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408978:	2d00      	cmp	r5, #0
  40897a:	bfa8      	it	ge
  40897c:	1b5b      	subge	r3, r3, r5
  40897e:	2b00      	cmp	r3, #0
  408980:	461d      	mov	r5, r3
  408982:	f340 80f6 	ble.w	408b72 <_svfprintf_r+0xe16>
  408986:	4aba      	ldr	r2, [pc, #744]	; (408c70 <_svfprintf_r+0xf14>)
  408988:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40898a:	920f      	str	r2, [sp, #60]	; 0x3c
  40898c:	2d10      	cmp	r5, #16
  40898e:	f340 828a 	ble.w	408ea6 <_svfprintf_r+0x114a>
  408992:	4622      	mov	r2, r4
  408994:	2710      	movs	r7, #16
  408996:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40899a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40899c:	e005      	b.n	4089aa <_svfprintf_r+0xc4e>
  40899e:	f109 0908 	add.w	r9, r9, #8
  4089a2:	3d10      	subs	r5, #16
  4089a4:	2d10      	cmp	r5, #16
  4089a6:	f340 827d 	ble.w	408ea4 <_svfprintf_r+0x1148>
  4089aa:	3301      	adds	r3, #1
  4089ac:	3210      	adds	r2, #16
  4089ae:	2b07      	cmp	r3, #7
  4089b0:	9225      	str	r2, [sp, #148]	; 0x94
  4089b2:	9324      	str	r3, [sp, #144]	; 0x90
  4089b4:	f8c9 a000 	str.w	sl, [r9]
  4089b8:	f8c9 7004 	str.w	r7, [r9, #4]
  4089bc:	ddef      	ble.n	40899e <_svfprintf_r+0xc42>
  4089be:	aa23      	add	r2, sp, #140	; 0x8c
  4089c0:	4621      	mov	r1, r4
  4089c2:	4658      	mov	r0, fp
  4089c4:	f004 fb3a 	bl	40d03c <__ssprint_r>
  4089c8:	2800      	cmp	r0, #0
  4089ca:	f47f aac0 	bne.w	407f4e <_svfprintf_r+0x1f2>
  4089ce:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4089d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4089d2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4089d6:	e7e4      	b.n	4089a2 <_svfprintf_r+0xc46>
  4089d8:	aa23      	add	r2, sp, #140	; 0x8c
  4089da:	9909      	ldr	r1, [sp, #36]	; 0x24
  4089dc:	980a      	ldr	r0, [sp, #40]	; 0x28
  4089de:	f004 fb2d 	bl	40d03c <__ssprint_r>
  4089e2:	2800      	cmp	r0, #0
  4089e4:	f47f aab3 	bne.w	407f4e <_svfprintf_r+0x1f2>
  4089e8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4089ec:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4089ee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4089f2:	f7ff bbcd 	b.w	408190 <_svfprintf_r+0x434>
  4089f6:	1e5e      	subs	r6, r3, #1
  4089f8:	2e00      	cmp	r6, #0
  4089fa:	f77f af48 	ble.w	40888e <_svfprintf_r+0xb32>
  4089fe:	4b9c      	ldr	r3, [pc, #624]	; (408c70 <_svfprintf_r+0xf14>)
  408a00:	930f      	str	r3, [sp, #60]	; 0x3c
  408a02:	2e10      	cmp	r6, #16
  408a04:	dd2c      	ble.n	408a60 <_svfprintf_r+0xd04>
  408a06:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  408a0a:	2710      	movs	r7, #16
  408a0c:	46b0      	mov	r8, r6
  408a0e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408a12:	9e09      	ldr	r6, [sp, #36]	; 0x24
  408a14:	e006      	b.n	408a24 <_svfprintf_r+0xcc8>
  408a16:	f1a8 0810 	sub.w	r8, r8, #16
  408a1a:	f1b8 0f10 	cmp.w	r8, #16
  408a1e:	f109 0908 	add.w	r9, r9, #8
  408a22:	dd1a      	ble.n	408a5a <_svfprintf_r+0xcfe>
  408a24:	3501      	adds	r5, #1
  408a26:	3410      	adds	r4, #16
  408a28:	2d07      	cmp	r5, #7
  408a2a:	9425      	str	r4, [sp, #148]	; 0x94
  408a2c:	9524      	str	r5, [sp, #144]	; 0x90
  408a2e:	f8c9 a000 	str.w	sl, [r9]
  408a32:	f8c9 7004 	str.w	r7, [r9, #4]
  408a36:	ddee      	ble.n	408a16 <_svfprintf_r+0xcba>
  408a38:	aa23      	add	r2, sp, #140	; 0x8c
  408a3a:	4631      	mov	r1, r6
  408a3c:	4658      	mov	r0, fp
  408a3e:	f004 fafd 	bl	40d03c <__ssprint_r>
  408a42:	2800      	cmp	r0, #0
  408a44:	f47f aa83 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408a48:	f1a8 0810 	sub.w	r8, r8, #16
  408a4c:	f1b8 0f10 	cmp.w	r8, #16
  408a50:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408a52:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408a54:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408a58:	dce4      	bgt.n	408a24 <_svfprintf_r+0xcc8>
  408a5a:	4646      	mov	r6, r8
  408a5c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  408a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408a62:	3501      	adds	r5, #1
  408a64:	4434      	add	r4, r6
  408a66:	2d07      	cmp	r5, #7
  408a68:	9425      	str	r4, [sp, #148]	; 0x94
  408a6a:	9524      	str	r5, [sp, #144]	; 0x90
  408a6c:	e889 0048 	stmia.w	r9, {r3, r6}
  408a70:	f77f af0b 	ble.w	40888a <_svfprintf_r+0xb2e>
  408a74:	aa23      	add	r2, sp, #140	; 0x8c
  408a76:	9909      	ldr	r1, [sp, #36]	; 0x24
  408a78:	980a      	ldr	r0, [sp, #40]	; 0x28
  408a7a:	f004 fadf 	bl	40d03c <__ssprint_r>
  408a7e:	2800      	cmp	r0, #0
  408a80:	f47f aa65 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408a84:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408a86:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408a88:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408a8c:	e6ff      	b.n	40888e <_svfprintf_r+0xb32>
  408a8e:	9907      	ldr	r1, [sp, #28]
  408a90:	f011 0210 	ands.w	r2, r1, #16
  408a94:	f000 8108 	beq.w	408ca8 <_svfprintf_r+0xf4c>
  408a98:	980e      	ldr	r0, [sp, #56]	; 0x38
  408a9a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408a9e:	f1bb 0f00 	cmp.w	fp, #0
  408aa2:	6804      	ldr	r4, [r0, #0]
  408aa4:	f100 0704 	add.w	r7, r0, #4
  408aa8:	f04f 0500 	mov.w	r5, #0
  408aac:	db26      	blt.n	408afc <_svfprintf_r+0xda0>
  408aae:	460a      	mov	r2, r1
  408ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  408ab4:	9207      	str	r2, [sp, #28]
  408ab6:	ea54 0205 	orrs.w	r2, r4, r5
  408aba:	970e      	str	r7, [sp, #56]	; 0x38
  408abc:	461f      	mov	r7, r3
  408abe:	f47f aaef 	bne.w	4080a0 <_svfprintf_r+0x344>
  408ac2:	e4c8      	b.n	408456 <_svfprintf_r+0x6fa>
  408ac4:	9b07      	ldr	r3, [sp, #28]
  408ac6:	06d9      	lsls	r1, r3, #27
  408ac8:	d42a      	bmi.n	408b20 <_svfprintf_r+0xdc4>
  408aca:	9b07      	ldr	r3, [sp, #28]
  408acc:	065a      	lsls	r2, r3, #25
  408ace:	d527      	bpl.n	408b20 <_svfprintf_r+0xdc4>
  408ad0:	990e      	ldr	r1, [sp, #56]	; 0x38
  408ad2:	f9b1 4000 	ldrsh.w	r4, [r1]
  408ad6:	3104      	adds	r1, #4
  408ad8:	17e5      	asrs	r5, r4, #31
  408ada:	4622      	mov	r2, r4
  408adc:	462b      	mov	r3, r5
  408ade:	910e      	str	r1, [sp, #56]	; 0x38
  408ae0:	f7ff bacb 	b.w	40807a <_svfprintf_r+0x31e>
  408ae4:	990e      	ldr	r1, [sp, #56]	; 0x38
  408ae6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408aea:	f1bb 0f00 	cmp.w	fp, #0
  408aee:	680c      	ldr	r4, [r1, #0]
  408af0:	f101 0704 	add.w	r7, r1, #4
  408af4:	f04f 0500 	mov.w	r5, #0
  408af8:	f280 8247 	bge.w	408f8a <_svfprintf_r+0x122e>
  408afc:	970e      	str	r7, [sp, #56]	; 0x38
  408afe:	461f      	mov	r7, r3
  408b00:	ea54 0305 	orrs.w	r3, r4, r5
  408b04:	f47f aacc 	bne.w	4080a0 <_svfprintf_r+0x344>
  408b08:	e4aa      	b.n	408460 <_svfprintf_r+0x704>
  408b0a:	3301      	adds	r3, #1
  408b0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408b0e:	9324      	str	r3, [sp, #144]	; 0x90
  408b10:	442c      	add	r4, r5
  408b12:	2b07      	cmp	r3, #7
  408b14:	9425      	str	r4, [sp, #148]	; 0x94
  408b16:	e889 0024 	stmia.w	r9, {r2, r5}
  408b1a:	f77f abad 	ble.w	408278 <_svfprintf_r+0x51c>
  408b1e:	e6c3      	b.n	4088a8 <_svfprintf_r+0xb4c>
  408b20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408b22:	6814      	ldr	r4, [r2, #0]
  408b24:	4613      	mov	r3, r2
  408b26:	3304      	adds	r3, #4
  408b28:	17e5      	asrs	r5, r4, #31
  408b2a:	4622      	mov	r2, r4
  408b2c:	930e      	str	r3, [sp, #56]	; 0x38
  408b2e:	2a00      	cmp	r2, #0
  408b30:	462b      	mov	r3, r5
  408b32:	f173 0300 	sbcs.w	r3, r3, #0
  408b36:	f6bf aaa5 	bge.w	408084 <_svfprintf_r+0x328>
  408b3a:	4264      	negs	r4, r4
  408b3c:	f04f 072d 	mov.w	r7, #45	; 0x2d
  408b40:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  408b44:	f1bb 0f00 	cmp.w	fp, #0
  408b48:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408b4c:	f6ff aaa8 	blt.w	4080a0 <_svfprintf_r+0x344>
  408b50:	9b07      	ldr	r3, [sp, #28]
  408b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408b56:	9307      	str	r3, [sp, #28]
  408b58:	f7ff baa2 	b.w	4080a0 <_svfprintf_r+0x344>
  408b5c:	aa23      	add	r2, sp, #140	; 0x8c
  408b5e:	9909      	ldr	r1, [sp, #36]	; 0x24
  408b60:	980a      	ldr	r0, [sp, #40]	; 0x28
  408b62:	f004 fa6b 	bl	40d03c <__ssprint_r>
  408b66:	2800      	cmp	r0, #0
  408b68:	f47f a9f1 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408b6c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408b6e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408b72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408b74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408b76:	4432      	add	r2, r6
  408b78:	4617      	mov	r7, r2
  408b7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408b7c:	4293      	cmp	r3, r2
  408b7e:	db47      	blt.n	408c10 <_svfprintf_r+0xeb4>
  408b80:	9a07      	ldr	r2, [sp, #28]
  408b82:	07d5      	lsls	r5, r2, #31
  408b84:	d444      	bmi.n	408c10 <_svfprintf_r+0xeb4>
  408b86:	9912      	ldr	r1, [sp, #72]	; 0x48
  408b88:	440e      	add	r6, r1
  408b8a:	1bf5      	subs	r5, r6, r7
  408b8c:	1acb      	subs	r3, r1, r3
  408b8e:	429d      	cmp	r5, r3
  408b90:	bfa8      	it	ge
  408b92:	461d      	movge	r5, r3
  408b94:	2d00      	cmp	r5, #0
  408b96:	462e      	mov	r6, r5
  408b98:	dd0d      	ble.n	408bb6 <_svfprintf_r+0xe5a>
  408b9a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408b9c:	f8c9 7000 	str.w	r7, [r9]
  408ba0:	3201      	adds	r2, #1
  408ba2:	442c      	add	r4, r5
  408ba4:	2a07      	cmp	r2, #7
  408ba6:	9425      	str	r4, [sp, #148]	; 0x94
  408ba8:	f8c9 5004 	str.w	r5, [r9, #4]
  408bac:	9224      	str	r2, [sp, #144]	; 0x90
  408bae:	f300 830b 	bgt.w	4091c8 <_svfprintf_r+0x146c>
  408bb2:	f109 0908 	add.w	r9, r9, #8
  408bb6:	2e00      	cmp	r6, #0
  408bb8:	bfac      	ite	ge
  408bba:	1b9d      	subge	r5, r3, r6
  408bbc:	461d      	movlt	r5, r3
  408bbe:	2d00      	cmp	r5, #0
  408bc0:	f77f ab5c 	ble.w	40827c <_svfprintf_r+0x520>
  408bc4:	4a2a      	ldr	r2, [pc, #168]	; (408c70 <_svfprintf_r+0xf14>)
  408bc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408bc8:	920f      	str	r2, [sp, #60]	; 0x3c
  408bca:	2d10      	cmp	r5, #16
  408bcc:	dd9d      	ble.n	408b0a <_svfprintf_r+0xdae>
  408bce:	2610      	movs	r6, #16
  408bd0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408bd2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  408bd6:	e004      	b.n	408be2 <_svfprintf_r+0xe86>
  408bd8:	f109 0908 	add.w	r9, r9, #8
  408bdc:	3d10      	subs	r5, #16
  408bde:	2d10      	cmp	r5, #16
  408be0:	dd93      	ble.n	408b0a <_svfprintf_r+0xdae>
  408be2:	3301      	adds	r3, #1
  408be4:	3410      	adds	r4, #16
  408be6:	2b07      	cmp	r3, #7
  408be8:	9425      	str	r4, [sp, #148]	; 0x94
  408bea:	9324      	str	r3, [sp, #144]	; 0x90
  408bec:	f8c9 a000 	str.w	sl, [r9]
  408bf0:	f8c9 6004 	str.w	r6, [r9, #4]
  408bf4:	ddf0      	ble.n	408bd8 <_svfprintf_r+0xe7c>
  408bf6:	aa23      	add	r2, sp, #140	; 0x8c
  408bf8:	4659      	mov	r1, fp
  408bfa:	4638      	mov	r0, r7
  408bfc:	f004 fa1e 	bl	40d03c <__ssprint_r>
  408c00:	2800      	cmp	r0, #0
  408c02:	f47f a9a4 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408c06:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408c08:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c0a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408c0e:	e7e5      	b.n	408bdc <_svfprintf_r+0xe80>
  408c10:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408c12:	9816      	ldr	r0, [sp, #88]	; 0x58
  408c14:	9917      	ldr	r1, [sp, #92]	; 0x5c
  408c16:	f8c9 1000 	str.w	r1, [r9]
  408c1a:	3201      	adds	r2, #1
  408c1c:	4404      	add	r4, r0
  408c1e:	2a07      	cmp	r2, #7
  408c20:	9425      	str	r4, [sp, #148]	; 0x94
  408c22:	f8c9 0004 	str.w	r0, [r9, #4]
  408c26:	9224      	str	r2, [sp, #144]	; 0x90
  408c28:	f300 82a9 	bgt.w	40917e <_svfprintf_r+0x1422>
  408c2c:	f109 0908 	add.w	r9, r9, #8
  408c30:	e7a9      	b.n	408b86 <_svfprintf_r+0xe2a>
  408c32:	9b07      	ldr	r3, [sp, #28]
  408c34:	07d8      	lsls	r0, r3, #31
  408c36:	f53f adf4 	bmi.w	408822 <_svfprintf_r+0xac6>
  408c3a:	3501      	adds	r5, #1
  408c3c:	3401      	adds	r4, #1
  408c3e:	2301      	movs	r3, #1
  408c40:	2d07      	cmp	r5, #7
  408c42:	9425      	str	r4, [sp, #148]	; 0x94
  408c44:	9524      	str	r5, [sp, #144]	; 0x90
  408c46:	f8c9 6000 	str.w	r6, [r9]
  408c4a:	f8c9 3004 	str.w	r3, [r9, #4]
  408c4e:	f77f ae1c 	ble.w	40888a <_svfprintf_r+0xb2e>
  408c52:	e70f      	b.n	408a74 <_svfprintf_r+0xd18>
  408c54:	aa23      	add	r2, sp, #140	; 0x8c
  408c56:	9909      	ldr	r1, [sp, #36]	; 0x24
  408c58:	980a      	ldr	r0, [sp, #40]	; 0x28
  408c5a:	f004 f9ef 	bl	40d03c <__ssprint_r>
  408c5e:	2800      	cmp	r0, #0
  408c60:	f47f a975 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408c64:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408c66:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408c68:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408c6c:	e5e7      	b.n	40883e <_svfprintf_r+0xae2>
  408c6e:	bf00      	nop
  408c70:	0040f008 	.word	0x0040f008
  408c74:	aa23      	add	r2, sp, #140	; 0x8c
  408c76:	9909      	ldr	r1, [sp, #36]	; 0x24
  408c78:	980a      	ldr	r0, [sp, #40]	; 0x28
  408c7a:	f004 f9df 	bl	40d03c <__ssprint_r>
  408c7e:	2800      	cmp	r0, #0
  408c80:	f47f a965 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408c84:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408c86:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408c88:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408c8c:	e5e6      	b.n	40885c <_svfprintf_r+0xb00>
  408c8e:	aa23      	add	r2, sp, #140	; 0x8c
  408c90:	9909      	ldr	r1, [sp, #36]	; 0x24
  408c92:	980a      	ldr	r0, [sp, #40]	; 0x28
  408c94:	f004 f9d2 	bl	40d03c <__ssprint_r>
  408c98:	2800      	cmp	r0, #0
  408c9a:	f47f a958 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408c9e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408ca0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408ca4:	f7ff ba98 	b.w	4081d8 <_svfprintf_r+0x47c>
  408ca8:	9907      	ldr	r1, [sp, #28]
  408caa:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  408cae:	f43f af19 	beq.w	408ae4 <_svfprintf_r+0xd88>
  408cb2:	980e      	ldr	r0, [sp, #56]	; 0x38
  408cb4:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408cb8:	f1bb 0f00 	cmp.w	fp, #0
  408cbc:	8804      	ldrh	r4, [r0, #0]
  408cbe:	f100 0704 	add.w	r7, r0, #4
  408cc2:	f04f 0500 	mov.w	r5, #0
  408cc6:	f2c0 81b9 	blt.w	40903c <_svfprintf_r+0x12e0>
  408cca:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  408cce:	9307      	str	r3, [sp, #28]
  408cd0:	ea54 0305 	orrs.w	r3, r4, r5
  408cd4:	970e      	str	r7, [sp, #56]	; 0x38
  408cd6:	4617      	mov	r7, r2
  408cd8:	f47f a9e2 	bne.w	4080a0 <_svfprintf_r+0x344>
  408cdc:	f7ff bbbb 	b.w	408456 <_svfprintf_r+0x6fa>
  408ce0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  408ce2:	4622      	mov	r2, r4
  408ce4:	4620      	mov	r0, r4
  408ce6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  408ce8:	4623      	mov	r3, r4
  408cea:	4621      	mov	r1, r4
  408cec:	f005 f844 	bl	40dd78 <__aeabi_dcmpun>
  408cf0:	2800      	cmp	r0, #0
  408cf2:	f040 8317 	bne.w	409324 <_svfprintf_r+0x15c8>
  408cf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408cf8:	f1bb 3fff 	cmp.w	fp, #4294967295
  408cfc:	f023 0320 	bic.w	r3, r3, #32
  408d00:	930d      	str	r3, [sp, #52]	; 0x34
  408d02:	f000 8270 	beq.w	4091e6 <_svfprintf_r+0x148a>
  408d06:	2b47      	cmp	r3, #71	; 0x47
  408d08:	f000 8192 	beq.w	409030 <_svfprintf_r+0x12d4>
  408d0c:	9b07      	ldr	r3, [sp, #28]
  408d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408d12:	9310      	str	r3, [sp, #64]	; 0x40
  408d14:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408d16:	1e1f      	subs	r7, r3, #0
  408d18:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408d1a:	9308      	str	r3, [sp, #32]
  408d1c:	bfbb      	ittet	lt
  408d1e:	463b      	movlt	r3, r7
  408d20:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  408d24:	2300      	movge	r3, #0
  408d26:	232d      	movlt	r3, #45	; 0x2d
  408d28:	930f      	str	r3, [sp, #60]	; 0x3c
  408d2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408d2c:	2b66      	cmp	r3, #102	; 0x66
  408d2e:	f000 825d 	beq.w	4091ec <_svfprintf_r+0x1490>
  408d32:	2b46      	cmp	r3, #70	; 0x46
  408d34:	f000 8151 	beq.w	408fda <_svfprintf_r+0x127e>
  408d38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408d3a:	9a08      	ldr	r2, [sp, #32]
  408d3c:	2b45      	cmp	r3, #69	; 0x45
  408d3e:	a821      	add	r0, sp, #132	; 0x84
  408d40:	a91e      	add	r1, sp, #120	; 0x78
  408d42:	bf0c      	ite	eq
  408d44:	f10b 0501 	addeq.w	r5, fp, #1
  408d48:	465d      	movne	r5, fp
  408d4a:	9004      	str	r0, [sp, #16]
  408d4c:	9103      	str	r1, [sp, #12]
  408d4e:	a81d      	add	r0, sp, #116	; 0x74
  408d50:	2102      	movs	r1, #2
  408d52:	463b      	mov	r3, r7
  408d54:	9002      	str	r0, [sp, #8]
  408d56:	9501      	str	r5, [sp, #4]
  408d58:	9100      	str	r1, [sp, #0]
  408d5a:	980a      	ldr	r0, [sp, #40]	; 0x28
  408d5c:	f001 fbc4 	bl	40a4e8 <_dtoa_r>
  408d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408d62:	2b67      	cmp	r3, #103	; 0x67
  408d64:	4606      	mov	r6, r0
  408d66:	f040 8290 	bne.w	40928a <_svfprintf_r+0x152e>
  408d6a:	9b07      	ldr	r3, [sp, #28]
  408d6c:	07da      	lsls	r2, r3, #31
  408d6e:	f140 82af 	bpl.w	4092d0 <_svfprintf_r+0x1574>
  408d72:	1974      	adds	r4, r6, r5
  408d74:	9808      	ldr	r0, [sp, #32]
  408d76:	4639      	mov	r1, r7
  408d78:	2200      	movs	r2, #0
  408d7a:	2300      	movs	r3, #0
  408d7c:	f004 ffca 	bl	40dd14 <__aeabi_dcmpeq>
  408d80:	2800      	cmp	r0, #0
  408d82:	f040 8190 	bne.w	4090a6 <_svfprintf_r+0x134a>
  408d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408d88:	429c      	cmp	r4, r3
  408d8a:	d906      	bls.n	408d9a <_svfprintf_r+0x103e>
  408d8c:	2130      	movs	r1, #48	; 0x30
  408d8e:	1c5a      	adds	r2, r3, #1
  408d90:	9221      	str	r2, [sp, #132]	; 0x84
  408d92:	7019      	strb	r1, [r3, #0]
  408d94:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408d96:	429c      	cmp	r4, r3
  408d98:	d8f9      	bhi.n	408d8e <_svfprintf_r+0x1032>
  408d9a:	1b9b      	subs	r3, r3, r6
  408d9c:	9312      	str	r3, [sp, #72]	; 0x48
  408d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408da0:	2b47      	cmp	r3, #71	; 0x47
  408da2:	f000 8179 	beq.w	409098 <_svfprintf_r+0x133c>
  408da6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408da8:	2b65      	cmp	r3, #101	; 0x65
  408daa:	f340 827d 	ble.w	4092a8 <_svfprintf_r+0x154c>
  408dae:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408db0:	2b66      	cmp	r3, #102	; 0x66
  408db2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408db4:	9313      	str	r3, [sp, #76]	; 0x4c
  408db6:	f000 825b 	beq.w	409270 <_svfprintf_r+0x1514>
  408dba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408dbc:	9912      	ldr	r1, [sp, #72]	; 0x48
  408dbe:	428a      	cmp	r2, r1
  408dc0:	f2c0 8230 	blt.w	409224 <_svfprintf_r+0x14c8>
  408dc4:	9b07      	ldr	r3, [sp, #28]
  408dc6:	07d9      	lsls	r1, r3, #31
  408dc8:	f100 8284 	bmi.w	4092d4 <_svfprintf_r+0x1578>
  408dcc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  408dd0:	920d      	str	r2, [sp, #52]	; 0x34
  408dd2:	2267      	movs	r2, #103	; 0x67
  408dd4:	9211      	str	r2, [sp, #68]	; 0x44
  408dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408dd8:	2a00      	cmp	r2, #0
  408dda:	f040 8153 	bne.w	409084 <_svfprintf_r+0x1328>
  408dde:	9308      	str	r3, [sp, #32]
  408de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408de2:	9307      	str	r3, [sp, #28]
  408de4:	4693      	mov	fp, r2
  408de6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408dea:	f7ff b97d 	b.w	4080e8 <_svfprintf_r+0x38c>
  408dee:	9907      	ldr	r1, [sp, #28]
  408df0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  408df4:	d015      	beq.n	408e22 <_svfprintf_r+0x10c6>
  408df6:	980e      	ldr	r0, [sp, #56]	; 0x38
  408df8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408dfc:	f1bb 0f00 	cmp.w	fp, #0
  408e00:	8804      	ldrh	r4, [r0, #0]
  408e02:	f100 0704 	add.w	r7, r0, #4
  408e06:	f04f 0500 	mov.w	r5, #0
  408e0a:	db16      	blt.n	408e3a <_svfprintf_r+0x10de>
  408e0c:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  408e10:	9307      	str	r3, [sp, #28]
  408e12:	ea54 0305 	orrs.w	r3, r4, r5
  408e16:	970e      	str	r7, [sp, #56]	; 0x38
  408e18:	f43f ac3a 	beq.w	408690 <_svfprintf_r+0x934>
  408e1c:	4617      	mov	r7, r2
  408e1e:	f7ff b8c2 	b.w	407fa6 <_svfprintf_r+0x24a>
  408e22:	990e      	ldr	r1, [sp, #56]	; 0x38
  408e24:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408e28:	f1bb 0f00 	cmp.w	fp, #0
  408e2c:	680c      	ldr	r4, [r1, #0]
  408e2e:	f101 0704 	add.w	r7, r1, #4
  408e32:	f04f 0500 	mov.w	r5, #0
  408e36:	f280 80a5 	bge.w	408f84 <_svfprintf_r+0x1228>
  408e3a:	970e      	str	r7, [sp, #56]	; 0x38
  408e3c:	2700      	movs	r7, #0
  408e3e:	f7ff b8b2 	b.w	407fa6 <_svfprintf_r+0x24a>
  408e42:	9b07      	ldr	r3, [sp, #28]
  408e44:	06df      	lsls	r7, r3, #27
  408e46:	d40b      	bmi.n	408e60 <_svfprintf_r+0x1104>
  408e48:	9b07      	ldr	r3, [sp, #28]
  408e4a:	065e      	lsls	r6, r3, #25
  408e4c:	d508      	bpl.n	408e60 <_svfprintf_r+0x1104>
  408e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408e50:	6813      	ldr	r3, [r2, #0]
  408e52:	3204      	adds	r2, #4
  408e54:	920e      	str	r2, [sp, #56]	; 0x38
  408e56:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  408e5a:	801a      	strh	r2, [r3, #0]
  408e5c:	f7fe bfa4 	b.w	407da8 <_svfprintf_r+0x4c>
  408e60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408e62:	6813      	ldr	r3, [r2, #0]
  408e64:	3204      	adds	r2, #4
  408e66:	920e      	str	r2, [sp, #56]	; 0x38
  408e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408e6a:	601a      	str	r2, [r3, #0]
  408e6c:	f7fe bf9c 	b.w	407da8 <_svfprintf_r+0x4c>
  408e70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408e72:	9b07      	ldr	r3, [sp, #28]
  408e74:	f013 0f40 	tst.w	r3, #64	; 0x40
  408e78:	4613      	mov	r3, r2
  408e7a:	f103 0304 	add.w	r3, r3, #4
  408e7e:	bf0c      	ite	eq
  408e80:	6814      	ldreq	r4, [r2, #0]
  408e82:	8814      	ldrhne	r4, [r2, #0]
  408e84:	930e      	str	r3, [sp, #56]	; 0x38
  408e86:	2500      	movs	r5, #0
  408e88:	f7ff bb02 	b.w	408490 <_svfprintf_r+0x734>
  408e8c:	2700      	movs	r7, #0
  408e8e:	45bb      	cmp	fp, r7
  408e90:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408e94:	f6ff ac0e 	blt.w	4086b4 <_svfprintf_r+0x958>
  408e98:	9b07      	ldr	r3, [sp, #28]
  408e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408e9e:	9307      	str	r3, [sp, #28]
  408ea0:	f7ff bbd6 	b.w	408650 <_svfprintf_r+0x8f4>
  408ea4:	4614      	mov	r4, r2
  408ea6:	3301      	adds	r3, #1
  408ea8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408eaa:	9324      	str	r3, [sp, #144]	; 0x90
  408eac:	442c      	add	r4, r5
  408eae:	2b07      	cmp	r3, #7
  408eb0:	9425      	str	r4, [sp, #148]	; 0x94
  408eb2:	e889 0024 	stmia.w	r9, {r2, r5}
  408eb6:	f73f ae51 	bgt.w	408b5c <_svfprintf_r+0xe00>
  408eba:	f109 0908 	add.w	r9, r9, #8
  408ebe:	e658      	b.n	408b72 <_svfprintf_r+0xe16>
  408ec0:	aa23      	add	r2, sp, #140	; 0x8c
  408ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
  408ec4:	980a      	ldr	r0, [sp, #40]	; 0x28
  408ec6:	f004 f8b9 	bl	40d03c <__ssprint_r>
  408eca:	2800      	cmp	r0, #0
  408ecc:	f47f a83f 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408ed0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408ed2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408ed6:	e40f      	b.n	4086f8 <_svfprintf_r+0x99c>
  408ed8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408eda:	f7ff bbe4 	b.w	4086a6 <_svfprintf_r+0x94a>
  408ede:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408ee0:	4ab5      	ldr	r2, [pc, #724]	; (4091b8 <_svfprintf_r+0x145c>)
  408ee2:	f8c9 2000 	str.w	r2, [r9]
  408ee6:	3301      	adds	r3, #1
  408ee8:	3401      	adds	r4, #1
  408eea:	2201      	movs	r2, #1
  408eec:	2b07      	cmp	r3, #7
  408eee:	9425      	str	r4, [sp, #148]	; 0x94
  408ef0:	9324      	str	r3, [sp, #144]	; 0x90
  408ef2:	f8c9 2004 	str.w	r2, [r9, #4]
  408ef6:	f300 808e 	bgt.w	409016 <_svfprintf_r+0x12ba>
  408efa:	f109 0908 	add.w	r9, r9, #8
  408efe:	b92d      	cbnz	r5, 408f0c <_svfprintf_r+0x11b0>
  408f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408f02:	b91b      	cbnz	r3, 408f0c <_svfprintf_r+0x11b0>
  408f04:	9b07      	ldr	r3, [sp, #28]
  408f06:	07df      	lsls	r7, r3, #31
  408f08:	f57f a9b8 	bpl.w	40827c <_svfprintf_r+0x520>
  408f0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408f0e:	9916      	ldr	r1, [sp, #88]	; 0x58
  408f10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  408f12:	f8c9 2000 	str.w	r2, [r9]
  408f16:	3301      	adds	r3, #1
  408f18:	440c      	add	r4, r1
  408f1a:	2b07      	cmp	r3, #7
  408f1c:	9425      	str	r4, [sp, #148]	; 0x94
  408f1e:	f8c9 1004 	str.w	r1, [r9, #4]
  408f22:	9324      	str	r3, [sp, #144]	; 0x90
  408f24:	f300 81c2 	bgt.w	4092ac <_svfprintf_r+0x1550>
  408f28:	f109 0908 	add.w	r9, r9, #8
  408f2c:	426d      	negs	r5, r5
  408f2e:	2d00      	cmp	r5, #0
  408f30:	f340 809b 	ble.w	40906a <_svfprintf_r+0x130e>
  408f34:	4aa1      	ldr	r2, [pc, #644]	; (4091bc <_svfprintf_r+0x1460>)
  408f36:	920f      	str	r2, [sp, #60]	; 0x3c
  408f38:	2d10      	cmp	r5, #16
  408f3a:	f340 80c3 	ble.w	4090c4 <_svfprintf_r+0x1368>
  408f3e:	4622      	mov	r2, r4
  408f40:	2710      	movs	r7, #16
  408f42:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408f46:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408f48:	e005      	b.n	408f56 <_svfprintf_r+0x11fa>
  408f4a:	f109 0908 	add.w	r9, r9, #8
  408f4e:	3d10      	subs	r5, #16
  408f50:	2d10      	cmp	r5, #16
  408f52:	f340 80b6 	ble.w	4090c2 <_svfprintf_r+0x1366>
  408f56:	3301      	adds	r3, #1
  408f58:	3210      	adds	r2, #16
  408f5a:	2b07      	cmp	r3, #7
  408f5c:	9225      	str	r2, [sp, #148]	; 0x94
  408f5e:	9324      	str	r3, [sp, #144]	; 0x90
  408f60:	f8c9 a000 	str.w	sl, [r9]
  408f64:	f8c9 7004 	str.w	r7, [r9, #4]
  408f68:	ddef      	ble.n	408f4a <_svfprintf_r+0x11ee>
  408f6a:	aa23      	add	r2, sp, #140	; 0x8c
  408f6c:	4621      	mov	r1, r4
  408f6e:	4658      	mov	r0, fp
  408f70:	f004 f864 	bl	40d03c <__ssprint_r>
  408f74:	2800      	cmp	r0, #0
  408f76:	f47e afea 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408f7a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408f7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408f7e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408f82:	e7e4      	b.n	408f4e <_svfprintf_r+0x11f2>
  408f84:	9a07      	ldr	r2, [sp, #28]
  408f86:	f7ff ba38 	b.w	4083fa <_svfprintf_r+0x69e>
  408f8a:	9a07      	ldr	r2, [sp, #28]
  408f8c:	e590      	b.n	408ab0 <_svfprintf_r+0xd54>
  408f8e:	9b07      	ldr	r3, [sp, #28]
  408f90:	f043 0320 	orr.w	r3, r3, #32
  408f94:	9307      	str	r3, [sp, #28]
  408f96:	f108 0801 	add.w	r8, r8, #1
  408f9a:	f898 3000 	ldrb.w	r3, [r8]
  408f9e:	f7fe bf36 	b.w	407e0e <_svfprintf_r+0xb2>
  408fa2:	aa23      	add	r2, sp, #140	; 0x8c
  408fa4:	9909      	ldr	r1, [sp, #36]	; 0x24
  408fa6:	980a      	ldr	r0, [sp, #40]	; 0x28
  408fa8:	f004 f848 	bl	40d03c <__ssprint_r>
  408fac:	2800      	cmp	r0, #0
  408fae:	f47e afce 	bne.w	407f4e <_svfprintf_r+0x1f2>
  408fb2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408fb4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408fb8:	f7ff bbb6 	b.w	408728 <_svfprintf_r+0x9cc>
  408fbc:	2140      	movs	r1, #64	; 0x40
  408fbe:	980a      	ldr	r0, [sp, #40]	; 0x28
  408fc0:	f002 fede 	bl	40bd80 <_malloc_r>
  408fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408fc6:	6010      	str	r0, [r2, #0]
  408fc8:	6110      	str	r0, [r2, #16]
  408fca:	2800      	cmp	r0, #0
  408fcc:	f000 81e5 	beq.w	40939a <_svfprintf_r+0x163e>
  408fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408fd2:	2340      	movs	r3, #64	; 0x40
  408fd4:	6153      	str	r3, [r2, #20]
  408fd6:	f7fe bed8 	b.w	407d8a <_svfprintf_r+0x2e>
  408fda:	a821      	add	r0, sp, #132	; 0x84
  408fdc:	a91e      	add	r1, sp, #120	; 0x78
  408fde:	9004      	str	r0, [sp, #16]
  408fe0:	9103      	str	r1, [sp, #12]
  408fe2:	a81d      	add	r0, sp, #116	; 0x74
  408fe4:	2103      	movs	r1, #3
  408fe6:	9002      	str	r0, [sp, #8]
  408fe8:	9a08      	ldr	r2, [sp, #32]
  408fea:	f8cd b004 	str.w	fp, [sp, #4]
  408fee:	463b      	mov	r3, r7
  408ff0:	9100      	str	r1, [sp, #0]
  408ff2:	980a      	ldr	r0, [sp, #40]	; 0x28
  408ff4:	f001 fa78 	bl	40a4e8 <_dtoa_r>
  408ff8:	465d      	mov	r5, fp
  408ffa:	4606      	mov	r6, r0
  408ffc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408ffe:	2b46      	cmp	r3, #70	; 0x46
  409000:	eb06 0405 	add.w	r4, r6, r5
  409004:	f47f aeb6 	bne.w	408d74 <_svfprintf_r+0x1018>
  409008:	7833      	ldrb	r3, [r6, #0]
  40900a:	2b30      	cmp	r3, #48	; 0x30
  40900c:	f000 817c 	beq.w	409308 <_svfprintf_r+0x15ac>
  409010:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  409012:	442c      	add	r4, r5
  409014:	e6ae      	b.n	408d74 <_svfprintf_r+0x1018>
  409016:	aa23      	add	r2, sp, #140	; 0x8c
  409018:	9909      	ldr	r1, [sp, #36]	; 0x24
  40901a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40901c:	f004 f80e 	bl	40d03c <__ssprint_r>
  409020:	2800      	cmp	r0, #0
  409022:	f47e af94 	bne.w	407f4e <_svfprintf_r+0x1f2>
  409026:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  409028:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40902a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40902e:	e766      	b.n	408efe <_svfprintf_r+0x11a2>
  409030:	f1bb 0f00 	cmp.w	fp, #0
  409034:	bf08      	it	eq
  409036:	f04f 0b01 	moveq.w	fp, #1
  40903a:	e667      	b.n	408d0c <_svfprintf_r+0xfb0>
  40903c:	970e      	str	r7, [sp, #56]	; 0x38
  40903e:	4617      	mov	r7, r2
  409040:	e55e      	b.n	408b00 <_svfprintf_r+0xda4>
  409042:	4630      	mov	r0, r6
  409044:	f7fe fe1c 	bl	407c80 <strlen>
  409048:	46a3      	mov	fp, r4
  40904a:	4603      	mov	r3, r0
  40904c:	900d      	str	r0, [sp, #52]	; 0x34
  40904e:	f7ff baf4 	b.w	40863a <_svfprintf_r+0x8de>
  409052:	aa23      	add	r2, sp, #140	; 0x8c
  409054:	9909      	ldr	r1, [sp, #36]	; 0x24
  409056:	980a      	ldr	r0, [sp, #40]	; 0x28
  409058:	f003 fff0 	bl	40d03c <__ssprint_r>
  40905c:	2800      	cmp	r0, #0
  40905e:	f47e af76 	bne.w	407f4e <_svfprintf_r+0x1f2>
  409062:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409064:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409066:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40906a:	9912      	ldr	r1, [sp, #72]	; 0x48
  40906c:	f8c9 6000 	str.w	r6, [r9]
  409070:	3301      	adds	r3, #1
  409072:	440c      	add	r4, r1
  409074:	2b07      	cmp	r3, #7
  409076:	9425      	str	r4, [sp, #148]	; 0x94
  409078:	9324      	str	r3, [sp, #144]	; 0x90
  40907a:	f8c9 1004 	str.w	r1, [r9, #4]
  40907e:	f77f a8fb 	ble.w	408278 <_svfprintf_r+0x51c>
  409082:	e411      	b.n	4088a8 <_svfprintf_r+0xb4c>
  409084:	272d      	movs	r7, #45	; 0x2d
  409086:	9308      	str	r3, [sp, #32]
  409088:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40908a:	9307      	str	r3, [sp, #28]
  40908c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  409090:	f04f 0b00 	mov.w	fp, #0
  409094:	f7ff b829 	b.w	4080ea <_svfprintf_r+0x38e>
  409098:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40909a:	1cdd      	adds	r5, r3, #3
  40909c:	db1e      	blt.n	4090dc <_svfprintf_r+0x1380>
  40909e:	459b      	cmp	fp, r3
  4090a0:	db1c      	blt.n	4090dc <_svfprintf_r+0x1380>
  4090a2:	9313      	str	r3, [sp, #76]	; 0x4c
  4090a4:	e689      	b.n	408dba <_svfprintf_r+0x105e>
  4090a6:	4623      	mov	r3, r4
  4090a8:	e677      	b.n	408d9a <_svfprintf_r+0x103e>
  4090aa:	aa23      	add	r2, sp, #140	; 0x8c
  4090ac:	9909      	ldr	r1, [sp, #36]	; 0x24
  4090ae:	980a      	ldr	r0, [sp, #40]	; 0x28
  4090b0:	f003 ffc4 	bl	40d03c <__ssprint_r>
  4090b4:	2800      	cmp	r0, #0
  4090b6:	f47e af4a 	bne.w	407f4e <_svfprintf_r+0x1f2>
  4090ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4090bc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4090c0:	e459      	b.n	408976 <_svfprintf_r+0xc1a>
  4090c2:	4614      	mov	r4, r2
  4090c4:	3301      	adds	r3, #1
  4090c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4090c8:	9324      	str	r3, [sp, #144]	; 0x90
  4090ca:	442c      	add	r4, r5
  4090cc:	2b07      	cmp	r3, #7
  4090ce:	9425      	str	r4, [sp, #148]	; 0x94
  4090d0:	e889 0024 	stmia.w	r9, {r2, r5}
  4090d4:	dcbd      	bgt.n	409052 <_svfprintf_r+0x12f6>
  4090d6:	f109 0908 	add.w	r9, r9, #8
  4090da:	e7c6      	b.n	40906a <_svfprintf_r+0x130e>
  4090dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4090de:	3a02      	subs	r2, #2
  4090e0:	9211      	str	r2, [sp, #68]	; 0x44
  4090e2:	3b01      	subs	r3, #1
  4090e4:	2b00      	cmp	r3, #0
  4090e6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4090ea:	931d      	str	r3, [sp, #116]	; 0x74
  4090ec:	bfb8      	it	lt
  4090ee:	425b      	neglt	r3, r3
  4090f0:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  4090f4:	bfb4      	ite	lt
  4090f6:	222d      	movlt	r2, #45	; 0x2d
  4090f8:	222b      	movge	r2, #43	; 0x2b
  4090fa:	2b09      	cmp	r3, #9
  4090fc:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  409100:	f340 80f1 	ble.w	4092e6 <_svfprintf_r+0x158a>
  409104:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  409108:	4604      	mov	r4, r0
  40910a:	4a2d      	ldr	r2, [pc, #180]	; (4091c0 <_svfprintf_r+0x1464>)
  40910c:	fb82 2103 	smull	r2, r1, r2, r3
  409110:	17da      	asrs	r2, r3, #31
  409112:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  409116:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40911a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40911e:	f103 0130 	add.w	r1, r3, #48	; 0x30
  409122:	2a09      	cmp	r2, #9
  409124:	4613      	mov	r3, r2
  409126:	f804 1d01 	strb.w	r1, [r4, #-1]!
  40912a:	dcee      	bgt.n	40910a <_svfprintf_r+0x13ae>
  40912c:	4621      	mov	r1, r4
  40912e:	3330      	adds	r3, #48	; 0x30
  409130:	b2da      	uxtb	r2, r3
  409132:	f801 2d01 	strb.w	r2, [r1, #-1]!
  409136:	4288      	cmp	r0, r1
  409138:	f240 813a 	bls.w	4093b0 <_svfprintf_r+0x1654>
  40913c:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  409140:	4623      	mov	r3, r4
  409142:	e001      	b.n	409148 <_svfprintf_r+0x13ec>
  409144:	f813 2b01 	ldrb.w	r2, [r3], #1
  409148:	f801 2b01 	strb.w	r2, [r1], #1
  40914c:	4298      	cmp	r0, r3
  40914e:	d1f9      	bne.n	409144 <_svfprintf_r+0x13e8>
  409150:	1c43      	adds	r3, r0, #1
  409152:	1b1b      	subs	r3, r3, r4
  409154:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  409158:	4413      	add	r3, r2
  40915a:	aa1f      	add	r2, sp, #124	; 0x7c
  40915c:	1a9b      	subs	r3, r3, r2
  40915e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409160:	9319      	str	r3, [sp, #100]	; 0x64
  409162:	2a01      	cmp	r2, #1
  409164:	4413      	add	r3, r2
  409166:	930d      	str	r3, [sp, #52]	; 0x34
  409168:	f340 80ea 	ble.w	409340 <_svfprintf_r+0x15e4>
  40916c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40916e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409170:	4413      	add	r3, r2
  409172:	2200      	movs	r2, #0
  409174:	930d      	str	r3, [sp, #52]	; 0x34
  409176:	9213      	str	r2, [sp, #76]	; 0x4c
  409178:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40917c:	e62b      	b.n	408dd6 <_svfprintf_r+0x107a>
  40917e:	aa23      	add	r2, sp, #140	; 0x8c
  409180:	9909      	ldr	r1, [sp, #36]	; 0x24
  409182:	980a      	ldr	r0, [sp, #40]	; 0x28
  409184:	f003 ff5a 	bl	40d03c <__ssprint_r>
  409188:	2800      	cmp	r0, #0
  40918a:	f47e aee0 	bne.w	407f4e <_svfprintf_r+0x1f2>
  40918e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  409190:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409192:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409196:	e4f6      	b.n	408b86 <_svfprintf_r+0xe2a>
  409198:	2d06      	cmp	r5, #6
  40919a:	462b      	mov	r3, r5
  40919c:	bf28      	it	cs
  40919e:	2306      	movcs	r3, #6
  4091a0:	930d      	str	r3, [sp, #52]	; 0x34
  4091a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4091a6:	46b3      	mov	fp, r6
  4091a8:	970e      	str	r7, [sp, #56]	; 0x38
  4091aa:	9613      	str	r6, [sp, #76]	; 0x4c
  4091ac:	4637      	mov	r7, r6
  4091ae:	9308      	str	r3, [sp, #32]
  4091b0:	4e04      	ldr	r6, [pc, #16]	; (4091c4 <_svfprintf_r+0x1468>)
  4091b2:	f7fe bf99 	b.w	4080e8 <_svfprintf_r+0x38c>
  4091b6:	bf00      	nop
  4091b8:	0040f058 	.word	0x0040f058
  4091bc:	0040f008 	.word	0x0040f008
  4091c0:	66666667 	.word	0x66666667
  4091c4:	0040f050 	.word	0x0040f050
  4091c8:	aa23      	add	r2, sp, #140	; 0x8c
  4091ca:	9909      	ldr	r1, [sp, #36]	; 0x24
  4091cc:	980a      	ldr	r0, [sp, #40]	; 0x28
  4091ce:	f003 ff35 	bl	40d03c <__ssprint_r>
  4091d2:	2800      	cmp	r0, #0
  4091d4:	f47e aebb 	bne.w	407f4e <_svfprintf_r+0x1f2>
  4091d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4091da:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4091dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4091de:	1ad3      	subs	r3, r2, r3
  4091e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4091e4:	e4e7      	b.n	408bb6 <_svfprintf_r+0xe5a>
  4091e6:	f04f 0b06 	mov.w	fp, #6
  4091ea:	e58f      	b.n	408d0c <_svfprintf_r+0xfb0>
  4091ec:	a821      	add	r0, sp, #132	; 0x84
  4091ee:	a91e      	add	r1, sp, #120	; 0x78
  4091f0:	9004      	str	r0, [sp, #16]
  4091f2:	9103      	str	r1, [sp, #12]
  4091f4:	a81d      	add	r0, sp, #116	; 0x74
  4091f6:	2103      	movs	r1, #3
  4091f8:	9002      	str	r0, [sp, #8]
  4091fa:	9a08      	ldr	r2, [sp, #32]
  4091fc:	f8cd b004 	str.w	fp, [sp, #4]
  409200:	463b      	mov	r3, r7
  409202:	9100      	str	r1, [sp, #0]
  409204:	980a      	ldr	r0, [sp, #40]	; 0x28
  409206:	f001 f96f 	bl	40a4e8 <_dtoa_r>
  40920a:	465d      	mov	r5, fp
  40920c:	4606      	mov	r6, r0
  40920e:	eb00 040b 	add.w	r4, r0, fp
  409212:	e6f9      	b.n	409008 <_svfprintf_r+0x12ac>
  409214:	9307      	str	r3, [sp, #28]
  409216:	f7ff b959 	b.w	4084cc <_svfprintf_r+0x770>
  40921a:	272d      	movs	r7, #45	; 0x2d
  40921c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  409220:	f7ff b8b2 	b.w	408388 <_svfprintf_r+0x62c>
  409224:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409226:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409228:	4413      	add	r3, r2
  40922a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40922c:	930d      	str	r3, [sp, #52]	; 0x34
  40922e:	2a00      	cmp	r2, #0
  409230:	dd7e      	ble.n	409330 <_svfprintf_r+0x15d4>
  409232:	2267      	movs	r2, #103	; 0x67
  409234:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409238:	9211      	str	r2, [sp, #68]	; 0x44
  40923a:	e5cc      	b.n	408dd6 <_svfprintf_r+0x107a>
  40923c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  409240:	970e      	str	r7, [sp, #56]	; 0x38
  409242:	9308      	str	r3, [sp, #32]
  409244:	950d      	str	r5, [sp, #52]	; 0x34
  409246:	4683      	mov	fp, r0
  409248:	9013      	str	r0, [sp, #76]	; 0x4c
  40924a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40924e:	f7fe bf4b 	b.w	4080e8 <_svfprintf_r+0x38c>
  409252:	9b07      	ldr	r3, [sp, #28]
  409254:	07db      	lsls	r3, r3, #31
  409256:	465f      	mov	r7, fp
  409258:	d505      	bpl.n	409266 <_svfprintf_r+0x150a>
  40925a:	ae40      	add	r6, sp, #256	; 0x100
  40925c:	2330      	movs	r3, #48	; 0x30
  40925e:	f806 3d41 	strb.w	r3, [r6, #-65]!
  409262:	f7fe bf37 	b.w	4080d4 <_svfprintf_r+0x378>
  409266:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40926a:	ae30      	add	r6, sp, #192	; 0xc0
  40926c:	f7fe bf35 	b.w	4080da <_svfprintf_r+0x37e>
  409270:	2b00      	cmp	r3, #0
  409272:	dd7d      	ble.n	409370 <_svfprintf_r+0x1614>
  409274:	f1bb 0f00 	cmp.w	fp, #0
  409278:	d13d      	bne.n	4092f6 <_svfprintf_r+0x159a>
  40927a:	9a07      	ldr	r2, [sp, #28]
  40927c:	07d4      	lsls	r4, r2, #31
  40927e:	d43a      	bmi.n	4092f6 <_svfprintf_r+0x159a>
  409280:	461a      	mov	r2, r3
  409282:	920d      	str	r2, [sp, #52]	; 0x34
  409284:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409288:	e5a5      	b.n	408dd6 <_svfprintf_r+0x107a>
  40928a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40928c:	2b47      	cmp	r3, #71	; 0x47
  40928e:	f47f ad70 	bne.w	408d72 <_svfprintf_r+0x1016>
  409292:	9b07      	ldr	r3, [sp, #28]
  409294:	07db      	lsls	r3, r3, #31
  409296:	f53f aeb1 	bmi.w	408ffc <_svfprintf_r+0x12a0>
  40929a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40929c:	1b9b      	subs	r3, r3, r6
  40929e:	9312      	str	r3, [sp, #72]	; 0x48
  4092a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4092a2:	2b47      	cmp	r3, #71	; 0x47
  4092a4:	f43f aef8 	beq.w	409098 <_svfprintf_r+0x133c>
  4092a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4092aa:	e71a      	b.n	4090e2 <_svfprintf_r+0x1386>
  4092ac:	aa23      	add	r2, sp, #140	; 0x8c
  4092ae:	9909      	ldr	r1, [sp, #36]	; 0x24
  4092b0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4092b2:	f003 fec3 	bl	40d03c <__ssprint_r>
  4092b6:	2800      	cmp	r0, #0
  4092b8:	f47e ae49 	bne.w	407f4e <_svfprintf_r+0x1f2>
  4092bc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4092be:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4092c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4092c2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4092c6:	e631      	b.n	408f2c <_svfprintf_r+0x11d0>
  4092c8:	46a0      	mov	r8, r4
  4092ca:	2500      	movs	r5, #0
  4092cc:	f7fe bda1 	b.w	407e12 <_svfprintf_r+0xb6>
  4092d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4092d2:	e562      	b.n	408d9a <_svfprintf_r+0x103e>
  4092d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4092d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4092d8:	4413      	add	r3, r2
  4092da:	2267      	movs	r2, #103	; 0x67
  4092dc:	930d      	str	r3, [sp, #52]	; 0x34
  4092de:	9211      	str	r2, [sp, #68]	; 0x44
  4092e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4092e4:	e577      	b.n	408dd6 <_svfprintf_r+0x107a>
  4092e6:	3330      	adds	r3, #48	; 0x30
  4092e8:	2230      	movs	r2, #48	; 0x30
  4092ea:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4092ee:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4092f2:	ab20      	add	r3, sp, #128	; 0x80
  4092f4:	e731      	b.n	40915a <_svfprintf_r+0x13fe>
  4092f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4092f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4092fa:	189d      	adds	r5, r3, r2
  4092fc:	eb05 030b 	add.w	r3, r5, fp
  409300:	930d      	str	r3, [sp, #52]	; 0x34
  409302:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409306:	e566      	b.n	408dd6 <_svfprintf_r+0x107a>
  409308:	9808      	ldr	r0, [sp, #32]
  40930a:	4639      	mov	r1, r7
  40930c:	2200      	movs	r2, #0
  40930e:	2300      	movs	r3, #0
  409310:	f004 fd00 	bl	40dd14 <__aeabi_dcmpeq>
  409314:	2800      	cmp	r0, #0
  409316:	f47f ae7b 	bne.w	409010 <_svfprintf_r+0x12b4>
  40931a:	f1c5 0501 	rsb	r5, r5, #1
  40931e:	951d      	str	r5, [sp, #116]	; 0x74
  409320:	442c      	add	r4, r5
  409322:	e527      	b.n	408d74 <_svfprintf_r+0x1018>
  409324:	4e32      	ldr	r6, [pc, #200]	; (4093f0 <_svfprintf_r+0x1694>)
  409326:	4b33      	ldr	r3, [pc, #204]	; (4093f4 <_svfprintf_r+0x1698>)
  409328:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40932c:	f7ff b82e 	b.w	40838c <_svfprintf_r+0x630>
  409330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409332:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409334:	f1c3 0301 	rsb	r3, r3, #1
  409338:	441a      	add	r2, r3
  40933a:	4613      	mov	r3, r2
  40933c:	920d      	str	r2, [sp, #52]	; 0x34
  40933e:	e778      	b.n	409232 <_svfprintf_r+0x14d6>
  409340:	9b07      	ldr	r3, [sp, #28]
  409342:	f013 0301 	ands.w	r3, r3, #1
  409346:	f47f af11 	bne.w	40916c <_svfprintf_r+0x1410>
  40934a:	9313      	str	r3, [sp, #76]	; 0x4c
  40934c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40934e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409352:	e540      	b.n	408dd6 <_svfprintf_r+0x107a>
  409354:	980e      	ldr	r0, [sp, #56]	; 0x38
  409356:	f898 3001 	ldrb.w	r3, [r8, #1]
  40935a:	6805      	ldr	r5, [r0, #0]
  40935c:	3004      	adds	r0, #4
  40935e:	2d00      	cmp	r5, #0
  409360:	900e      	str	r0, [sp, #56]	; 0x38
  409362:	46a0      	mov	r8, r4
  409364:	f6be ad53 	bge.w	407e0e <_svfprintf_r+0xb2>
  409368:	f04f 35ff 	mov.w	r5, #4294967295
  40936c:	f7fe bd4f 	b.w	407e0e <_svfprintf_r+0xb2>
  409370:	f1bb 0f00 	cmp.w	fp, #0
  409374:	d102      	bne.n	40937c <_svfprintf_r+0x1620>
  409376:	9b07      	ldr	r3, [sp, #28]
  409378:	07d8      	lsls	r0, r3, #31
  40937a:	d507      	bpl.n	40938c <_svfprintf_r+0x1630>
  40937c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40937e:	1c5d      	adds	r5, r3, #1
  409380:	eb05 030b 	add.w	r3, r5, fp
  409384:	930d      	str	r3, [sp, #52]	; 0x34
  409386:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40938a:	e524      	b.n	408dd6 <_svfprintf_r+0x107a>
  40938c:	2301      	movs	r3, #1
  40938e:	930d      	str	r3, [sp, #52]	; 0x34
  409390:	e521      	b.n	408dd6 <_svfprintf_r+0x107a>
  409392:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409396:	f7ff b921 	b.w	4085dc <_svfprintf_r+0x880>
  40939a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40939c:	230c      	movs	r3, #12
  40939e:	6013      	str	r3, [r2, #0]
  4093a0:	f04f 30ff 	mov.w	r0, #4294967295
  4093a4:	f7fe bddc 	b.w	407f60 <_svfprintf_r+0x204>
  4093a8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4093ac:	f7ff b8f9 	b.w	4085a2 <_svfprintf_r+0x846>
  4093b0:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  4093b4:	e6d1      	b.n	40915a <_svfprintf_r+0x13fe>
  4093b6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4093ba:	f7fe bdd9 	b.w	407f70 <_svfprintf_r+0x214>
  4093be:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4093c2:	f7ff b857 	b.w	408474 <_svfprintf_r+0x718>
  4093c6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4093ca:	f7ff b825 	b.w	408418 <_svfprintf_r+0x6bc>
  4093ce:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4093d2:	f7ff b94c 	b.w	40866e <_svfprintf_r+0x912>
  4093d6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4093da:	f7fe bff3 	b.w	4083c4 <_svfprintf_r+0x668>
  4093de:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4093e2:	f7fe bfa3 	b.w	40832c <_svfprintf_r+0x5d0>
  4093e6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4093ea:	f7fe be33 	b.w	408054 <_svfprintf_r+0x2f8>
  4093ee:	bf00      	nop
  4093f0:	0040f024 	.word	0x0040f024
  4093f4:	0040f020 	.word	0x0040f020

004093f8 <__sprint_r.part.0>:
  4093f8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4093fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4093fe:	049c      	lsls	r4, r3, #18
  409400:	4692      	mov	sl, r2
  409402:	d52c      	bpl.n	40945e <__sprint_r.part.0+0x66>
  409404:	6893      	ldr	r3, [r2, #8]
  409406:	6812      	ldr	r2, [r2, #0]
  409408:	b33b      	cbz	r3, 40945a <__sprint_r.part.0+0x62>
  40940a:	460f      	mov	r7, r1
  40940c:	4680      	mov	r8, r0
  40940e:	f102 0908 	add.w	r9, r2, #8
  409412:	e919 0060 	ldmdb	r9, {r5, r6}
  409416:	08b6      	lsrs	r6, r6, #2
  409418:	d017      	beq.n	40944a <__sprint_r.part.0+0x52>
  40941a:	3d04      	subs	r5, #4
  40941c:	2400      	movs	r4, #0
  40941e:	e001      	b.n	409424 <__sprint_r.part.0+0x2c>
  409420:	42a6      	cmp	r6, r4
  409422:	d010      	beq.n	409446 <__sprint_r.part.0+0x4e>
  409424:	463a      	mov	r2, r7
  409426:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40942a:	4640      	mov	r0, r8
  40942c:	f002 f92a 	bl	40b684 <_fputwc_r>
  409430:	1c43      	adds	r3, r0, #1
  409432:	f104 0401 	add.w	r4, r4, #1
  409436:	d1f3      	bne.n	409420 <__sprint_r.part.0+0x28>
  409438:	2300      	movs	r3, #0
  40943a:	f8ca 3008 	str.w	r3, [sl, #8]
  40943e:	f8ca 3004 	str.w	r3, [sl, #4]
  409442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409446:	f8da 3008 	ldr.w	r3, [sl, #8]
  40944a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40944e:	f8ca 3008 	str.w	r3, [sl, #8]
  409452:	f109 0908 	add.w	r9, r9, #8
  409456:	2b00      	cmp	r3, #0
  409458:	d1db      	bne.n	409412 <__sprint_r.part.0+0x1a>
  40945a:	2000      	movs	r0, #0
  40945c:	e7ec      	b.n	409438 <__sprint_r.part.0+0x40>
  40945e:	f002 fa59 	bl	40b914 <__sfvwrite_r>
  409462:	2300      	movs	r3, #0
  409464:	f8ca 3008 	str.w	r3, [sl, #8]
  409468:	f8ca 3004 	str.w	r3, [sl, #4]
  40946c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00409470 <_vfiprintf_r>:
  409470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409474:	b0ab      	sub	sp, #172	; 0xac
  409476:	461c      	mov	r4, r3
  409478:	9100      	str	r1, [sp, #0]
  40947a:	4690      	mov	r8, r2
  40947c:	9304      	str	r3, [sp, #16]
  40947e:	9005      	str	r0, [sp, #20]
  409480:	b118      	cbz	r0, 40948a <_vfiprintf_r+0x1a>
  409482:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409484:	2b00      	cmp	r3, #0
  409486:	f000 80de 	beq.w	409646 <_vfiprintf_r+0x1d6>
  40948a:	9800      	ldr	r0, [sp, #0]
  40948c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  409490:	b28a      	uxth	r2, r1
  409492:	0495      	lsls	r5, r2, #18
  409494:	d407      	bmi.n	4094a6 <_vfiprintf_r+0x36>
  409496:	6e43      	ldr	r3, [r0, #100]	; 0x64
  409498:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  40949c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4094a0:	8182      	strh	r2, [r0, #12]
  4094a2:	6643      	str	r3, [r0, #100]	; 0x64
  4094a4:	b292      	uxth	r2, r2
  4094a6:	0711      	lsls	r1, r2, #28
  4094a8:	f140 80b1 	bpl.w	40960e <_vfiprintf_r+0x19e>
  4094ac:	9b00      	ldr	r3, [sp, #0]
  4094ae:	691b      	ldr	r3, [r3, #16]
  4094b0:	2b00      	cmp	r3, #0
  4094b2:	f000 80ac 	beq.w	40960e <_vfiprintf_r+0x19e>
  4094b6:	f002 021a 	and.w	r2, r2, #26
  4094ba:	2a0a      	cmp	r2, #10
  4094bc:	f000 80b5 	beq.w	40962a <_vfiprintf_r+0x1ba>
  4094c0:	2300      	movs	r3, #0
  4094c2:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  4094c6:	9302      	str	r3, [sp, #8]
  4094c8:	930f      	str	r3, [sp, #60]	; 0x3c
  4094ca:	930e      	str	r3, [sp, #56]	; 0x38
  4094cc:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4094d0:	46da      	mov	sl, fp
  4094d2:	f898 3000 	ldrb.w	r3, [r8]
  4094d6:	4644      	mov	r4, r8
  4094d8:	b1fb      	cbz	r3, 40951a <_vfiprintf_r+0xaa>
  4094da:	2b25      	cmp	r3, #37	; 0x25
  4094dc:	d102      	bne.n	4094e4 <_vfiprintf_r+0x74>
  4094de:	e01c      	b.n	40951a <_vfiprintf_r+0xaa>
  4094e0:	2b25      	cmp	r3, #37	; 0x25
  4094e2:	d003      	beq.n	4094ec <_vfiprintf_r+0x7c>
  4094e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4094e8:	2b00      	cmp	r3, #0
  4094ea:	d1f9      	bne.n	4094e0 <_vfiprintf_r+0x70>
  4094ec:	ebc8 0504 	rsb	r5, r8, r4
  4094f0:	b19d      	cbz	r5, 40951a <_vfiprintf_r+0xaa>
  4094f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4094f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4094f6:	f8ca 8000 	str.w	r8, [sl]
  4094fa:	3301      	adds	r3, #1
  4094fc:	442a      	add	r2, r5
  4094fe:	2b07      	cmp	r3, #7
  409500:	f8ca 5004 	str.w	r5, [sl, #4]
  409504:	920f      	str	r2, [sp, #60]	; 0x3c
  409506:	930e      	str	r3, [sp, #56]	; 0x38
  409508:	dd7b      	ble.n	409602 <_vfiprintf_r+0x192>
  40950a:	2a00      	cmp	r2, #0
  40950c:	f040 8528 	bne.w	409f60 <_vfiprintf_r+0xaf0>
  409510:	9b02      	ldr	r3, [sp, #8]
  409512:	920e      	str	r2, [sp, #56]	; 0x38
  409514:	442b      	add	r3, r5
  409516:	46da      	mov	sl, fp
  409518:	9302      	str	r3, [sp, #8]
  40951a:	7823      	ldrb	r3, [r4, #0]
  40951c:	2b00      	cmp	r3, #0
  40951e:	f000 843e 	beq.w	409d9e <_vfiprintf_r+0x92e>
  409522:	2100      	movs	r1, #0
  409524:	f04f 0300 	mov.w	r3, #0
  409528:	f04f 32ff 	mov.w	r2, #4294967295
  40952c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409530:	f104 0801 	add.w	r8, r4, #1
  409534:	7863      	ldrb	r3, [r4, #1]
  409536:	9201      	str	r2, [sp, #4]
  409538:	4608      	mov	r0, r1
  40953a:	460e      	mov	r6, r1
  40953c:	460c      	mov	r4, r1
  40953e:	f108 0801 	add.w	r8, r8, #1
  409542:	f1a3 0220 	sub.w	r2, r3, #32
  409546:	2a58      	cmp	r2, #88	; 0x58
  409548:	f200 8393 	bhi.w	409c72 <_vfiprintf_r+0x802>
  40954c:	e8df f012 	tbh	[pc, r2, lsl #1]
  409550:	03910346 	.word	0x03910346
  409554:	034e0391 	.word	0x034e0391
  409558:	03910391 	.word	0x03910391
  40955c:	03910391 	.word	0x03910391
  409560:	03910391 	.word	0x03910391
  409564:	02670289 	.word	0x02670289
  409568:	00800391 	.word	0x00800391
  40956c:	0391026c 	.word	0x0391026c
  409570:	025901c6 	.word	0x025901c6
  409574:	02590259 	.word	0x02590259
  409578:	02590259 	.word	0x02590259
  40957c:	02590259 	.word	0x02590259
  409580:	02590259 	.word	0x02590259
  409584:	03910391 	.word	0x03910391
  409588:	03910391 	.word	0x03910391
  40958c:	03910391 	.word	0x03910391
  409590:	03910391 	.word	0x03910391
  409594:	03910391 	.word	0x03910391
  409598:	039101cb 	.word	0x039101cb
  40959c:	03910391 	.word	0x03910391
  4095a0:	03910391 	.word	0x03910391
  4095a4:	03910391 	.word	0x03910391
  4095a8:	03910391 	.word	0x03910391
  4095ac:	02140391 	.word	0x02140391
  4095b0:	03910391 	.word	0x03910391
  4095b4:	03910391 	.word	0x03910391
  4095b8:	02ee0391 	.word	0x02ee0391
  4095bc:	03910391 	.word	0x03910391
  4095c0:	03910311 	.word	0x03910311
  4095c4:	03910391 	.word	0x03910391
  4095c8:	03910391 	.word	0x03910391
  4095cc:	03910391 	.word	0x03910391
  4095d0:	03910391 	.word	0x03910391
  4095d4:	03340391 	.word	0x03340391
  4095d8:	0391038a 	.word	0x0391038a
  4095dc:	03910391 	.word	0x03910391
  4095e0:	038a0367 	.word	0x038a0367
  4095e4:	03910391 	.word	0x03910391
  4095e8:	0391036c 	.word	0x0391036c
  4095ec:	02950379 	.word	0x02950379
  4095f0:	02e90085 	.word	0x02e90085
  4095f4:	029b0391 	.word	0x029b0391
  4095f8:	02ba0391 	.word	0x02ba0391
  4095fc:	03910391 	.word	0x03910391
  409600:	0353      	.short	0x0353
  409602:	f10a 0a08 	add.w	sl, sl, #8
  409606:	9b02      	ldr	r3, [sp, #8]
  409608:	442b      	add	r3, r5
  40960a:	9302      	str	r3, [sp, #8]
  40960c:	e785      	b.n	40951a <_vfiprintf_r+0xaa>
  40960e:	9900      	ldr	r1, [sp, #0]
  409610:	9805      	ldr	r0, [sp, #20]
  409612:	f000 fe61 	bl	40a2d8 <__swsetup_r>
  409616:	2800      	cmp	r0, #0
  409618:	f040 8558 	bne.w	40a0cc <_vfiprintf_r+0xc5c>
  40961c:	9b00      	ldr	r3, [sp, #0]
  40961e:	899a      	ldrh	r2, [r3, #12]
  409620:	f002 021a 	and.w	r2, r2, #26
  409624:	2a0a      	cmp	r2, #10
  409626:	f47f af4b 	bne.w	4094c0 <_vfiprintf_r+0x50>
  40962a:	9900      	ldr	r1, [sp, #0]
  40962c:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  409630:	2b00      	cmp	r3, #0
  409632:	f6ff af45 	blt.w	4094c0 <_vfiprintf_r+0x50>
  409636:	4623      	mov	r3, r4
  409638:	4642      	mov	r2, r8
  40963a:	9805      	ldr	r0, [sp, #20]
  40963c:	f000 fe16 	bl	40a26c <__sbprintf>
  409640:	b02b      	add	sp, #172	; 0xac
  409642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409646:	f001 ffb3 	bl	40b5b0 <__sinit>
  40964a:	e71e      	b.n	40948a <_vfiprintf_r+0x1a>
  40964c:	4264      	negs	r4, r4
  40964e:	9304      	str	r3, [sp, #16]
  409650:	f046 0604 	orr.w	r6, r6, #4
  409654:	f898 3000 	ldrb.w	r3, [r8]
  409658:	e771      	b.n	40953e <_vfiprintf_r+0xce>
  40965a:	2130      	movs	r1, #48	; 0x30
  40965c:	9804      	ldr	r0, [sp, #16]
  40965e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  409662:	9901      	ldr	r1, [sp, #4]
  409664:	9406      	str	r4, [sp, #24]
  409666:	f04f 0300 	mov.w	r3, #0
  40966a:	2278      	movs	r2, #120	; 0x78
  40966c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409670:	2900      	cmp	r1, #0
  409672:	4603      	mov	r3, r0
  409674:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  409678:	6804      	ldr	r4, [r0, #0]
  40967a:	f103 0304 	add.w	r3, r3, #4
  40967e:	f04f 0500 	mov.w	r5, #0
  409682:	f046 0202 	orr.w	r2, r6, #2
  409686:	f2c0 8525 	blt.w	40a0d4 <_vfiprintf_r+0xc64>
  40968a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40968e:	ea54 0205 	orrs.w	r2, r4, r5
  409692:	f046 0602 	orr.w	r6, r6, #2
  409696:	9304      	str	r3, [sp, #16]
  409698:	f040 84bf 	bne.w	40a01a <_vfiprintf_r+0xbaa>
  40969c:	48b3      	ldr	r0, [pc, #716]	; (40996c <_vfiprintf_r+0x4fc>)
  40969e:	9b01      	ldr	r3, [sp, #4]
  4096a0:	2b00      	cmp	r3, #0
  4096a2:	f040 841c 	bne.w	409ede <_vfiprintf_r+0xa6e>
  4096a6:	4699      	mov	r9, r3
  4096a8:	2300      	movs	r3, #0
  4096aa:	9301      	str	r3, [sp, #4]
  4096ac:	9303      	str	r3, [sp, #12]
  4096ae:	465f      	mov	r7, fp
  4096b0:	9b01      	ldr	r3, [sp, #4]
  4096b2:	9a03      	ldr	r2, [sp, #12]
  4096b4:	4293      	cmp	r3, r2
  4096b6:	bfb8      	it	lt
  4096b8:	4613      	movlt	r3, r2
  4096ba:	461d      	mov	r5, r3
  4096bc:	f1b9 0f00 	cmp.w	r9, #0
  4096c0:	d000      	beq.n	4096c4 <_vfiprintf_r+0x254>
  4096c2:	3501      	adds	r5, #1
  4096c4:	f016 0302 	ands.w	r3, r6, #2
  4096c8:	9307      	str	r3, [sp, #28]
  4096ca:	bf18      	it	ne
  4096cc:	3502      	addne	r5, #2
  4096ce:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  4096d2:	9308      	str	r3, [sp, #32]
  4096d4:	f040 82f1 	bne.w	409cba <_vfiprintf_r+0x84a>
  4096d8:	9b06      	ldr	r3, [sp, #24]
  4096da:	1b5c      	subs	r4, r3, r5
  4096dc:	2c00      	cmp	r4, #0
  4096de:	f340 82ec 	ble.w	409cba <_vfiprintf_r+0x84a>
  4096e2:	2c10      	cmp	r4, #16
  4096e4:	f340 8556 	ble.w	40a194 <_vfiprintf_r+0xd24>
  4096e8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 409970 <_vfiprintf_r+0x500>
  4096ec:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  4096f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4096f2:	46d4      	mov	ip, sl
  4096f4:	2310      	movs	r3, #16
  4096f6:	46c2      	mov	sl, r8
  4096f8:	4670      	mov	r0, lr
  4096fa:	46a8      	mov	r8, r5
  4096fc:	464d      	mov	r5, r9
  4096fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409702:	e007      	b.n	409714 <_vfiprintf_r+0x2a4>
  409704:	f100 0e02 	add.w	lr, r0, #2
  409708:	f10c 0c08 	add.w	ip, ip, #8
  40970c:	4608      	mov	r0, r1
  40970e:	3c10      	subs	r4, #16
  409710:	2c10      	cmp	r4, #16
  409712:	dd13      	ble.n	40973c <_vfiprintf_r+0x2cc>
  409714:	1c41      	adds	r1, r0, #1
  409716:	3210      	adds	r2, #16
  409718:	2907      	cmp	r1, #7
  40971a:	920f      	str	r2, [sp, #60]	; 0x3c
  40971c:	f8cc 5000 	str.w	r5, [ip]
  409720:	f8cc 3004 	str.w	r3, [ip, #4]
  409724:	910e      	str	r1, [sp, #56]	; 0x38
  409726:	dded      	ble.n	409704 <_vfiprintf_r+0x294>
  409728:	2a00      	cmp	r2, #0
  40972a:	f040 82b7 	bne.w	409c9c <_vfiprintf_r+0x82c>
  40972e:	3c10      	subs	r4, #16
  409730:	2c10      	cmp	r4, #16
  409732:	4610      	mov	r0, r2
  409734:	f04f 0e01 	mov.w	lr, #1
  409738:	46dc      	mov	ip, fp
  40973a:	dceb      	bgt.n	409714 <_vfiprintf_r+0x2a4>
  40973c:	46a9      	mov	r9, r5
  40973e:	4670      	mov	r0, lr
  409740:	4645      	mov	r5, r8
  409742:	46d0      	mov	r8, sl
  409744:	46e2      	mov	sl, ip
  409746:	4422      	add	r2, r4
  409748:	2807      	cmp	r0, #7
  40974a:	920f      	str	r2, [sp, #60]	; 0x3c
  40974c:	f8ca 9000 	str.w	r9, [sl]
  409750:	f8ca 4004 	str.w	r4, [sl, #4]
  409754:	900e      	str	r0, [sp, #56]	; 0x38
  409756:	f300 8375 	bgt.w	409e44 <_vfiprintf_r+0x9d4>
  40975a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40975e:	f10a 0a08 	add.w	sl, sl, #8
  409762:	f100 0e01 	add.w	lr, r0, #1
  409766:	2b00      	cmp	r3, #0
  409768:	f040 82b0 	bne.w	409ccc <_vfiprintf_r+0x85c>
  40976c:	9b07      	ldr	r3, [sp, #28]
  40976e:	2b00      	cmp	r3, #0
  409770:	f000 82c3 	beq.w	409cfa <_vfiprintf_r+0x88a>
  409774:	3202      	adds	r2, #2
  409776:	a90c      	add	r1, sp, #48	; 0x30
  409778:	2302      	movs	r3, #2
  40977a:	f1be 0f07 	cmp.w	lr, #7
  40977e:	920f      	str	r2, [sp, #60]	; 0x3c
  409780:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  409784:	e88a 000a 	stmia.w	sl, {r1, r3}
  409788:	f340 8378 	ble.w	409e7c <_vfiprintf_r+0xa0c>
  40978c:	2a00      	cmp	r2, #0
  40978e:	f040 840a 	bne.w	409fa6 <_vfiprintf_r+0xb36>
  409792:	9b08      	ldr	r3, [sp, #32]
  409794:	2b80      	cmp	r3, #128	; 0x80
  409796:	f04f 0e01 	mov.w	lr, #1
  40979a:	4610      	mov	r0, r2
  40979c:	46da      	mov	sl, fp
  40979e:	f040 82b0 	bne.w	409d02 <_vfiprintf_r+0x892>
  4097a2:	9b06      	ldr	r3, [sp, #24]
  4097a4:	1b5c      	subs	r4, r3, r5
  4097a6:	2c00      	cmp	r4, #0
  4097a8:	f340 82ab 	ble.w	409d02 <_vfiprintf_r+0x892>
  4097ac:	2c10      	cmp	r4, #16
  4097ae:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 409974 <_vfiprintf_r+0x504>
  4097b2:	f340 850b 	ble.w	40a1cc <_vfiprintf_r+0xd5c>
  4097b6:	46d6      	mov	lr, sl
  4097b8:	2310      	movs	r3, #16
  4097ba:	46c2      	mov	sl, r8
  4097bc:	46a8      	mov	r8, r5
  4097be:	464d      	mov	r5, r9
  4097c0:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4097c4:	e007      	b.n	4097d6 <_vfiprintf_r+0x366>
  4097c6:	f100 0c02 	add.w	ip, r0, #2
  4097ca:	f10e 0e08 	add.w	lr, lr, #8
  4097ce:	4608      	mov	r0, r1
  4097d0:	3c10      	subs	r4, #16
  4097d2:	2c10      	cmp	r4, #16
  4097d4:	dd13      	ble.n	4097fe <_vfiprintf_r+0x38e>
  4097d6:	1c41      	adds	r1, r0, #1
  4097d8:	3210      	adds	r2, #16
  4097da:	2907      	cmp	r1, #7
  4097dc:	920f      	str	r2, [sp, #60]	; 0x3c
  4097de:	f8ce 5000 	str.w	r5, [lr]
  4097e2:	f8ce 3004 	str.w	r3, [lr, #4]
  4097e6:	910e      	str	r1, [sp, #56]	; 0x38
  4097e8:	dded      	ble.n	4097c6 <_vfiprintf_r+0x356>
  4097ea:	2a00      	cmp	r2, #0
  4097ec:	f040 8315 	bne.w	409e1a <_vfiprintf_r+0x9aa>
  4097f0:	3c10      	subs	r4, #16
  4097f2:	2c10      	cmp	r4, #16
  4097f4:	f04f 0c01 	mov.w	ip, #1
  4097f8:	4610      	mov	r0, r2
  4097fa:	46de      	mov	lr, fp
  4097fc:	dceb      	bgt.n	4097d6 <_vfiprintf_r+0x366>
  4097fe:	46a9      	mov	r9, r5
  409800:	4645      	mov	r5, r8
  409802:	46d0      	mov	r8, sl
  409804:	46f2      	mov	sl, lr
  409806:	4422      	add	r2, r4
  409808:	f1bc 0f07 	cmp.w	ip, #7
  40980c:	920f      	str	r2, [sp, #60]	; 0x3c
  40980e:	f8ca 9000 	str.w	r9, [sl]
  409812:	f8ca 4004 	str.w	r4, [sl, #4]
  409816:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  40981a:	f300 83d2 	bgt.w	409fc2 <_vfiprintf_r+0xb52>
  40981e:	9b01      	ldr	r3, [sp, #4]
  409820:	9903      	ldr	r1, [sp, #12]
  409822:	1a5c      	subs	r4, r3, r1
  409824:	2c00      	cmp	r4, #0
  409826:	f10a 0a08 	add.w	sl, sl, #8
  40982a:	f10c 0e01 	add.w	lr, ip, #1
  40982e:	4660      	mov	r0, ip
  409830:	f300 826d 	bgt.w	409d0e <_vfiprintf_r+0x89e>
  409834:	9903      	ldr	r1, [sp, #12]
  409836:	f8ca 7000 	str.w	r7, [sl]
  40983a:	440a      	add	r2, r1
  40983c:	f1be 0f07 	cmp.w	lr, #7
  409840:	920f      	str	r2, [sp, #60]	; 0x3c
  409842:	f8ca 1004 	str.w	r1, [sl, #4]
  409846:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40984a:	f340 82ce 	ble.w	409dea <_vfiprintf_r+0x97a>
  40984e:	2a00      	cmp	r2, #0
  409850:	f040 833a 	bne.w	409ec8 <_vfiprintf_r+0xa58>
  409854:	0770      	lsls	r0, r6, #29
  409856:	920e      	str	r2, [sp, #56]	; 0x38
  409858:	d538      	bpl.n	4098cc <_vfiprintf_r+0x45c>
  40985a:	9b06      	ldr	r3, [sp, #24]
  40985c:	1b5c      	subs	r4, r3, r5
  40985e:	2c00      	cmp	r4, #0
  409860:	dd34      	ble.n	4098cc <_vfiprintf_r+0x45c>
  409862:	46da      	mov	sl, fp
  409864:	2c10      	cmp	r4, #16
  409866:	f340 84ab 	ble.w	40a1c0 <_vfiprintf_r+0xd50>
  40986a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 409970 <_vfiprintf_r+0x500>
  40986e:	990e      	ldr	r1, [sp, #56]	; 0x38
  409870:	464f      	mov	r7, r9
  409872:	2610      	movs	r6, #16
  409874:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409878:	e006      	b.n	409888 <_vfiprintf_r+0x418>
  40987a:	1c88      	adds	r0, r1, #2
  40987c:	f10a 0a08 	add.w	sl, sl, #8
  409880:	4619      	mov	r1, r3
  409882:	3c10      	subs	r4, #16
  409884:	2c10      	cmp	r4, #16
  409886:	dd13      	ble.n	4098b0 <_vfiprintf_r+0x440>
  409888:	1c4b      	adds	r3, r1, #1
  40988a:	3210      	adds	r2, #16
  40988c:	2b07      	cmp	r3, #7
  40988e:	920f      	str	r2, [sp, #60]	; 0x3c
  409890:	f8ca 7000 	str.w	r7, [sl]
  409894:	f8ca 6004 	str.w	r6, [sl, #4]
  409898:	930e      	str	r3, [sp, #56]	; 0x38
  40989a:	ddee      	ble.n	40987a <_vfiprintf_r+0x40a>
  40989c:	2a00      	cmp	r2, #0
  40989e:	f040 828e 	bne.w	409dbe <_vfiprintf_r+0x94e>
  4098a2:	3c10      	subs	r4, #16
  4098a4:	2c10      	cmp	r4, #16
  4098a6:	f04f 0001 	mov.w	r0, #1
  4098aa:	4611      	mov	r1, r2
  4098ac:	46da      	mov	sl, fp
  4098ae:	dceb      	bgt.n	409888 <_vfiprintf_r+0x418>
  4098b0:	46b9      	mov	r9, r7
  4098b2:	4422      	add	r2, r4
  4098b4:	2807      	cmp	r0, #7
  4098b6:	920f      	str	r2, [sp, #60]	; 0x3c
  4098b8:	f8ca 9000 	str.w	r9, [sl]
  4098bc:	f8ca 4004 	str.w	r4, [sl, #4]
  4098c0:	900e      	str	r0, [sp, #56]	; 0x38
  4098c2:	f340 829b 	ble.w	409dfc <_vfiprintf_r+0x98c>
  4098c6:	2a00      	cmp	r2, #0
  4098c8:	f040 8425 	bne.w	40a116 <_vfiprintf_r+0xca6>
  4098cc:	9b02      	ldr	r3, [sp, #8]
  4098ce:	9a06      	ldr	r2, [sp, #24]
  4098d0:	42aa      	cmp	r2, r5
  4098d2:	bfac      	ite	ge
  4098d4:	189b      	addge	r3, r3, r2
  4098d6:	195b      	addlt	r3, r3, r5
  4098d8:	9302      	str	r3, [sp, #8]
  4098da:	e299      	b.n	409e10 <_vfiprintf_r+0x9a0>
  4098dc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4098e0:	f898 3000 	ldrb.w	r3, [r8]
  4098e4:	e62b      	b.n	40953e <_vfiprintf_r+0xce>
  4098e6:	9406      	str	r4, [sp, #24]
  4098e8:	2900      	cmp	r1, #0
  4098ea:	f040 84af 	bne.w	40a24c <_vfiprintf_r+0xddc>
  4098ee:	f046 0610 	orr.w	r6, r6, #16
  4098f2:	06b3      	lsls	r3, r6, #26
  4098f4:	f140 8312 	bpl.w	409f1c <_vfiprintf_r+0xaac>
  4098f8:	9904      	ldr	r1, [sp, #16]
  4098fa:	3107      	adds	r1, #7
  4098fc:	f021 0107 	bic.w	r1, r1, #7
  409900:	e9d1 2300 	ldrd	r2, r3, [r1]
  409904:	3108      	adds	r1, #8
  409906:	9104      	str	r1, [sp, #16]
  409908:	4614      	mov	r4, r2
  40990a:	461d      	mov	r5, r3
  40990c:	2a00      	cmp	r2, #0
  40990e:	f173 0300 	sbcs.w	r3, r3, #0
  409912:	f2c0 8386 	blt.w	40a022 <_vfiprintf_r+0xbb2>
  409916:	9b01      	ldr	r3, [sp, #4]
  409918:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40991c:	2b00      	cmp	r3, #0
  40991e:	f2c0 831a 	blt.w	409f56 <_vfiprintf_r+0xae6>
  409922:	ea54 0305 	orrs.w	r3, r4, r5
  409926:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40992a:	f000 80ed 	beq.w	409b08 <_vfiprintf_r+0x698>
  40992e:	2d00      	cmp	r5, #0
  409930:	bf08      	it	eq
  409932:	2c0a      	cmpeq	r4, #10
  409934:	f0c0 80ed 	bcc.w	409b12 <_vfiprintf_r+0x6a2>
  409938:	465f      	mov	r7, fp
  40993a:	4620      	mov	r0, r4
  40993c:	4629      	mov	r1, r5
  40993e:	220a      	movs	r2, #10
  409940:	2300      	movs	r3, #0
  409942:	f7fd fe9b 	bl	40767c <__aeabi_uldivmod>
  409946:	3230      	adds	r2, #48	; 0x30
  409948:	f807 2d01 	strb.w	r2, [r7, #-1]!
  40994c:	4620      	mov	r0, r4
  40994e:	4629      	mov	r1, r5
  409950:	2300      	movs	r3, #0
  409952:	220a      	movs	r2, #10
  409954:	f7fd fe92 	bl	40767c <__aeabi_uldivmod>
  409958:	4604      	mov	r4, r0
  40995a:	460d      	mov	r5, r1
  40995c:	ea54 0305 	orrs.w	r3, r4, r5
  409960:	d1eb      	bne.n	40993a <_vfiprintf_r+0x4ca>
  409962:	ebc7 030b 	rsb	r3, r7, fp
  409966:	9303      	str	r3, [sp, #12]
  409968:	e6a2      	b.n	4096b0 <_vfiprintf_r+0x240>
  40996a:	bf00      	nop
  40996c:	0040f03c 	.word	0x0040f03c
  409970:	0040f07c 	.word	0x0040f07c
  409974:	0040f06c 	.word	0x0040f06c
  409978:	9406      	str	r4, [sp, #24]
  40997a:	2900      	cmp	r1, #0
  40997c:	f040 8462 	bne.w	40a244 <_vfiprintf_r+0xdd4>
  409980:	f046 0610 	orr.w	r6, r6, #16
  409984:	f016 0320 	ands.w	r3, r6, #32
  409988:	f000 82ae 	beq.w	409ee8 <_vfiprintf_r+0xa78>
  40998c:	9b04      	ldr	r3, [sp, #16]
  40998e:	3307      	adds	r3, #7
  409990:	f023 0307 	bic.w	r3, r3, #7
  409994:	f04f 0200 	mov.w	r2, #0
  409998:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40999c:	e9d3 4500 	ldrd	r4, r5, [r3]
  4099a0:	f103 0208 	add.w	r2, r3, #8
  4099a4:	9b01      	ldr	r3, [sp, #4]
  4099a6:	9204      	str	r2, [sp, #16]
  4099a8:	2b00      	cmp	r3, #0
  4099aa:	f2c0 8174 	blt.w	409c96 <_vfiprintf_r+0x826>
  4099ae:	ea54 0305 	orrs.w	r3, r4, r5
  4099b2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4099b6:	f040 816e 	bne.w	409c96 <_vfiprintf_r+0x826>
  4099ba:	9b01      	ldr	r3, [sp, #4]
  4099bc:	2b00      	cmp	r3, #0
  4099be:	f000 8430 	beq.w	40a222 <_vfiprintf_r+0xdb2>
  4099c2:	f04f 0900 	mov.w	r9, #0
  4099c6:	2400      	movs	r4, #0
  4099c8:	2500      	movs	r5, #0
  4099ca:	465f      	mov	r7, fp
  4099cc:	08e2      	lsrs	r2, r4, #3
  4099ce:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4099d2:	08e9      	lsrs	r1, r5, #3
  4099d4:	f004 0307 	and.w	r3, r4, #7
  4099d8:	460d      	mov	r5, r1
  4099da:	4614      	mov	r4, r2
  4099dc:	3330      	adds	r3, #48	; 0x30
  4099de:	ea54 0205 	orrs.w	r2, r4, r5
  4099e2:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4099e6:	d1f1      	bne.n	4099cc <_vfiprintf_r+0x55c>
  4099e8:	07f4      	lsls	r4, r6, #31
  4099ea:	d5ba      	bpl.n	409962 <_vfiprintf_r+0x4f2>
  4099ec:	2b30      	cmp	r3, #48	; 0x30
  4099ee:	d0b8      	beq.n	409962 <_vfiprintf_r+0x4f2>
  4099f0:	2230      	movs	r2, #48	; 0x30
  4099f2:	1e7b      	subs	r3, r7, #1
  4099f4:	f807 2c01 	strb.w	r2, [r7, #-1]
  4099f8:	ebc3 020b 	rsb	r2, r3, fp
  4099fc:	9203      	str	r2, [sp, #12]
  4099fe:	461f      	mov	r7, r3
  409a00:	e656      	b.n	4096b0 <_vfiprintf_r+0x240>
  409a02:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409a06:	2400      	movs	r4, #0
  409a08:	f818 3b01 	ldrb.w	r3, [r8], #1
  409a0c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  409a10:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  409a14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409a18:	2a09      	cmp	r2, #9
  409a1a:	d9f5      	bls.n	409a08 <_vfiprintf_r+0x598>
  409a1c:	e591      	b.n	409542 <_vfiprintf_r+0xd2>
  409a1e:	f898 3000 	ldrb.w	r3, [r8]
  409a22:	2101      	movs	r1, #1
  409a24:	202b      	movs	r0, #43	; 0x2b
  409a26:	e58a      	b.n	40953e <_vfiprintf_r+0xce>
  409a28:	f898 3000 	ldrb.w	r3, [r8]
  409a2c:	2b2a      	cmp	r3, #42	; 0x2a
  409a2e:	f108 0501 	add.w	r5, r8, #1
  409a32:	f000 83dd 	beq.w	40a1f0 <_vfiprintf_r+0xd80>
  409a36:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409a3a:	2a09      	cmp	r2, #9
  409a3c:	46a8      	mov	r8, r5
  409a3e:	bf98      	it	ls
  409a40:	2500      	movls	r5, #0
  409a42:	f200 83ce 	bhi.w	40a1e2 <_vfiprintf_r+0xd72>
  409a46:	f818 3b01 	ldrb.w	r3, [r8], #1
  409a4a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  409a4e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  409a52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409a56:	2a09      	cmp	r2, #9
  409a58:	d9f5      	bls.n	409a46 <_vfiprintf_r+0x5d6>
  409a5a:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  409a5e:	9201      	str	r2, [sp, #4]
  409a60:	e56f      	b.n	409542 <_vfiprintf_r+0xd2>
  409a62:	9a04      	ldr	r2, [sp, #16]
  409a64:	6814      	ldr	r4, [r2, #0]
  409a66:	4613      	mov	r3, r2
  409a68:	2c00      	cmp	r4, #0
  409a6a:	f103 0304 	add.w	r3, r3, #4
  409a6e:	f6ff aded 	blt.w	40964c <_vfiprintf_r+0x1dc>
  409a72:	9304      	str	r3, [sp, #16]
  409a74:	f898 3000 	ldrb.w	r3, [r8]
  409a78:	e561      	b.n	40953e <_vfiprintf_r+0xce>
  409a7a:	9406      	str	r4, [sp, #24]
  409a7c:	2900      	cmp	r1, #0
  409a7e:	d081      	beq.n	409984 <_vfiprintf_r+0x514>
  409a80:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409a84:	e77e      	b.n	409984 <_vfiprintf_r+0x514>
  409a86:	9a04      	ldr	r2, [sp, #16]
  409a88:	9406      	str	r4, [sp, #24]
  409a8a:	6817      	ldr	r7, [r2, #0]
  409a8c:	f04f 0300 	mov.w	r3, #0
  409a90:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409a94:	1d14      	adds	r4, r2, #4
  409a96:	9b01      	ldr	r3, [sp, #4]
  409a98:	2f00      	cmp	r7, #0
  409a9a:	f000 8386 	beq.w	40a1aa <_vfiprintf_r+0xd3a>
  409a9e:	2b00      	cmp	r3, #0
  409aa0:	f2c0 835f 	blt.w	40a162 <_vfiprintf_r+0xcf2>
  409aa4:	461a      	mov	r2, r3
  409aa6:	2100      	movs	r1, #0
  409aa8:	4638      	mov	r0, r7
  409aaa:	f002 fc21 	bl	40c2f0 <memchr>
  409aae:	2800      	cmp	r0, #0
  409ab0:	f000 838f 	beq.w	40a1d2 <_vfiprintf_r+0xd62>
  409ab4:	1bc3      	subs	r3, r0, r7
  409ab6:	9303      	str	r3, [sp, #12]
  409ab8:	2300      	movs	r3, #0
  409aba:	9404      	str	r4, [sp, #16]
  409abc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  409ac0:	9301      	str	r3, [sp, #4]
  409ac2:	e5f5      	b.n	4096b0 <_vfiprintf_r+0x240>
  409ac4:	9406      	str	r4, [sp, #24]
  409ac6:	2900      	cmp	r1, #0
  409ac8:	f040 83b9 	bne.w	40a23e <_vfiprintf_r+0xdce>
  409acc:	f016 0920 	ands.w	r9, r6, #32
  409ad0:	d135      	bne.n	409b3e <_vfiprintf_r+0x6ce>
  409ad2:	f016 0310 	ands.w	r3, r6, #16
  409ad6:	d103      	bne.n	409ae0 <_vfiprintf_r+0x670>
  409ad8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  409adc:	f040 832a 	bne.w	40a134 <_vfiprintf_r+0xcc4>
  409ae0:	9a04      	ldr	r2, [sp, #16]
  409ae2:	4613      	mov	r3, r2
  409ae4:	6814      	ldr	r4, [r2, #0]
  409ae6:	9a01      	ldr	r2, [sp, #4]
  409ae8:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  409aec:	2a00      	cmp	r2, #0
  409aee:	f103 0304 	add.w	r3, r3, #4
  409af2:	f04f 0500 	mov.w	r5, #0
  409af6:	f2c0 8332 	blt.w	40a15e <_vfiprintf_r+0xcee>
  409afa:	ea54 0205 	orrs.w	r2, r4, r5
  409afe:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409b02:	9304      	str	r3, [sp, #16]
  409b04:	f47f af13 	bne.w	40992e <_vfiprintf_r+0x4be>
  409b08:	9b01      	ldr	r3, [sp, #4]
  409b0a:	2b00      	cmp	r3, #0
  409b0c:	f43f adcc 	beq.w	4096a8 <_vfiprintf_r+0x238>
  409b10:	2400      	movs	r4, #0
  409b12:	af2a      	add	r7, sp, #168	; 0xa8
  409b14:	3430      	adds	r4, #48	; 0x30
  409b16:	f807 4d41 	strb.w	r4, [r7, #-65]!
  409b1a:	ebc7 030b 	rsb	r3, r7, fp
  409b1e:	9303      	str	r3, [sp, #12]
  409b20:	e5c6      	b.n	4096b0 <_vfiprintf_r+0x240>
  409b22:	f046 0620 	orr.w	r6, r6, #32
  409b26:	f898 3000 	ldrb.w	r3, [r8]
  409b2a:	e508      	b.n	40953e <_vfiprintf_r+0xce>
  409b2c:	9406      	str	r4, [sp, #24]
  409b2e:	2900      	cmp	r1, #0
  409b30:	f040 836e 	bne.w	40a210 <_vfiprintf_r+0xda0>
  409b34:	f046 0610 	orr.w	r6, r6, #16
  409b38:	f016 0920 	ands.w	r9, r6, #32
  409b3c:	d0c9      	beq.n	409ad2 <_vfiprintf_r+0x662>
  409b3e:	9b04      	ldr	r3, [sp, #16]
  409b40:	3307      	adds	r3, #7
  409b42:	f023 0307 	bic.w	r3, r3, #7
  409b46:	f04f 0200 	mov.w	r2, #0
  409b4a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  409b4e:	e9d3 4500 	ldrd	r4, r5, [r3]
  409b52:	f103 0208 	add.w	r2, r3, #8
  409b56:	9b01      	ldr	r3, [sp, #4]
  409b58:	9204      	str	r2, [sp, #16]
  409b5a:	2b00      	cmp	r3, #0
  409b5c:	f2c0 81f9 	blt.w	409f52 <_vfiprintf_r+0xae2>
  409b60:	ea54 0305 	orrs.w	r3, r4, r5
  409b64:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409b68:	f04f 0900 	mov.w	r9, #0
  409b6c:	f47f aedf 	bne.w	40992e <_vfiprintf_r+0x4be>
  409b70:	e7ca      	b.n	409b08 <_vfiprintf_r+0x698>
  409b72:	9406      	str	r4, [sp, #24]
  409b74:	2900      	cmp	r1, #0
  409b76:	f040 8351 	bne.w	40a21c <_vfiprintf_r+0xdac>
  409b7a:	06b2      	lsls	r2, r6, #26
  409b7c:	48ae      	ldr	r0, [pc, #696]	; (409e38 <_vfiprintf_r+0x9c8>)
  409b7e:	d541      	bpl.n	409c04 <_vfiprintf_r+0x794>
  409b80:	9a04      	ldr	r2, [sp, #16]
  409b82:	3207      	adds	r2, #7
  409b84:	f022 0207 	bic.w	r2, r2, #7
  409b88:	e9d2 4500 	ldrd	r4, r5, [r2]
  409b8c:	f102 0108 	add.w	r1, r2, #8
  409b90:	9104      	str	r1, [sp, #16]
  409b92:	f016 0901 	ands.w	r9, r6, #1
  409b96:	f000 8177 	beq.w	409e88 <_vfiprintf_r+0xa18>
  409b9a:	ea54 0205 	orrs.w	r2, r4, r5
  409b9e:	f040 8226 	bne.w	409fee <_vfiprintf_r+0xb7e>
  409ba2:	f04f 0300 	mov.w	r3, #0
  409ba6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409baa:	9b01      	ldr	r3, [sp, #4]
  409bac:	2b00      	cmp	r3, #0
  409bae:	f2c0 8196 	blt.w	409ede <_vfiprintf_r+0xa6e>
  409bb2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409bb6:	e572      	b.n	40969e <_vfiprintf_r+0x22e>
  409bb8:	9a04      	ldr	r2, [sp, #16]
  409bba:	9406      	str	r4, [sp, #24]
  409bbc:	6813      	ldr	r3, [r2, #0]
  409bbe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  409bc2:	4613      	mov	r3, r2
  409bc4:	f04f 0100 	mov.w	r1, #0
  409bc8:	2501      	movs	r5, #1
  409bca:	3304      	adds	r3, #4
  409bcc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  409bd0:	9304      	str	r3, [sp, #16]
  409bd2:	9503      	str	r5, [sp, #12]
  409bd4:	af10      	add	r7, sp, #64	; 0x40
  409bd6:	2300      	movs	r3, #0
  409bd8:	9301      	str	r3, [sp, #4]
  409bda:	e573      	b.n	4096c4 <_vfiprintf_r+0x254>
  409bdc:	f898 3000 	ldrb.w	r3, [r8]
  409be0:	2800      	cmp	r0, #0
  409be2:	f47f acac 	bne.w	40953e <_vfiprintf_r+0xce>
  409be6:	2101      	movs	r1, #1
  409be8:	2020      	movs	r0, #32
  409bea:	e4a8      	b.n	40953e <_vfiprintf_r+0xce>
  409bec:	f046 0601 	orr.w	r6, r6, #1
  409bf0:	f898 3000 	ldrb.w	r3, [r8]
  409bf4:	e4a3      	b.n	40953e <_vfiprintf_r+0xce>
  409bf6:	9406      	str	r4, [sp, #24]
  409bf8:	2900      	cmp	r1, #0
  409bfa:	f040 830c 	bne.w	40a216 <_vfiprintf_r+0xda6>
  409bfe:	06b2      	lsls	r2, r6, #26
  409c00:	488e      	ldr	r0, [pc, #568]	; (409e3c <_vfiprintf_r+0x9cc>)
  409c02:	d4bd      	bmi.n	409b80 <_vfiprintf_r+0x710>
  409c04:	9904      	ldr	r1, [sp, #16]
  409c06:	06f7      	lsls	r7, r6, #27
  409c08:	460a      	mov	r2, r1
  409c0a:	f100 819d 	bmi.w	409f48 <_vfiprintf_r+0xad8>
  409c0e:	0675      	lsls	r5, r6, #25
  409c10:	f140 819a 	bpl.w	409f48 <_vfiprintf_r+0xad8>
  409c14:	3204      	adds	r2, #4
  409c16:	880c      	ldrh	r4, [r1, #0]
  409c18:	9204      	str	r2, [sp, #16]
  409c1a:	2500      	movs	r5, #0
  409c1c:	e7b9      	b.n	409b92 <_vfiprintf_r+0x722>
  409c1e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  409c22:	f898 3000 	ldrb.w	r3, [r8]
  409c26:	e48a      	b.n	40953e <_vfiprintf_r+0xce>
  409c28:	f898 3000 	ldrb.w	r3, [r8]
  409c2c:	2b6c      	cmp	r3, #108	; 0x6c
  409c2e:	bf03      	ittte	eq
  409c30:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  409c34:	f046 0620 	orreq.w	r6, r6, #32
  409c38:	f108 0801 	addeq.w	r8, r8, #1
  409c3c:	f046 0610 	orrne.w	r6, r6, #16
  409c40:	e47d      	b.n	40953e <_vfiprintf_r+0xce>
  409c42:	2900      	cmp	r1, #0
  409c44:	f040 8309 	bne.w	40a25a <_vfiprintf_r+0xdea>
  409c48:	06b4      	lsls	r4, r6, #26
  409c4a:	f140 821c 	bpl.w	40a086 <_vfiprintf_r+0xc16>
  409c4e:	9a04      	ldr	r2, [sp, #16]
  409c50:	9902      	ldr	r1, [sp, #8]
  409c52:	6813      	ldr	r3, [r2, #0]
  409c54:	17cd      	asrs	r5, r1, #31
  409c56:	4608      	mov	r0, r1
  409c58:	3204      	adds	r2, #4
  409c5a:	4629      	mov	r1, r5
  409c5c:	9204      	str	r2, [sp, #16]
  409c5e:	e9c3 0100 	strd	r0, r1, [r3]
  409c62:	e436      	b.n	4094d2 <_vfiprintf_r+0x62>
  409c64:	9406      	str	r4, [sp, #24]
  409c66:	2900      	cmp	r1, #0
  409c68:	f43f ae43 	beq.w	4098f2 <_vfiprintf_r+0x482>
  409c6c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409c70:	e63f      	b.n	4098f2 <_vfiprintf_r+0x482>
  409c72:	9406      	str	r4, [sp, #24]
  409c74:	2900      	cmp	r1, #0
  409c76:	f040 82ed 	bne.w	40a254 <_vfiprintf_r+0xde4>
  409c7a:	2b00      	cmp	r3, #0
  409c7c:	f000 808f 	beq.w	409d9e <_vfiprintf_r+0x92e>
  409c80:	2501      	movs	r5, #1
  409c82:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  409c86:	f04f 0300 	mov.w	r3, #0
  409c8a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409c8e:	9503      	str	r5, [sp, #12]
  409c90:	af10      	add	r7, sp, #64	; 0x40
  409c92:	e7a0      	b.n	409bd6 <_vfiprintf_r+0x766>
  409c94:	9304      	str	r3, [sp, #16]
  409c96:	f04f 0900 	mov.w	r9, #0
  409c9a:	e696      	b.n	4099ca <_vfiprintf_r+0x55a>
  409c9c:	aa0d      	add	r2, sp, #52	; 0x34
  409c9e:	9900      	ldr	r1, [sp, #0]
  409ca0:	9309      	str	r3, [sp, #36]	; 0x24
  409ca2:	4648      	mov	r0, r9
  409ca4:	f7ff fba8 	bl	4093f8 <__sprint_r.part.0>
  409ca8:	2800      	cmp	r0, #0
  409caa:	d17f      	bne.n	409dac <_vfiprintf_r+0x93c>
  409cac:	980e      	ldr	r0, [sp, #56]	; 0x38
  409cae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409cb2:	f100 0e01 	add.w	lr, r0, #1
  409cb6:	46dc      	mov	ip, fp
  409cb8:	e529      	b.n	40970e <_vfiprintf_r+0x29e>
  409cba:	980e      	ldr	r0, [sp, #56]	; 0x38
  409cbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409cbe:	f100 0e01 	add.w	lr, r0, #1
  409cc2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  409cc6:	2b00      	cmp	r3, #0
  409cc8:	f43f ad50 	beq.w	40976c <_vfiprintf_r+0x2fc>
  409ccc:	3201      	adds	r2, #1
  409cce:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  409cd2:	2301      	movs	r3, #1
  409cd4:	f1be 0f07 	cmp.w	lr, #7
  409cd8:	920f      	str	r2, [sp, #60]	; 0x3c
  409cda:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  409cde:	e88a 000a 	stmia.w	sl, {r1, r3}
  409ce2:	f340 80bf 	ble.w	409e64 <_vfiprintf_r+0x9f4>
  409ce6:	2a00      	cmp	r2, #0
  409ce8:	f040 814e 	bne.w	409f88 <_vfiprintf_r+0xb18>
  409cec:	9907      	ldr	r1, [sp, #28]
  409cee:	2900      	cmp	r1, #0
  409cf0:	f040 80be 	bne.w	409e70 <_vfiprintf_r+0xa00>
  409cf4:	469e      	mov	lr, r3
  409cf6:	4610      	mov	r0, r2
  409cf8:	46da      	mov	sl, fp
  409cfa:	9b08      	ldr	r3, [sp, #32]
  409cfc:	2b80      	cmp	r3, #128	; 0x80
  409cfe:	f43f ad50 	beq.w	4097a2 <_vfiprintf_r+0x332>
  409d02:	9b01      	ldr	r3, [sp, #4]
  409d04:	9903      	ldr	r1, [sp, #12]
  409d06:	1a5c      	subs	r4, r3, r1
  409d08:	2c00      	cmp	r4, #0
  409d0a:	f77f ad93 	ble.w	409834 <_vfiprintf_r+0x3c4>
  409d0e:	2c10      	cmp	r4, #16
  409d10:	f8df 912c 	ldr.w	r9, [pc, #300]	; 409e40 <_vfiprintf_r+0x9d0>
  409d14:	dd25      	ble.n	409d62 <_vfiprintf_r+0x8f2>
  409d16:	46d4      	mov	ip, sl
  409d18:	2310      	movs	r3, #16
  409d1a:	46c2      	mov	sl, r8
  409d1c:	46a8      	mov	r8, r5
  409d1e:	464d      	mov	r5, r9
  409d20:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409d24:	e007      	b.n	409d36 <_vfiprintf_r+0x8c6>
  409d26:	f100 0e02 	add.w	lr, r0, #2
  409d2a:	f10c 0c08 	add.w	ip, ip, #8
  409d2e:	4608      	mov	r0, r1
  409d30:	3c10      	subs	r4, #16
  409d32:	2c10      	cmp	r4, #16
  409d34:	dd11      	ble.n	409d5a <_vfiprintf_r+0x8ea>
  409d36:	1c41      	adds	r1, r0, #1
  409d38:	3210      	adds	r2, #16
  409d3a:	2907      	cmp	r1, #7
  409d3c:	920f      	str	r2, [sp, #60]	; 0x3c
  409d3e:	f8cc 5000 	str.w	r5, [ip]
  409d42:	f8cc 3004 	str.w	r3, [ip, #4]
  409d46:	910e      	str	r1, [sp, #56]	; 0x38
  409d48:	dded      	ble.n	409d26 <_vfiprintf_r+0x8b6>
  409d4a:	b9d2      	cbnz	r2, 409d82 <_vfiprintf_r+0x912>
  409d4c:	3c10      	subs	r4, #16
  409d4e:	2c10      	cmp	r4, #16
  409d50:	f04f 0e01 	mov.w	lr, #1
  409d54:	4610      	mov	r0, r2
  409d56:	46dc      	mov	ip, fp
  409d58:	dced      	bgt.n	409d36 <_vfiprintf_r+0x8c6>
  409d5a:	46a9      	mov	r9, r5
  409d5c:	4645      	mov	r5, r8
  409d5e:	46d0      	mov	r8, sl
  409d60:	46e2      	mov	sl, ip
  409d62:	4422      	add	r2, r4
  409d64:	f1be 0f07 	cmp.w	lr, #7
  409d68:	920f      	str	r2, [sp, #60]	; 0x3c
  409d6a:	f8ca 9000 	str.w	r9, [sl]
  409d6e:	f8ca 4004 	str.w	r4, [sl, #4]
  409d72:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  409d76:	dc2e      	bgt.n	409dd6 <_vfiprintf_r+0x966>
  409d78:	f10a 0a08 	add.w	sl, sl, #8
  409d7c:	f10e 0e01 	add.w	lr, lr, #1
  409d80:	e558      	b.n	409834 <_vfiprintf_r+0x3c4>
  409d82:	aa0d      	add	r2, sp, #52	; 0x34
  409d84:	9900      	ldr	r1, [sp, #0]
  409d86:	9301      	str	r3, [sp, #4]
  409d88:	4648      	mov	r0, r9
  409d8a:	f7ff fb35 	bl	4093f8 <__sprint_r.part.0>
  409d8e:	b968      	cbnz	r0, 409dac <_vfiprintf_r+0x93c>
  409d90:	980e      	ldr	r0, [sp, #56]	; 0x38
  409d92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409d94:	9b01      	ldr	r3, [sp, #4]
  409d96:	f100 0e01 	add.w	lr, r0, #1
  409d9a:	46dc      	mov	ip, fp
  409d9c:	e7c8      	b.n	409d30 <_vfiprintf_r+0x8c0>
  409d9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409da0:	b123      	cbz	r3, 409dac <_vfiprintf_r+0x93c>
  409da2:	9805      	ldr	r0, [sp, #20]
  409da4:	9900      	ldr	r1, [sp, #0]
  409da6:	aa0d      	add	r2, sp, #52	; 0x34
  409da8:	f7ff fb26 	bl	4093f8 <__sprint_r.part.0>
  409dac:	9b00      	ldr	r3, [sp, #0]
  409dae:	899b      	ldrh	r3, [r3, #12]
  409db0:	065a      	lsls	r2, r3, #25
  409db2:	f100 818b 	bmi.w	40a0cc <_vfiprintf_r+0xc5c>
  409db6:	9802      	ldr	r0, [sp, #8]
  409db8:	b02b      	add	sp, #172	; 0xac
  409dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409dbe:	aa0d      	add	r2, sp, #52	; 0x34
  409dc0:	9900      	ldr	r1, [sp, #0]
  409dc2:	4648      	mov	r0, r9
  409dc4:	f7ff fb18 	bl	4093f8 <__sprint_r.part.0>
  409dc8:	2800      	cmp	r0, #0
  409dca:	d1ef      	bne.n	409dac <_vfiprintf_r+0x93c>
  409dcc:	990e      	ldr	r1, [sp, #56]	; 0x38
  409dce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409dd0:	1c48      	adds	r0, r1, #1
  409dd2:	46da      	mov	sl, fp
  409dd4:	e555      	b.n	409882 <_vfiprintf_r+0x412>
  409dd6:	2a00      	cmp	r2, #0
  409dd8:	f040 80fb 	bne.w	409fd2 <_vfiprintf_r+0xb62>
  409ddc:	9a03      	ldr	r2, [sp, #12]
  409dde:	921b      	str	r2, [sp, #108]	; 0x6c
  409de0:	2301      	movs	r3, #1
  409de2:	920f      	str	r2, [sp, #60]	; 0x3c
  409de4:	971a      	str	r7, [sp, #104]	; 0x68
  409de6:	930e      	str	r3, [sp, #56]	; 0x38
  409de8:	46da      	mov	sl, fp
  409dea:	f10a 0a08 	add.w	sl, sl, #8
  409dee:	0771      	lsls	r1, r6, #29
  409df0:	d504      	bpl.n	409dfc <_vfiprintf_r+0x98c>
  409df2:	9b06      	ldr	r3, [sp, #24]
  409df4:	1b5c      	subs	r4, r3, r5
  409df6:	2c00      	cmp	r4, #0
  409df8:	f73f ad34 	bgt.w	409864 <_vfiprintf_r+0x3f4>
  409dfc:	9b02      	ldr	r3, [sp, #8]
  409dfe:	9906      	ldr	r1, [sp, #24]
  409e00:	42a9      	cmp	r1, r5
  409e02:	bfac      	ite	ge
  409e04:	185b      	addge	r3, r3, r1
  409e06:	195b      	addlt	r3, r3, r5
  409e08:	9302      	str	r3, [sp, #8]
  409e0a:	2a00      	cmp	r2, #0
  409e0c:	f040 80b3 	bne.w	409f76 <_vfiprintf_r+0xb06>
  409e10:	2300      	movs	r3, #0
  409e12:	930e      	str	r3, [sp, #56]	; 0x38
  409e14:	46da      	mov	sl, fp
  409e16:	f7ff bb5c 	b.w	4094d2 <_vfiprintf_r+0x62>
  409e1a:	aa0d      	add	r2, sp, #52	; 0x34
  409e1c:	9900      	ldr	r1, [sp, #0]
  409e1e:	9307      	str	r3, [sp, #28]
  409e20:	4648      	mov	r0, r9
  409e22:	f7ff fae9 	bl	4093f8 <__sprint_r.part.0>
  409e26:	2800      	cmp	r0, #0
  409e28:	d1c0      	bne.n	409dac <_vfiprintf_r+0x93c>
  409e2a:	980e      	ldr	r0, [sp, #56]	; 0x38
  409e2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409e2e:	9b07      	ldr	r3, [sp, #28]
  409e30:	f100 0c01 	add.w	ip, r0, #1
  409e34:	46de      	mov	lr, fp
  409e36:	e4cb      	b.n	4097d0 <_vfiprintf_r+0x360>
  409e38:	0040f028 	.word	0x0040f028
  409e3c:	0040f03c 	.word	0x0040f03c
  409e40:	0040f06c 	.word	0x0040f06c
  409e44:	2a00      	cmp	r2, #0
  409e46:	f040 8133 	bne.w	40a0b0 <_vfiprintf_r+0xc40>
  409e4a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  409e4e:	2b00      	cmp	r3, #0
  409e50:	f000 80f5 	beq.w	40a03e <_vfiprintf_r+0xbce>
  409e54:	2301      	movs	r3, #1
  409e56:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  409e5a:	461a      	mov	r2, r3
  409e5c:	931b      	str	r3, [sp, #108]	; 0x6c
  409e5e:	469e      	mov	lr, r3
  409e60:	911a      	str	r1, [sp, #104]	; 0x68
  409e62:	46da      	mov	sl, fp
  409e64:	4670      	mov	r0, lr
  409e66:	f10a 0a08 	add.w	sl, sl, #8
  409e6a:	f10e 0e01 	add.w	lr, lr, #1
  409e6e:	e47d      	b.n	40976c <_vfiprintf_r+0x2fc>
  409e70:	a90c      	add	r1, sp, #48	; 0x30
  409e72:	2202      	movs	r2, #2
  409e74:	469e      	mov	lr, r3
  409e76:	911a      	str	r1, [sp, #104]	; 0x68
  409e78:	921b      	str	r2, [sp, #108]	; 0x6c
  409e7a:	46da      	mov	sl, fp
  409e7c:	4670      	mov	r0, lr
  409e7e:	f10a 0a08 	add.w	sl, sl, #8
  409e82:	f10e 0e01 	add.w	lr, lr, #1
  409e86:	e738      	b.n	409cfa <_vfiprintf_r+0x88a>
  409e88:	9b01      	ldr	r3, [sp, #4]
  409e8a:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  409e8e:	2b00      	cmp	r3, #0
  409e90:	f2c0 812a 	blt.w	40a0e8 <_vfiprintf_r+0xc78>
  409e94:	ea54 0305 	orrs.w	r3, r4, r5
  409e98:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409e9c:	f43f abff 	beq.w	40969e <_vfiprintf_r+0x22e>
  409ea0:	465f      	mov	r7, fp
  409ea2:	0923      	lsrs	r3, r4, #4
  409ea4:	f004 010f 	and.w	r1, r4, #15
  409ea8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  409eac:	092a      	lsrs	r2, r5, #4
  409eae:	461c      	mov	r4, r3
  409eb0:	4615      	mov	r5, r2
  409eb2:	5c43      	ldrb	r3, [r0, r1]
  409eb4:	f807 3d01 	strb.w	r3, [r7, #-1]!
  409eb8:	ea54 0305 	orrs.w	r3, r4, r5
  409ebc:	d1f1      	bne.n	409ea2 <_vfiprintf_r+0xa32>
  409ebe:	ebc7 030b 	rsb	r3, r7, fp
  409ec2:	9303      	str	r3, [sp, #12]
  409ec4:	f7ff bbf4 	b.w	4096b0 <_vfiprintf_r+0x240>
  409ec8:	aa0d      	add	r2, sp, #52	; 0x34
  409eca:	9900      	ldr	r1, [sp, #0]
  409ecc:	9805      	ldr	r0, [sp, #20]
  409ece:	f7ff fa93 	bl	4093f8 <__sprint_r.part.0>
  409ed2:	2800      	cmp	r0, #0
  409ed4:	f47f af6a 	bne.w	409dac <_vfiprintf_r+0x93c>
  409ed8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409eda:	46da      	mov	sl, fp
  409edc:	e787      	b.n	409dee <_vfiprintf_r+0x97e>
  409ede:	f04f 0900 	mov.w	r9, #0
  409ee2:	2400      	movs	r4, #0
  409ee4:	2500      	movs	r5, #0
  409ee6:	e7db      	b.n	409ea0 <_vfiprintf_r+0xa30>
  409ee8:	f016 0210 	ands.w	r2, r6, #16
  409eec:	f000 80b2 	beq.w	40a054 <_vfiprintf_r+0xbe4>
  409ef0:	9904      	ldr	r1, [sp, #16]
  409ef2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409ef6:	460a      	mov	r2, r1
  409ef8:	680c      	ldr	r4, [r1, #0]
  409efa:	9901      	ldr	r1, [sp, #4]
  409efc:	2900      	cmp	r1, #0
  409efe:	f102 0204 	add.w	r2, r2, #4
  409f02:	f04f 0500 	mov.w	r5, #0
  409f06:	f2c0 8159 	blt.w	40a1bc <_vfiprintf_r+0xd4c>
  409f0a:	ea54 0105 	orrs.w	r1, r4, r5
  409f0e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409f12:	9204      	str	r2, [sp, #16]
  409f14:	f43f ad51 	beq.w	4099ba <_vfiprintf_r+0x54a>
  409f18:	4699      	mov	r9, r3
  409f1a:	e556      	b.n	4099ca <_vfiprintf_r+0x55a>
  409f1c:	06f7      	lsls	r7, r6, #27
  409f1e:	d40a      	bmi.n	409f36 <_vfiprintf_r+0xac6>
  409f20:	0675      	lsls	r5, r6, #25
  409f22:	d508      	bpl.n	409f36 <_vfiprintf_r+0xac6>
  409f24:	9904      	ldr	r1, [sp, #16]
  409f26:	f9b1 4000 	ldrsh.w	r4, [r1]
  409f2a:	3104      	adds	r1, #4
  409f2c:	17e5      	asrs	r5, r4, #31
  409f2e:	4622      	mov	r2, r4
  409f30:	462b      	mov	r3, r5
  409f32:	9104      	str	r1, [sp, #16]
  409f34:	e4ea      	b.n	40990c <_vfiprintf_r+0x49c>
  409f36:	9a04      	ldr	r2, [sp, #16]
  409f38:	6814      	ldr	r4, [r2, #0]
  409f3a:	4613      	mov	r3, r2
  409f3c:	3304      	adds	r3, #4
  409f3e:	17e5      	asrs	r5, r4, #31
  409f40:	9304      	str	r3, [sp, #16]
  409f42:	4622      	mov	r2, r4
  409f44:	462b      	mov	r3, r5
  409f46:	e4e1      	b.n	40990c <_vfiprintf_r+0x49c>
  409f48:	6814      	ldr	r4, [r2, #0]
  409f4a:	3204      	adds	r2, #4
  409f4c:	9204      	str	r2, [sp, #16]
  409f4e:	2500      	movs	r5, #0
  409f50:	e61f      	b.n	409b92 <_vfiprintf_r+0x722>
  409f52:	f04f 0900 	mov.w	r9, #0
  409f56:	ea54 0305 	orrs.w	r3, r4, r5
  409f5a:	f47f ace8 	bne.w	40992e <_vfiprintf_r+0x4be>
  409f5e:	e5d8      	b.n	409b12 <_vfiprintf_r+0x6a2>
  409f60:	aa0d      	add	r2, sp, #52	; 0x34
  409f62:	9900      	ldr	r1, [sp, #0]
  409f64:	9805      	ldr	r0, [sp, #20]
  409f66:	f7ff fa47 	bl	4093f8 <__sprint_r.part.0>
  409f6a:	2800      	cmp	r0, #0
  409f6c:	f47f af1e 	bne.w	409dac <_vfiprintf_r+0x93c>
  409f70:	46da      	mov	sl, fp
  409f72:	f7ff bb48 	b.w	409606 <_vfiprintf_r+0x196>
  409f76:	aa0d      	add	r2, sp, #52	; 0x34
  409f78:	9900      	ldr	r1, [sp, #0]
  409f7a:	9805      	ldr	r0, [sp, #20]
  409f7c:	f7ff fa3c 	bl	4093f8 <__sprint_r.part.0>
  409f80:	2800      	cmp	r0, #0
  409f82:	f43f af45 	beq.w	409e10 <_vfiprintf_r+0x9a0>
  409f86:	e711      	b.n	409dac <_vfiprintf_r+0x93c>
  409f88:	aa0d      	add	r2, sp, #52	; 0x34
  409f8a:	9900      	ldr	r1, [sp, #0]
  409f8c:	9805      	ldr	r0, [sp, #20]
  409f8e:	f7ff fa33 	bl	4093f8 <__sprint_r.part.0>
  409f92:	2800      	cmp	r0, #0
  409f94:	f47f af0a 	bne.w	409dac <_vfiprintf_r+0x93c>
  409f98:	980e      	ldr	r0, [sp, #56]	; 0x38
  409f9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409f9c:	f100 0e01 	add.w	lr, r0, #1
  409fa0:	46da      	mov	sl, fp
  409fa2:	f7ff bbe3 	b.w	40976c <_vfiprintf_r+0x2fc>
  409fa6:	aa0d      	add	r2, sp, #52	; 0x34
  409fa8:	9900      	ldr	r1, [sp, #0]
  409faa:	9805      	ldr	r0, [sp, #20]
  409fac:	f7ff fa24 	bl	4093f8 <__sprint_r.part.0>
  409fb0:	2800      	cmp	r0, #0
  409fb2:	f47f aefb 	bne.w	409dac <_vfiprintf_r+0x93c>
  409fb6:	980e      	ldr	r0, [sp, #56]	; 0x38
  409fb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409fba:	f100 0e01 	add.w	lr, r0, #1
  409fbe:	46da      	mov	sl, fp
  409fc0:	e69b      	b.n	409cfa <_vfiprintf_r+0x88a>
  409fc2:	2a00      	cmp	r2, #0
  409fc4:	f040 80d8 	bne.w	40a178 <_vfiprintf_r+0xd08>
  409fc8:	f04f 0e01 	mov.w	lr, #1
  409fcc:	4610      	mov	r0, r2
  409fce:	46da      	mov	sl, fp
  409fd0:	e697      	b.n	409d02 <_vfiprintf_r+0x892>
  409fd2:	aa0d      	add	r2, sp, #52	; 0x34
  409fd4:	9900      	ldr	r1, [sp, #0]
  409fd6:	9805      	ldr	r0, [sp, #20]
  409fd8:	f7ff fa0e 	bl	4093f8 <__sprint_r.part.0>
  409fdc:	2800      	cmp	r0, #0
  409fde:	f47f aee5 	bne.w	409dac <_vfiprintf_r+0x93c>
  409fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409fe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409fe6:	f103 0e01 	add.w	lr, r3, #1
  409fea:	46da      	mov	sl, fp
  409fec:	e422      	b.n	409834 <_vfiprintf_r+0x3c4>
  409fee:	2230      	movs	r2, #48	; 0x30
  409ff0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  409ff4:	9a01      	ldr	r2, [sp, #4]
  409ff6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  409ffa:	2a00      	cmp	r2, #0
  409ffc:	f04f 0300 	mov.w	r3, #0
  40a000:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40a004:	f046 0302 	orr.w	r3, r6, #2
  40a008:	f2c0 80cb 	blt.w	40a1a2 <_vfiprintf_r+0xd32>
  40a00c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a010:	f046 0602 	orr.w	r6, r6, #2
  40a014:	f04f 0900 	mov.w	r9, #0
  40a018:	e742      	b.n	409ea0 <_vfiprintf_r+0xa30>
  40a01a:	f04f 0900 	mov.w	r9, #0
  40a01e:	4890      	ldr	r0, [pc, #576]	; (40a260 <_vfiprintf_r+0xdf0>)
  40a020:	e73e      	b.n	409ea0 <_vfiprintf_r+0xa30>
  40a022:	9b01      	ldr	r3, [sp, #4]
  40a024:	4264      	negs	r4, r4
  40a026:	f04f 092d 	mov.w	r9, #45	; 0x2d
  40a02a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40a02e:	2b00      	cmp	r3, #0
  40a030:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40a034:	f6ff ac7b 	blt.w	40992e <_vfiprintf_r+0x4be>
  40a038:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a03c:	e477      	b.n	40992e <_vfiprintf_r+0x4be>
  40a03e:	9b07      	ldr	r3, [sp, #28]
  40a040:	2b00      	cmp	r3, #0
  40a042:	d072      	beq.n	40a12a <_vfiprintf_r+0xcba>
  40a044:	ab0c      	add	r3, sp, #48	; 0x30
  40a046:	2202      	movs	r2, #2
  40a048:	931a      	str	r3, [sp, #104]	; 0x68
  40a04a:	921b      	str	r2, [sp, #108]	; 0x6c
  40a04c:	f04f 0e01 	mov.w	lr, #1
  40a050:	46da      	mov	sl, fp
  40a052:	e713      	b.n	409e7c <_vfiprintf_r+0xa0c>
  40a054:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40a058:	d048      	beq.n	40a0ec <_vfiprintf_r+0xc7c>
  40a05a:	9904      	ldr	r1, [sp, #16]
  40a05c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40a060:	460b      	mov	r3, r1
  40a062:	880c      	ldrh	r4, [r1, #0]
  40a064:	9901      	ldr	r1, [sp, #4]
  40a066:	2900      	cmp	r1, #0
  40a068:	f103 0304 	add.w	r3, r3, #4
  40a06c:	f04f 0500 	mov.w	r5, #0
  40a070:	f6ff ae10 	blt.w	409c94 <_vfiprintf_r+0x824>
  40a074:	ea54 0105 	orrs.w	r1, r4, r5
  40a078:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a07c:	9304      	str	r3, [sp, #16]
  40a07e:	f43f ac9c 	beq.w	4099ba <_vfiprintf_r+0x54a>
  40a082:	4691      	mov	r9, r2
  40a084:	e4a1      	b.n	4099ca <_vfiprintf_r+0x55a>
  40a086:	06f0      	lsls	r0, r6, #27
  40a088:	d40a      	bmi.n	40a0a0 <_vfiprintf_r+0xc30>
  40a08a:	0671      	lsls	r1, r6, #25
  40a08c:	d508      	bpl.n	40a0a0 <_vfiprintf_r+0xc30>
  40a08e:	9a04      	ldr	r2, [sp, #16]
  40a090:	6813      	ldr	r3, [r2, #0]
  40a092:	3204      	adds	r2, #4
  40a094:	9204      	str	r2, [sp, #16]
  40a096:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40a09a:	801a      	strh	r2, [r3, #0]
  40a09c:	f7ff ba19 	b.w	4094d2 <_vfiprintf_r+0x62>
  40a0a0:	9a04      	ldr	r2, [sp, #16]
  40a0a2:	6813      	ldr	r3, [r2, #0]
  40a0a4:	3204      	adds	r2, #4
  40a0a6:	9204      	str	r2, [sp, #16]
  40a0a8:	9a02      	ldr	r2, [sp, #8]
  40a0aa:	601a      	str	r2, [r3, #0]
  40a0ac:	f7ff ba11 	b.w	4094d2 <_vfiprintf_r+0x62>
  40a0b0:	aa0d      	add	r2, sp, #52	; 0x34
  40a0b2:	9900      	ldr	r1, [sp, #0]
  40a0b4:	9805      	ldr	r0, [sp, #20]
  40a0b6:	f7ff f99f 	bl	4093f8 <__sprint_r.part.0>
  40a0ba:	2800      	cmp	r0, #0
  40a0bc:	f47f ae76 	bne.w	409dac <_vfiprintf_r+0x93c>
  40a0c0:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a0c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a0c4:	f100 0e01 	add.w	lr, r0, #1
  40a0c8:	46da      	mov	sl, fp
  40a0ca:	e5fa      	b.n	409cc2 <_vfiprintf_r+0x852>
  40a0cc:	f04f 30ff 	mov.w	r0, #4294967295
  40a0d0:	f7ff bab6 	b.w	409640 <_vfiprintf_r+0x1d0>
  40a0d4:	4862      	ldr	r0, [pc, #392]	; (40a260 <_vfiprintf_r+0xdf0>)
  40a0d6:	4616      	mov	r6, r2
  40a0d8:	ea54 0205 	orrs.w	r2, r4, r5
  40a0dc:	9304      	str	r3, [sp, #16]
  40a0de:	f04f 0900 	mov.w	r9, #0
  40a0e2:	f47f aedd 	bne.w	409ea0 <_vfiprintf_r+0xa30>
  40a0e6:	e6fc      	b.n	409ee2 <_vfiprintf_r+0xa72>
  40a0e8:	9b04      	ldr	r3, [sp, #16]
  40a0ea:	e7f5      	b.n	40a0d8 <_vfiprintf_r+0xc68>
  40a0ec:	9a04      	ldr	r2, [sp, #16]
  40a0ee:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40a0f2:	4613      	mov	r3, r2
  40a0f4:	6814      	ldr	r4, [r2, #0]
  40a0f6:	9a01      	ldr	r2, [sp, #4]
  40a0f8:	2a00      	cmp	r2, #0
  40a0fa:	f103 0304 	add.w	r3, r3, #4
  40a0fe:	f04f 0500 	mov.w	r5, #0
  40a102:	f6ff adc7 	blt.w	409c94 <_vfiprintf_r+0x824>
  40a106:	ea54 0205 	orrs.w	r2, r4, r5
  40a10a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a10e:	9304      	str	r3, [sp, #16]
  40a110:	f47f ac5b 	bne.w	4099ca <_vfiprintf_r+0x55a>
  40a114:	e451      	b.n	4099ba <_vfiprintf_r+0x54a>
  40a116:	aa0d      	add	r2, sp, #52	; 0x34
  40a118:	9900      	ldr	r1, [sp, #0]
  40a11a:	9805      	ldr	r0, [sp, #20]
  40a11c:	f7ff f96c 	bl	4093f8 <__sprint_r.part.0>
  40a120:	2800      	cmp	r0, #0
  40a122:	f47f ae43 	bne.w	409dac <_vfiprintf_r+0x93c>
  40a126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a128:	e668      	b.n	409dfc <_vfiprintf_r+0x98c>
  40a12a:	4610      	mov	r0, r2
  40a12c:	f04f 0e01 	mov.w	lr, #1
  40a130:	46da      	mov	sl, fp
  40a132:	e5e6      	b.n	409d02 <_vfiprintf_r+0x892>
  40a134:	9904      	ldr	r1, [sp, #16]
  40a136:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40a13a:	460a      	mov	r2, r1
  40a13c:	880c      	ldrh	r4, [r1, #0]
  40a13e:	9901      	ldr	r1, [sp, #4]
  40a140:	2900      	cmp	r1, #0
  40a142:	f102 0204 	add.w	r2, r2, #4
  40a146:	f04f 0500 	mov.w	r5, #0
  40a14a:	db4e      	blt.n	40a1ea <_vfiprintf_r+0xd7a>
  40a14c:	ea54 0105 	orrs.w	r1, r4, r5
  40a150:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a154:	9204      	str	r2, [sp, #16]
  40a156:	4699      	mov	r9, r3
  40a158:	f47f abe9 	bne.w	40992e <_vfiprintf_r+0x4be>
  40a15c:	e4d4      	b.n	409b08 <_vfiprintf_r+0x698>
  40a15e:	9304      	str	r3, [sp, #16]
  40a160:	e6f9      	b.n	409f56 <_vfiprintf_r+0xae6>
  40a162:	4638      	mov	r0, r7
  40a164:	9404      	str	r4, [sp, #16]
  40a166:	f7fd fd8b 	bl	407c80 <strlen>
  40a16a:	2300      	movs	r3, #0
  40a16c:	9003      	str	r0, [sp, #12]
  40a16e:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40a172:	9301      	str	r3, [sp, #4]
  40a174:	f7ff ba9c 	b.w	4096b0 <_vfiprintf_r+0x240>
  40a178:	aa0d      	add	r2, sp, #52	; 0x34
  40a17a:	9900      	ldr	r1, [sp, #0]
  40a17c:	9805      	ldr	r0, [sp, #20]
  40a17e:	f7ff f93b 	bl	4093f8 <__sprint_r.part.0>
  40a182:	2800      	cmp	r0, #0
  40a184:	f47f ae12 	bne.w	409dac <_vfiprintf_r+0x93c>
  40a188:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a18a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a18c:	f100 0e01 	add.w	lr, r0, #1
  40a190:	46da      	mov	sl, fp
  40a192:	e5b6      	b.n	409d02 <_vfiprintf_r+0x892>
  40a194:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a198:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40a268 <_vfiprintf_r+0xdf8>
  40a19c:	3001      	adds	r0, #1
  40a19e:	f7ff bad2 	b.w	409746 <_vfiprintf_r+0x2d6>
  40a1a2:	461e      	mov	r6, r3
  40a1a4:	f04f 0900 	mov.w	r9, #0
  40a1a8:	e67a      	b.n	409ea0 <_vfiprintf_r+0xa30>
  40a1aa:	2b06      	cmp	r3, #6
  40a1ac:	bf28      	it	cs
  40a1ae:	2306      	movcs	r3, #6
  40a1b0:	9303      	str	r3, [sp, #12]
  40a1b2:	9404      	str	r4, [sp, #16]
  40a1b4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40a1b8:	4f2a      	ldr	r7, [pc, #168]	; (40a264 <_vfiprintf_r+0xdf4>)
  40a1ba:	e50c      	b.n	409bd6 <_vfiprintf_r+0x766>
  40a1bc:	9204      	str	r2, [sp, #16]
  40a1be:	e56a      	b.n	409c96 <_vfiprintf_r+0x826>
  40a1c0:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a1c2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40a268 <_vfiprintf_r+0xdf8>
  40a1c6:	3001      	adds	r0, #1
  40a1c8:	f7ff bb73 	b.w	4098b2 <_vfiprintf_r+0x442>
  40a1cc:	46f4      	mov	ip, lr
  40a1ce:	f7ff bb1a 	b.w	409806 <_vfiprintf_r+0x396>
  40a1d2:	9b01      	ldr	r3, [sp, #4]
  40a1d4:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40a1d8:	9303      	str	r3, [sp, #12]
  40a1da:	9404      	str	r4, [sp, #16]
  40a1dc:	9001      	str	r0, [sp, #4]
  40a1de:	f7ff ba67 	b.w	4096b0 <_vfiprintf_r+0x240>
  40a1e2:	2200      	movs	r2, #0
  40a1e4:	9201      	str	r2, [sp, #4]
  40a1e6:	f7ff b9ac 	b.w	409542 <_vfiprintf_r+0xd2>
  40a1ea:	9204      	str	r2, [sp, #16]
  40a1ec:	4699      	mov	r9, r3
  40a1ee:	e6b2      	b.n	409f56 <_vfiprintf_r+0xae6>
  40a1f0:	9a04      	ldr	r2, [sp, #16]
  40a1f2:	6813      	ldr	r3, [r2, #0]
  40a1f4:	9301      	str	r3, [sp, #4]
  40a1f6:	3204      	adds	r2, #4
  40a1f8:	2b00      	cmp	r3, #0
  40a1fa:	9204      	str	r2, [sp, #16]
  40a1fc:	f898 3001 	ldrb.w	r3, [r8, #1]
  40a200:	46a8      	mov	r8, r5
  40a202:	f6bf a99c 	bge.w	40953e <_vfiprintf_r+0xce>
  40a206:	f04f 32ff 	mov.w	r2, #4294967295
  40a20a:	9201      	str	r2, [sp, #4]
  40a20c:	f7ff b997 	b.w	40953e <_vfiprintf_r+0xce>
  40a210:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a214:	e48e      	b.n	409b34 <_vfiprintf_r+0x6c4>
  40a216:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a21a:	e4f0      	b.n	409bfe <_vfiprintf_r+0x78e>
  40a21c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a220:	e4ab      	b.n	409b7a <_vfiprintf_r+0x70a>
  40a222:	4699      	mov	r9, r3
  40a224:	07f3      	lsls	r3, r6, #31
  40a226:	d505      	bpl.n	40a234 <_vfiprintf_r+0xdc4>
  40a228:	af2a      	add	r7, sp, #168	; 0xa8
  40a22a:	2330      	movs	r3, #48	; 0x30
  40a22c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40a230:	f7ff bb97 	b.w	409962 <_vfiprintf_r+0x4f2>
  40a234:	9b01      	ldr	r3, [sp, #4]
  40a236:	9303      	str	r3, [sp, #12]
  40a238:	465f      	mov	r7, fp
  40a23a:	f7ff ba39 	b.w	4096b0 <_vfiprintf_r+0x240>
  40a23e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a242:	e443      	b.n	409acc <_vfiprintf_r+0x65c>
  40a244:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a248:	f7ff bb9a 	b.w	409980 <_vfiprintf_r+0x510>
  40a24c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a250:	f7ff bb4d 	b.w	4098ee <_vfiprintf_r+0x47e>
  40a254:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a258:	e50f      	b.n	409c7a <_vfiprintf_r+0x80a>
  40a25a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a25e:	e4f3      	b.n	409c48 <_vfiprintf_r+0x7d8>
  40a260:	0040f03c 	.word	0x0040f03c
  40a264:	0040f050 	.word	0x0040f050
  40a268:	0040f07c 	.word	0x0040f07c

0040a26c <__sbprintf>:
  40a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a26e:	460c      	mov	r4, r1
  40a270:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  40a274:	8989      	ldrh	r1, [r1, #12]
  40a276:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40a278:	89e5      	ldrh	r5, [r4, #14]
  40a27a:	9619      	str	r6, [sp, #100]	; 0x64
  40a27c:	f021 0102 	bic.w	r1, r1, #2
  40a280:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a282:	f8ad 500e 	strh.w	r5, [sp, #14]
  40a286:	2500      	movs	r5, #0
  40a288:	69e7      	ldr	r7, [r4, #28]
  40a28a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40a28e:	9609      	str	r6, [sp, #36]	; 0x24
  40a290:	9506      	str	r5, [sp, #24]
  40a292:	ae1a      	add	r6, sp, #104	; 0x68
  40a294:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40a298:	4669      	mov	r1, sp
  40a29a:	9600      	str	r6, [sp, #0]
  40a29c:	9604      	str	r6, [sp, #16]
  40a29e:	9502      	str	r5, [sp, #8]
  40a2a0:	9505      	str	r5, [sp, #20]
  40a2a2:	9707      	str	r7, [sp, #28]
  40a2a4:	4606      	mov	r6, r0
  40a2a6:	f7ff f8e3 	bl	409470 <_vfiprintf_r>
  40a2aa:	1e05      	subs	r5, r0, #0
  40a2ac:	db07      	blt.n	40a2be <__sbprintf+0x52>
  40a2ae:	4630      	mov	r0, r6
  40a2b0:	4669      	mov	r1, sp
  40a2b2:	f001 f8e9 	bl	40b488 <_fflush_r>
  40a2b6:	2800      	cmp	r0, #0
  40a2b8:	bf18      	it	ne
  40a2ba:	f04f 35ff 	movne.w	r5, #4294967295
  40a2be:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40a2c2:	065b      	lsls	r3, r3, #25
  40a2c4:	d503      	bpl.n	40a2ce <__sbprintf+0x62>
  40a2c6:	89a3      	ldrh	r3, [r4, #12]
  40a2c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a2cc:	81a3      	strh	r3, [r4, #12]
  40a2ce:	4628      	mov	r0, r5
  40a2d0:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  40a2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a2d6:	bf00      	nop

0040a2d8 <__swsetup_r>:
  40a2d8:	b538      	push	{r3, r4, r5, lr}
  40a2da:	4b30      	ldr	r3, [pc, #192]	; (40a39c <__swsetup_r+0xc4>)
  40a2dc:	681b      	ldr	r3, [r3, #0]
  40a2de:	4605      	mov	r5, r0
  40a2e0:	460c      	mov	r4, r1
  40a2e2:	b113      	cbz	r3, 40a2ea <__swsetup_r+0x12>
  40a2e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40a2e6:	2a00      	cmp	r2, #0
  40a2e8:	d038      	beq.n	40a35c <__swsetup_r+0x84>
  40a2ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a2ee:	b293      	uxth	r3, r2
  40a2f0:	0718      	lsls	r0, r3, #28
  40a2f2:	d50c      	bpl.n	40a30e <__swsetup_r+0x36>
  40a2f4:	6920      	ldr	r0, [r4, #16]
  40a2f6:	b1a8      	cbz	r0, 40a324 <__swsetup_r+0x4c>
  40a2f8:	f013 0201 	ands.w	r2, r3, #1
  40a2fc:	d01e      	beq.n	40a33c <__swsetup_r+0x64>
  40a2fe:	6963      	ldr	r3, [r4, #20]
  40a300:	2200      	movs	r2, #0
  40a302:	425b      	negs	r3, r3
  40a304:	61a3      	str	r3, [r4, #24]
  40a306:	60a2      	str	r2, [r4, #8]
  40a308:	b1f0      	cbz	r0, 40a348 <__swsetup_r+0x70>
  40a30a:	2000      	movs	r0, #0
  40a30c:	bd38      	pop	{r3, r4, r5, pc}
  40a30e:	06d9      	lsls	r1, r3, #27
  40a310:	d53c      	bpl.n	40a38c <__swsetup_r+0xb4>
  40a312:	0758      	lsls	r0, r3, #29
  40a314:	d426      	bmi.n	40a364 <__swsetup_r+0x8c>
  40a316:	6920      	ldr	r0, [r4, #16]
  40a318:	f042 0308 	orr.w	r3, r2, #8
  40a31c:	81a3      	strh	r3, [r4, #12]
  40a31e:	b29b      	uxth	r3, r3
  40a320:	2800      	cmp	r0, #0
  40a322:	d1e9      	bne.n	40a2f8 <__swsetup_r+0x20>
  40a324:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40a328:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40a32c:	d0e4      	beq.n	40a2f8 <__swsetup_r+0x20>
  40a32e:	4628      	mov	r0, r5
  40a330:	4621      	mov	r1, r4
  40a332:	f001 fcd9 	bl	40bce8 <__smakebuf_r>
  40a336:	89a3      	ldrh	r3, [r4, #12]
  40a338:	6920      	ldr	r0, [r4, #16]
  40a33a:	e7dd      	b.n	40a2f8 <__swsetup_r+0x20>
  40a33c:	0799      	lsls	r1, r3, #30
  40a33e:	bf58      	it	pl
  40a340:	6962      	ldrpl	r2, [r4, #20]
  40a342:	60a2      	str	r2, [r4, #8]
  40a344:	2800      	cmp	r0, #0
  40a346:	d1e0      	bne.n	40a30a <__swsetup_r+0x32>
  40a348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a34c:	061a      	lsls	r2, r3, #24
  40a34e:	d5dd      	bpl.n	40a30c <__swsetup_r+0x34>
  40a350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a354:	81a3      	strh	r3, [r4, #12]
  40a356:	f04f 30ff 	mov.w	r0, #4294967295
  40a35a:	bd38      	pop	{r3, r4, r5, pc}
  40a35c:	4618      	mov	r0, r3
  40a35e:	f001 f927 	bl	40b5b0 <__sinit>
  40a362:	e7c2      	b.n	40a2ea <__swsetup_r+0x12>
  40a364:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a366:	b151      	cbz	r1, 40a37e <__swsetup_r+0xa6>
  40a368:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a36c:	4299      	cmp	r1, r3
  40a36e:	d004      	beq.n	40a37a <__swsetup_r+0xa2>
  40a370:	4628      	mov	r0, r5
  40a372:	f001 f9e7 	bl	40b744 <_free_r>
  40a376:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a37a:	2300      	movs	r3, #0
  40a37c:	6323      	str	r3, [r4, #48]	; 0x30
  40a37e:	2300      	movs	r3, #0
  40a380:	6920      	ldr	r0, [r4, #16]
  40a382:	6063      	str	r3, [r4, #4]
  40a384:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40a388:	6020      	str	r0, [r4, #0]
  40a38a:	e7c5      	b.n	40a318 <__swsetup_r+0x40>
  40a38c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40a390:	2309      	movs	r3, #9
  40a392:	602b      	str	r3, [r5, #0]
  40a394:	f04f 30ff 	mov.w	r0, #4294967295
  40a398:	81a2      	strh	r2, [r4, #12]
  40a39a:	bd38      	pop	{r3, r4, r5, pc}
  40a39c:	20400448 	.word	0x20400448

0040a3a0 <register_fini>:
  40a3a0:	4b02      	ldr	r3, [pc, #8]	; (40a3ac <register_fini+0xc>)
  40a3a2:	b113      	cbz	r3, 40a3aa <register_fini+0xa>
  40a3a4:	4802      	ldr	r0, [pc, #8]	; (40a3b0 <register_fini+0x10>)
  40a3a6:	f000 b805 	b.w	40a3b4 <atexit>
  40a3aa:	4770      	bx	lr
  40a3ac:	00000000 	.word	0x00000000
  40a3b0:	0040b5c5 	.word	0x0040b5c5

0040a3b4 <atexit>:
  40a3b4:	2300      	movs	r3, #0
  40a3b6:	4601      	mov	r1, r0
  40a3b8:	461a      	mov	r2, r3
  40a3ba:	4618      	mov	r0, r3
  40a3bc:	f002 bf62 	b.w	40d284 <__register_exitproc>

0040a3c0 <quorem>:
  40a3c0:	6902      	ldr	r2, [r0, #16]
  40a3c2:	690b      	ldr	r3, [r1, #16]
  40a3c4:	4293      	cmp	r3, r2
  40a3c6:	f300 808d 	bgt.w	40a4e4 <quorem+0x124>
  40a3ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a3ce:	f103 38ff 	add.w	r8, r3, #4294967295
  40a3d2:	f101 0714 	add.w	r7, r1, #20
  40a3d6:	f100 0b14 	add.w	fp, r0, #20
  40a3da:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40a3de:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40a3e2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40a3e6:	b083      	sub	sp, #12
  40a3e8:	3201      	adds	r2, #1
  40a3ea:	fbb3 f9f2 	udiv	r9, r3, r2
  40a3ee:	eb0b 0304 	add.w	r3, fp, r4
  40a3f2:	9400      	str	r4, [sp, #0]
  40a3f4:	eb07 0a04 	add.w	sl, r7, r4
  40a3f8:	9301      	str	r3, [sp, #4]
  40a3fa:	f1b9 0f00 	cmp.w	r9, #0
  40a3fe:	d039      	beq.n	40a474 <quorem+0xb4>
  40a400:	2500      	movs	r5, #0
  40a402:	46bc      	mov	ip, r7
  40a404:	46de      	mov	lr, fp
  40a406:	462b      	mov	r3, r5
  40a408:	f85c 6b04 	ldr.w	r6, [ip], #4
  40a40c:	f8de 2000 	ldr.w	r2, [lr]
  40a410:	b2b4      	uxth	r4, r6
  40a412:	fb09 5504 	mla	r5, r9, r4, r5
  40a416:	0c36      	lsrs	r6, r6, #16
  40a418:	0c2c      	lsrs	r4, r5, #16
  40a41a:	fb09 4406 	mla	r4, r9, r6, r4
  40a41e:	b2ad      	uxth	r5, r5
  40a420:	1b5b      	subs	r3, r3, r5
  40a422:	b2a6      	uxth	r6, r4
  40a424:	fa13 f382 	uxtah	r3, r3, r2
  40a428:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  40a42c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40a430:	b29b      	uxth	r3, r3
  40a432:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40a436:	45e2      	cmp	sl, ip
  40a438:	f84e 3b04 	str.w	r3, [lr], #4
  40a43c:	ea4f 4514 	mov.w	r5, r4, lsr #16
  40a440:	ea4f 4326 	mov.w	r3, r6, asr #16
  40a444:	d2e0      	bcs.n	40a408 <quorem+0x48>
  40a446:	9b00      	ldr	r3, [sp, #0]
  40a448:	f85b 3003 	ldr.w	r3, [fp, r3]
  40a44c:	b993      	cbnz	r3, 40a474 <quorem+0xb4>
  40a44e:	9c01      	ldr	r4, [sp, #4]
  40a450:	1f23      	subs	r3, r4, #4
  40a452:	459b      	cmp	fp, r3
  40a454:	d20c      	bcs.n	40a470 <quorem+0xb0>
  40a456:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40a45a:	b94b      	cbnz	r3, 40a470 <quorem+0xb0>
  40a45c:	f1a4 0308 	sub.w	r3, r4, #8
  40a460:	e002      	b.n	40a468 <quorem+0xa8>
  40a462:	681a      	ldr	r2, [r3, #0]
  40a464:	3b04      	subs	r3, #4
  40a466:	b91a      	cbnz	r2, 40a470 <quorem+0xb0>
  40a468:	459b      	cmp	fp, r3
  40a46a:	f108 38ff 	add.w	r8, r8, #4294967295
  40a46e:	d3f8      	bcc.n	40a462 <quorem+0xa2>
  40a470:	f8c0 8010 	str.w	r8, [r0, #16]
  40a474:	4604      	mov	r4, r0
  40a476:	f002 fa95 	bl	40c9a4 <__mcmp>
  40a47a:	2800      	cmp	r0, #0
  40a47c:	db2e      	blt.n	40a4dc <quorem+0x11c>
  40a47e:	f109 0901 	add.w	r9, r9, #1
  40a482:	465d      	mov	r5, fp
  40a484:	2300      	movs	r3, #0
  40a486:	f857 1b04 	ldr.w	r1, [r7], #4
  40a48a:	6828      	ldr	r0, [r5, #0]
  40a48c:	b28a      	uxth	r2, r1
  40a48e:	1a9a      	subs	r2, r3, r2
  40a490:	0c09      	lsrs	r1, r1, #16
  40a492:	fa12 f280 	uxtah	r2, r2, r0
  40a496:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  40a49a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40a49e:	b291      	uxth	r1, r2
  40a4a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40a4a4:	45ba      	cmp	sl, r7
  40a4a6:	f845 1b04 	str.w	r1, [r5], #4
  40a4aa:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a4ae:	d2ea      	bcs.n	40a486 <quorem+0xc6>
  40a4b0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40a4b4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40a4b8:	b982      	cbnz	r2, 40a4dc <quorem+0x11c>
  40a4ba:	1f1a      	subs	r2, r3, #4
  40a4bc:	4593      	cmp	fp, r2
  40a4be:	d20b      	bcs.n	40a4d8 <quorem+0x118>
  40a4c0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40a4c4:	b942      	cbnz	r2, 40a4d8 <quorem+0x118>
  40a4c6:	3b08      	subs	r3, #8
  40a4c8:	e002      	b.n	40a4d0 <quorem+0x110>
  40a4ca:	681a      	ldr	r2, [r3, #0]
  40a4cc:	3b04      	subs	r3, #4
  40a4ce:	b91a      	cbnz	r2, 40a4d8 <quorem+0x118>
  40a4d0:	459b      	cmp	fp, r3
  40a4d2:	f108 38ff 	add.w	r8, r8, #4294967295
  40a4d6:	d3f8      	bcc.n	40a4ca <quorem+0x10a>
  40a4d8:	f8c4 8010 	str.w	r8, [r4, #16]
  40a4dc:	4648      	mov	r0, r9
  40a4de:	b003      	add	sp, #12
  40a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a4e4:	2000      	movs	r0, #0
  40a4e6:	4770      	bx	lr

0040a4e8 <_dtoa_r>:
  40a4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a4ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40a4ee:	b097      	sub	sp, #92	; 0x5c
  40a4f0:	4681      	mov	r9, r0
  40a4f2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  40a4f4:	4692      	mov	sl, r2
  40a4f6:	469b      	mov	fp, r3
  40a4f8:	b149      	cbz	r1, 40a50e <_dtoa_r+0x26>
  40a4fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40a4fc:	604a      	str	r2, [r1, #4]
  40a4fe:	2301      	movs	r3, #1
  40a500:	4093      	lsls	r3, r2
  40a502:	608b      	str	r3, [r1, #8]
  40a504:	f002 f86c 	bl	40c5e0 <_Bfree>
  40a508:	2300      	movs	r3, #0
  40a50a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  40a50e:	f1bb 0f00 	cmp.w	fp, #0
  40a512:	46d8      	mov	r8, fp
  40a514:	db33      	blt.n	40a57e <_dtoa_r+0x96>
  40a516:	2300      	movs	r3, #0
  40a518:	6023      	str	r3, [r4, #0]
  40a51a:	4ba5      	ldr	r3, [pc, #660]	; (40a7b0 <_dtoa_r+0x2c8>)
  40a51c:	461a      	mov	r2, r3
  40a51e:	ea08 0303 	and.w	r3, r8, r3
  40a522:	4293      	cmp	r3, r2
  40a524:	d014      	beq.n	40a550 <_dtoa_r+0x68>
  40a526:	4650      	mov	r0, sl
  40a528:	4659      	mov	r1, fp
  40a52a:	2200      	movs	r2, #0
  40a52c:	2300      	movs	r3, #0
  40a52e:	f003 fbf1 	bl	40dd14 <__aeabi_dcmpeq>
  40a532:	4605      	mov	r5, r0
  40a534:	b348      	cbz	r0, 40a58a <_dtoa_r+0xa2>
  40a536:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a538:	2301      	movs	r3, #1
  40a53a:	6013      	str	r3, [r2, #0]
  40a53c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a53e:	2b00      	cmp	r3, #0
  40a540:	f000 80c5 	beq.w	40a6ce <_dtoa_r+0x1e6>
  40a544:	489b      	ldr	r0, [pc, #620]	; (40a7b4 <_dtoa_r+0x2cc>)
  40a546:	6018      	str	r0, [r3, #0]
  40a548:	3801      	subs	r0, #1
  40a54a:	b017      	add	sp, #92	; 0x5c
  40a54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a550:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a552:	f242 730f 	movw	r3, #9999	; 0x270f
  40a556:	6013      	str	r3, [r2, #0]
  40a558:	f1ba 0f00 	cmp.w	sl, #0
  40a55c:	f000 80a2 	beq.w	40a6a4 <_dtoa_r+0x1bc>
  40a560:	4895      	ldr	r0, [pc, #596]	; (40a7b8 <_dtoa_r+0x2d0>)
  40a562:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a564:	2b00      	cmp	r3, #0
  40a566:	d0f0      	beq.n	40a54a <_dtoa_r+0x62>
  40a568:	78c3      	ldrb	r3, [r0, #3]
  40a56a:	2b00      	cmp	r3, #0
  40a56c:	f000 80b1 	beq.w	40a6d2 <_dtoa_r+0x1ea>
  40a570:	f100 0308 	add.w	r3, r0, #8
  40a574:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a576:	6013      	str	r3, [r2, #0]
  40a578:	b017      	add	sp, #92	; 0x5c
  40a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a57e:	2301      	movs	r3, #1
  40a580:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40a584:	6023      	str	r3, [r4, #0]
  40a586:	46c3      	mov	fp, r8
  40a588:	e7c7      	b.n	40a51a <_dtoa_r+0x32>
  40a58a:	aa14      	add	r2, sp, #80	; 0x50
  40a58c:	ab15      	add	r3, sp, #84	; 0x54
  40a58e:	9201      	str	r2, [sp, #4]
  40a590:	9300      	str	r3, [sp, #0]
  40a592:	4652      	mov	r2, sl
  40a594:	465b      	mov	r3, fp
  40a596:	4648      	mov	r0, r9
  40a598:	f002 faae 	bl	40caf8 <__d2b>
  40a59c:	ea5f 5418 	movs.w	r4, r8, lsr #20
  40a5a0:	9008      	str	r0, [sp, #32]
  40a5a2:	f040 8088 	bne.w	40a6b6 <_dtoa_r+0x1ce>
  40a5a6:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40a5a8:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40a5aa:	442c      	add	r4, r5
  40a5ac:	f204 4332 	addw	r3, r4, #1074	; 0x432
  40a5b0:	2b20      	cmp	r3, #32
  40a5b2:	f340 8291 	ble.w	40aad8 <_dtoa_r+0x5f0>
  40a5b6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40a5ba:	f204 4012 	addw	r0, r4, #1042	; 0x412
  40a5be:	fa08 f803 	lsl.w	r8, r8, r3
  40a5c2:	fa2a f000 	lsr.w	r0, sl, r0
  40a5c6:	ea40 0008 	orr.w	r0, r0, r8
  40a5ca:	f003 f8c5 	bl	40d758 <__aeabi_ui2d>
  40a5ce:	2301      	movs	r3, #1
  40a5d0:	3c01      	subs	r4, #1
  40a5d2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40a5d6:	9310      	str	r3, [sp, #64]	; 0x40
  40a5d8:	2200      	movs	r2, #0
  40a5da:	4b78      	ldr	r3, [pc, #480]	; (40a7bc <_dtoa_r+0x2d4>)
  40a5dc:	f002 ff7e 	bl	40d4dc <__aeabi_dsub>
  40a5e0:	a36d      	add	r3, pc, #436	; (adr r3, 40a798 <_dtoa_r+0x2b0>)
  40a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a5e6:	f003 f92d 	bl	40d844 <__aeabi_dmul>
  40a5ea:	a36d      	add	r3, pc, #436	; (adr r3, 40a7a0 <_dtoa_r+0x2b8>)
  40a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a5f0:	f002 ff76 	bl	40d4e0 <__adddf3>
  40a5f4:	4606      	mov	r6, r0
  40a5f6:	4620      	mov	r0, r4
  40a5f8:	460f      	mov	r7, r1
  40a5fa:	f003 f8bd 	bl	40d778 <__aeabi_i2d>
  40a5fe:	a36a      	add	r3, pc, #424	; (adr r3, 40a7a8 <_dtoa_r+0x2c0>)
  40a600:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a604:	f003 f91e 	bl	40d844 <__aeabi_dmul>
  40a608:	4602      	mov	r2, r0
  40a60a:	460b      	mov	r3, r1
  40a60c:	4630      	mov	r0, r6
  40a60e:	4639      	mov	r1, r7
  40a610:	f002 ff66 	bl	40d4e0 <__adddf3>
  40a614:	4606      	mov	r6, r0
  40a616:	460f      	mov	r7, r1
  40a618:	f003 fbc4 	bl	40dda4 <__aeabi_d2iz>
  40a61c:	2200      	movs	r2, #0
  40a61e:	9004      	str	r0, [sp, #16]
  40a620:	2300      	movs	r3, #0
  40a622:	4630      	mov	r0, r6
  40a624:	4639      	mov	r1, r7
  40a626:	f003 fb7f 	bl	40dd28 <__aeabi_dcmplt>
  40a62a:	2800      	cmp	r0, #0
  40a62c:	f040 8230 	bne.w	40aa90 <_dtoa_r+0x5a8>
  40a630:	9e04      	ldr	r6, [sp, #16]
  40a632:	2e16      	cmp	r6, #22
  40a634:	f200 8229 	bhi.w	40aa8a <_dtoa_r+0x5a2>
  40a638:	4b61      	ldr	r3, [pc, #388]	; (40a7c0 <_dtoa_r+0x2d8>)
  40a63a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40a63e:	e9d3 0100 	ldrd	r0, r1, [r3]
  40a642:	4652      	mov	r2, sl
  40a644:	465b      	mov	r3, fp
  40a646:	f003 fb8d 	bl	40dd64 <__aeabi_dcmpgt>
  40a64a:	2800      	cmp	r0, #0
  40a64c:	f000 8249 	beq.w	40aae2 <_dtoa_r+0x5fa>
  40a650:	1e73      	subs	r3, r6, #1
  40a652:	9304      	str	r3, [sp, #16]
  40a654:	2300      	movs	r3, #0
  40a656:	930c      	str	r3, [sp, #48]	; 0x30
  40a658:	1b2c      	subs	r4, r5, r4
  40a65a:	1e63      	subs	r3, r4, #1
  40a65c:	9302      	str	r3, [sp, #8]
  40a65e:	f100 8232 	bmi.w	40aac6 <_dtoa_r+0x5de>
  40a662:	2300      	movs	r3, #0
  40a664:	9305      	str	r3, [sp, #20]
  40a666:	9b04      	ldr	r3, [sp, #16]
  40a668:	2b00      	cmp	r3, #0
  40a66a:	f2c0 8223 	blt.w	40aab4 <_dtoa_r+0x5cc>
  40a66e:	9a02      	ldr	r2, [sp, #8]
  40a670:	930b      	str	r3, [sp, #44]	; 0x2c
  40a672:	4611      	mov	r1, r2
  40a674:	4419      	add	r1, r3
  40a676:	2300      	movs	r3, #0
  40a678:	9102      	str	r1, [sp, #8]
  40a67a:	930a      	str	r3, [sp, #40]	; 0x28
  40a67c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40a67e:	2b09      	cmp	r3, #9
  40a680:	d829      	bhi.n	40a6d6 <_dtoa_r+0x1ee>
  40a682:	2b05      	cmp	r3, #5
  40a684:	f340 8658 	ble.w	40b338 <_dtoa_r+0xe50>
  40a688:	3b04      	subs	r3, #4
  40a68a:	9320      	str	r3, [sp, #128]	; 0x80
  40a68c:	2500      	movs	r5, #0
  40a68e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40a690:	3b02      	subs	r3, #2
  40a692:	2b03      	cmp	r3, #3
  40a694:	f200 8635 	bhi.w	40b302 <_dtoa_r+0xe1a>
  40a698:	e8df f013 	tbh	[pc, r3, lsl #1]
  40a69c:	0228032c 	.word	0x0228032c
  40a6a0:	04590337 	.word	0x04590337
  40a6a4:	4b44      	ldr	r3, [pc, #272]	; (40a7b8 <_dtoa_r+0x2d0>)
  40a6a6:	4a47      	ldr	r2, [pc, #284]	; (40a7c4 <_dtoa_r+0x2dc>)
  40a6a8:	f3c8 0013 	ubfx	r0, r8, #0, #20
  40a6ac:	2800      	cmp	r0, #0
  40a6ae:	bf14      	ite	ne
  40a6b0:	4618      	movne	r0, r3
  40a6b2:	4610      	moveq	r0, r2
  40a6b4:	e755      	b.n	40a562 <_dtoa_r+0x7a>
  40a6b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40a6ba:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40a6be:	9510      	str	r5, [sp, #64]	; 0x40
  40a6c0:	4650      	mov	r0, sl
  40a6c2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40a6c6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40a6ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40a6cc:	e784      	b.n	40a5d8 <_dtoa_r+0xf0>
  40a6ce:	483e      	ldr	r0, [pc, #248]	; (40a7c8 <_dtoa_r+0x2e0>)
  40a6d0:	e73b      	b.n	40a54a <_dtoa_r+0x62>
  40a6d2:	1cc3      	adds	r3, r0, #3
  40a6d4:	e74e      	b.n	40a574 <_dtoa_r+0x8c>
  40a6d6:	2100      	movs	r1, #0
  40a6d8:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40a6dc:	4648      	mov	r0, r9
  40a6de:	9120      	str	r1, [sp, #128]	; 0x80
  40a6e0:	f001 ff58 	bl	40c594 <_Balloc>
  40a6e4:	f04f 33ff 	mov.w	r3, #4294967295
  40a6e8:	9306      	str	r3, [sp, #24]
  40a6ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40a6ec:	930d      	str	r3, [sp, #52]	; 0x34
  40a6ee:	2301      	movs	r3, #1
  40a6f0:	9007      	str	r0, [sp, #28]
  40a6f2:	9221      	str	r2, [sp, #132]	; 0x84
  40a6f4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40a6f8:	9309      	str	r3, [sp, #36]	; 0x24
  40a6fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a6fc:	2b00      	cmp	r3, #0
  40a6fe:	f2c0 80d1 	blt.w	40a8a4 <_dtoa_r+0x3bc>
  40a702:	9a04      	ldr	r2, [sp, #16]
  40a704:	2a0e      	cmp	r2, #14
  40a706:	f300 80cd 	bgt.w	40a8a4 <_dtoa_r+0x3bc>
  40a70a:	4b2d      	ldr	r3, [pc, #180]	; (40a7c0 <_dtoa_r+0x2d8>)
  40a70c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a710:	e9d3 3400 	ldrd	r3, r4, [r3]
  40a714:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40a718:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a71a:	2b00      	cmp	r3, #0
  40a71c:	f2c0 8300 	blt.w	40ad20 <_dtoa_r+0x838>
  40a720:	4656      	mov	r6, sl
  40a722:	465f      	mov	r7, fp
  40a724:	4650      	mov	r0, sl
  40a726:	4659      	mov	r1, fp
  40a728:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40a72c:	4652      	mov	r2, sl
  40a72e:	465b      	mov	r3, fp
  40a730:	f003 f9b2 	bl	40da98 <__aeabi_ddiv>
  40a734:	f003 fb36 	bl	40dda4 <__aeabi_d2iz>
  40a738:	4604      	mov	r4, r0
  40a73a:	f003 f81d 	bl	40d778 <__aeabi_i2d>
  40a73e:	4652      	mov	r2, sl
  40a740:	465b      	mov	r3, fp
  40a742:	f003 f87f 	bl	40d844 <__aeabi_dmul>
  40a746:	460b      	mov	r3, r1
  40a748:	4602      	mov	r2, r0
  40a74a:	4639      	mov	r1, r7
  40a74c:	4630      	mov	r0, r6
  40a74e:	f002 fec5 	bl	40d4dc <__aeabi_dsub>
  40a752:	9d07      	ldr	r5, [sp, #28]
  40a754:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40a758:	702b      	strb	r3, [r5, #0]
  40a75a:	9b06      	ldr	r3, [sp, #24]
  40a75c:	2b01      	cmp	r3, #1
  40a75e:	4606      	mov	r6, r0
  40a760:	460f      	mov	r7, r1
  40a762:	f105 0501 	add.w	r5, r5, #1
  40a766:	d062      	beq.n	40a82e <_dtoa_r+0x346>
  40a768:	2200      	movs	r2, #0
  40a76a:	4b18      	ldr	r3, [pc, #96]	; (40a7cc <_dtoa_r+0x2e4>)
  40a76c:	f003 f86a 	bl	40d844 <__aeabi_dmul>
  40a770:	2200      	movs	r2, #0
  40a772:	2300      	movs	r3, #0
  40a774:	4606      	mov	r6, r0
  40a776:	460f      	mov	r7, r1
  40a778:	f003 facc 	bl	40dd14 <__aeabi_dcmpeq>
  40a77c:	2800      	cmp	r0, #0
  40a77e:	d17e      	bne.n	40a87e <_dtoa_r+0x396>
  40a780:	f8cd 9014 	str.w	r9, [sp, #20]
  40a784:	f8dd a018 	ldr.w	sl, [sp, #24]
  40a788:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40a78c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40a790:	e029      	b.n	40a7e6 <_dtoa_r+0x2fe>
  40a792:	bf00      	nop
  40a794:	f3af 8000 	nop.w
  40a798:	636f4361 	.word	0x636f4361
  40a79c:	3fd287a7 	.word	0x3fd287a7
  40a7a0:	8b60c8b3 	.word	0x8b60c8b3
  40a7a4:	3fc68a28 	.word	0x3fc68a28
  40a7a8:	509f79fb 	.word	0x509f79fb
  40a7ac:	3fd34413 	.word	0x3fd34413
  40a7b0:	7ff00000 	.word	0x7ff00000
  40a7b4:	0040f059 	.word	0x0040f059
  40a7b8:	0040f098 	.word	0x0040f098
  40a7bc:	3ff80000 	.word	0x3ff80000
  40a7c0:	0040f0a8 	.word	0x0040f0a8
  40a7c4:	0040f08c 	.word	0x0040f08c
  40a7c8:	0040f058 	.word	0x0040f058
  40a7cc:	40240000 	.word	0x40240000
  40a7d0:	f003 f838 	bl	40d844 <__aeabi_dmul>
  40a7d4:	2200      	movs	r2, #0
  40a7d6:	2300      	movs	r3, #0
  40a7d8:	4606      	mov	r6, r0
  40a7da:	460f      	mov	r7, r1
  40a7dc:	f003 fa9a 	bl	40dd14 <__aeabi_dcmpeq>
  40a7e0:	2800      	cmp	r0, #0
  40a7e2:	f040 83b7 	bne.w	40af54 <_dtoa_r+0xa6c>
  40a7e6:	4642      	mov	r2, r8
  40a7e8:	464b      	mov	r3, r9
  40a7ea:	4630      	mov	r0, r6
  40a7ec:	4639      	mov	r1, r7
  40a7ee:	f003 f953 	bl	40da98 <__aeabi_ddiv>
  40a7f2:	f003 fad7 	bl	40dda4 <__aeabi_d2iz>
  40a7f6:	4604      	mov	r4, r0
  40a7f8:	f002 ffbe 	bl	40d778 <__aeabi_i2d>
  40a7fc:	4642      	mov	r2, r8
  40a7fe:	464b      	mov	r3, r9
  40a800:	f003 f820 	bl	40d844 <__aeabi_dmul>
  40a804:	4602      	mov	r2, r0
  40a806:	460b      	mov	r3, r1
  40a808:	4630      	mov	r0, r6
  40a80a:	4639      	mov	r1, r7
  40a80c:	f002 fe66 	bl	40d4dc <__aeabi_dsub>
  40a810:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40a814:	f805 eb01 	strb.w	lr, [r5], #1
  40a818:	ebcb 0e05 	rsb	lr, fp, r5
  40a81c:	45d6      	cmp	lr, sl
  40a81e:	4606      	mov	r6, r0
  40a820:	460f      	mov	r7, r1
  40a822:	f04f 0200 	mov.w	r2, #0
  40a826:	4bb0      	ldr	r3, [pc, #704]	; (40aae8 <_dtoa_r+0x600>)
  40a828:	d1d2      	bne.n	40a7d0 <_dtoa_r+0x2e8>
  40a82a:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40a82e:	4632      	mov	r2, r6
  40a830:	463b      	mov	r3, r7
  40a832:	4630      	mov	r0, r6
  40a834:	4639      	mov	r1, r7
  40a836:	f002 fe53 	bl	40d4e0 <__adddf3>
  40a83a:	4606      	mov	r6, r0
  40a83c:	460f      	mov	r7, r1
  40a83e:	4602      	mov	r2, r0
  40a840:	460b      	mov	r3, r1
  40a842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40a846:	f003 fa6f 	bl	40dd28 <__aeabi_dcmplt>
  40a84a:	b940      	cbnz	r0, 40a85e <_dtoa_r+0x376>
  40a84c:	4632      	mov	r2, r6
  40a84e:	463b      	mov	r3, r7
  40a850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40a854:	f003 fa5e 	bl	40dd14 <__aeabi_dcmpeq>
  40a858:	b188      	cbz	r0, 40a87e <_dtoa_r+0x396>
  40a85a:	07e3      	lsls	r3, r4, #31
  40a85c:	d50f      	bpl.n	40a87e <_dtoa_r+0x396>
  40a85e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40a862:	9a07      	ldr	r2, [sp, #28]
  40a864:	1e6b      	subs	r3, r5, #1
  40a866:	e004      	b.n	40a872 <_dtoa_r+0x38a>
  40a868:	429a      	cmp	r2, r3
  40a86a:	f000 842c 	beq.w	40b0c6 <_dtoa_r+0xbde>
  40a86e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40a872:	2c39      	cmp	r4, #57	; 0x39
  40a874:	f103 0501 	add.w	r5, r3, #1
  40a878:	d0f6      	beq.n	40a868 <_dtoa_r+0x380>
  40a87a:	3401      	adds	r4, #1
  40a87c:	701c      	strb	r4, [r3, #0]
  40a87e:	9908      	ldr	r1, [sp, #32]
  40a880:	4648      	mov	r0, r9
  40a882:	f001 fead 	bl	40c5e0 <_Bfree>
  40a886:	2200      	movs	r2, #0
  40a888:	9b04      	ldr	r3, [sp, #16]
  40a88a:	702a      	strb	r2, [r5, #0]
  40a88c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a88e:	3301      	adds	r3, #1
  40a890:	6013      	str	r3, [r2, #0]
  40a892:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a894:	2b00      	cmp	r3, #0
  40a896:	f000 83a7 	beq.w	40afe8 <_dtoa_r+0xb00>
  40a89a:	9807      	ldr	r0, [sp, #28]
  40a89c:	601d      	str	r5, [r3, #0]
  40a89e:	b017      	add	sp, #92	; 0x5c
  40a8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a8a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a8a6:	2a00      	cmp	r2, #0
  40a8a8:	f000 8112 	beq.w	40aad0 <_dtoa_r+0x5e8>
  40a8ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40a8ae:	2a01      	cmp	r2, #1
  40a8b0:	f340 8258 	ble.w	40ad64 <_dtoa_r+0x87c>
  40a8b4:	9b06      	ldr	r3, [sp, #24]
  40a8b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a8b8:	1e5f      	subs	r7, r3, #1
  40a8ba:	42ba      	cmp	r2, r7
  40a8bc:	f2c0 8397 	blt.w	40afee <_dtoa_r+0xb06>
  40a8c0:	1bd7      	subs	r7, r2, r7
  40a8c2:	9b06      	ldr	r3, [sp, #24]
  40a8c4:	2b00      	cmp	r3, #0
  40a8c6:	f2c0 848a 	blt.w	40b1de <_dtoa_r+0xcf6>
  40a8ca:	9d05      	ldr	r5, [sp, #20]
  40a8cc:	9b06      	ldr	r3, [sp, #24]
  40a8ce:	9a05      	ldr	r2, [sp, #20]
  40a8d0:	441a      	add	r2, r3
  40a8d2:	9205      	str	r2, [sp, #20]
  40a8d4:	9a02      	ldr	r2, [sp, #8]
  40a8d6:	2101      	movs	r1, #1
  40a8d8:	441a      	add	r2, r3
  40a8da:	4648      	mov	r0, r9
  40a8dc:	9202      	str	r2, [sp, #8]
  40a8de:	f001 ff17 	bl	40c710 <__i2b>
  40a8e2:	4606      	mov	r6, r0
  40a8e4:	b165      	cbz	r5, 40a900 <_dtoa_r+0x418>
  40a8e6:	9902      	ldr	r1, [sp, #8]
  40a8e8:	2900      	cmp	r1, #0
  40a8ea:	460b      	mov	r3, r1
  40a8ec:	dd08      	ble.n	40a900 <_dtoa_r+0x418>
  40a8ee:	42a9      	cmp	r1, r5
  40a8f0:	9a05      	ldr	r2, [sp, #20]
  40a8f2:	bfa8      	it	ge
  40a8f4:	462b      	movge	r3, r5
  40a8f6:	1ad2      	subs	r2, r2, r3
  40a8f8:	1aed      	subs	r5, r5, r3
  40a8fa:	1acb      	subs	r3, r1, r3
  40a8fc:	9205      	str	r2, [sp, #20]
  40a8fe:	9302      	str	r3, [sp, #8]
  40a900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a902:	2b00      	cmp	r3, #0
  40a904:	f340 82fc 	ble.w	40af00 <_dtoa_r+0xa18>
  40a908:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a90a:	2a00      	cmp	r2, #0
  40a90c:	f000 8201 	beq.w	40ad12 <_dtoa_r+0x82a>
  40a910:	2f00      	cmp	r7, #0
  40a912:	f000 81fe 	beq.w	40ad12 <_dtoa_r+0x82a>
  40a916:	4631      	mov	r1, r6
  40a918:	463a      	mov	r2, r7
  40a91a:	4648      	mov	r0, r9
  40a91c:	f001 ff9a 	bl	40c854 <__pow5mult>
  40a920:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40a924:	4601      	mov	r1, r0
  40a926:	4642      	mov	r2, r8
  40a928:	4606      	mov	r6, r0
  40a92a:	4648      	mov	r0, r9
  40a92c:	f001 fefa 	bl	40c724 <__multiply>
  40a930:	4641      	mov	r1, r8
  40a932:	4604      	mov	r4, r0
  40a934:	4648      	mov	r0, r9
  40a936:	f001 fe53 	bl	40c5e0 <_Bfree>
  40a93a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a93c:	1bdb      	subs	r3, r3, r7
  40a93e:	930a      	str	r3, [sp, #40]	; 0x28
  40a940:	f040 81e6 	bne.w	40ad10 <_dtoa_r+0x828>
  40a944:	2101      	movs	r1, #1
  40a946:	4648      	mov	r0, r9
  40a948:	f001 fee2 	bl	40c710 <__i2b>
  40a94c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a94e:	4680      	mov	r8, r0
  40a950:	2b00      	cmp	r3, #0
  40a952:	f000 8219 	beq.w	40ad88 <_dtoa_r+0x8a0>
  40a956:	4601      	mov	r1, r0
  40a958:	461a      	mov	r2, r3
  40a95a:	4648      	mov	r0, r9
  40a95c:	f001 ff7a 	bl	40c854 <__pow5mult>
  40a960:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40a962:	2b01      	cmp	r3, #1
  40a964:	4680      	mov	r8, r0
  40a966:	f340 82f8 	ble.w	40af5a <_dtoa_r+0xa72>
  40a96a:	2700      	movs	r7, #0
  40a96c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40a970:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40a974:	6918      	ldr	r0, [r3, #16]
  40a976:	f001 fe7d 	bl	40c674 <__hi0bits>
  40a97a:	f1c0 0020 	rsb	r0, r0, #32
  40a97e:	9a02      	ldr	r2, [sp, #8]
  40a980:	4410      	add	r0, r2
  40a982:	f010 001f 	ands.w	r0, r0, #31
  40a986:	f000 81f6 	beq.w	40ad76 <_dtoa_r+0x88e>
  40a98a:	f1c0 0320 	rsb	r3, r0, #32
  40a98e:	2b04      	cmp	r3, #4
  40a990:	f340 84ca 	ble.w	40b328 <_dtoa_r+0xe40>
  40a994:	9b05      	ldr	r3, [sp, #20]
  40a996:	f1c0 001c 	rsb	r0, r0, #28
  40a99a:	4403      	add	r3, r0
  40a99c:	9305      	str	r3, [sp, #20]
  40a99e:	4613      	mov	r3, r2
  40a9a0:	4403      	add	r3, r0
  40a9a2:	4405      	add	r5, r0
  40a9a4:	9302      	str	r3, [sp, #8]
  40a9a6:	9b05      	ldr	r3, [sp, #20]
  40a9a8:	2b00      	cmp	r3, #0
  40a9aa:	dd05      	ble.n	40a9b8 <_dtoa_r+0x4d0>
  40a9ac:	4621      	mov	r1, r4
  40a9ae:	461a      	mov	r2, r3
  40a9b0:	4648      	mov	r0, r9
  40a9b2:	f001 ff9f 	bl	40c8f4 <__lshift>
  40a9b6:	4604      	mov	r4, r0
  40a9b8:	9b02      	ldr	r3, [sp, #8]
  40a9ba:	2b00      	cmp	r3, #0
  40a9bc:	dd05      	ble.n	40a9ca <_dtoa_r+0x4e2>
  40a9be:	4641      	mov	r1, r8
  40a9c0:	461a      	mov	r2, r3
  40a9c2:	4648      	mov	r0, r9
  40a9c4:	f001 ff96 	bl	40c8f4 <__lshift>
  40a9c8:	4680      	mov	r8, r0
  40a9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a9cc:	2b00      	cmp	r3, #0
  40a9ce:	f040 827c 	bne.w	40aeca <_dtoa_r+0x9e2>
  40a9d2:	9b06      	ldr	r3, [sp, #24]
  40a9d4:	2b00      	cmp	r3, #0
  40a9d6:	f340 8295 	ble.w	40af04 <_dtoa_r+0xa1c>
  40a9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a9dc:	2b00      	cmp	r3, #0
  40a9de:	f040 81f5 	bne.w	40adcc <_dtoa_r+0x8e4>
  40a9e2:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40a9e6:	9f06      	ldr	r7, [sp, #24]
  40a9e8:	465d      	mov	r5, fp
  40a9ea:	e002      	b.n	40a9f2 <_dtoa_r+0x50a>
  40a9ec:	f001 fe02 	bl	40c5f4 <__multadd>
  40a9f0:	4604      	mov	r4, r0
  40a9f2:	4641      	mov	r1, r8
  40a9f4:	4620      	mov	r0, r4
  40a9f6:	f7ff fce3 	bl	40a3c0 <quorem>
  40a9fa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40a9fe:	f805 ab01 	strb.w	sl, [r5], #1
  40aa02:	ebcb 0305 	rsb	r3, fp, r5
  40aa06:	42bb      	cmp	r3, r7
  40aa08:	f04f 020a 	mov.w	r2, #10
  40aa0c:	f04f 0300 	mov.w	r3, #0
  40aa10:	4621      	mov	r1, r4
  40aa12:	4648      	mov	r0, r9
  40aa14:	dbea      	blt.n	40a9ec <_dtoa_r+0x504>
  40aa16:	9b07      	ldr	r3, [sp, #28]
  40aa18:	9a06      	ldr	r2, [sp, #24]
  40aa1a:	2a01      	cmp	r2, #1
  40aa1c:	bfac      	ite	ge
  40aa1e:	189b      	addge	r3, r3, r2
  40aa20:	3301      	addlt	r3, #1
  40aa22:	461d      	mov	r5, r3
  40aa24:	f04f 0b00 	mov.w	fp, #0
  40aa28:	4621      	mov	r1, r4
  40aa2a:	2201      	movs	r2, #1
  40aa2c:	4648      	mov	r0, r9
  40aa2e:	f001 ff61 	bl	40c8f4 <__lshift>
  40aa32:	4641      	mov	r1, r8
  40aa34:	9008      	str	r0, [sp, #32]
  40aa36:	f001 ffb5 	bl	40c9a4 <__mcmp>
  40aa3a:	2800      	cmp	r0, #0
  40aa3c:	f340 830d 	ble.w	40b05a <_dtoa_r+0xb72>
  40aa40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40aa44:	9907      	ldr	r1, [sp, #28]
  40aa46:	1e6b      	subs	r3, r5, #1
  40aa48:	e004      	b.n	40aa54 <_dtoa_r+0x56c>
  40aa4a:	428b      	cmp	r3, r1
  40aa4c:	f000 8278 	beq.w	40af40 <_dtoa_r+0xa58>
  40aa50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40aa54:	2a39      	cmp	r2, #57	; 0x39
  40aa56:	f103 0501 	add.w	r5, r3, #1
  40aa5a:	d0f6      	beq.n	40aa4a <_dtoa_r+0x562>
  40aa5c:	3201      	adds	r2, #1
  40aa5e:	701a      	strb	r2, [r3, #0]
  40aa60:	4641      	mov	r1, r8
  40aa62:	4648      	mov	r0, r9
  40aa64:	f001 fdbc 	bl	40c5e0 <_Bfree>
  40aa68:	2e00      	cmp	r6, #0
  40aa6a:	f43f af08 	beq.w	40a87e <_dtoa_r+0x396>
  40aa6e:	f1bb 0f00 	cmp.w	fp, #0
  40aa72:	d005      	beq.n	40aa80 <_dtoa_r+0x598>
  40aa74:	45b3      	cmp	fp, r6
  40aa76:	d003      	beq.n	40aa80 <_dtoa_r+0x598>
  40aa78:	4659      	mov	r1, fp
  40aa7a:	4648      	mov	r0, r9
  40aa7c:	f001 fdb0 	bl	40c5e0 <_Bfree>
  40aa80:	4631      	mov	r1, r6
  40aa82:	4648      	mov	r0, r9
  40aa84:	f001 fdac 	bl	40c5e0 <_Bfree>
  40aa88:	e6f9      	b.n	40a87e <_dtoa_r+0x396>
  40aa8a:	2301      	movs	r3, #1
  40aa8c:	930c      	str	r3, [sp, #48]	; 0x30
  40aa8e:	e5e3      	b.n	40a658 <_dtoa_r+0x170>
  40aa90:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40aa94:	4640      	mov	r0, r8
  40aa96:	f002 fe6f 	bl	40d778 <__aeabi_i2d>
  40aa9a:	4602      	mov	r2, r0
  40aa9c:	460b      	mov	r3, r1
  40aa9e:	4630      	mov	r0, r6
  40aaa0:	4639      	mov	r1, r7
  40aaa2:	f003 f937 	bl	40dd14 <__aeabi_dcmpeq>
  40aaa6:	2800      	cmp	r0, #0
  40aaa8:	f47f adc2 	bne.w	40a630 <_dtoa_r+0x148>
  40aaac:	f108 33ff 	add.w	r3, r8, #4294967295
  40aab0:	9304      	str	r3, [sp, #16]
  40aab2:	e5bd      	b.n	40a630 <_dtoa_r+0x148>
  40aab4:	9a05      	ldr	r2, [sp, #20]
  40aab6:	9b04      	ldr	r3, [sp, #16]
  40aab8:	1ad2      	subs	r2, r2, r3
  40aaba:	425b      	negs	r3, r3
  40aabc:	930a      	str	r3, [sp, #40]	; 0x28
  40aabe:	2300      	movs	r3, #0
  40aac0:	9205      	str	r2, [sp, #20]
  40aac2:	930b      	str	r3, [sp, #44]	; 0x2c
  40aac4:	e5da      	b.n	40a67c <_dtoa_r+0x194>
  40aac6:	425b      	negs	r3, r3
  40aac8:	9305      	str	r3, [sp, #20]
  40aaca:	2300      	movs	r3, #0
  40aacc:	9302      	str	r3, [sp, #8]
  40aace:	e5ca      	b.n	40a666 <_dtoa_r+0x17e>
  40aad0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40aad2:	9d05      	ldr	r5, [sp, #20]
  40aad4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40aad6:	e705      	b.n	40a8e4 <_dtoa_r+0x3fc>
  40aad8:	f1c3 0820 	rsb	r8, r3, #32
  40aadc:	fa0a f008 	lsl.w	r0, sl, r8
  40aae0:	e573      	b.n	40a5ca <_dtoa_r+0xe2>
  40aae2:	900c      	str	r0, [sp, #48]	; 0x30
  40aae4:	e5b8      	b.n	40a658 <_dtoa_r+0x170>
  40aae6:	bf00      	nop
  40aae8:	40240000 	.word	0x40240000
  40aaec:	2300      	movs	r3, #0
  40aaee:	9309      	str	r3, [sp, #36]	; 0x24
  40aaf0:	9b04      	ldr	r3, [sp, #16]
  40aaf2:	9a21      	ldr	r2, [sp, #132]	; 0x84
  40aaf4:	4413      	add	r3, r2
  40aaf6:	930d      	str	r3, [sp, #52]	; 0x34
  40aaf8:	3301      	adds	r3, #1
  40aafa:	2b00      	cmp	r3, #0
  40aafc:	9306      	str	r3, [sp, #24]
  40aafe:	f340 8283 	ble.w	40b008 <_dtoa_r+0xb20>
  40ab02:	9c06      	ldr	r4, [sp, #24]
  40ab04:	4626      	mov	r6, r4
  40ab06:	2100      	movs	r1, #0
  40ab08:	2e17      	cmp	r6, #23
  40ab0a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40ab0e:	d90b      	bls.n	40ab28 <_dtoa_r+0x640>
  40ab10:	2201      	movs	r2, #1
  40ab12:	2304      	movs	r3, #4
  40ab14:	005b      	lsls	r3, r3, #1
  40ab16:	f103 0014 	add.w	r0, r3, #20
  40ab1a:	42b0      	cmp	r0, r6
  40ab1c:	4611      	mov	r1, r2
  40ab1e:	f102 0201 	add.w	r2, r2, #1
  40ab22:	d9f7      	bls.n	40ab14 <_dtoa_r+0x62c>
  40ab24:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40ab28:	4648      	mov	r0, r9
  40ab2a:	f001 fd33 	bl	40c594 <_Balloc>
  40ab2e:	2c0e      	cmp	r4, #14
  40ab30:	9007      	str	r0, [sp, #28]
  40ab32:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40ab36:	f63f ade0 	bhi.w	40a6fa <_dtoa_r+0x212>
  40ab3a:	2d00      	cmp	r5, #0
  40ab3c:	f43f addd 	beq.w	40a6fa <_dtoa_r+0x212>
  40ab40:	9904      	ldr	r1, [sp, #16]
  40ab42:	4657      	mov	r7, sl
  40ab44:	46d8      	mov	r8, fp
  40ab46:	2900      	cmp	r1, #0
  40ab48:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  40ab4c:	f340 8292 	ble.w	40b074 <_dtoa_r+0xb8c>
  40ab50:	4b91      	ldr	r3, [pc, #580]	; (40ad98 <_dtoa_r+0x8b0>)
  40ab52:	f001 020f 	and.w	r2, r1, #15
  40ab56:	110e      	asrs	r6, r1, #4
  40ab58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40ab5c:	06f0      	lsls	r0, r6, #27
  40ab5e:	e9d3 4500 	ldrd	r4, r5, [r3]
  40ab62:	f140 824c 	bpl.w	40affe <_dtoa_r+0xb16>
  40ab66:	4b8d      	ldr	r3, [pc, #564]	; (40ad9c <_dtoa_r+0x8b4>)
  40ab68:	4650      	mov	r0, sl
  40ab6a:	4659      	mov	r1, fp
  40ab6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40ab70:	f002 ff92 	bl	40da98 <__aeabi_ddiv>
  40ab74:	f006 060f 	and.w	r6, r6, #15
  40ab78:	4682      	mov	sl, r0
  40ab7a:	468b      	mov	fp, r1
  40ab7c:	f04f 0803 	mov.w	r8, #3
  40ab80:	b186      	cbz	r6, 40aba4 <_dtoa_r+0x6bc>
  40ab82:	4f86      	ldr	r7, [pc, #536]	; (40ad9c <_dtoa_r+0x8b4>)
  40ab84:	07f1      	lsls	r1, r6, #31
  40ab86:	d509      	bpl.n	40ab9c <_dtoa_r+0x6b4>
  40ab88:	4620      	mov	r0, r4
  40ab8a:	4629      	mov	r1, r5
  40ab8c:	e9d7 2300 	ldrd	r2, r3, [r7]
  40ab90:	f002 fe58 	bl	40d844 <__aeabi_dmul>
  40ab94:	f108 0801 	add.w	r8, r8, #1
  40ab98:	4604      	mov	r4, r0
  40ab9a:	460d      	mov	r5, r1
  40ab9c:	1076      	asrs	r6, r6, #1
  40ab9e:	f107 0708 	add.w	r7, r7, #8
  40aba2:	d1ef      	bne.n	40ab84 <_dtoa_r+0x69c>
  40aba4:	4622      	mov	r2, r4
  40aba6:	462b      	mov	r3, r5
  40aba8:	4650      	mov	r0, sl
  40abaa:	4659      	mov	r1, fp
  40abac:	f002 ff74 	bl	40da98 <__aeabi_ddiv>
  40abb0:	4606      	mov	r6, r0
  40abb2:	460f      	mov	r7, r1
  40abb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40abb6:	b143      	cbz	r3, 40abca <_dtoa_r+0x6e2>
  40abb8:	2200      	movs	r2, #0
  40abba:	4b79      	ldr	r3, [pc, #484]	; (40ada0 <_dtoa_r+0x8b8>)
  40abbc:	4630      	mov	r0, r6
  40abbe:	4639      	mov	r1, r7
  40abc0:	f003 f8b2 	bl	40dd28 <__aeabi_dcmplt>
  40abc4:	2800      	cmp	r0, #0
  40abc6:	f040 8320 	bne.w	40b20a <_dtoa_r+0xd22>
  40abca:	4640      	mov	r0, r8
  40abcc:	f002 fdd4 	bl	40d778 <__aeabi_i2d>
  40abd0:	4632      	mov	r2, r6
  40abd2:	463b      	mov	r3, r7
  40abd4:	f002 fe36 	bl	40d844 <__aeabi_dmul>
  40abd8:	4b72      	ldr	r3, [pc, #456]	; (40ada4 <_dtoa_r+0x8bc>)
  40abda:	2200      	movs	r2, #0
  40abdc:	f002 fc80 	bl	40d4e0 <__adddf3>
  40abe0:	9b06      	ldr	r3, [sp, #24]
  40abe2:	4604      	mov	r4, r0
  40abe4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40abe8:	2b00      	cmp	r3, #0
  40abea:	f000 81df 	beq.w	40afac <_dtoa_r+0xac4>
  40abee:	9b04      	ldr	r3, [sp, #16]
  40abf0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40abf4:	9311      	str	r3, [sp, #68]	; 0x44
  40abf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40abf8:	2b00      	cmp	r3, #0
  40abfa:	f000 8297 	beq.w	40b12c <_dtoa_r+0xc44>
  40abfe:	4b66      	ldr	r3, [pc, #408]	; (40ad98 <_dtoa_r+0x8b0>)
  40ac00:	4969      	ldr	r1, [pc, #420]	; (40ada8 <_dtoa_r+0x8c0>)
  40ac02:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40ac06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40ac0a:	2000      	movs	r0, #0
  40ac0c:	f002 ff44 	bl	40da98 <__aeabi_ddiv>
  40ac10:	4622      	mov	r2, r4
  40ac12:	462b      	mov	r3, r5
  40ac14:	f002 fc62 	bl	40d4dc <__aeabi_dsub>
  40ac18:	4682      	mov	sl, r0
  40ac1a:	468b      	mov	fp, r1
  40ac1c:	4630      	mov	r0, r6
  40ac1e:	4639      	mov	r1, r7
  40ac20:	f003 f8c0 	bl	40dda4 <__aeabi_d2iz>
  40ac24:	4604      	mov	r4, r0
  40ac26:	f002 fda7 	bl	40d778 <__aeabi_i2d>
  40ac2a:	4602      	mov	r2, r0
  40ac2c:	460b      	mov	r3, r1
  40ac2e:	4630      	mov	r0, r6
  40ac30:	4639      	mov	r1, r7
  40ac32:	f002 fc53 	bl	40d4dc <__aeabi_dsub>
  40ac36:	3430      	adds	r4, #48	; 0x30
  40ac38:	9d07      	ldr	r5, [sp, #28]
  40ac3a:	b2e4      	uxtb	r4, r4
  40ac3c:	4606      	mov	r6, r0
  40ac3e:	460f      	mov	r7, r1
  40ac40:	702c      	strb	r4, [r5, #0]
  40ac42:	4602      	mov	r2, r0
  40ac44:	460b      	mov	r3, r1
  40ac46:	4650      	mov	r0, sl
  40ac48:	4659      	mov	r1, fp
  40ac4a:	3501      	adds	r5, #1
  40ac4c:	f003 f88a 	bl	40dd64 <__aeabi_dcmpgt>
  40ac50:	2800      	cmp	r0, #0
  40ac52:	d14c      	bne.n	40acee <_dtoa_r+0x806>
  40ac54:	4632      	mov	r2, r6
  40ac56:	463b      	mov	r3, r7
  40ac58:	2000      	movs	r0, #0
  40ac5a:	4951      	ldr	r1, [pc, #324]	; (40ada0 <_dtoa_r+0x8b8>)
  40ac5c:	f002 fc3e 	bl	40d4dc <__aeabi_dsub>
  40ac60:	4602      	mov	r2, r0
  40ac62:	460b      	mov	r3, r1
  40ac64:	4650      	mov	r0, sl
  40ac66:	4659      	mov	r1, fp
  40ac68:	f003 f87c 	bl	40dd64 <__aeabi_dcmpgt>
  40ac6c:	2800      	cmp	r0, #0
  40ac6e:	f040 830d 	bne.w	40b28c <_dtoa_r+0xda4>
  40ac72:	f1b8 0f01 	cmp.w	r8, #1
  40ac76:	f340 81b3 	ble.w	40afe0 <_dtoa_r+0xaf8>
  40ac7a:	9b07      	ldr	r3, [sp, #28]
  40ac7c:	4498      	add	r8, r3
  40ac7e:	e00d      	b.n	40ac9c <_dtoa_r+0x7b4>
  40ac80:	2000      	movs	r0, #0
  40ac82:	4947      	ldr	r1, [pc, #284]	; (40ada0 <_dtoa_r+0x8b8>)
  40ac84:	f002 fc2a 	bl	40d4dc <__aeabi_dsub>
  40ac88:	4652      	mov	r2, sl
  40ac8a:	465b      	mov	r3, fp
  40ac8c:	f003 f84c 	bl	40dd28 <__aeabi_dcmplt>
  40ac90:	2800      	cmp	r0, #0
  40ac92:	f040 82fb 	bne.w	40b28c <_dtoa_r+0xda4>
  40ac96:	4545      	cmp	r5, r8
  40ac98:	f000 81a2 	beq.w	40afe0 <_dtoa_r+0xaf8>
  40ac9c:	4650      	mov	r0, sl
  40ac9e:	4659      	mov	r1, fp
  40aca0:	2200      	movs	r2, #0
  40aca2:	4b42      	ldr	r3, [pc, #264]	; (40adac <_dtoa_r+0x8c4>)
  40aca4:	f002 fdce 	bl	40d844 <__aeabi_dmul>
  40aca8:	2200      	movs	r2, #0
  40acaa:	4b40      	ldr	r3, [pc, #256]	; (40adac <_dtoa_r+0x8c4>)
  40acac:	4682      	mov	sl, r0
  40acae:	468b      	mov	fp, r1
  40acb0:	4630      	mov	r0, r6
  40acb2:	4639      	mov	r1, r7
  40acb4:	f002 fdc6 	bl	40d844 <__aeabi_dmul>
  40acb8:	460f      	mov	r7, r1
  40acba:	4606      	mov	r6, r0
  40acbc:	f003 f872 	bl	40dda4 <__aeabi_d2iz>
  40acc0:	4604      	mov	r4, r0
  40acc2:	f002 fd59 	bl	40d778 <__aeabi_i2d>
  40acc6:	4602      	mov	r2, r0
  40acc8:	460b      	mov	r3, r1
  40acca:	4630      	mov	r0, r6
  40accc:	4639      	mov	r1, r7
  40acce:	f002 fc05 	bl	40d4dc <__aeabi_dsub>
  40acd2:	3430      	adds	r4, #48	; 0x30
  40acd4:	b2e4      	uxtb	r4, r4
  40acd6:	4652      	mov	r2, sl
  40acd8:	465b      	mov	r3, fp
  40acda:	f805 4b01 	strb.w	r4, [r5], #1
  40acde:	4606      	mov	r6, r0
  40ace0:	460f      	mov	r7, r1
  40ace2:	f003 f821 	bl	40dd28 <__aeabi_dcmplt>
  40ace6:	4632      	mov	r2, r6
  40ace8:	463b      	mov	r3, r7
  40acea:	2800      	cmp	r0, #0
  40acec:	d0c8      	beq.n	40ac80 <_dtoa_r+0x798>
  40acee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40acf0:	9304      	str	r3, [sp, #16]
  40acf2:	e5c4      	b.n	40a87e <_dtoa_r+0x396>
  40acf4:	2300      	movs	r3, #0
  40acf6:	9309      	str	r3, [sp, #36]	; 0x24
  40acf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40acfa:	2b00      	cmp	r3, #0
  40acfc:	f340 8189 	ble.w	40b012 <_dtoa_r+0xb2a>
  40ad00:	461e      	mov	r6, r3
  40ad02:	461c      	mov	r4, r3
  40ad04:	930d      	str	r3, [sp, #52]	; 0x34
  40ad06:	9306      	str	r3, [sp, #24]
  40ad08:	e6fd      	b.n	40ab06 <_dtoa_r+0x61e>
  40ad0a:	2301      	movs	r3, #1
  40ad0c:	9309      	str	r3, [sp, #36]	; 0x24
  40ad0e:	e7f3      	b.n	40acf8 <_dtoa_r+0x810>
  40ad10:	9408      	str	r4, [sp, #32]
  40ad12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ad14:	9908      	ldr	r1, [sp, #32]
  40ad16:	4648      	mov	r0, r9
  40ad18:	f001 fd9c 	bl	40c854 <__pow5mult>
  40ad1c:	4604      	mov	r4, r0
  40ad1e:	e611      	b.n	40a944 <_dtoa_r+0x45c>
  40ad20:	9b06      	ldr	r3, [sp, #24]
  40ad22:	2b00      	cmp	r3, #0
  40ad24:	f73f acfc 	bgt.w	40a720 <_dtoa_r+0x238>
  40ad28:	f040 82da 	bne.w	40b2e0 <_dtoa_r+0xdf8>
  40ad2c:	2200      	movs	r2, #0
  40ad2e:	4b20      	ldr	r3, [pc, #128]	; (40adb0 <_dtoa_r+0x8c8>)
  40ad30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40ad34:	f002 fd86 	bl	40d844 <__aeabi_dmul>
  40ad38:	4652      	mov	r2, sl
  40ad3a:	465b      	mov	r3, fp
  40ad3c:	f003 f808 	bl	40dd50 <__aeabi_dcmpge>
  40ad40:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40ad44:	4646      	mov	r6, r8
  40ad46:	2800      	cmp	r0, #0
  40ad48:	f000 80f2 	beq.w	40af30 <_dtoa_r+0xa48>
  40ad4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40ad4e:	9d07      	ldr	r5, [sp, #28]
  40ad50:	43db      	mvns	r3, r3
  40ad52:	9304      	str	r3, [sp, #16]
  40ad54:	4641      	mov	r1, r8
  40ad56:	4648      	mov	r0, r9
  40ad58:	f001 fc42 	bl	40c5e0 <_Bfree>
  40ad5c:	2e00      	cmp	r6, #0
  40ad5e:	f43f ad8e 	beq.w	40a87e <_dtoa_r+0x396>
  40ad62:	e68d      	b.n	40aa80 <_dtoa_r+0x598>
  40ad64:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40ad66:	2a00      	cmp	r2, #0
  40ad68:	f000 8241 	beq.w	40b1ee <_dtoa_r+0xd06>
  40ad6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40ad70:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40ad72:	9d05      	ldr	r5, [sp, #20]
  40ad74:	e5ab      	b.n	40a8ce <_dtoa_r+0x3e6>
  40ad76:	201c      	movs	r0, #28
  40ad78:	9b05      	ldr	r3, [sp, #20]
  40ad7a:	4403      	add	r3, r0
  40ad7c:	9305      	str	r3, [sp, #20]
  40ad7e:	9b02      	ldr	r3, [sp, #8]
  40ad80:	4403      	add	r3, r0
  40ad82:	4405      	add	r5, r0
  40ad84:	9302      	str	r3, [sp, #8]
  40ad86:	e60e      	b.n	40a9a6 <_dtoa_r+0x4be>
  40ad88:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40ad8a:	2b01      	cmp	r3, #1
  40ad8c:	f340 8282 	ble.w	40b294 <_dtoa_r+0xdac>
  40ad90:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40ad92:	2001      	movs	r0, #1
  40ad94:	e5f3      	b.n	40a97e <_dtoa_r+0x496>
  40ad96:	bf00      	nop
  40ad98:	0040f0a8 	.word	0x0040f0a8
  40ad9c:	0040f170 	.word	0x0040f170
  40ada0:	3ff00000 	.word	0x3ff00000
  40ada4:	401c0000 	.word	0x401c0000
  40ada8:	3fe00000 	.word	0x3fe00000
  40adac:	40240000 	.word	0x40240000
  40adb0:	40140000 	.word	0x40140000
  40adb4:	4631      	mov	r1, r6
  40adb6:	2300      	movs	r3, #0
  40adb8:	220a      	movs	r2, #10
  40adba:	4648      	mov	r0, r9
  40adbc:	f001 fc1a 	bl	40c5f4 <__multadd>
  40adc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40adc2:	2b00      	cmp	r3, #0
  40adc4:	4606      	mov	r6, r0
  40adc6:	f340 8297 	ble.w	40b2f8 <_dtoa_r+0xe10>
  40adca:	9306      	str	r3, [sp, #24]
  40adcc:	2d00      	cmp	r5, #0
  40adce:	dd05      	ble.n	40addc <_dtoa_r+0x8f4>
  40add0:	4631      	mov	r1, r6
  40add2:	462a      	mov	r2, r5
  40add4:	4648      	mov	r0, r9
  40add6:	f001 fd8d 	bl	40c8f4 <__lshift>
  40adda:	4606      	mov	r6, r0
  40addc:	2f00      	cmp	r7, #0
  40adde:	f040 817c 	bne.w	40b0da <_dtoa_r+0xbf2>
  40ade2:	9605      	str	r6, [sp, #20]
  40ade4:	9b06      	ldr	r3, [sp, #24]
  40ade6:	9a07      	ldr	r2, [sp, #28]
  40ade8:	f8dd b014 	ldr.w	fp, [sp, #20]
  40adec:	3b01      	subs	r3, #1
  40adee:	18d3      	adds	r3, r2, r3
  40adf0:	9308      	str	r3, [sp, #32]
  40adf2:	f00a 0301 	and.w	r3, sl, #1
  40adf6:	9309      	str	r3, [sp, #36]	; 0x24
  40adf8:	4617      	mov	r7, r2
  40adfa:	46c2      	mov	sl, r8
  40adfc:	4651      	mov	r1, sl
  40adfe:	4620      	mov	r0, r4
  40ae00:	f7ff fade 	bl	40a3c0 <quorem>
  40ae04:	4631      	mov	r1, r6
  40ae06:	4605      	mov	r5, r0
  40ae08:	4620      	mov	r0, r4
  40ae0a:	f001 fdcb 	bl	40c9a4 <__mcmp>
  40ae0e:	465a      	mov	r2, fp
  40ae10:	9002      	str	r0, [sp, #8]
  40ae12:	4651      	mov	r1, sl
  40ae14:	4648      	mov	r0, r9
  40ae16:	f001 fde5 	bl	40c9e4 <__mdiff>
  40ae1a:	68c2      	ldr	r2, [r0, #12]
  40ae1c:	4680      	mov	r8, r0
  40ae1e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40ae22:	2a00      	cmp	r2, #0
  40ae24:	d149      	bne.n	40aeba <_dtoa_r+0x9d2>
  40ae26:	4601      	mov	r1, r0
  40ae28:	4620      	mov	r0, r4
  40ae2a:	9306      	str	r3, [sp, #24]
  40ae2c:	f001 fdba 	bl	40c9a4 <__mcmp>
  40ae30:	4641      	mov	r1, r8
  40ae32:	9005      	str	r0, [sp, #20]
  40ae34:	4648      	mov	r0, r9
  40ae36:	f001 fbd3 	bl	40c5e0 <_Bfree>
  40ae3a:	9a05      	ldr	r2, [sp, #20]
  40ae3c:	9b06      	ldr	r3, [sp, #24]
  40ae3e:	b92a      	cbnz	r2, 40ae4c <_dtoa_r+0x964>
  40ae40:	9920      	ldr	r1, [sp, #128]	; 0x80
  40ae42:	b919      	cbnz	r1, 40ae4c <_dtoa_r+0x964>
  40ae44:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ae46:	2900      	cmp	r1, #0
  40ae48:	f000 8236 	beq.w	40b2b8 <_dtoa_r+0xdd0>
  40ae4c:	9902      	ldr	r1, [sp, #8]
  40ae4e:	2900      	cmp	r1, #0
  40ae50:	f2c0 80e4 	blt.w	40b01c <_dtoa_r+0xb34>
  40ae54:	d105      	bne.n	40ae62 <_dtoa_r+0x97a>
  40ae56:	9920      	ldr	r1, [sp, #128]	; 0x80
  40ae58:	b919      	cbnz	r1, 40ae62 <_dtoa_r+0x97a>
  40ae5a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ae5c:	2900      	cmp	r1, #0
  40ae5e:	f000 80dd 	beq.w	40b01c <_dtoa_r+0xb34>
  40ae62:	2a00      	cmp	r2, #0
  40ae64:	f300 814d 	bgt.w	40b102 <_dtoa_r+0xc1a>
  40ae68:	9a08      	ldr	r2, [sp, #32]
  40ae6a:	703b      	strb	r3, [r7, #0]
  40ae6c:	f107 0801 	add.w	r8, r7, #1
  40ae70:	4297      	cmp	r7, r2
  40ae72:	4645      	mov	r5, r8
  40ae74:	f000 8154 	beq.w	40b120 <_dtoa_r+0xc38>
  40ae78:	4621      	mov	r1, r4
  40ae7a:	2300      	movs	r3, #0
  40ae7c:	220a      	movs	r2, #10
  40ae7e:	4648      	mov	r0, r9
  40ae80:	f001 fbb8 	bl	40c5f4 <__multadd>
  40ae84:	455e      	cmp	r6, fp
  40ae86:	4604      	mov	r4, r0
  40ae88:	4631      	mov	r1, r6
  40ae8a:	f04f 0300 	mov.w	r3, #0
  40ae8e:	f04f 020a 	mov.w	r2, #10
  40ae92:	4648      	mov	r0, r9
  40ae94:	d00b      	beq.n	40aeae <_dtoa_r+0x9c6>
  40ae96:	f001 fbad 	bl	40c5f4 <__multadd>
  40ae9a:	4659      	mov	r1, fp
  40ae9c:	4606      	mov	r6, r0
  40ae9e:	2300      	movs	r3, #0
  40aea0:	220a      	movs	r2, #10
  40aea2:	4648      	mov	r0, r9
  40aea4:	f001 fba6 	bl	40c5f4 <__multadd>
  40aea8:	4647      	mov	r7, r8
  40aeaa:	4683      	mov	fp, r0
  40aeac:	e7a6      	b.n	40adfc <_dtoa_r+0x914>
  40aeae:	f001 fba1 	bl	40c5f4 <__multadd>
  40aeb2:	4647      	mov	r7, r8
  40aeb4:	4606      	mov	r6, r0
  40aeb6:	4683      	mov	fp, r0
  40aeb8:	e7a0      	b.n	40adfc <_dtoa_r+0x914>
  40aeba:	4601      	mov	r1, r0
  40aebc:	4648      	mov	r0, r9
  40aebe:	9305      	str	r3, [sp, #20]
  40aec0:	f001 fb8e 	bl	40c5e0 <_Bfree>
  40aec4:	2201      	movs	r2, #1
  40aec6:	9b05      	ldr	r3, [sp, #20]
  40aec8:	e7c0      	b.n	40ae4c <_dtoa_r+0x964>
  40aeca:	4641      	mov	r1, r8
  40aecc:	4620      	mov	r0, r4
  40aece:	f001 fd69 	bl	40c9a4 <__mcmp>
  40aed2:	2800      	cmp	r0, #0
  40aed4:	f6bf ad7d 	bge.w	40a9d2 <_dtoa_r+0x4ea>
  40aed8:	4621      	mov	r1, r4
  40aeda:	9c04      	ldr	r4, [sp, #16]
  40aedc:	2300      	movs	r3, #0
  40aede:	3c01      	subs	r4, #1
  40aee0:	220a      	movs	r2, #10
  40aee2:	4648      	mov	r0, r9
  40aee4:	9404      	str	r4, [sp, #16]
  40aee6:	f001 fb85 	bl	40c5f4 <__multadd>
  40aeea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aeec:	4604      	mov	r4, r0
  40aeee:	2b00      	cmp	r3, #0
  40aef0:	f47f af60 	bne.w	40adb4 <_dtoa_r+0x8cc>
  40aef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40aef6:	2b00      	cmp	r3, #0
  40aef8:	f340 81f6 	ble.w	40b2e8 <_dtoa_r+0xe00>
  40aefc:	9306      	str	r3, [sp, #24]
  40aefe:	e570      	b.n	40a9e2 <_dtoa_r+0x4fa>
  40af00:	9c08      	ldr	r4, [sp, #32]
  40af02:	e51f      	b.n	40a944 <_dtoa_r+0x45c>
  40af04:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40af06:	2b02      	cmp	r3, #2
  40af08:	f77f ad67 	ble.w	40a9da <_dtoa_r+0x4f2>
  40af0c:	9b06      	ldr	r3, [sp, #24]
  40af0e:	2b00      	cmp	r3, #0
  40af10:	f040 8179 	bne.w	40b206 <_dtoa_r+0xd1e>
  40af14:	4641      	mov	r1, r8
  40af16:	2205      	movs	r2, #5
  40af18:	4648      	mov	r0, r9
  40af1a:	f001 fb6b 	bl	40c5f4 <__multadd>
  40af1e:	4601      	mov	r1, r0
  40af20:	4680      	mov	r8, r0
  40af22:	4620      	mov	r0, r4
  40af24:	f001 fd3e 	bl	40c9a4 <__mcmp>
  40af28:	2800      	cmp	r0, #0
  40af2a:	9408      	str	r4, [sp, #32]
  40af2c:	f77f af0e 	ble.w	40ad4c <_dtoa_r+0x864>
  40af30:	9a04      	ldr	r2, [sp, #16]
  40af32:	9907      	ldr	r1, [sp, #28]
  40af34:	2331      	movs	r3, #49	; 0x31
  40af36:	3201      	adds	r2, #1
  40af38:	9204      	str	r2, [sp, #16]
  40af3a:	700b      	strb	r3, [r1, #0]
  40af3c:	1c4d      	adds	r5, r1, #1
  40af3e:	e709      	b.n	40ad54 <_dtoa_r+0x86c>
  40af40:	9a04      	ldr	r2, [sp, #16]
  40af42:	3201      	adds	r2, #1
  40af44:	9204      	str	r2, [sp, #16]
  40af46:	9a07      	ldr	r2, [sp, #28]
  40af48:	2331      	movs	r3, #49	; 0x31
  40af4a:	7013      	strb	r3, [r2, #0]
  40af4c:	e588      	b.n	40aa60 <_dtoa_r+0x578>
  40af4e:	2301      	movs	r3, #1
  40af50:	9309      	str	r3, [sp, #36]	; 0x24
  40af52:	e5cd      	b.n	40aaf0 <_dtoa_r+0x608>
  40af54:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40af58:	e491      	b.n	40a87e <_dtoa_r+0x396>
  40af5a:	f1ba 0f00 	cmp.w	sl, #0
  40af5e:	f47f ad04 	bne.w	40a96a <_dtoa_r+0x482>
  40af62:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40af66:	2b00      	cmp	r3, #0
  40af68:	f040 813f 	bne.w	40b1ea <_dtoa_r+0xd02>
  40af6c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40af70:	0d3f      	lsrs	r7, r7, #20
  40af72:	053f      	lsls	r7, r7, #20
  40af74:	b137      	cbz	r7, 40af84 <_dtoa_r+0xa9c>
  40af76:	9b05      	ldr	r3, [sp, #20]
  40af78:	3301      	adds	r3, #1
  40af7a:	9305      	str	r3, [sp, #20]
  40af7c:	9b02      	ldr	r3, [sp, #8]
  40af7e:	3301      	adds	r3, #1
  40af80:	9302      	str	r3, [sp, #8]
  40af82:	2701      	movs	r7, #1
  40af84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40af86:	2001      	movs	r0, #1
  40af88:	2b00      	cmp	r3, #0
  40af8a:	f43f acf8 	beq.w	40a97e <_dtoa_r+0x496>
  40af8e:	e4ed      	b.n	40a96c <_dtoa_r+0x484>
  40af90:	4640      	mov	r0, r8
  40af92:	f002 fbf1 	bl	40d778 <__aeabi_i2d>
  40af96:	4632      	mov	r2, r6
  40af98:	463b      	mov	r3, r7
  40af9a:	f002 fc53 	bl	40d844 <__aeabi_dmul>
  40af9e:	2200      	movs	r2, #0
  40afa0:	4bbf      	ldr	r3, [pc, #764]	; (40b2a0 <_dtoa_r+0xdb8>)
  40afa2:	f002 fa9d 	bl	40d4e0 <__adddf3>
  40afa6:	4604      	mov	r4, r0
  40afa8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40afac:	4630      	mov	r0, r6
  40afae:	4639      	mov	r1, r7
  40afb0:	2200      	movs	r2, #0
  40afb2:	4bbc      	ldr	r3, [pc, #752]	; (40b2a4 <_dtoa_r+0xdbc>)
  40afb4:	f002 fa92 	bl	40d4dc <__aeabi_dsub>
  40afb8:	4622      	mov	r2, r4
  40afba:	462b      	mov	r3, r5
  40afbc:	4606      	mov	r6, r0
  40afbe:	460f      	mov	r7, r1
  40afc0:	f002 fed0 	bl	40dd64 <__aeabi_dcmpgt>
  40afc4:	4680      	mov	r8, r0
  40afc6:	2800      	cmp	r0, #0
  40afc8:	f040 8105 	bne.w	40b1d6 <_dtoa_r+0xcee>
  40afcc:	4622      	mov	r2, r4
  40afce:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  40afd2:	4630      	mov	r0, r6
  40afd4:	4639      	mov	r1, r7
  40afd6:	f002 fea7 	bl	40dd28 <__aeabi_dcmplt>
  40afda:	b108      	cbz	r0, 40afe0 <_dtoa_r+0xaf8>
  40afdc:	4646      	mov	r6, r8
  40afde:	e6b5      	b.n	40ad4c <_dtoa_r+0x864>
  40afe0:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40afe4:	f7ff bb89 	b.w	40a6fa <_dtoa_r+0x212>
  40afe8:	9807      	ldr	r0, [sp, #28]
  40afea:	f7ff baae 	b.w	40a54a <_dtoa_r+0x62>
  40afee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40aff0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40aff2:	970a      	str	r7, [sp, #40]	; 0x28
  40aff4:	1afb      	subs	r3, r7, r3
  40aff6:	441a      	add	r2, r3
  40aff8:	920b      	str	r2, [sp, #44]	; 0x2c
  40affa:	2700      	movs	r7, #0
  40affc:	e461      	b.n	40a8c2 <_dtoa_r+0x3da>
  40affe:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40b002:	f04f 0802 	mov.w	r8, #2
  40b006:	e5bb      	b.n	40ab80 <_dtoa_r+0x698>
  40b008:	461c      	mov	r4, r3
  40b00a:	2100      	movs	r1, #0
  40b00c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40b010:	e58a      	b.n	40ab28 <_dtoa_r+0x640>
  40b012:	2401      	movs	r4, #1
  40b014:	9421      	str	r4, [sp, #132]	; 0x84
  40b016:	940d      	str	r4, [sp, #52]	; 0x34
  40b018:	9406      	str	r4, [sp, #24]
  40b01a:	e7f6      	b.n	40b00a <_dtoa_r+0xb22>
  40b01c:	2a00      	cmp	r2, #0
  40b01e:	46d0      	mov	r8, sl
  40b020:	f8cd b014 	str.w	fp, [sp, #20]
  40b024:	469a      	mov	sl, r3
  40b026:	dd11      	ble.n	40b04c <_dtoa_r+0xb64>
  40b028:	4621      	mov	r1, r4
  40b02a:	2201      	movs	r2, #1
  40b02c:	4648      	mov	r0, r9
  40b02e:	f001 fc61 	bl	40c8f4 <__lshift>
  40b032:	4641      	mov	r1, r8
  40b034:	4604      	mov	r4, r0
  40b036:	f001 fcb5 	bl	40c9a4 <__mcmp>
  40b03a:	2800      	cmp	r0, #0
  40b03c:	f340 8149 	ble.w	40b2d2 <_dtoa_r+0xdea>
  40b040:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40b044:	f000 8106 	beq.w	40b254 <_dtoa_r+0xd6c>
  40b048:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40b04c:	46b3      	mov	fp, r6
  40b04e:	f887 a000 	strb.w	sl, [r7]
  40b052:	1c7d      	adds	r5, r7, #1
  40b054:	9e05      	ldr	r6, [sp, #20]
  40b056:	9408      	str	r4, [sp, #32]
  40b058:	e502      	b.n	40aa60 <_dtoa_r+0x578>
  40b05a:	d104      	bne.n	40b066 <_dtoa_r+0xb7e>
  40b05c:	f01a 0f01 	tst.w	sl, #1
  40b060:	d001      	beq.n	40b066 <_dtoa_r+0xb7e>
  40b062:	e4ed      	b.n	40aa40 <_dtoa_r+0x558>
  40b064:	4615      	mov	r5, r2
  40b066:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40b06a:	2b30      	cmp	r3, #48	; 0x30
  40b06c:	f105 32ff 	add.w	r2, r5, #4294967295
  40b070:	d0f8      	beq.n	40b064 <_dtoa_r+0xb7c>
  40b072:	e4f5      	b.n	40aa60 <_dtoa_r+0x578>
  40b074:	9b04      	ldr	r3, [sp, #16]
  40b076:	425c      	negs	r4, r3
  40b078:	2c00      	cmp	r4, #0
  40b07a:	f000 80bf 	beq.w	40b1fc <_dtoa_r+0xd14>
  40b07e:	4b8a      	ldr	r3, [pc, #552]	; (40b2a8 <_dtoa_r+0xdc0>)
  40b080:	f004 020f 	and.w	r2, r4, #15
  40b084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b088:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b08c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40b090:	f002 fbd8 	bl	40d844 <__aeabi_dmul>
  40b094:	1124      	asrs	r4, r4, #4
  40b096:	4606      	mov	r6, r0
  40b098:	460f      	mov	r7, r1
  40b09a:	f000 812a 	beq.w	40b2f2 <_dtoa_r+0xe0a>
  40b09e:	4d83      	ldr	r5, [pc, #524]	; (40b2ac <_dtoa_r+0xdc4>)
  40b0a0:	f04f 0802 	mov.w	r8, #2
  40b0a4:	07e2      	lsls	r2, r4, #31
  40b0a6:	d509      	bpl.n	40b0bc <_dtoa_r+0xbd4>
  40b0a8:	4630      	mov	r0, r6
  40b0aa:	4639      	mov	r1, r7
  40b0ac:	e9d5 2300 	ldrd	r2, r3, [r5]
  40b0b0:	f002 fbc8 	bl	40d844 <__aeabi_dmul>
  40b0b4:	f108 0801 	add.w	r8, r8, #1
  40b0b8:	4606      	mov	r6, r0
  40b0ba:	460f      	mov	r7, r1
  40b0bc:	1064      	asrs	r4, r4, #1
  40b0be:	f105 0508 	add.w	r5, r5, #8
  40b0c2:	d1ef      	bne.n	40b0a4 <_dtoa_r+0xbbc>
  40b0c4:	e576      	b.n	40abb4 <_dtoa_r+0x6cc>
  40b0c6:	9907      	ldr	r1, [sp, #28]
  40b0c8:	2230      	movs	r2, #48	; 0x30
  40b0ca:	700a      	strb	r2, [r1, #0]
  40b0cc:	9a04      	ldr	r2, [sp, #16]
  40b0ce:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40b0d2:	3201      	adds	r2, #1
  40b0d4:	9204      	str	r2, [sp, #16]
  40b0d6:	f7ff bbd0 	b.w	40a87a <_dtoa_r+0x392>
  40b0da:	6871      	ldr	r1, [r6, #4]
  40b0dc:	4648      	mov	r0, r9
  40b0de:	f001 fa59 	bl	40c594 <_Balloc>
  40b0e2:	6933      	ldr	r3, [r6, #16]
  40b0e4:	1c9a      	adds	r2, r3, #2
  40b0e6:	4605      	mov	r5, r0
  40b0e8:	0092      	lsls	r2, r2, #2
  40b0ea:	f106 010c 	add.w	r1, r6, #12
  40b0ee:	300c      	adds	r0, #12
  40b0f0:	f001 f94e 	bl	40c390 <memcpy>
  40b0f4:	4629      	mov	r1, r5
  40b0f6:	2201      	movs	r2, #1
  40b0f8:	4648      	mov	r0, r9
  40b0fa:	f001 fbfb 	bl	40c8f4 <__lshift>
  40b0fe:	9005      	str	r0, [sp, #20]
  40b100:	e670      	b.n	40ade4 <_dtoa_r+0x8fc>
  40b102:	2b39      	cmp	r3, #57	; 0x39
  40b104:	f8cd b014 	str.w	fp, [sp, #20]
  40b108:	46d0      	mov	r8, sl
  40b10a:	f000 80a3 	beq.w	40b254 <_dtoa_r+0xd6c>
  40b10e:	f103 0a01 	add.w	sl, r3, #1
  40b112:	46b3      	mov	fp, r6
  40b114:	f887 a000 	strb.w	sl, [r7]
  40b118:	1c7d      	adds	r5, r7, #1
  40b11a:	9e05      	ldr	r6, [sp, #20]
  40b11c:	9408      	str	r4, [sp, #32]
  40b11e:	e49f      	b.n	40aa60 <_dtoa_r+0x578>
  40b120:	465a      	mov	r2, fp
  40b122:	46d0      	mov	r8, sl
  40b124:	46b3      	mov	fp, r6
  40b126:	469a      	mov	sl, r3
  40b128:	4616      	mov	r6, r2
  40b12a:	e47d      	b.n	40aa28 <_dtoa_r+0x540>
  40b12c:	495e      	ldr	r1, [pc, #376]	; (40b2a8 <_dtoa_r+0xdc0>)
  40b12e:	f108 3aff 	add.w	sl, r8, #4294967295
  40b132:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  40b136:	4622      	mov	r2, r4
  40b138:	462b      	mov	r3, r5
  40b13a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40b13e:	f002 fb81 	bl	40d844 <__aeabi_dmul>
  40b142:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40b146:	4639      	mov	r1, r7
  40b148:	4630      	mov	r0, r6
  40b14a:	f002 fe2b 	bl	40dda4 <__aeabi_d2iz>
  40b14e:	4604      	mov	r4, r0
  40b150:	f002 fb12 	bl	40d778 <__aeabi_i2d>
  40b154:	4602      	mov	r2, r0
  40b156:	460b      	mov	r3, r1
  40b158:	4630      	mov	r0, r6
  40b15a:	4639      	mov	r1, r7
  40b15c:	f002 f9be 	bl	40d4dc <__aeabi_dsub>
  40b160:	9a07      	ldr	r2, [sp, #28]
  40b162:	3430      	adds	r4, #48	; 0x30
  40b164:	f1b8 0f01 	cmp.w	r8, #1
  40b168:	4606      	mov	r6, r0
  40b16a:	460f      	mov	r7, r1
  40b16c:	7014      	strb	r4, [r2, #0]
  40b16e:	f102 0501 	add.w	r5, r2, #1
  40b172:	d01e      	beq.n	40b1b2 <_dtoa_r+0xcca>
  40b174:	9b07      	ldr	r3, [sp, #28]
  40b176:	eb03 0b08 	add.w	fp, r3, r8
  40b17a:	46a8      	mov	r8, r5
  40b17c:	2200      	movs	r2, #0
  40b17e:	4b4c      	ldr	r3, [pc, #304]	; (40b2b0 <_dtoa_r+0xdc8>)
  40b180:	4630      	mov	r0, r6
  40b182:	4639      	mov	r1, r7
  40b184:	f002 fb5e 	bl	40d844 <__aeabi_dmul>
  40b188:	460f      	mov	r7, r1
  40b18a:	4606      	mov	r6, r0
  40b18c:	f002 fe0a 	bl	40dda4 <__aeabi_d2iz>
  40b190:	4604      	mov	r4, r0
  40b192:	f002 faf1 	bl	40d778 <__aeabi_i2d>
  40b196:	3430      	adds	r4, #48	; 0x30
  40b198:	4602      	mov	r2, r0
  40b19a:	460b      	mov	r3, r1
  40b19c:	4630      	mov	r0, r6
  40b19e:	4639      	mov	r1, r7
  40b1a0:	f002 f99c 	bl	40d4dc <__aeabi_dsub>
  40b1a4:	f808 4b01 	strb.w	r4, [r8], #1
  40b1a8:	45c3      	cmp	fp, r8
  40b1aa:	4606      	mov	r6, r0
  40b1ac:	460f      	mov	r7, r1
  40b1ae:	d1e5      	bne.n	40b17c <_dtoa_r+0xc94>
  40b1b0:	4455      	add	r5, sl
  40b1b2:	2200      	movs	r2, #0
  40b1b4:	4b3f      	ldr	r3, [pc, #252]	; (40b2b4 <_dtoa_r+0xdcc>)
  40b1b6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40b1ba:	f002 f991 	bl	40d4e0 <__adddf3>
  40b1be:	4632      	mov	r2, r6
  40b1c0:	463b      	mov	r3, r7
  40b1c2:	f002 fdb1 	bl	40dd28 <__aeabi_dcmplt>
  40b1c6:	2800      	cmp	r0, #0
  40b1c8:	d04c      	beq.n	40b264 <_dtoa_r+0xd7c>
  40b1ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b1cc:	9304      	str	r3, [sp, #16]
  40b1ce:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40b1d2:	f7ff bb46 	b.w	40a862 <_dtoa_r+0x37a>
  40b1d6:	f04f 0800 	mov.w	r8, #0
  40b1da:	4646      	mov	r6, r8
  40b1dc:	e6a8      	b.n	40af30 <_dtoa_r+0xa48>
  40b1de:	9b05      	ldr	r3, [sp, #20]
  40b1e0:	9a06      	ldr	r2, [sp, #24]
  40b1e2:	1a9d      	subs	r5, r3, r2
  40b1e4:	2300      	movs	r3, #0
  40b1e6:	f7ff bb72 	b.w	40a8ce <_dtoa_r+0x3e6>
  40b1ea:	2700      	movs	r7, #0
  40b1ec:	e6ca      	b.n	40af84 <_dtoa_r+0xa9c>
  40b1ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b1f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b1f2:	9d05      	ldr	r5, [sp, #20]
  40b1f4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40b1f8:	f7ff bb69 	b.w	40a8ce <_dtoa_r+0x3e6>
  40b1fc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  40b200:	f04f 0802 	mov.w	r8, #2
  40b204:	e4d6      	b.n	40abb4 <_dtoa_r+0x6cc>
  40b206:	9408      	str	r4, [sp, #32]
  40b208:	e5a0      	b.n	40ad4c <_dtoa_r+0x864>
  40b20a:	9b06      	ldr	r3, [sp, #24]
  40b20c:	2b00      	cmp	r3, #0
  40b20e:	f43f aebf 	beq.w	40af90 <_dtoa_r+0xaa8>
  40b212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b214:	2b00      	cmp	r3, #0
  40b216:	f77f aee3 	ble.w	40afe0 <_dtoa_r+0xaf8>
  40b21a:	2200      	movs	r2, #0
  40b21c:	4b24      	ldr	r3, [pc, #144]	; (40b2b0 <_dtoa_r+0xdc8>)
  40b21e:	4630      	mov	r0, r6
  40b220:	4639      	mov	r1, r7
  40b222:	f002 fb0f 	bl	40d844 <__aeabi_dmul>
  40b226:	4606      	mov	r6, r0
  40b228:	460f      	mov	r7, r1
  40b22a:	f108 0001 	add.w	r0, r8, #1
  40b22e:	f002 faa3 	bl	40d778 <__aeabi_i2d>
  40b232:	4632      	mov	r2, r6
  40b234:	463b      	mov	r3, r7
  40b236:	f002 fb05 	bl	40d844 <__aeabi_dmul>
  40b23a:	2200      	movs	r2, #0
  40b23c:	4b18      	ldr	r3, [pc, #96]	; (40b2a0 <_dtoa_r+0xdb8>)
  40b23e:	f002 f94f 	bl	40d4e0 <__adddf3>
  40b242:	9a04      	ldr	r2, [sp, #16]
  40b244:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40b248:	3a01      	subs	r2, #1
  40b24a:	4604      	mov	r4, r0
  40b24c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40b250:	9211      	str	r2, [sp, #68]	; 0x44
  40b252:	e4d0      	b.n	40abf6 <_dtoa_r+0x70e>
  40b254:	2239      	movs	r2, #57	; 0x39
  40b256:	46b3      	mov	fp, r6
  40b258:	9408      	str	r4, [sp, #32]
  40b25a:	9e05      	ldr	r6, [sp, #20]
  40b25c:	703a      	strb	r2, [r7, #0]
  40b25e:	1c7d      	adds	r5, r7, #1
  40b260:	f7ff bbf0 	b.w	40aa44 <_dtoa_r+0x55c>
  40b264:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40b268:	2000      	movs	r0, #0
  40b26a:	4912      	ldr	r1, [pc, #72]	; (40b2b4 <_dtoa_r+0xdcc>)
  40b26c:	f002 f936 	bl	40d4dc <__aeabi_dsub>
  40b270:	4632      	mov	r2, r6
  40b272:	463b      	mov	r3, r7
  40b274:	f002 fd76 	bl	40dd64 <__aeabi_dcmpgt>
  40b278:	b908      	cbnz	r0, 40b27e <_dtoa_r+0xd96>
  40b27a:	e6b1      	b.n	40afe0 <_dtoa_r+0xaf8>
  40b27c:	4615      	mov	r5, r2
  40b27e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40b282:	2b30      	cmp	r3, #48	; 0x30
  40b284:	f105 32ff 	add.w	r2, r5, #4294967295
  40b288:	d0f8      	beq.n	40b27c <_dtoa_r+0xd94>
  40b28a:	e530      	b.n	40acee <_dtoa_r+0x806>
  40b28c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b28e:	9304      	str	r3, [sp, #16]
  40b290:	f7ff bae7 	b.w	40a862 <_dtoa_r+0x37a>
  40b294:	f1ba 0f00 	cmp.w	sl, #0
  40b298:	f47f ad7a 	bne.w	40ad90 <_dtoa_r+0x8a8>
  40b29c:	e661      	b.n	40af62 <_dtoa_r+0xa7a>
  40b29e:	bf00      	nop
  40b2a0:	401c0000 	.word	0x401c0000
  40b2a4:	40140000 	.word	0x40140000
  40b2a8:	0040f0a8 	.word	0x0040f0a8
  40b2ac:	0040f170 	.word	0x0040f170
  40b2b0:	40240000 	.word	0x40240000
  40b2b4:	3fe00000 	.word	0x3fe00000
  40b2b8:	2b39      	cmp	r3, #57	; 0x39
  40b2ba:	f8cd b014 	str.w	fp, [sp, #20]
  40b2be:	46d0      	mov	r8, sl
  40b2c0:	f8dd b008 	ldr.w	fp, [sp, #8]
  40b2c4:	469a      	mov	sl, r3
  40b2c6:	d0c5      	beq.n	40b254 <_dtoa_r+0xd6c>
  40b2c8:	f1bb 0f00 	cmp.w	fp, #0
  40b2cc:	f73f aebc 	bgt.w	40b048 <_dtoa_r+0xb60>
  40b2d0:	e6bc      	b.n	40b04c <_dtoa_r+0xb64>
  40b2d2:	f47f aebb 	bne.w	40b04c <_dtoa_r+0xb64>
  40b2d6:	f01a 0f01 	tst.w	sl, #1
  40b2da:	f43f aeb7 	beq.w	40b04c <_dtoa_r+0xb64>
  40b2de:	e6af      	b.n	40b040 <_dtoa_r+0xb58>
  40b2e0:	f04f 0800 	mov.w	r8, #0
  40b2e4:	4646      	mov	r6, r8
  40b2e6:	e531      	b.n	40ad4c <_dtoa_r+0x864>
  40b2e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b2ea:	2b02      	cmp	r3, #2
  40b2ec:	dc21      	bgt.n	40b332 <_dtoa_r+0xe4a>
  40b2ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b2f0:	e604      	b.n	40aefc <_dtoa_r+0xa14>
  40b2f2:	f04f 0802 	mov.w	r8, #2
  40b2f6:	e45d      	b.n	40abb4 <_dtoa_r+0x6cc>
  40b2f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b2fa:	2b02      	cmp	r3, #2
  40b2fc:	dc19      	bgt.n	40b332 <_dtoa_r+0xe4a>
  40b2fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b300:	e563      	b.n	40adca <_dtoa_r+0x8e2>
  40b302:	2400      	movs	r4, #0
  40b304:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  40b308:	4621      	mov	r1, r4
  40b30a:	4648      	mov	r0, r9
  40b30c:	f001 f942 	bl	40c594 <_Balloc>
  40b310:	f04f 33ff 	mov.w	r3, #4294967295
  40b314:	9306      	str	r3, [sp, #24]
  40b316:	930d      	str	r3, [sp, #52]	; 0x34
  40b318:	2301      	movs	r3, #1
  40b31a:	9007      	str	r0, [sp, #28]
  40b31c:	9421      	str	r4, [sp, #132]	; 0x84
  40b31e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40b322:	9309      	str	r3, [sp, #36]	; 0x24
  40b324:	f7ff b9e9 	b.w	40a6fa <_dtoa_r+0x212>
  40b328:	f43f ab3d 	beq.w	40a9a6 <_dtoa_r+0x4be>
  40b32c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40b330:	e522      	b.n	40ad78 <_dtoa_r+0x890>
  40b332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b334:	9306      	str	r3, [sp, #24]
  40b336:	e5e9      	b.n	40af0c <_dtoa_r+0xa24>
  40b338:	2501      	movs	r5, #1
  40b33a:	f7ff b9a8 	b.w	40a68e <_dtoa_r+0x1a6>
  40b33e:	bf00      	nop

0040b340 <__sflush_r>:
  40b340:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40b344:	b29a      	uxth	r2, r3
  40b346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b34a:	460d      	mov	r5, r1
  40b34c:	0711      	lsls	r1, r2, #28
  40b34e:	4680      	mov	r8, r0
  40b350:	d43c      	bmi.n	40b3cc <__sflush_r+0x8c>
  40b352:	686a      	ldr	r2, [r5, #4]
  40b354:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40b358:	2a00      	cmp	r2, #0
  40b35a:	81ab      	strh	r3, [r5, #12]
  40b35c:	dd73      	ble.n	40b446 <__sflush_r+0x106>
  40b35e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40b360:	2c00      	cmp	r4, #0
  40b362:	d04b      	beq.n	40b3fc <__sflush_r+0xbc>
  40b364:	b29b      	uxth	r3, r3
  40b366:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40b36a:	2100      	movs	r1, #0
  40b36c:	b292      	uxth	r2, r2
  40b36e:	f8d8 6000 	ldr.w	r6, [r8]
  40b372:	f8c8 1000 	str.w	r1, [r8]
  40b376:	2a00      	cmp	r2, #0
  40b378:	d069      	beq.n	40b44e <__sflush_r+0x10e>
  40b37a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40b37c:	075f      	lsls	r7, r3, #29
  40b37e:	d505      	bpl.n	40b38c <__sflush_r+0x4c>
  40b380:	6869      	ldr	r1, [r5, #4]
  40b382:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40b384:	1a52      	subs	r2, r2, r1
  40b386:	b10b      	cbz	r3, 40b38c <__sflush_r+0x4c>
  40b388:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40b38a:	1ad2      	subs	r2, r2, r3
  40b38c:	2300      	movs	r3, #0
  40b38e:	69e9      	ldr	r1, [r5, #28]
  40b390:	4640      	mov	r0, r8
  40b392:	47a0      	blx	r4
  40b394:	1c44      	adds	r4, r0, #1
  40b396:	d03c      	beq.n	40b412 <__sflush_r+0xd2>
  40b398:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40b39c:	692a      	ldr	r2, [r5, #16]
  40b39e:	602a      	str	r2, [r5, #0]
  40b3a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40b3a4:	2200      	movs	r2, #0
  40b3a6:	81ab      	strh	r3, [r5, #12]
  40b3a8:	04db      	lsls	r3, r3, #19
  40b3aa:	606a      	str	r2, [r5, #4]
  40b3ac:	d449      	bmi.n	40b442 <__sflush_r+0x102>
  40b3ae:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40b3b0:	f8c8 6000 	str.w	r6, [r8]
  40b3b4:	b311      	cbz	r1, 40b3fc <__sflush_r+0xbc>
  40b3b6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40b3ba:	4299      	cmp	r1, r3
  40b3bc:	d002      	beq.n	40b3c4 <__sflush_r+0x84>
  40b3be:	4640      	mov	r0, r8
  40b3c0:	f000 f9c0 	bl	40b744 <_free_r>
  40b3c4:	2000      	movs	r0, #0
  40b3c6:	6328      	str	r0, [r5, #48]	; 0x30
  40b3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b3cc:	692e      	ldr	r6, [r5, #16]
  40b3ce:	b1ae      	cbz	r6, 40b3fc <__sflush_r+0xbc>
  40b3d0:	682c      	ldr	r4, [r5, #0]
  40b3d2:	602e      	str	r6, [r5, #0]
  40b3d4:	0790      	lsls	r0, r2, #30
  40b3d6:	bf0c      	ite	eq
  40b3d8:	696b      	ldreq	r3, [r5, #20]
  40b3da:	2300      	movne	r3, #0
  40b3dc:	1ba4      	subs	r4, r4, r6
  40b3de:	60ab      	str	r3, [r5, #8]
  40b3e0:	e00a      	b.n	40b3f8 <__sflush_r+0xb8>
  40b3e2:	4623      	mov	r3, r4
  40b3e4:	4632      	mov	r2, r6
  40b3e6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40b3e8:	69e9      	ldr	r1, [r5, #28]
  40b3ea:	4640      	mov	r0, r8
  40b3ec:	47b8      	blx	r7
  40b3ee:	2800      	cmp	r0, #0
  40b3f0:	eba4 0400 	sub.w	r4, r4, r0
  40b3f4:	4406      	add	r6, r0
  40b3f6:	dd04      	ble.n	40b402 <__sflush_r+0xc2>
  40b3f8:	2c00      	cmp	r4, #0
  40b3fa:	dcf2      	bgt.n	40b3e2 <__sflush_r+0xa2>
  40b3fc:	2000      	movs	r0, #0
  40b3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b402:	89ab      	ldrh	r3, [r5, #12]
  40b404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b408:	81ab      	strh	r3, [r5, #12]
  40b40a:	f04f 30ff 	mov.w	r0, #4294967295
  40b40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b412:	f8d8 2000 	ldr.w	r2, [r8]
  40b416:	2a1d      	cmp	r2, #29
  40b418:	d8f3      	bhi.n	40b402 <__sflush_r+0xc2>
  40b41a:	4b1a      	ldr	r3, [pc, #104]	; (40b484 <__sflush_r+0x144>)
  40b41c:	40d3      	lsrs	r3, r2
  40b41e:	f003 0301 	and.w	r3, r3, #1
  40b422:	f083 0401 	eor.w	r4, r3, #1
  40b426:	2b00      	cmp	r3, #0
  40b428:	d0eb      	beq.n	40b402 <__sflush_r+0xc2>
  40b42a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40b42e:	6929      	ldr	r1, [r5, #16]
  40b430:	6029      	str	r1, [r5, #0]
  40b432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40b436:	04d9      	lsls	r1, r3, #19
  40b438:	606c      	str	r4, [r5, #4]
  40b43a:	81ab      	strh	r3, [r5, #12]
  40b43c:	d5b7      	bpl.n	40b3ae <__sflush_r+0x6e>
  40b43e:	2a00      	cmp	r2, #0
  40b440:	d1b5      	bne.n	40b3ae <__sflush_r+0x6e>
  40b442:	6528      	str	r0, [r5, #80]	; 0x50
  40b444:	e7b3      	b.n	40b3ae <__sflush_r+0x6e>
  40b446:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40b448:	2a00      	cmp	r2, #0
  40b44a:	dc88      	bgt.n	40b35e <__sflush_r+0x1e>
  40b44c:	e7d6      	b.n	40b3fc <__sflush_r+0xbc>
  40b44e:	2301      	movs	r3, #1
  40b450:	69e9      	ldr	r1, [r5, #28]
  40b452:	4640      	mov	r0, r8
  40b454:	47a0      	blx	r4
  40b456:	1c43      	adds	r3, r0, #1
  40b458:	4602      	mov	r2, r0
  40b45a:	d002      	beq.n	40b462 <__sflush_r+0x122>
  40b45c:	89ab      	ldrh	r3, [r5, #12]
  40b45e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40b460:	e78c      	b.n	40b37c <__sflush_r+0x3c>
  40b462:	f8d8 3000 	ldr.w	r3, [r8]
  40b466:	2b00      	cmp	r3, #0
  40b468:	d0f8      	beq.n	40b45c <__sflush_r+0x11c>
  40b46a:	2b1d      	cmp	r3, #29
  40b46c:	d001      	beq.n	40b472 <__sflush_r+0x132>
  40b46e:	2b16      	cmp	r3, #22
  40b470:	d102      	bne.n	40b478 <__sflush_r+0x138>
  40b472:	f8c8 6000 	str.w	r6, [r8]
  40b476:	e7c1      	b.n	40b3fc <__sflush_r+0xbc>
  40b478:	89ab      	ldrh	r3, [r5, #12]
  40b47a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b47e:	81ab      	strh	r3, [r5, #12]
  40b480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b484:	20400001 	.word	0x20400001

0040b488 <_fflush_r>:
  40b488:	b510      	push	{r4, lr}
  40b48a:	4604      	mov	r4, r0
  40b48c:	b082      	sub	sp, #8
  40b48e:	b108      	cbz	r0, 40b494 <_fflush_r+0xc>
  40b490:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b492:	b153      	cbz	r3, 40b4aa <_fflush_r+0x22>
  40b494:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40b498:	b908      	cbnz	r0, 40b49e <_fflush_r+0x16>
  40b49a:	b002      	add	sp, #8
  40b49c:	bd10      	pop	{r4, pc}
  40b49e:	4620      	mov	r0, r4
  40b4a0:	b002      	add	sp, #8
  40b4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40b4a6:	f7ff bf4b 	b.w	40b340 <__sflush_r>
  40b4aa:	9101      	str	r1, [sp, #4]
  40b4ac:	f000 f880 	bl	40b5b0 <__sinit>
  40b4b0:	9901      	ldr	r1, [sp, #4]
  40b4b2:	e7ef      	b.n	40b494 <_fflush_r+0xc>

0040b4b4 <_cleanup_r>:
  40b4b4:	4901      	ldr	r1, [pc, #4]	; (40b4bc <_cleanup_r+0x8>)
  40b4b6:	f000 bbaf 	b.w	40bc18 <_fwalk_reent>
  40b4ba:	bf00      	nop
  40b4bc:	0040d3ad 	.word	0x0040d3ad

0040b4c0 <__sinit.part.1>:
  40b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b4c4:	4b35      	ldr	r3, [pc, #212]	; (40b59c <__sinit.part.1+0xdc>)
  40b4c6:	6845      	ldr	r5, [r0, #4]
  40b4c8:	63c3      	str	r3, [r0, #60]	; 0x3c
  40b4ca:	2400      	movs	r4, #0
  40b4cc:	4607      	mov	r7, r0
  40b4ce:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40b4d2:	2304      	movs	r3, #4
  40b4d4:	2103      	movs	r1, #3
  40b4d6:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40b4da:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40b4de:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40b4e2:	b083      	sub	sp, #12
  40b4e4:	602c      	str	r4, [r5, #0]
  40b4e6:	606c      	str	r4, [r5, #4]
  40b4e8:	60ac      	str	r4, [r5, #8]
  40b4ea:	666c      	str	r4, [r5, #100]	; 0x64
  40b4ec:	81ec      	strh	r4, [r5, #14]
  40b4ee:	612c      	str	r4, [r5, #16]
  40b4f0:	616c      	str	r4, [r5, #20]
  40b4f2:	61ac      	str	r4, [r5, #24]
  40b4f4:	81ab      	strh	r3, [r5, #12]
  40b4f6:	4621      	mov	r1, r4
  40b4f8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40b4fc:	2208      	movs	r2, #8
  40b4fe:	f7fc fa85 	bl	407a0c <memset>
  40b502:	68be      	ldr	r6, [r7, #8]
  40b504:	f8df b098 	ldr.w	fp, [pc, #152]	; 40b5a0 <__sinit.part.1+0xe0>
  40b508:	f8df a098 	ldr.w	sl, [pc, #152]	; 40b5a4 <__sinit.part.1+0xe4>
  40b50c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40b5a8 <__sinit.part.1+0xe8>
  40b510:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40b5ac <__sinit.part.1+0xec>
  40b514:	f8c5 b020 	str.w	fp, [r5, #32]
  40b518:	2301      	movs	r3, #1
  40b51a:	2209      	movs	r2, #9
  40b51c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40b520:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40b524:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40b528:	61ed      	str	r5, [r5, #28]
  40b52a:	4621      	mov	r1, r4
  40b52c:	81f3      	strh	r3, [r6, #14]
  40b52e:	81b2      	strh	r2, [r6, #12]
  40b530:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40b534:	6034      	str	r4, [r6, #0]
  40b536:	6074      	str	r4, [r6, #4]
  40b538:	60b4      	str	r4, [r6, #8]
  40b53a:	6674      	str	r4, [r6, #100]	; 0x64
  40b53c:	6134      	str	r4, [r6, #16]
  40b53e:	6174      	str	r4, [r6, #20]
  40b540:	61b4      	str	r4, [r6, #24]
  40b542:	2208      	movs	r2, #8
  40b544:	9301      	str	r3, [sp, #4]
  40b546:	f7fc fa61 	bl	407a0c <memset>
  40b54a:	68fd      	ldr	r5, [r7, #12]
  40b54c:	61f6      	str	r6, [r6, #28]
  40b54e:	2012      	movs	r0, #18
  40b550:	2202      	movs	r2, #2
  40b552:	f8c6 b020 	str.w	fp, [r6, #32]
  40b556:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40b55a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40b55e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40b562:	4621      	mov	r1, r4
  40b564:	81a8      	strh	r0, [r5, #12]
  40b566:	81ea      	strh	r2, [r5, #14]
  40b568:	602c      	str	r4, [r5, #0]
  40b56a:	606c      	str	r4, [r5, #4]
  40b56c:	60ac      	str	r4, [r5, #8]
  40b56e:	666c      	str	r4, [r5, #100]	; 0x64
  40b570:	612c      	str	r4, [r5, #16]
  40b572:	616c      	str	r4, [r5, #20]
  40b574:	61ac      	str	r4, [r5, #24]
  40b576:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40b57a:	2208      	movs	r2, #8
  40b57c:	f7fc fa46 	bl	407a0c <memset>
  40b580:	9b01      	ldr	r3, [sp, #4]
  40b582:	61ed      	str	r5, [r5, #28]
  40b584:	f8c5 b020 	str.w	fp, [r5, #32]
  40b588:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40b58c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40b590:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40b594:	63bb      	str	r3, [r7, #56]	; 0x38
  40b596:	b003      	add	sp, #12
  40b598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b59c:	0040b4b5 	.word	0x0040b4b5
  40b5a0:	0040cfb5 	.word	0x0040cfb5
  40b5a4:	0040cfd9 	.word	0x0040cfd9
  40b5a8:	0040d015 	.word	0x0040d015
  40b5ac:	0040d035 	.word	0x0040d035

0040b5b0 <__sinit>:
  40b5b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b5b2:	b103      	cbz	r3, 40b5b6 <__sinit+0x6>
  40b5b4:	4770      	bx	lr
  40b5b6:	f7ff bf83 	b.w	40b4c0 <__sinit.part.1>
  40b5ba:	bf00      	nop

0040b5bc <__sfp_lock_acquire>:
  40b5bc:	4770      	bx	lr
  40b5be:	bf00      	nop

0040b5c0 <__sfp_lock_release>:
  40b5c0:	4770      	bx	lr
  40b5c2:	bf00      	nop

0040b5c4 <__libc_fini_array>:
  40b5c4:	b538      	push	{r3, r4, r5, lr}
  40b5c6:	4d07      	ldr	r5, [pc, #28]	; (40b5e4 <__libc_fini_array+0x20>)
  40b5c8:	4c07      	ldr	r4, [pc, #28]	; (40b5e8 <__libc_fini_array+0x24>)
  40b5ca:	1b2c      	subs	r4, r5, r4
  40b5cc:	10a4      	asrs	r4, r4, #2
  40b5ce:	d005      	beq.n	40b5dc <__libc_fini_array+0x18>
  40b5d0:	3c01      	subs	r4, #1
  40b5d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40b5d6:	4798      	blx	r3
  40b5d8:	2c00      	cmp	r4, #0
  40b5da:	d1f9      	bne.n	40b5d0 <__libc_fini_array+0xc>
  40b5dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40b5e0:	f003 bdea 	b.w	40f1b8 <_fini>
  40b5e4:	0040f1c8 	.word	0x0040f1c8
  40b5e8:	0040f1c4 	.word	0x0040f1c4

0040b5ec <__fputwc>:
  40b5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b5f0:	b082      	sub	sp, #8
  40b5f2:	4680      	mov	r8, r0
  40b5f4:	4689      	mov	r9, r1
  40b5f6:	4614      	mov	r4, r2
  40b5f8:	f000 fb3c 	bl	40bc74 <__locale_mb_cur_max>
  40b5fc:	2801      	cmp	r0, #1
  40b5fe:	d033      	beq.n	40b668 <__fputwc+0x7c>
  40b600:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40b604:	464a      	mov	r2, r9
  40b606:	a901      	add	r1, sp, #4
  40b608:	4640      	mov	r0, r8
  40b60a:	f001 fded 	bl	40d1e8 <_wcrtomb_r>
  40b60e:	f1b0 3fff 	cmp.w	r0, #4294967295
  40b612:	4682      	mov	sl, r0
  40b614:	d021      	beq.n	40b65a <__fputwc+0x6e>
  40b616:	b388      	cbz	r0, 40b67c <__fputwc+0x90>
  40b618:	f89d 6004 	ldrb.w	r6, [sp, #4]
  40b61c:	2500      	movs	r5, #0
  40b61e:	e008      	b.n	40b632 <__fputwc+0x46>
  40b620:	6823      	ldr	r3, [r4, #0]
  40b622:	1c5a      	adds	r2, r3, #1
  40b624:	6022      	str	r2, [r4, #0]
  40b626:	701e      	strb	r6, [r3, #0]
  40b628:	3501      	adds	r5, #1
  40b62a:	4555      	cmp	r5, sl
  40b62c:	d226      	bcs.n	40b67c <__fputwc+0x90>
  40b62e:	ab01      	add	r3, sp, #4
  40b630:	5d5e      	ldrb	r6, [r3, r5]
  40b632:	68a3      	ldr	r3, [r4, #8]
  40b634:	3b01      	subs	r3, #1
  40b636:	2b00      	cmp	r3, #0
  40b638:	60a3      	str	r3, [r4, #8]
  40b63a:	daf1      	bge.n	40b620 <__fputwc+0x34>
  40b63c:	69a7      	ldr	r7, [r4, #24]
  40b63e:	42bb      	cmp	r3, r7
  40b640:	4631      	mov	r1, r6
  40b642:	4622      	mov	r2, r4
  40b644:	4640      	mov	r0, r8
  40b646:	db01      	blt.n	40b64c <__fputwc+0x60>
  40b648:	2e0a      	cmp	r6, #10
  40b64a:	d1e9      	bne.n	40b620 <__fputwc+0x34>
  40b64c:	f001 fd76 	bl	40d13c <__swbuf_r>
  40b650:	1c43      	adds	r3, r0, #1
  40b652:	d1e9      	bne.n	40b628 <__fputwc+0x3c>
  40b654:	b002      	add	sp, #8
  40b656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b65a:	89a3      	ldrh	r3, [r4, #12]
  40b65c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b660:	81a3      	strh	r3, [r4, #12]
  40b662:	b002      	add	sp, #8
  40b664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b668:	f109 33ff 	add.w	r3, r9, #4294967295
  40b66c:	2bfe      	cmp	r3, #254	; 0xfe
  40b66e:	d8c7      	bhi.n	40b600 <__fputwc+0x14>
  40b670:	fa5f f689 	uxtb.w	r6, r9
  40b674:	4682      	mov	sl, r0
  40b676:	f88d 6004 	strb.w	r6, [sp, #4]
  40b67a:	e7cf      	b.n	40b61c <__fputwc+0x30>
  40b67c:	4648      	mov	r0, r9
  40b67e:	b002      	add	sp, #8
  40b680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040b684 <_fputwc_r>:
  40b684:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40b688:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40b68c:	d10a      	bne.n	40b6a4 <_fputwc_r+0x20>
  40b68e:	b410      	push	{r4}
  40b690:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40b692:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40b696:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40b69a:	6654      	str	r4, [r2, #100]	; 0x64
  40b69c:	8193      	strh	r3, [r2, #12]
  40b69e:	bc10      	pop	{r4}
  40b6a0:	f7ff bfa4 	b.w	40b5ec <__fputwc>
  40b6a4:	f7ff bfa2 	b.w	40b5ec <__fputwc>

0040b6a8 <_malloc_trim_r>:
  40b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b6aa:	4f23      	ldr	r7, [pc, #140]	; (40b738 <_malloc_trim_r+0x90>)
  40b6ac:	460c      	mov	r4, r1
  40b6ae:	4606      	mov	r6, r0
  40b6b0:	f000 ff6c 	bl	40c58c <__malloc_lock>
  40b6b4:	68bb      	ldr	r3, [r7, #8]
  40b6b6:	685d      	ldr	r5, [r3, #4]
  40b6b8:	f025 0503 	bic.w	r5, r5, #3
  40b6bc:	1b29      	subs	r1, r5, r4
  40b6be:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40b6c2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40b6c6:	f021 010f 	bic.w	r1, r1, #15
  40b6ca:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40b6ce:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40b6d2:	db07      	blt.n	40b6e4 <_malloc_trim_r+0x3c>
  40b6d4:	2100      	movs	r1, #0
  40b6d6:	4630      	mov	r0, r6
  40b6d8:	f001 fc5a 	bl	40cf90 <_sbrk_r>
  40b6dc:	68bb      	ldr	r3, [r7, #8]
  40b6de:	442b      	add	r3, r5
  40b6e0:	4298      	cmp	r0, r3
  40b6e2:	d004      	beq.n	40b6ee <_malloc_trim_r+0x46>
  40b6e4:	4630      	mov	r0, r6
  40b6e6:	f000 ff53 	bl	40c590 <__malloc_unlock>
  40b6ea:	2000      	movs	r0, #0
  40b6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b6ee:	4261      	negs	r1, r4
  40b6f0:	4630      	mov	r0, r6
  40b6f2:	f001 fc4d 	bl	40cf90 <_sbrk_r>
  40b6f6:	3001      	adds	r0, #1
  40b6f8:	d00d      	beq.n	40b716 <_malloc_trim_r+0x6e>
  40b6fa:	4b10      	ldr	r3, [pc, #64]	; (40b73c <_malloc_trim_r+0x94>)
  40b6fc:	68ba      	ldr	r2, [r7, #8]
  40b6fe:	6819      	ldr	r1, [r3, #0]
  40b700:	1b2d      	subs	r5, r5, r4
  40b702:	f045 0501 	orr.w	r5, r5, #1
  40b706:	4630      	mov	r0, r6
  40b708:	1b09      	subs	r1, r1, r4
  40b70a:	6055      	str	r5, [r2, #4]
  40b70c:	6019      	str	r1, [r3, #0]
  40b70e:	f000 ff3f 	bl	40c590 <__malloc_unlock>
  40b712:	2001      	movs	r0, #1
  40b714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b716:	2100      	movs	r1, #0
  40b718:	4630      	mov	r0, r6
  40b71a:	f001 fc39 	bl	40cf90 <_sbrk_r>
  40b71e:	68ba      	ldr	r2, [r7, #8]
  40b720:	1a83      	subs	r3, r0, r2
  40b722:	2b0f      	cmp	r3, #15
  40b724:	ddde      	ble.n	40b6e4 <_malloc_trim_r+0x3c>
  40b726:	4c06      	ldr	r4, [pc, #24]	; (40b740 <_malloc_trim_r+0x98>)
  40b728:	4904      	ldr	r1, [pc, #16]	; (40b73c <_malloc_trim_r+0x94>)
  40b72a:	6824      	ldr	r4, [r4, #0]
  40b72c:	f043 0301 	orr.w	r3, r3, #1
  40b730:	1b00      	subs	r0, r0, r4
  40b732:	6053      	str	r3, [r2, #4]
  40b734:	6008      	str	r0, [r1, #0]
  40b736:	e7d5      	b.n	40b6e4 <_malloc_trim_r+0x3c>
  40b738:	204004a8 	.word	0x204004a8
  40b73c:	20401ab8 	.word	0x20401ab8
  40b740:	204008b4 	.word	0x204008b4

0040b744 <_free_r>:
  40b744:	2900      	cmp	r1, #0
  40b746:	d045      	beq.n	40b7d4 <_free_r+0x90>
  40b748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b74c:	460d      	mov	r5, r1
  40b74e:	4680      	mov	r8, r0
  40b750:	f000 ff1c 	bl	40c58c <__malloc_lock>
  40b754:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40b758:	496a      	ldr	r1, [pc, #424]	; (40b904 <_free_r+0x1c0>)
  40b75a:	f027 0301 	bic.w	r3, r7, #1
  40b75e:	f1a5 0408 	sub.w	r4, r5, #8
  40b762:	18e2      	adds	r2, r4, r3
  40b764:	688e      	ldr	r6, [r1, #8]
  40b766:	6850      	ldr	r0, [r2, #4]
  40b768:	42b2      	cmp	r2, r6
  40b76a:	f020 0003 	bic.w	r0, r0, #3
  40b76e:	d062      	beq.n	40b836 <_free_r+0xf2>
  40b770:	07fe      	lsls	r6, r7, #31
  40b772:	6050      	str	r0, [r2, #4]
  40b774:	d40b      	bmi.n	40b78e <_free_r+0x4a>
  40b776:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40b77a:	1be4      	subs	r4, r4, r7
  40b77c:	f101 0e08 	add.w	lr, r1, #8
  40b780:	68a5      	ldr	r5, [r4, #8]
  40b782:	4575      	cmp	r5, lr
  40b784:	443b      	add	r3, r7
  40b786:	d06f      	beq.n	40b868 <_free_r+0x124>
  40b788:	68e7      	ldr	r7, [r4, #12]
  40b78a:	60ef      	str	r7, [r5, #12]
  40b78c:	60bd      	str	r5, [r7, #8]
  40b78e:	1815      	adds	r5, r2, r0
  40b790:	686d      	ldr	r5, [r5, #4]
  40b792:	07ed      	lsls	r5, r5, #31
  40b794:	d542      	bpl.n	40b81c <_free_r+0xd8>
  40b796:	f043 0201 	orr.w	r2, r3, #1
  40b79a:	6062      	str	r2, [r4, #4]
  40b79c:	50e3      	str	r3, [r4, r3]
  40b79e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b7a2:	d218      	bcs.n	40b7d6 <_free_r+0x92>
  40b7a4:	08db      	lsrs	r3, r3, #3
  40b7a6:	1c5a      	adds	r2, r3, #1
  40b7a8:	684d      	ldr	r5, [r1, #4]
  40b7aa:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  40b7ae:	60a7      	str	r7, [r4, #8]
  40b7b0:	2001      	movs	r0, #1
  40b7b2:	109b      	asrs	r3, r3, #2
  40b7b4:	fa00 f303 	lsl.w	r3, r0, r3
  40b7b8:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  40b7bc:	431d      	orrs	r5, r3
  40b7be:	3808      	subs	r0, #8
  40b7c0:	60e0      	str	r0, [r4, #12]
  40b7c2:	604d      	str	r5, [r1, #4]
  40b7c4:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  40b7c8:	60fc      	str	r4, [r7, #12]
  40b7ca:	4640      	mov	r0, r8
  40b7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b7d0:	f000 bede 	b.w	40c590 <__malloc_unlock>
  40b7d4:	4770      	bx	lr
  40b7d6:	0a5a      	lsrs	r2, r3, #9
  40b7d8:	2a04      	cmp	r2, #4
  40b7da:	d853      	bhi.n	40b884 <_free_r+0x140>
  40b7dc:	099a      	lsrs	r2, r3, #6
  40b7de:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40b7e2:	007f      	lsls	r7, r7, #1
  40b7e4:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40b7e8:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  40b7ec:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  40b7f0:	4944      	ldr	r1, [pc, #272]	; (40b904 <_free_r+0x1c0>)
  40b7f2:	3808      	subs	r0, #8
  40b7f4:	4290      	cmp	r0, r2
  40b7f6:	d04d      	beq.n	40b894 <_free_r+0x150>
  40b7f8:	6851      	ldr	r1, [r2, #4]
  40b7fa:	f021 0103 	bic.w	r1, r1, #3
  40b7fe:	428b      	cmp	r3, r1
  40b800:	d202      	bcs.n	40b808 <_free_r+0xc4>
  40b802:	6892      	ldr	r2, [r2, #8]
  40b804:	4290      	cmp	r0, r2
  40b806:	d1f7      	bne.n	40b7f8 <_free_r+0xb4>
  40b808:	68d0      	ldr	r0, [r2, #12]
  40b80a:	60e0      	str	r0, [r4, #12]
  40b80c:	60a2      	str	r2, [r4, #8]
  40b80e:	6084      	str	r4, [r0, #8]
  40b810:	60d4      	str	r4, [r2, #12]
  40b812:	4640      	mov	r0, r8
  40b814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b818:	f000 beba 	b.w	40c590 <__malloc_unlock>
  40b81c:	6895      	ldr	r5, [r2, #8]
  40b81e:	4f3a      	ldr	r7, [pc, #232]	; (40b908 <_free_r+0x1c4>)
  40b820:	42bd      	cmp	r5, r7
  40b822:	4403      	add	r3, r0
  40b824:	d03f      	beq.n	40b8a6 <_free_r+0x162>
  40b826:	68d0      	ldr	r0, [r2, #12]
  40b828:	60e8      	str	r0, [r5, #12]
  40b82a:	f043 0201 	orr.w	r2, r3, #1
  40b82e:	6085      	str	r5, [r0, #8]
  40b830:	6062      	str	r2, [r4, #4]
  40b832:	50e3      	str	r3, [r4, r3]
  40b834:	e7b3      	b.n	40b79e <_free_r+0x5a>
  40b836:	07ff      	lsls	r7, r7, #31
  40b838:	4403      	add	r3, r0
  40b83a:	d407      	bmi.n	40b84c <_free_r+0x108>
  40b83c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40b840:	1aa4      	subs	r4, r4, r2
  40b842:	4413      	add	r3, r2
  40b844:	68a0      	ldr	r0, [r4, #8]
  40b846:	68e2      	ldr	r2, [r4, #12]
  40b848:	60c2      	str	r2, [r0, #12]
  40b84a:	6090      	str	r0, [r2, #8]
  40b84c:	4a2f      	ldr	r2, [pc, #188]	; (40b90c <_free_r+0x1c8>)
  40b84e:	6812      	ldr	r2, [r2, #0]
  40b850:	f043 0001 	orr.w	r0, r3, #1
  40b854:	4293      	cmp	r3, r2
  40b856:	6060      	str	r0, [r4, #4]
  40b858:	608c      	str	r4, [r1, #8]
  40b85a:	d3b6      	bcc.n	40b7ca <_free_r+0x86>
  40b85c:	4b2c      	ldr	r3, [pc, #176]	; (40b910 <_free_r+0x1cc>)
  40b85e:	4640      	mov	r0, r8
  40b860:	6819      	ldr	r1, [r3, #0]
  40b862:	f7ff ff21 	bl	40b6a8 <_malloc_trim_r>
  40b866:	e7b0      	b.n	40b7ca <_free_r+0x86>
  40b868:	1811      	adds	r1, r2, r0
  40b86a:	6849      	ldr	r1, [r1, #4]
  40b86c:	07c9      	lsls	r1, r1, #31
  40b86e:	d444      	bmi.n	40b8fa <_free_r+0x1b6>
  40b870:	6891      	ldr	r1, [r2, #8]
  40b872:	68d2      	ldr	r2, [r2, #12]
  40b874:	60ca      	str	r2, [r1, #12]
  40b876:	4403      	add	r3, r0
  40b878:	f043 0001 	orr.w	r0, r3, #1
  40b87c:	6091      	str	r1, [r2, #8]
  40b87e:	6060      	str	r0, [r4, #4]
  40b880:	50e3      	str	r3, [r4, r3]
  40b882:	e7a2      	b.n	40b7ca <_free_r+0x86>
  40b884:	2a14      	cmp	r2, #20
  40b886:	d817      	bhi.n	40b8b8 <_free_r+0x174>
  40b888:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40b88c:	007f      	lsls	r7, r7, #1
  40b88e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40b892:	e7a9      	b.n	40b7e8 <_free_r+0xa4>
  40b894:	10aa      	asrs	r2, r5, #2
  40b896:	684b      	ldr	r3, [r1, #4]
  40b898:	2501      	movs	r5, #1
  40b89a:	fa05 f202 	lsl.w	r2, r5, r2
  40b89e:	4313      	orrs	r3, r2
  40b8a0:	604b      	str	r3, [r1, #4]
  40b8a2:	4602      	mov	r2, r0
  40b8a4:	e7b1      	b.n	40b80a <_free_r+0xc6>
  40b8a6:	f043 0201 	orr.w	r2, r3, #1
  40b8aa:	614c      	str	r4, [r1, #20]
  40b8ac:	610c      	str	r4, [r1, #16]
  40b8ae:	60e5      	str	r5, [r4, #12]
  40b8b0:	60a5      	str	r5, [r4, #8]
  40b8b2:	6062      	str	r2, [r4, #4]
  40b8b4:	50e3      	str	r3, [r4, r3]
  40b8b6:	e788      	b.n	40b7ca <_free_r+0x86>
  40b8b8:	2a54      	cmp	r2, #84	; 0x54
  40b8ba:	d806      	bhi.n	40b8ca <_free_r+0x186>
  40b8bc:	0b1a      	lsrs	r2, r3, #12
  40b8be:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40b8c2:	007f      	lsls	r7, r7, #1
  40b8c4:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40b8c8:	e78e      	b.n	40b7e8 <_free_r+0xa4>
  40b8ca:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40b8ce:	d806      	bhi.n	40b8de <_free_r+0x19a>
  40b8d0:	0bda      	lsrs	r2, r3, #15
  40b8d2:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40b8d6:	007f      	lsls	r7, r7, #1
  40b8d8:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40b8dc:	e784      	b.n	40b7e8 <_free_r+0xa4>
  40b8de:	f240 5054 	movw	r0, #1364	; 0x554
  40b8e2:	4282      	cmp	r2, r0
  40b8e4:	d806      	bhi.n	40b8f4 <_free_r+0x1b0>
  40b8e6:	0c9a      	lsrs	r2, r3, #18
  40b8e8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40b8ec:	007f      	lsls	r7, r7, #1
  40b8ee:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40b8f2:	e779      	b.n	40b7e8 <_free_r+0xa4>
  40b8f4:	27fe      	movs	r7, #254	; 0xfe
  40b8f6:	257e      	movs	r5, #126	; 0x7e
  40b8f8:	e776      	b.n	40b7e8 <_free_r+0xa4>
  40b8fa:	f043 0201 	orr.w	r2, r3, #1
  40b8fe:	6062      	str	r2, [r4, #4]
  40b900:	50e3      	str	r3, [r4, r3]
  40b902:	e762      	b.n	40b7ca <_free_r+0x86>
  40b904:	204004a8 	.word	0x204004a8
  40b908:	204004b0 	.word	0x204004b0
  40b90c:	204008b0 	.word	0x204008b0
  40b910:	20401ab4 	.word	0x20401ab4

0040b914 <__sfvwrite_r>:
  40b914:	6893      	ldr	r3, [r2, #8]
  40b916:	2b00      	cmp	r3, #0
  40b918:	d076      	beq.n	40ba08 <__sfvwrite_r+0xf4>
  40b91a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b91e:	898b      	ldrh	r3, [r1, #12]
  40b920:	b085      	sub	sp, #20
  40b922:	460c      	mov	r4, r1
  40b924:	0719      	lsls	r1, r3, #28
  40b926:	9001      	str	r0, [sp, #4]
  40b928:	4616      	mov	r6, r2
  40b92a:	d529      	bpl.n	40b980 <__sfvwrite_r+0x6c>
  40b92c:	6922      	ldr	r2, [r4, #16]
  40b92e:	b33a      	cbz	r2, 40b980 <__sfvwrite_r+0x6c>
  40b930:	f003 0802 	and.w	r8, r3, #2
  40b934:	fa1f f088 	uxth.w	r0, r8
  40b938:	6835      	ldr	r5, [r6, #0]
  40b93a:	2800      	cmp	r0, #0
  40b93c:	d02f      	beq.n	40b99e <__sfvwrite_r+0x8a>
  40b93e:	f04f 0900 	mov.w	r9, #0
  40b942:	4fb4      	ldr	r7, [pc, #720]	; (40bc14 <__sfvwrite_r+0x300>)
  40b944:	46c8      	mov	r8, r9
  40b946:	46b2      	mov	sl, r6
  40b948:	45b8      	cmp	r8, r7
  40b94a:	4643      	mov	r3, r8
  40b94c:	464a      	mov	r2, r9
  40b94e:	bf28      	it	cs
  40b950:	463b      	movcs	r3, r7
  40b952:	9801      	ldr	r0, [sp, #4]
  40b954:	f1b8 0f00 	cmp.w	r8, #0
  40b958:	d050      	beq.n	40b9fc <__sfvwrite_r+0xe8>
  40b95a:	69e1      	ldr	r1, [r4, #28]
  40b95c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40b95e:	47b0      	blx	r6
  40b960:	2800      	cmp	r0, #0
  40b962:	dd71      	ble.n	40ba48 <__sfvwrite_r+0x134>
  40b964:	f8da 3008 	ldr.w	r3, [sl, #8]
  40b968:	1a1b      	subs	r3, r3, r0
  40b96a:	4481      	add	r9, r0
  40b96c:	ebc0 0808 	rsb	r8, r0, r8
  40b970:	f8ca 3008 	str.w	r3, [sl, #8]
  40b974:	2b00      	cmp	r3, #0
  40b976:	d1e7      	bne.n	40b948 <__sfvwrite_r+0x34>
  40b978:	2000      	movs	r0, #0
  40b97a:	b005      	add	sp, #20
  40b97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b980:	4621      	mov	r1, r4
  40b982:	9801      	ldr	r0, [sp, #4]
  40b984:	f7fe fca8 	bl	40a2d8 <__swsetup_r>
  40b988:	2800      	cmp	r0, #0
  40b98a:	f040 813a 	bne.w	40bc02 <__sfvwrite_r+0x2ee>
  40b98e:	89a3      	ldrh	r3, [r4, #12]
  40b990:	6835      	ldr	r5, [r6, #0]
  40b992:	f003 0802 	and.w	r8, r3, #2
  40b996:	fa1f f088 	uxth.w	r0, r8
  40b99a:	2800      	cmp	r0, #0
  40b99c:	d1cf      	bne.n	40b93e <__sfvwrite_r+0x2a>
  40b99e:	f013 0901 	ands.w	r9, r3, #1
  40b9a2:	d15b      	bne.n	40ba5c <__sfvwrite_r+0x148>
  40b9a4:	464f      	mov	r7, r9
  40b9a6:	9602      	str	r6, [sp, #8]
  40b9a8:	b31f      	cbz	r7, 40b9f2 <__sfvwrite_r+0xde>
  40b9aa:	059a      	lsls	r2, r3, #22
  40b9ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40b9b0:	d52c      	bpl.n	40ba0c <__sfvwrite_r+0xf8>
  40b9b2:	4547      	cmp	r7, r8
  40b9b4:	46c2      	mov	sl, r8
  40b9b6:	f0c0 80a4 	bcc.w	40bb02 <__sfvwrite_r+0x1ee>
  40b9ba:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40b9be:	f040 80b1 	bne.w	40bb24 <__sfvwrite_r+0x210>
  40b9c2:	6820      	ldr	r0, [r4, #0]
  40b9c4:	4652      	mov	r2, sl
  40b9c6:	4649      	mov	r1, r9
  40b9c8:	f000 fd7c 	bl	40c4c4 <memmove>
  40b9cc:	68a0      	ldr	r0, [r4, #8]
  40b9ce:	6823      	ldr	r3, [r4, #0]
  40b9d0:	ebc8 0000 	rsb	r0, r8, r0
  40b9d4:	4453      	add	r3, sl
  40b9d6:	60a0      	str	r0, [r4, #8]
  40b9d8:	6023      	str	r3, [r4, #0]
  40b9da:	4638      	mov	r0, r7
  40b9dc:	9a02      	ldr	r2, [sp, #8]
  40b9de:	6893      	ldr	r3, [r2, #8]
  40b9e0:	1a1b      	subs	r3, r3, r0
  40b9e2:	4481      	add	r9, r0
  40b9e4:	1a3f      	subs	r7, r7, r0
  40b9e6:	6093      	str	r3, [r2, #8]
  40b9e8:	2b00      	cmp	r3, #0
  40b9ea:	d0c5      	beq.n	40b978 <__sfvwrite_r+0x64>
  40b9ec:	89a3      	ldrh	r3, [r4, #12]
  40b9ee:	2f00      	cmp	r7, #0
  40b9f0:	d1db      	bne.n	40b9aa <__sfvwrite_r+0x96>
  40b9f2:	f8d5 9000 	ldr.w	r9, [r5]
  40b9f6:	686f      	ldr	r7, [r5, #4]
  40b9f8:	3508      	adds	r5, #8
  40b9fa:	e7d5      	b.n	40b9a8 <__sfvwrite_r+0x94>
  40b9fc:	f8d5 9000 	ldr.w	r9, [r5]
  40ba00:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40ba04:	3508      	adds	r5, #8
  40ba06:	e79f      	b.n	40b948 <__sfvwrite_r+0x34>
  40ba08:	2000      	movs	r0, #0
  40ba0a:	4770      	bx	lr
  40ba0c:	6820      	ldr	r0, [r4, #0]
  40ba0e:	6923      	ldr	r3, [r4, #16]
  40ba10:	4298      	cmp	r0, r3
  40ba12:	d803      	bhi.n	40ba1c <__sfvwrite_r+0x108>
  40ba14:	6961      	ldr	r1, [r4, #20]
  40ba16:	428f      	cmp	r7, r1
  40ba18:	f080 80b7 	bcs.w	40bb8a <__sfvwrite_r+0x276>
  40ba1c:	45b8      	cmp	r8, r7
  40ba1e:	bf28      	it	cs
  40ba20:	46b8      	movcs	r8, r7
  40ba22:	4642      	mov	r2, r8
  40ba24:	4649      	mov	r1, r9
  40ba26:	f000 fd4d 	bl	40c4c4 <memmove>
  40ba2a:	68a3      	ldr	r3, [r4, #8]
  40ba2c:	6822      	ldr	r2, [r4, #0]
  40ba2e:	ebc8 0303 	rsb	r3, r8, r3
  40ba32:	4442      	add	r2, r8
  40ba34:	60a3      	str	r3, [r4, #8]
  40ba36:	6022      	str	r2, [r4, #0]
  40ba38:	2b00      	cmp	r3, #0
  40ba3a:	d149      	bne.n	40bad0 <__sfvwrite_r+0x1bc>
  40ba3c:	4621      	mov	r1, r4
  40ba3e:	9801      	ldr	r0, [sp, #4]
  40ba40:	f7ff fd22 	bl	40b488 <_fflush_r>
  40ba44:	2800      	cmp	r0, #0
  40ba46:	d043      	beq.n	40bad0 <__sfvwrite_r+0x1bc>
  40ba48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ba4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ba50:	f04f 30ff 	mov.w	r0, #4294967295
  40ba54:	81a3      	strh	r3, [r4, #12]
  40ba56:	b005      	add	sp, #20
  40ba58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ba5c:	4680      	mov	r8, r0
  40ba5e:	9002      	str	r0, [sp, #8]
  40ba60:	4682      	mov	sl, r0
  40ba62:	4681      	mov	r9, r0
  40ba64:	f1b9 0f00 	cmp.w	r9, #0
  40ba68:	d02a      	beq.n	40bac0 <__sfvwrite_r+0x1ac>
  40ba6a:	9b02      	ldr	r3, [sp, #8]
  40ba6c:	2b00      	cmp	r3, #0
  40ba6e:	d04c      	beq.n	40bb0a <__sfvwrite_r+0x1f6>
  40ba70:	6820      	ldr	r0, [r4, #0]
  40ba72:	6923      	ldr	r3, [r4, #16]
  40ba74:	6962      	ldr	r2, [r4, #20]
  40ba76:	45c8      	cmp	r8, r9
  40ba78:	46c3      	mov	fp, r8
  40ba7a:	bf28      	it	cs
  40ba7c:	46cb      	movcs	fp, r9
  40ba7e:	4298      	cmp	r0, r3
  40ba80:	465f      	mov	r7, fp
  40ba82:	d904      	bls.n	40ba8e <__sfvwrite_r+0x17a>
  40ba84:	68a3      	ldr	r3, [r4, #8]
  40ba86:	4413      	add	r3, r2
  40ba88:	459b      	cmp	fp, r3
  40ba8a:	f300 8090 	bgt.w	40bbae <__sfvwrite_r+0x29a>
  40ba8e:	4593      	cmp	fp, r2
  40ba90:	db20      	blt.n	40bad4 <__sfvwrite_r+0x1c0>
  40ba92:	4613      	mov	r3, r2
  40ba94:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40ba96:	69e1      	ldr	r1, [r4, #28]
  40ba98:	9801      	ldr	r0, [sp, #4]
  40ba9a:	4652      	mov	r2, sl
  40ba9c:	47b8      	blx	r7
  40ba9e:	1e07      	subs	r7, r0, #0
  40baa0:	ddd2      	ble.n	40ba48 <__sfvwrite_r+0x134>
  40baa2:	ebb8 0807 	subs.w	r8, r8, r7
  40baa6:	d023      	beq.n	40baf0 <__sfvwrite_r+0x1dc>
  40baa8:	68b3      	ldr	r3, [r6, #8]
  40baaa:	1bdb      	subs	r3, r3, r7
  40baac:	44ba      	add	sl, r7
  40baae:	ebc7 0909 	rsb	r9, r7, r9
  40bab2:	60b3      	str	r3, [r6, #8]
  40bab4:	2b00      	cmp	r3, #0
  40bab6:	f43f af5f 	beq.w	40b978 <__sfvwrite_r+0x64>
  40baba:	f1b9 0f00 	cmp.w	r9, #0
  40babe:	d1d4      	bne.n	40ba6a <__sfvwrite_r+0x156>
  40bac0:	2300      	movs	r3, #0
  40bac2:	f8d5 a000 	ldr.w	sl, [r5]
  40bac6:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40baca:	9302      	str	r3, [sp, #8]
  40bacc:	3508      	adds	r5, #8
  40bace:	e7c9      	b.n	40ba64 <__sfvwrite_r+0x150>
  40bad0:	4640      	mov	r0, r8
  40bad2:	e783      	b.n	40b9dc <__sfvwrite_r+0xc8>
  40bad4:	465a      	mov	r2, fp
  40bad6:	4651      	mov	r1, sl
  40bad8:	f000 fcf4 	bl	40c4c4 <memmove>
  40badc:	68a2      	ldr	r2, [r4, #8]
  40bade:	6823      	ldr	r3, [r4, #0]
  40bae0:	ebcb 0202 	rsb	r2, fp, r2
  40bae4:	445b      	add	r3, fp
  40bae6:	ebb8 0807 	subs.w	r8, r8, r7
  40baea:	60a2      	str	r2, [r4, #8]
  40baec:	6023      	str	r3, [r4, #0]
  40baee:	d1db      	bne.n	40baa8 <__sfvwrite_r+0x194>
  40baf0:	4621      	mov	r1, r4
  40baf2:	9801      	ldr	r0, [sp, #4]
  40baf4:	f7ff fcc8 	bl	40b488 <_fflush_r>
  40baf8:	2800      	cmp	r0, #0
  40bafa:	d1a5      	bne.n	40ba48 <__sfvwrite_r+0x134>
  40bafc:	f8cd 8008 	str.w	r8, [sp, #8]
  40bb00:	e7d2      	b.n	40baa8 <__sfvwrite_r+0x194>
  40bb02:	6820      	ldr	r0, [r4, #0]
  40bb04:	46b8      	mov	r8, r7
  40bb06:	46ba      	mov	sl, r7
  40bb08:	e75c      	b.n	40b9c4 <__sfvwrite_r+0xb0>
  40bb0a:	464a      	mov	r2, r9
  40bb0c:	210a      	movs	r1, #10
  40bb0e:	4650      	mov	r0, sl
  40bb10:	f000 fbee 	bl	40c2f0 <memchr>
  40bb14:	2800      	cmp	r0, #0
  40bb16:	d06f      	beq.n	40bbf8 <__sfvwrite_r+0x2e4>
  40bb18:	3001      	adds	r0, #1
  40bb1a:	2301      	movs	r3, #1
  40bb1c:	ebca 0800 	rsb	r8, sl, r0
  40bb20:	9302      	str	r3, [sp, #8]
  40bb22:	e7a5      	b.n	40ba70 <__sfvwrite_r+0x15c>
  40bb24:	6962      	ldr	r2, [r4, #20]
  40bb26:	6820      	ldr	r0, [r4, #0]
  40bb28:	6921      	ldr	r1, [r4, #16]
  40bb2a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40bb2e:	ebc1 0a00 	rsb	sl, r1, r0
  40bb32:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40bb36:	f10a 0001 	add.w	r0, sl, #1
  40bb3a:	ea4f 0868 	mov.w	r8, r8, asr #1
  40bb3e:	4438      	add	r0, r7
  40bb40:	4540      	cmp	r0, r8
  40bb42:	4642      	mov	r2, r8
  40bb44:	bf84      	itt	hi
  40bb46:	4680      	movhi	r8, r0
  40bb48:	4642      	movhi	r2, r8
  40bb4a:	055b      	lsls	r3, r3, #21
  40bb4c:	d542      	bpl.n	40bbd4 <__sfvwrite_r+0x2c0>
  40bb4e:	4611      	mov	r1, r2
  40bb50:	9801      	ldr	r0, [sp, #4]
  40bb52:	f000 f915 	bl	40bd80 <_malloc_r>
  40bb56:	4683      	mov	fp, r0
  40bb58:	2800      	cmp	r0, #0
  40bb5a:	d055      	beq.n	40bc08 <__sfvwrite_r+0x2f4>
  40bb5c:	4652      	mov	r2, sl
  40bb5e:	6921      	ldr	r1, [r4, #16]
  40bb60:	f000 fc16 	bl	40c390 <memcpy>
  40bb64:	89a3      	ldrh	r3, [r4, #12]
  40bb66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40bb6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40bb6e:	81a3      	strh	r3, [r4, #12]
  40bb70:	ebca 0308 	rsb	r3, sl, r8
  40bb74:	eb0b 000a 	add.w	r0, fp, sl
  40bb78:	f8c4 8014 	str.w	r8, [r4, #20]
  40bb7c:	f8c4 b010 	str.w	fp, [r4, #16]
  40bb80:	6020      	str	r0, [r4, #0]
  40bb82:	60a3      	str	r3, [r4, #8]
  40bb84:	46b8      	mov	r8, r7
  40bb86:	46ba      	mov	sl, r7
  40bb88:	e71c      	b.n	40b9c4 <__sfvwrite_r+0xb0>
  40bb8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40bb8e:	42bb      	cmp	r3, r7
  40bb90:	bf28      	it	cs
  40bb92:	463b      	movcs	r3, r7
  40bb94:	464a      	mov	r2, r9
  40bb96:	fb93 f3f1 	sdiv	r3, r3, r1
  40bb9a:	9801      	ldr	r0, [sp, #4]
  40bb9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40bb9e:	fb01 f303 	mul.w	r3, r1, r3
  40bba2:	69e1      	ldr	r1, [r4, #28]
  40bba4:	47b0      	blx	r6
  40bba6:	2800      	cmp	r0, #0
  40bba8:	f73f af18 	bgt.w	40b9dc <__sfvwrite_r+0xc8>
  40bbac:	e74c      	b.n	40ba48 <__sfvwrite_r+0x134>
  40bbae:	461a      	mov	r2, r3
  40bbb0:	4651      	mov	r1, sl
  40bbb2:	9303      	str	r3, [sp, #12]
  40bbb4:	f000 fc86 	bl	40c4c4 <memmove>
  40bbb8:	6822      	ldr	r2, [r4, #0]
  40bbba:	9b03      	ldr	r3, [sp, #12]
  40bbbc:	9801      	ldr	r0, [sp, #4]
  40bbbe:	441a      	add	r2, r3
  40bbc0:	6022      	str	r2, [r4, #0]
  40bbc2:	4621      	mov	r1, r4
  40bbc4:	f7ff fc60 	bl	40b488 <_fflush_r>
  40bbc8:	9b03      	ldr	r3, [sp, #12]
  40bbca:	2800      	cmp	r0, #0
  40bbcc:	f47f af3c 	bne.w	40ba48 <__sfvwrite_r+0x134>
  40bbd0:	461f      	mov	r7, r3
  40bbd2:	e766      	b.n	40baa2 <__sfvwrite_r+0x18e>
  40bbd4:	9801      	ldr	r0, [sp, #4]
  40bbd6:	f000 ffeb 	bl	40cbb0 <_realloc_r>
  40bbda:	4683      	mov	fp, r0
  40bbdc:	2800      	cmp	r0, #0
  40bbde:	d1c7      	bne.n	40bb70 <__sfvwrite_r+0x25c>
  40bbe0:	9d01      	ldr	r5, [sp, #4]
  40bbe2:	6921      	ldr	r1, [r4, #16]
  40bbe4:	4628      	mov	r0, r5
  40bbe6:	f7ff fdad 	bl	40b744 <_free_r>
  40bbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bbee:	220c      	movs	r2, #12
  40bbf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40bbf4:	602a      	str	r2, [r5, #0]
  40bbf6:	e729      	b.n	40ba4c <__sfvwrite_r+0x138>
  40bbf8:	2301      	movs	r3, #1
  40bbfa:	f109 0801 	add.w	r8, r9, #1
  40bbfe:	9302      	str	r3, [sp, #8]
  40bc00:	e736      	b.n	40ba70 <__sfvwrite_r+0x15c>
  40bc02:	f04f 30ff 	mov.w	r0, #4294967295
  40bc06:	e6b8      	b.n	40b97a <__sfvwrite_r+0x66>
  40bc08:	9a01      	ldr	r2, [sp, #4]
  40bc0a:	230c      	movs	r3, #12
  40bc0c:	6013      	str	r3, [r2, #0]
  40bc0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bc12:	e71b      	b.n	40ba4c <__sfvwrite_r+0x138>
  40bc14:	7ffffc00 	.word	0x7ffffc00

0040bc18 <_fwalk_reent>:
  40bc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40bc1c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40bc20:	d01f      	beq.n	40bc62 <_fwalk_reent+0x4a>
  40bc22:	4688      	mov	r8, r1
  40bc24:	4606      	mov	r6, r0
  40bc26:	f04f 0900 	mov.w	r9, #0
  40bc2a:	687d      	ldr	r5, [r7, #4]
  40bc2c:	68bc      	ldr	r4, [r7, #8]
  40bc2e:	3d01      	subs	r5, #1
  40bc30:	d411      	bmi.n	40bc56 <_fwalk_reent+0x3e>
  40bc32:	89a3      	ldrh	r3, [r4, #12]
  40bc34:	2b01      	cmp	r3, #1
  40bc36:	f105 35ff 	add.w	r5, r5, #4294967295
  40bc3a:	d908      	bls.n	40bc4e <_fwalk_reent+0x36>
  40bc3c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40bc40:	3301      	adds	r3, #1
  40bc42:	4621      	mov	r1, r4
  40bc44:	4630      	mov	r0, r6
  40bc46:	d002      	beq.n	40bc4e <_fwalk_reent+0x36>
  40bc48:	47c0      	blx	r8
  40bc4a:	ea49 0900 	orr.w	r9, r9, r0
  40bc4e:	1c6b      	adds	r3, r5, #1
  40bc50:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40bc54:	d1ed      	bne.n	40bc32 <_fwalk_reent+0x1a>
  40bc56:	683f      	ldr	r7, [r7, #0]
  40bc58:	2f00      	cmp	r7, #0
  40bc5a:	d1e6      	bne.n	40bc2a <_fwalk_reent+0x12>
  40bc5c:	4648      	mov	r0, r9
  40bc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bc62:	46b9      	mov	r9, r7
  40bc64:	4648      	mov	r0, r9
  40bc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bc6a:	bf00      	nop

0040bc6c <__locale_charset>:
  40bc6c:	4800      	ldr	r0, [pc, #0]	; (40bc70 <__locale_charset+0x4>)
  40bc6e:	4770      	bx	lr
  40bc70:	20400484 	.word	0x20400484

0040bc74 <__locale_mb_cur_max>:
  40bc74:	4b01      	ldr	r3, [pc, #4]	; (40bc7c <__locale_mb_cur_max+0x8>)
  40bc76:	6818      	ldr	r0, [r3, #0]
  40bc78:	4770      	bx	lr
  40bc7a:	bf00      	nop
  40bc7c:	204004a4 	.word	0x204004a4

0040bc80 <_localeconv_r>:
  40bc80:	4800      	ldr	r0, [pc, #0]	; (40bc84 <_localeconv_r+0x4>)
  40bc82:	4770      	bx	lr
  40bc84:	2040044c 	.word	0x2040044c

0040bc88 <__swhatbuf_r>:
  40bc88:	b570      	push	{r4, r5, r6, lr}
  40bc8a:	460d      	mov	r5, r1
  40bc8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bc90:	2900      	cmp	r1, #0
  40bc92:	b090      	sub	sp, #64	; 0x40
  40bc94:	4614      	mov	r4, r2
  40bc96:	461e      	mov	r6, r3
  40bc98:	db14      	blt.n	40bcc4 <__swhatbuf_r+0x3c>
  40bc9a:	aa01      	add	r2, sp, #4
  40bc9c:	f001 fbc8 	bl	40d430 <_fstat_r>
  40bca0:	2800      	cmp	r0, #0
  40bca2:	db0f      	blt.n	40bcc4 <__swhatbuf_r+0x3c>
  40bca4:	9a02      	ldr	r2, [sp, #8]
  40bca6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40bcaa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40bcae:	fab2 f282 	clz	r2, r2
  40bcb2:	0952      	lsrs	r2, r2, #5
  40bcb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40bcb8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40bcbc:	6032      	str	r2, [r6, #0]
  40bcbe:	6023      	str	r3, [r4, #0]
  40bcc0:	b010      	add	sp, #64	; 0x40
  40bcc2:	bd70      	pop	{r4, r5, r6, pc}
  40bcc4:	89a8      	ldrh	r0, [r5, #12]
  40bcc6:	f000 0080 	and.w	r0, r0, #128	; 0x80
  40bcca:	b282      	uxth	r2, r0
  40bccc:	2000      	movs	r0, #0
  40bcce:	6030      	str	r0, [r6, #0]
  40bcd0:	b11a      	cbz	r2, 40bcda <__swhatbuf_r+0x52>
  40bcd2:	2340      	movs	r3, #64	; 0x40
  40bcd4:	6023      	str	r3, [r4, #0]
  40bcd6:	b010      	add	sp, #64	; 0x40
  40bcd8:	bd70      	pop	{r4, r5, r6, pc}
  40bcda:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40bcde:	4610      	mov	r0, r2
  40bce0:	6023      	str	r3, [r4, #0]
  40bce2:	b010      	add	sp, #64	; 0x40
  40bce4:	bd70      	pop	{r4, r5, r6, pc}
  40bce6:	bf00      	nop

0040bce8 <__smakebuf_r>:
  40bce8:	898a      	ldrh	r2, [r1, #12]
  40bcea:	0792      	lsls	r2, r2, #30
  40bcec:	460b      	mov	r3, r1
  40bcee:	d506      	bpl.n	40bcfe <__smakebuf_r+0x16>
  40bcf0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40bcf4:	2101      	movs	r1, #1
  40bcf6:	601a      	str	r2, [r3, #0]
  40bcf8:	611a      	str	r2, [r3, #16]
  40bcfa:	6159      	str	r1, [r3, #20]
  40bcfc:	4770      	bx	lr
  40bcfe:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bd00:	b083      	sub	sp, #12
  40bd02:	ab01      	add	r3, sp, #4
  40bd04:	466a      	mov	r2, sp
  40bd06:	460c      	mov	r4, r1
  40bd08:	4605      	mov	r5, r0
  40bd0a:	f7ff ffbd 	bl	40bc88 <__swhatbuf_r>
  40bd0e:	9900      	ldr	r1, [sp, #0]
  40bd10:	4606      	mov	r6, r0
  40bd12:	4628      	mov	r0, r5
  40bd14:	f000 f834 	bl	40bd80 <_malloc_r>
  40bd18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bd1c:	b1d0      	cbz	r0, 40bd54 <__smakebuf_r+0x6c>
  40bd1e:	9a01      	ldr	r2, [sp, #4]
  40bd20:	4f12      	ldr	r7, [pc, #72]	; (40bd6c <__smakebuf_r+0x84>)
  40bd22:	9900      	ldr	r1, [sp, #0]
  40bd24:	63ef      	str	r7, [r5, #60]	; 0x3c
  40bd26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40bd2a:	81a3      	strh	r3, [r4, #12]
  40bd2c:	6020      	str	r0, [r4, #0]
  40bd2e:	6120      	str	r0, [r4, #16]
  40bd30:	6161      	str	r1, [r4, #20]
  40bd32:	b91a      	cbnz	r2, 40bd3c <__smakebuf_r+0x54>
  40bd34:	4333      	orrs	r3, r6
  40bd36:	81a3      	strh	r3, [r4, #12]
  40bd38:	b003      	add	sp, #12
  40bd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bd3c:	4628      	mov	r0, r5
  40bd3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40bd42:	f001 fb89 	bl	40d458 <_isatty_r>
  40bd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bd4a:	2800      	cmp	r0, #0
  40bd4c:	d0f2      	beq.n	40bd34 <__smakebuf_r+0x4c>
  40bd4e:	f043 0301 	orr.w	r3, r3, #1
  40bd52:	e7ef      	b.n	40bd34 <__smakebuf_r+0x4c>
  40bd54:	059a      	lsls	r2, r3, #22
  40bd56:	d4ef      	bmi.n	40bd38 <__smakebuf_r+0x50>
  40bd58:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40bd5c:	f043 0302 	orr.w	r3, r3, #2
  40bd60:	2101      	movs	r1, #1
  40bd62:	81a3      	strh	r3, [r4, #12]
  40bd64:	6022      	str	r2, [r4, #0]
  40bd66:	6122      	str	r2, [r4, #16]
  40bd68:	6161      	str	r1, [r4, #20]
  40bd6a:	e7e5      	b.n	40bd38 <__smakebuf_r+0x50>
  40bd6c:	0040b4b5 	.word	0x0040b4b5

0040bd70 <malloc>:
  40bd70:	4b02      	ldr	r3, [pc, #8]	; (40bd7c <malloc+0xc>)
  40bd72:	4601      	mov	r1, r0
  40bd74:	6818      	ldr	r0, [r3, #0]
  40bd76:	f000 b803 	b.w	40bd80 <_malloc_r>
  40bd7a:	bf00      	nop
  40bd7c:	20400448 	.word	0x20400448

0040bd80 <_malloc_r>:
  40bd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bd84:	f101 050b 	add.w	r5, r1, #11
  40bd88:	2d16      	cmp	r5, #22
  40bd8a:	b083      	sub	sp, #12
  40bd8c:	4606      	mov	r6, r0
  40bd8e:	f240 809f 	bls.w	40bed0 <_malloc_r+0x150>
  40bd92:	f035 0507 	bics.w	r5, r5, #7
  40bd96:	f100 80bf 	bmi.w	40bf18 <_malloc_r+0x198>
  40bd9a:	42a9      	cmp	r1, r5
  40bd9c:	f200 80bc 	bhi.w	40bf18 <_malloc_r+0x198>
  40bda0:	f000 fbf4 	bl	40c58c <__malloc_lock>
  40bda4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40bda8:	f0c0 829c 	bcc.w	40c2e4 <_malloc_r+0x564>
  40bdac:	0a6b      	lsrs	r3, r5, #9
  40bdae:	f000 80ba 	beq.w	40bf26 <_malloc_r+0x1a6>
  40bdb2:	2b04      	cmp	r3, #4
  40bdb4:	f200 8183 	bhi.w	40c0be <_malloc_r+0x33e>
  40bdb8:	09a8      	lsrs	r0, r5, #6
  40bdba:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40bdbe:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40bdc2:	3038      	adds	r0, #56	; 0x38
  40bdc4:	4fc4      	ldr	r7, [pc, #784]	; (40c0d8 <_malloc_r+0x358>)
  40bdc6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40bdca:	f1a3 0108 	sub.w	r1, r3, #8
  40bdce:	685c      	ldr	r4, [r3, #4]
  40bdd0:	42a1      	cmp	r1, r4
  40bdd2:	d107      	bne.n	40bde4 <_malloc_r+0x64>
  40bdd4:	e0ac      	b.n	40bf30 <_malloc_r+0x1b0>
  40bdd6:	2a00      	cmp	r2, #0
  40bdd8:	f280 80ac 	bge.w	40bf34 <_malloc_r+0x1b4>
  40bddc:	68e4      	ldr	r4, [r4, #12]
  40bdde:	42a1      	cmp	r1, r4
  40bde0:	f000 80a6 	beq.w	40bf30 <_malloc_r+0x1b0>
  40bde4:	6863      	ldr	r3, [r4, #4]
  40bde6:	f023 0303 	bic.w	r3, r3, #3
  40bdea:	1b5a      	subs	r2, r3, r5
  40bdec:	2a0f      	cmp	r2, #15
  40bdee:	ddf2      	ble.n	40bdd6 <_malloc_r+0x56>
  40bdf0:	49b9      	ldr	r1, [pc, #740]	; (40c0d8 <_malloc_r+0x358>)
  40bdf2:	693c      	ldr	r4, [r7, #16]
  40bdf4:	f101 0e08 	add.w	lr, r1, #8
  40bdf8:	4574      	cmp	r4, lr
  40bdfa:	f000 81b3 	beq.w	40c164 <_malloc_r+0x3e4>
  40bdfe:	6863      	ldr	r3, [r4, #4]
  40be00:	f023 0303 	bic.w	r3, r3, #3
  40be04:	1b5a      	subs	r2, r3, r5
  40be06:	2a0f      	cmp	r2, #15
  40be08:	f300 8199 	bgt.w	40c13e <_malloc_r+0x3be>
  40be0c:	2a00      	cmp	r2, #0
  40be0e:	f8c1 e014 	str.w	lr, [r1, #20]
  40be12:	f8c1 e010 	str.w	lr, [r1, #16]
  40be16:	f280 809e 	bge.w	40bf56 <_malloc_r+0x1d6>
  40be1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40be1e:	f080 8167 	bcs.w	40c0f0 <_malloc_r+0x370>
  40be22:	08db      	lsrs	r3, r3, #3
  40be24:	f103 0c01 	add.w	ip, r3, #1
  40be28:	2201      	movs	r2, #1
  40be2a:	109b      	asrs	r3, r3, #2
  40be2c:	fa02 f303 	lsl.w	r3, r2, r3
  40be30:	684a      	ldr	r2, [r1, #4]
  40be32:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  40be36:	f8c4 8008 	str.w	r8, [r4, #8]
  40be3a:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40be3e:	431a      	orrs	r2, r3
  40be40:	f1a9 0308 	sub.w	r3, r9, #8
  40be44:	60e3      	str	r3, [r4, #12]
  40be46:	604a      	str	r2, [r1, #4]
  40be48:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  40be4c:	f8c8 400c 	str.w	r4, [r8, #12]
  40be50:	1083      	asrs	r3, r0, #2
  40be52:	2401      	movs	r4, #1
  40be54:	409c      	lsls	r4, r3
  40be56:	4294      	cmp	r4, r2
  40be58:	f200 808a 	bhi.w	40bf70 <_malloc_r+0x1f0>
  40be5c:	4214      	tst	r4, r2
  40be5e:	d106      	bne.n	40be6e <_malloc_r+0xee>
  40be60:	f020 0003 	bic.w	r0, r0, #3
  40be64:	0064      	lsls	r4, r4, #1
  40be66:	4214      	tst	r4, r2
  40be68:	f100 0004 	add.w	r0, r0, #4
  40be6c:	d0fa      	beq.n	40be64 <_malloc_r+0xe4>
  40be6e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40be72:	46cc      	mov	ip, r9
  40be74:	4680      	mov	r8, r0
  40be76:	f8dc 100c 	ldr.w	r1, [ip, #12]
  40be7a:	458c      	cmp	ip, r1
  40be7c:	d107      	bne.n	40be8e <_malloc_r+0x10e>
  40be7e:	e173      	b.n	40c168 <_malloc_r+0x3e8>
  40be80:	2a00      	cmp	r2, #0
  40be82:	f280 8181 	bge.w	40c188 <_malloc_r+0x408>
  40be86:	68c9      	ldr	r1, [r1, #12]
  40be88:	458c      	cmp	ip, r1
  40be8a:	f000 816d 	beq.w	40c168 <_malloc_r+0x3e8>
  40be8e:	684b      	ldr	r3, [r1, #4]
  40be90:	f023 0303 	bic.w	r3, r3, #3
  40be94:	1b5a      	subs	r2, r3, r5
  40be96:	2a0f      	cmp	r2, #15
  40be98:	ddf2      	ble.n	40be80 <_malloc_r+0x100>
  40be9a:	460c      	mov	r4, r1
  40be9c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40bea0:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40bea4:	194b      	adds	r3, r1, r5
  40bea6:	f045 0501 	orr.w	r5, r5, #1
  40beaa:	604d      	str	r5, [r1, #4]
  40beac:	f042 0101 	orr.w	r1, r2, #1
  40beb0:	f8c8 c00c 	str.w	ip, [r8, #12]
  40beb4:	4630      	mov	r0, r6
  40beb6:	f8cc 8008 	str.w	r8, [ip, #8]
  40beba:	617b      	str	r3, [r7, #20]
  40bebc:	613b      	str	r3, [r7, #16]
  40bebe:	f8c3 e00c 	str.w	lr, [r3, #12]
  40bec2:	f8c3 e008 	str.w	lr, [r3, #8]
  40bec6:	6059      	str	r1, [r3, #4]
  40bec8:	509a      	str	r2, [r3, r2]
  40beca:	f000 fb61 	bl	40c590 <__malloc_unlock>
  40bece:	e01f      	b.n	40bf10 <_malloc_r+0x190>
  40bed0:	2910      	cmp	r1, #16
  40bed2:	d821      	bhi.n	40bf18 <_malloc_r+0x198>
  40bed4:	f000 fb5a 	bl	40c58c <__malloc_lock>
  40bed8:	2510      	movs	r5, #16
  40beda:	2306      	movs	r3, #6
  40bedc:	2002      	movs	r0, #2
  40bede:	4f7e      	ldr	r7, [pc, #504]	; (40c0d8 <_malloc_r+0x358>)
  40bee0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40bee4:	f1a3 0208 	sub.w	r2, r3, #8
  40bee8:	685c      	ldr	r4, [r3, #4]
  40beea:	4294      	cmp	r4, r2
  40beec:	f000 8145 	beq.w	40c17a <_malloc_r+0x3fa>
  40bef0:	6863      	ldr	r3, [r4, #4]
  40bef2:	68e1      	ldr	r1, [r4, #12]
  40bef4:	68a5      	ldr	r5, [r4, #8]
  40bef6:	f023 0303 	bic.w	r3, r3, #3
  40befa:	4423      	add	r3, r4
  40befc:	4630      	mov	r0, r6
  40befe:	685a      	ldr	r2, [r3, #4]
  40bf00:	60e9      	str	r1, [r5, #12]
  40bf02:	f042 0201 	orr.w	r2, r2, #1
  40bf06:	608d      	str	r5, [r1, #8]
  40bf08:	605a      	str	r2, [r3, #4]
  40bf0a:	f000 fb41 	bl	40c590 <__malloc_unlock>
  40bf0e:	3408      	adds	r4, #8
  40bf10:	4620      	mov	r0, r4
  40bf12:	b003      	add	sp, #12
  40bf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bf18:	2400      	movs	r4, #0
  40bf1a:	230c      	movs	r3, #12
  40bf1c:	4620      	mov	r0, r4
  40bf1e:	6033      	str	r3, [r6, #0]
  40bf20:	b003      	add	sp, #12
  40bf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bf26:	2380      	movs	r3, #128	; 0x80
  40bf28:	f04f 0e40 	mov.w	lr, #64	; 0x40
  40bf2c:	203f      	movs	r0, #63	; 0x3f
  40bf2e:	e749      	b.n	40bdc4 <_malloc_r+0x44>
  40bf30:	4670      	mov	r0, lr
  40bf32:	e75d      	b.n	40bdf0 <_malloc_r+0x70>
  40bf34:	4423      	add	r3, r4
  40bf36:	68e1      	ldr	r1, [r4, #12]
  40bf38:	685a      	ldr	r2, [r3, #4]
  40bf3a:	68a5      	ldr	r5, [r4, #8]
  40bf3c:	f042 0201 	orr.w	r2, r2, #1
  40bf40:	60e9      	str	r1, [r5, #12]
  40bf42:	4630      	mov	r0, r6
  40bf44:	608d      	str	r5, [r1, #8]
  40bf46:	605a      	str	r2, [r3, #4]
  40bf48:	f000 fb22 	bl	40c590 <__malloc_unlock>
  40bf4c:	3408      	adds	r4, #8
  40bf4e:	4620      	mov	r0, r4
  40bf50:	b003      	add	sp, #12
  40bf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bf56:	4423      	add	r3, r4
  40bf58:	4630      	mov	r0, r6
  40bf5a:	685a      	ldr	r2, [r3, #4]
  40bf5c:	f042 0201 	orr.w	r2, r2, #1
  40bf60:	605a      	str	r2, [r3, #4]
  40bf62:	f000 fb15 	bl	40c590 <__malloc_unlock>
  40bf66:	3408      	adds	r4, #8
  40bf68:	4620      	mov	r0, r4
  40bf6a:	b003      	add	sp, #12
  40bf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bf70:	68bc      	ldr	r4, [r7, #8]
  40bf72:	6863      	ldr	r3, [r4, #4]
  40bf74:	f023 0803 	bic.w	r8, r3, #3
  40bf78:	45a8      	cmp	r8, r5
  40bf7a:	d304      	bcc.n	40bf86 <_malloc_r+0x206>
  40bf7c:	ebc5 0308 	rsb	r3, r5, r8
  40bf80:	2b0f      	cmp	r3, #15
  40bf82:	f300 808c 	bgt.w	40c09e <_malloc_r+0x31e>
  40bf86:	4b55      	ldr	r3, [pc, #340]	; (40c0dc <_malloc_r+0x35c>)
  40bf88:	f8df 9160 	ldr.w	r9, [pc, #352]	; 40c0ec <_malloc_r+0x36c>
  40bf8c:	681a      	ldr	r2, [r3, #0]
  40bf8e:	f8d9 3000 	ldr.w	r3, [r9]
  40bf92:	3301      	adds	r3, #1
  40bf94:	442a      	add	r2, r5
  40bf96:	eb04 0a08 	add.w	sl, r4, r8
  40bf9a:	f000 8160 	beq.w	40c25e <_malloc_r+0x4de>
  40bf9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40bfa2:	320f      	adds	r2, #15
  40bfa4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40bfa8:	f022 020f 	bic.w	r2, r2, #15
  40bfac:	4611      	mov	r1, r2
  40bfae:	4630      	mov	r0, r6
  40bfb0:	9201      	str	r2, [sp, #4]
  40bfb2:	f000 ffed 	bl	40cf90 <_sbrk_r>
  40bfb6:	f1b0 3fff 	cmp.w	r0, #4294967295
  40bfba:	4683      	mov	fp, r0
  40bfbc:	9a01      	ldr	r2, [sp, #4]
  40bfbe:	f000 8158 	beq.w	40c272 <_malloc_r+0x4f2>
  40bfc2:	4582      	cmp	sl, r0
  40bfc4:	f200 80fc 	bhi.w	40c1c0 <_malloc_r+0x440>
  40bfc8:	4b45      	ldr	r3, [pc, #276]	; (40c0e0 <_malloc_r+0x360>)
  40bfca:	6819      	ldr	r1, [r3, #0]
  40bfcc:	45da      	cmp	sl, fp
  40bfce:	4411      	add	r1, r2
  40bfd0:	6019      	str	r1, [r3, #0]
  40bfd2:	f000 8153 	beq.w	40c27c <_malloc_r+0x4fc>
  40bfd6:	f8d9 0000 	ldr.w	r0, [r9]
  40bfda:	f8df e110 	ldr.w	lr, [pc, #272]	; 40c0ec <_malloc_r+0x36c>
  40bfde:	3001      	adds	r0, #1
  40bfe0:	bf1b      	ittet	ne
  40bfe2:	ebca 0a0b 	rsbne	sl, sl, fp
  40bfe6:	4451      	addne	r1, sl
  40bfe8:	f8ce b000 	streq.w	fp, [lr]
  40bfec:	6019      	strne	r1, [r3, #0]
  40bfee:	f01b 0107 	ands.w	r1, fp, #7
  40bff2:	f000 8117 	beq.w	40c224 <_malloc_r+0x4a4>
  40bff6:	f1c1 0008 	rsb	r0, r1, #8
  40bffa:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40bffe:	4483      	add	fp, r0
  40c000:	3108      	adds	r1, #8
  40c002:	445a      	add	r2, fp
  40c004:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40c008:	ebc2 0901 	rsb	r9, r2, r1
  40c00c:	4649      	mov	r1, r9
  40c00e:	4630      	mov	r0, r6
  40c010:	9301      	str	r3, [sp, #4]
  40c012:	f000 ffbd 	bl	40cf90 <_sbrk_r>
  40c016:	1c43      	adds	r3, r0, #1
  40c018:	9b01      	ldr	r3, [sp, #4]
  40c01a:	f000 813f 	beq.w	40c29c <_malloc_r+0x51c>
  40c01e:	ebcb 0200 	rsb	r2, fp, r0
  40c022:	444a      	add	r2, r9
  40c024:	f042 0201 	orr.w	r2, r2, #1
  40c028:	6819      	ldr	r1, [r3, #0]
  40c02a:	f8c7 b008 	str.w	fp, [r7, #8]
  40c02e:	4449      	add	r1, r9
  40c030:	42bc      	cmp	r4, r7
  40c032:	f8cb 2004 	str.w	r2, [fp, #4]
  40c036:	6019      	str	r1, [r3, #0]
  40c038:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40c0e0 <_malloc_r+0x360>
  40c03c:	d016      	beq.n	40c06c <_malloc_r+0x2ec>
  40c03e:	f1b8 0f0f 	cmp.w	r8, #15
  40c042:	f240 80fd 	bls.w	40c240 <_malloc_r+0x4c0>
  40c046:	6862      	ldr	r2, [r4, #4]
  40c048:	f1a8 030c 	sub.w	r3, r8, #12
  40c04c:	f023 0307 	bic.w	r3, r3, #7
  40c050:	18e0      	adds	r0, r4, r3
  40c052:	f002 0201 	and.w	r2, r2, #1
  40c056:	f04f 0e05 	mov.w	lr, #5
  40c05a:	431a      	orrs	r2, r3
  40c05c:	2b0f      	cmp	r3, #15
  40c05e:	6062      	str	r2, [r4, #4]
  40c060:	f8c0 e004 	str.w	lr, [r0, #4]
  40c064:	f8c0 e008 	str.w	lr, [r0, #8]
  40c068:	f200 811c 	bhi.w	40c2a4 <_malloc_r+0x524>
  40c06c:	4b1d      	ldr	r3, [pc, #116]	; (40c0e4 <_malloc_r+0x364>)
  40c06e:	68bc      	ldr	r4, [r7, #8]
  40c070:	681a      	ldr	r2, [r3, #0]
  40c072:	4291      	cmp	r1, r2
  40c074:	bf88      	it	hi
  40c076:	6019      	strhi	r1, [r3, #0]
  40c078:	4b1b      	ldr	r3, [pc, #108]	; (40c0e8 <_malloc_r+0x368>)
  40c07a:	681a      	ldr	r2, [r3, #0]
  40c07c:	4291      	cmp	r1, r2
  40c07e:	6862      	ldr	r2, [r4, #4]
  40c080:	bf88      	it	hi
  40c082:	6019      	strhi	r1, [r3, #0]
  40c084:	f022 0203 	bic.w	r2, r2, #3
  40c088:	4295      	cmp	r5, r2
  40c08a:	eba2 0305 	sub.w	r3, r2, r5
  40c08e:	d801      	bhi.n	40c094 <_malloc_r+0x314>
  40c090:	2b0f      	cmp	r3, #15
  40c092:	dc04      	bgt.n	40c09e <_malloc_r+0x31e>
  40c094:	4630      	mov	r0, r6
  40c096:	f000 fa7b 	bl	40c590 <__malloc_unlock>
  40c09a:	2400      	movs	r4, #0
  40c09c:	e738      	b.n	40bf10 <_malloc_r+0x190>
  40c09e:	1962      	adds	r2, r4, r5
  40c0a0:	f043 0301 	orr.w	r3, r3, #1
  40c0a4:	f045 0501 	orr.w	r5, r5, #1
  40c0a8:	6065      	str	r5, [r4, #4]
  40c0aa:	4630      	mov	r0, r6
  40c0ac:	60ba      	str	r2, [r7, #8]
  40c0ae:	6053      	str	r3, [r2, #4]
  40c0b0:	f000 fa6e 	bl	40c590 <__malloc_unlock>
  40c0b4:	3408      	adds	r4, #8
  40c0b6:	4620      	mov	r0, r4
  40c0b8:	b003      	add	sp, #12
  40c0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c0be:	2b14      	cmp	r3, #20
  40c0c0:	d971      	bls.n	40c1a6 <_malloc_r+0x426>
  40c0c2:	2b54      	cmp	r3, #84	; 0x54
  40c0c4:	f200 80a4 	bhi.w	40c210 <_malloc_r+0x490>
  40c0c8:	0b28      	lsrs	r0, r5, #12
  40c0ca:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40c0ce:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c0d2:	306e      	adds	r0, #110	; 0x6e
  40c0d4:	e676      	b.n	40bdc4 <_malloc_r+0x44>
  40c0d6:	bf00      	nop
  40c0d8:	204004a8 	.word	0x204004a8
  40c0dc:	20401ab4 	.word	0x20401ab4
  40c0e0:	20401ab8 	.word	0x20401ab8
  40c0e4:	20401ab0 	.word	0x20401ab0
  40c0e8:	20401aac 	.word	0x20401aac
  40c0ec:	204008b4 	.word	0x204008b4
  40c0f0:	0a5a      	lsrs	r2, r3, #9
  40c0f2:	2a04      	cmp	r2, #4
  40c0f4:	d95e      	bls.n	40c1b4 <_malloc_r+0x434>
  40c0f6:	2a14      	cmp	r2, #20
  40c0f8:	f200 80b3 	bhi.w	40c262 <_malloc_r+0x4e2>
  40c0fc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40c100:	0049      	lsls	r1, r1, #1
  40c102:	325b      	adds	r2, #91	; 0x5b
  40c104:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  40c108:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  40c10c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 40c2ec <_malloc_r+0x56c>
  40c110:	f1ac 0c08 	sub.w	ip, ip, #8
  40c114:	458c      	cmp	ip, r1
  40c116:	f000 8088 	beq.w	40c22a <_malloc_r+0x4aa>
  40c11a:	684a      	ldr	r2, [r1, #4]
  40c11c:	f022 0203 	bic.w	r2, r2, #3
  40c120:	4293      	cmp	r3, r2
  40c122:	d202      	bcs.n	40c12a <_malloc_r+0x3aa>
  40c124:	6889      	ldr	r1, [r1, #8]
  40c126:	458c      	cmp	ip, r1
  40c128:	d1f7      	bne.n	40c11a <_malloc_r+0x39a>
  40c12a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40c12e:	687a      	ldr	r2, [r7, #4]
  40c130:	f8c4 c00c 	str.w	ip, [r4, #12]
  40c134:	60a1      	str	r1, [r4, #8]
  40c136:	f8cc 4008 	str.w	r4, [ip, #8]
  40c13a:	60cc      	str	r4, [r1, #12]
  40c13c:	e688      	b.n	40be50 <_malloc_r+0xd0>
  40c13e:	1963      	adds	r3, r4, r5
  40c140:	f042 0701 	orr.w	r7, r2, #1
  40c144:	f045 0501 	orr.w	r5, r5, #1
  40c148:	6065      	str	r5, [r4, #4]
  40c14a:	4630      	mov	r0, r6
  40c14c:	614b      	str	r3, [r1, #20]
  40c14e:	610b      	str	r3, [r1, #16]
  40c150:	f8c3 e00c 	str.w	lr, [r3, #12]
  40c154:	f8c3 e008 	str.w	lr, [r3, #8]
  40c158:	605f      	str	r7, [r3, #4]
  40c15a:	509a      	str	r2, [r3, r2]
  40c15c:	3408      	adds	r4, #8
  40c15e:	f000 fa17 	bl	40c590 <__malloc_unlock>
  40c162:	e6d5      	b.n	40bf10 <_malloc_r+0x190>
  40c164:	684a      	ldr	r2, [r1, #4]
  40c166:	e673      	b.n	40be50 <_malloc_r+0xd0>
  40c168:	f108 0801 	add.w	r8, r8, #1
  40c16c:	f018 0f03 	tst.w	r8, #3
  40c170:	f10c 0c08 	add.w	ip, ip, #8
  40c174:	f47f ae7f 	bne.w	40be76 <_malloc_r+0xf6>
  40c178:	e030      	b.n	40c1dc <_malloc_r+0x45c>
  40c17a:	68dc      	ldr	r4, [r3, #12]
  40c17c:	42a3      	cmp	r3, r4
  40c17e:	bf08      	it	eq
  40c180:	3002      	addeq	r0, #2
  40c182:	f43f ae35 	beq.w	40bdf0 <_malloc_r+0x70>
  40c186:	e6b3      	b.n	40bef0 <_malloc_r+0x170>
  40c188:	440b      	add	r3, r1
  40c18a:	460c      	mov	r4, r1
  40c18c:	685a      	ldr	r2, [r3, #4]
  40c18e:	68c9      	ldr	r1, [r1, #12]
  40c190:	f854 5f08 	ldr.w	r5, [r4, #8]!
  40c194:	f042 0201 	orr.w	r2, r2, #1
  40c198:	605a      	str	r2, [r3, #4]
  40c19a:	4630      	mov	r0, r6
  40c19c:	60e9      	str	r1, [r5, #12]
  40c19e:	608d      	str	r5, [r1, #8]
  40c1a0:	f000 f9f6 	bl	40c590 <__malloc_unlock>
  40c1a4:	e6b4      	b.n	40bf10 <_malloc_r+0x190>
  40c1a6:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40c1aa:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40c1ae:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c1b2:	e607      	b.n	40bdc4 <_malloc_r+0x44>
  40c1b4:	099a      	lsrs	r2, r3, #6
  40c1b6:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40c1ba:	0049      	lsls	r1, r1, #1
  40c1bc:	3238      	adds	r2, #56	; 0x38
  40c1be:	e7a1      	b.n	40c104 <_malloc_r+0x384>
  40c1c0:	42bc      	cmp	r4, r7
  40c1c2:	4b4a      	ldr	r3, [pc, #296]	; (40c2ec <_malloc_r+0x56c>)
  40c1c4:	f43f af00 	beq.w	40bfc8 <_malloc_r+0x248>
  40c1c8:	689c      	ldr	r4, [r3, #8]
  40c1ca:	6862      	ldr	r2, [r4, #4]
  40c1cc:	f022 0203 	bic.w	r2, r2, #3
  40c1d0:	e75a      	b.n	40c088 <_malloc_r+0x308>
  40c1d2:	f859 3908 	ldr.w	r3, [r9], #-8
  40c1d6:	4599      	cmp	r9, r3
  40c1d8:	f040 8082 	bne.w	40c2e0 <_malloc_r+0x560>
  40c1dc:	f010 0f03 	tst.w	r0, #3
  40c1e0:	f100 30ff 	add.w	r0, r0, #4294967295
  40c1e4:	d1f5      	bne.n	40c1d2 <_malloc_r+0x452>
  40c1e6:	687b      	ldr	r3, [r7, #4]
  40c1e8:	ea23 0304 	bic.w	r3, r3, r4
  40c1ec:	607b      	str	r3, [r7, #4]
  40c1ee:	0064      	lsls	r4, r4, #1
  40c1f0:	429c      	cmp	r4, r3
  40c1f2:	f63f aebd 	bhi.w	40bf70 <_malloc_r+0x1f0>
  40c1f6:	2c00      	cmp	r4, #0
  40c1f8:	f43f aeba 	beq.w	40bf70 <_malloc_r+0x1f0>
  40c1fc:	421c      	tst	r4, r3
  40c1fe:	4640      	mov	r0, r8
  40c200:	f47f ae35 	bne.w	40be6e <_malloc_r+0xee>
  40c204:	0064      	lsls	r4, r4, #1
  40c206:	421c      	tst	r4, r3
  40c208:	f100 0004 	add.w	r0, r0, #4
  40c20c:	d0fa      	beq.n	40c204 <_malloc_r+0x484>
  40c20e:	e62e      	b.n	40be6e <_malloc_r+0xee>
  40c210:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40c214:	d818      	bhi.n	40c248 <_malloc_r+0x4c8>
  40c216:	0be8      	lsrs	r0, r5, #15
  40c218:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  40c21c:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c220:	3077      	adds	r0, #119	; 0x77
  40c222:	e5cf      	b.n	40bdc4 <_malloc_r+0x44>
  40c224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40c228:	e6eb      	b.n	40c002 <_malloc_r+0x282>
  40c22a:	2101      	movs	r1, #1
  40c22c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40c230:	1092      	asrs	r2, r2, #2
  40c232:	fa01 f202 	lsl.w	r2, r1, r2
  40c236:	431a      	orrs	r2, r3
  40c238:	f8c8 2004 	str.w	r2, [r8, #4]
  40c23c:	4661      	mov	r1, ip
  40c23e:	e777      	b.n	40c130 <_malloc_r+0x3b0>
  40c240:	2301      	movs	r3, #1
  40c242:	f8cb 3004 	str.w	r3, [fp, #4]
  40c246:	e725      	b.n	40c094 <_malloc_r+0x314>
  40c248:	f240 5254 	movw	r2, #1364	; 0x554
  40c24c:	4293      	cmp	r3, r2
  40c24e:	d820      	bhi.n	40c292 <_malloc_r+0x512>
  40c250:	0ca8      	lsrs	r0, r5, #18
  40c252:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40c256:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c25a:	307c      	adds	r0, #124	; 0x7c
  40c25c:	e5b2      	b.n	40bdc4 <_malloc_r+0x44>
  40c25e:	3210      	adds	r2, #16
  40c260:	e6a4      	b.n	40bfac <_malloc_r+0x22c>
  40c262:	2a54      	cmp	r2, #84	; 0x54
  40c264:	d826      	bhi.n	40c2b4 <_malloc_r+0x534>
  40c266:	0b1a      	lsrs	r2, r3, #12
  40c268:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40c26c:	0049      	lsls	r1, r1, #1
  40c26e:	326e      	adds	r2, #110	; 0x6e
  40c270:	e748      	b.n	40c104 <_malloc_r+0x384>
  40c272:	68bc      	ldr	r4, [r7, #8]
  40c274:	6862      	ldr	r2, [r4, #4]
  40c276:	f022 0203 	bic.w	r2, r2, #3
  40c27a:	e705      	b.n	40c088 <_malloc_r+0x308>
  40c27c:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40c280:	2800      	cmp	r0, #0
  40c282:	f47f aea8 	bne.w	40bfd6 <_malloc_r+0x256>
  40c286:	4442      	add	r2, r8
  40c288:	68bb      	ldr	r3, [r7, #8]
  40c28a:	f042 0201 	orr.w	r2, r2, #1
  40c28e:	605a      	str	r2, [r3, #4]
  40c290:	e6ec      	b.n	40c06c <_malloc_r+0x2ec>
  40c292:	23fe      	movs	r3, #254	; 0xfe
  40c294:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  40c298:	207e      	movs	r0, #126	; 0x7e
  40c29a:	e593      	b.n	40bdc4 <_malloc_r+0x44>
  40c29c:	2201      	movs	r2, #1
  40c29e:	f04f 0900 	mov.w	r9, #0
  40c2a2:	e6c1      	b.n	40c028 <_malloc_r+0x2a8>
  40c2a4:	f104 0108 	add.w	r1, r4, #8
  40c2a8:	4630      	mov	r0, r6
  40c2aa:	f7ff fa4b 	bl	40b744 <_free_r>
  40c2ae:	f8d9 1000 	ldr.w	r1, [r9]
  40c2b2:	e6db      	b.n	40c06c <_malloc_r+0x2ec>
  40c2b4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40c2b8:	d805      	bhi.n	40c2c6 <_malloc_r+0x546>
  40c2ba:	0bda      	lsrs	r2, r3, #15
  40c2bc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40c2c0:	0049      	lsls	r1, r1, #1
  40c2c2:	3277      	adds	r2, #119	; 0x77
  40c2c4:	e71e      	b.n	40c104 <_malloc_r+0x384>
  40c2c6:	f240 5154 	movw	r1, #1364	; 0x554
  40c2ca:	428a      	cmp	r2, r1
  40c2cc:	d805      	bhi.n	40c2da <_malloc_r+0x55a>
  40c2ce:	0c9a      	lsrs	r2, r3, #18
  40c2d0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40c2d4:	0049      	lsls	r1, r1, #1
  40c2d6:	327c      	adds	r2, #124	; 0x7c
  40c2d8:	e714      	b.n	40c104 <_malloc_r+0x384>
  40c2da:	21fe      	movs	r1, #254	; 0xfe
  40c2dc:	227e      	movs	r2, #126	; 0x7e
  40c2de:	e711      	b.n	40c104 <_malloc_r+0x384>
  40c2e0:	687b      	ldr	r3, [r7, #4]
  40c2e2:	e784      	b.n	40c1ee <_malloc_r+0x46e>
  40c2e4:	08e8      	lsrs	r0, r5, #3
  40c2e6:	1c43      	adds	r3, r0, #1
  40c2e8:	005b      	lsls	r3, r3, #1
  40c2ea:	e5f8      	b.n	40bede <_malloc_r+0x15e>
  40c2ec:	204004a8 	.word	0x204004a8

0040c2f0 <memchr>:
  40c2f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c2f4:	2a10      	cmp	r2, #16
  40c2f6:	db2b      	blt.n	40c350 <memchr+0x60>
  40c2f8:	f010 0f07 	tst.w	r0, #7
  40c2fc:	d008      	beq.n	40c310 <memchr+0x20>
  40c2fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  40c302:	3a01      	subs	r2, #1
  40c304:	428b      	cmp	r3, r1
  40c306:	d02d      	beq.n	40c364 <memchr+0x74>
  40c308:	f010 0f07 	tst.w	r0, #7
  40c30c:	b342      	cbz	r2, 40c360 <memchr+0x70>
  40c30e:	d1f6      	bne.n	40c2fe <memchr+0xe>
  40c310:	b4f0      	push	{r4, r5, r6, r7}
  40c312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40c316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40c31a:	f022 0407 	bic.w	r4, r2, #7
  40c31e:	f07f 0700 	mvns.w	r7, #0
  40c322:	2300      	movs	r3, #0
  40c324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40c328:	3c08      	subs	r4, #8
  40c32a:	ea85 0501 	eor.w	r5, r5, r1
  40c32e:	ea86 0601 	eor.w	r6, r6, r1
  40c332:	fa85 f547 	uadd8	r5, r5, r7
  40c336:	faa3 f587 	sel	r5, r3, r7
  40c33a:	fa86 f647 	uadd8	r6, r6, r7
  40c33e:	faa5 f687 	sel	r6, r5, r7
  40c342:	b98e      	cbnz	r6, 40c368 <memchr+0x78>
  40c344:	d1ee      	bne.n	40c324 <memchr+0x34>
  40c346:	bcf0      	pop	{r4, r5, r6, r7}
  40c348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c34c:	f002 0207 	and.w	r2, r2, #7
  40c350:	b132      	cbz	r2, 40c360 <memchr+0x70>
  40c352:	f810 3b01 	ldrb.w	r3, [r0], #1
  40c356:	3a01      	subs	r2, #1
  40c358:	ea83 0301 	eor.w	r3, r3, r1
  40c35c:	b113      	cbz	r3, 40c364 <memchr+0x74>
  40c35e:	d1f8      	bne.n	40c352 <memchr+0x62>
  40c360:	2000      	movs	r0, #0
  40c362:	4770      	bx	lr
  40c364:	3801      	subs	r0, #1
  40c366:	4770      	bx	lr
  40c368:	2d00      	cmp	r5, #0
  40c36a:	bf06      	itte	eq
  40c36c:	4635      	moveq	r5, r6
  40c36e:	3803      	subeq	r0, #3
  40c370:	3807      	subne	r0, #7
  40c372:	f015 0f01 	tst.w	r5, #1
  40c376:	d107      	bne.n	40c388 <memchr+0x98>
  40c378:	3001      	adds	r0, #1
  40c37a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40c37e:	bf02      	ittt	eq
  40c380:	3001      	addeq	r0, #1
  40c382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40c386:	3001      	addeq	r0, #1
  40c388:	bcf0      	pop	{r4, r5, r6, r7}
  40c38a:	3801      	subs	r0, #1
  40c38c:	4770      	bx	lr
  40c38e:	bf00      	nop

0040c390 <memcpy>:
  40c390:	4684      	mov	ip, r0
  40c392:	ea41 0300 	orr.w	r3, r1, r0
  40c396:	f013 0303 	ands.w	r3, r3, #3
  40c39a:	d16d      	bne.n	40c478 <memcpy+0xe8>
  40c39c:	3a40      	subs	r2, #64	; 0x40
  40c39e:	d341      	bcc.n	40c424 <memcpy+0x94>
  40c3a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3a4:	f840 3b04 	str.w	r3, [r0], #4
  40c3a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3ac:	f840 3b04 	str.w	r3, [r0], #4
  40c3b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3b4:	f840 3b04 	str.w	r3, [r0], #4
  40c3b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3bc:	f840 3b04 	str.w	r3, [r0], #4
  40c3c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3c4:	f840 3b04 	str.w	r3, [r0], #4
  40c3c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3cc:	f840 3b04 	str.w	r3, [r0], #4
  40c3d0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3d4:	f840 3b04 	str.w	r3, [r0], #4
  40c3d8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3dc:	f840 3b04 	str.w	r3, [r0], #4
  40c3e0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3e4:	f840 3b04 	str.w	r3, [r0], #4
  40c3e8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3ec:	f840 3b04 	str.w	r3, [r0], #4
  40c3f0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3f4:	f840 3b04 	str.w	r3, [r0], #4
  40c3f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3fc:	f840 3b04 	str.w	r3, [r0], #4
  40c400:	f851 3b04 	ldr.w	r3, [r1], #4
  40c404:	f840 3b04 	str.w	r3, [r0], #4
  40c408:	f851 3b04 	ldr.w	r3, [r1], #4
  40c40c:	f840 3b04 	str.w	r3, [r0], #4
  40c410:	f851 3b04 	ldr.w	r3, [r1], #4
  40c414:	f840 3b04 	str.w	r3, [r0], #4
  40c418:	f851 3b04 	ldr.w	r3, [r1], #4
  40c41c:	f840 3b04 	str.w	r3, [r0], #4
  40c420:	3a40      	subs	r2, #64	; 0x40
  40c422:	d2bd      	bcs.n	40c3a0 <memcpy+0x10>
  40c424:	3230      	adds	r2, #48	; 0x30
  40c426:	d311      	bcc.n	40c44c <memcpy+0xbc>
  40c428:	f851 3b04 	ldr.w	r3, [r1], #4
  40c42c:	f840 3b04 	str.w	r3, [r0], #4
  40c430:	f851 3b04 	ldr.w	r3, [r1], #4
  40c434:	f840 3b04 	str.w	r3, [r0], #4
  40c438:	f851 3b04 	ldr.w	r3, [r1], #4
  40c43c:	f840 3b04 	str.w	r3, [r0], #4
  40c440:	f851 3b04 	ldr.w	r3, [r1], #4
  40c444:	f840 3b04 	str.w	r3, [r0], #4
  40c448:	3a10      	subs	r2, #16
  40c44a:	d2ed      	bcs.n	40c428 <memcpy+0x98>
  40c44c:	320c      	adds	r2, #12
  40c44e:	d305      	bcc.n	40c45c <memcpy+0xcc>
  40c450:	f851 3b04 	ldr.w	r3, [r1], #4
  40c454:	f840 3b04 	str.w	r3, [r0], #4
  40c458:	3a04      	subs	r2, #4
  40c45a:	d2f9      	bcs.n	40c450 <memcpy+0xc0>
  40c45c:	3204      	adds	r2, #4
  40c45e:	d008      	beq.n	40c472 <memcpy+0xe2>
  40c460:	07d2      	lsls	r2, r2, #31
  40c462:	bf1c      	itt	ne
  40c464:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40c468:	f800 3b01 	strbne.w	r3, [r0], #1
  40c46c:	d301      	bcc.n	40c472 <memcpy+0xe2>
  40c46e:	880b      	ldrh	r3, [r1, #0]
  40c470:	8003      	strh	r3, [r0, #0]
  40c472:	4660      	mov	r0, ip
  40c474:	4770      	bx	lr
  40c476:	bf00      	nop
  40c478:	2a08      	cmp	r2, #8
  40c47a:	d313      	bcc.n	40c4a4 <memcpy+0x114>
  40c47c:	078b      	lsls	r3, r1, #30
  40c47e:	d08d      	beq.n	40c39c <memcpy+0xc>
  40c480:	f010 0303 	ands.w	r3, r0, #3
  40c484:	d08a      	beq.n	40c39c <memcpy+0xc>
  40c486:	f1c3 0304 	rsb	r3, r3, #4
  40c48a:	1ad2      	subs	r2, r2, r3
  40c48c:	07db      	lsls	r3, r3, #31
  40c48e:	bf1c      	itt	ne
  40c490:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40c494:	f800 3b01 	strbne.w	r3, [r0], #1
  40c498:	d380      	bcc.n	40c39c <memcpy+0xc>
  40c49a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40c49e:	f820 3b02 	strh.w	r3, [r0], #2
  40c4a2:	e77b      	b.n	40c39c <memcpy+0xc>
  40c4a4:	3a04      	subs	r2, #4
  40c4a6:	d3d9      	bcc.n	40c45c <memcpy+0xcc>
  40c4a8:	3a01      	subs	r2, #1
  40c4aa:	f811 3b01 	ldrb.w	r3, [r1], #1
  40c4ae:	f800 3b01 	strb.w	r3, [r0], #1
  40c4b2:	d2f9      	bcs.n	40c4a8 <memcpy+0x118>
  40c4b4:	780b      	ldrb	r3, [r1, #0]
  40c4b6:	7003      	strb	r3, [r0, #0]
  40c4b8:	784b      	ldrb	r3, [r1, #1]
  40c4ba:	7043      	strb	r3, [r0, #1]
  40c4bc:	788b      	ldrb	r3, [r1, #2]
  40c4be:	7083      	strb	r3, [r0, #2]
  40c4c0:	4660      	mov	r0, ip
  40c4c2:	4770      	bx	lr

0040c4c4 <memmove>:
  40c4c4:	4288      	cmp	r0, r1
  40c4c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c4c8:	d90d      	bls.n	40c4e6 <memmove+0x22>
  40c4ca:	188b      	adds	r3, r1, r2
  40c4cc:	4298      	cmp	r0, r3
  40c4ce:	d20a      	bcs.n	40c4e6 <memmove+0x22>
  40c4d0:	1881      	adds	r1, r0, r2
  40c4d2:	2a00      	cmp	r2, #0
  40c4d4:	d051      	beq.n	40c57a <memmove+0xb6>
  40c4d6:	1a9a      	subs	r2, r3, r2
  40c4d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40c4dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40c4e0:	4293      	cmp	r3, r2
  40c4e2:	d1f9      	bne.n	40c4d8 <memmove+0x14>
  40c4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c4e6:	2a0f      	cmp	r2, #15
  40c4e8:	d948      	bls.n	40c57c <memmove+0xb8>
  40c4ea:	ea41 0300 	orr.w	r3, r1, r0
  40c4ee:	079b      	lsls	r3, r3, #30
  40c4f0:	d146      	bne.n	40c580 <memmove+0xbc>
  40c4f2:	f100 0410 	add.w	r4, r0, #16
  40c4f6:	f101 0310 	add.w	r3, r1, #16
  40c4fa:	4615      	mov	r5, r2
  40c4fc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40c500:	f844 6c10 	str.w	r6, [r4, #-16]
  40c504:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40c508:	f844 6c0c 	str.w	r6, [r4, #-12]
  40c50c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40c510:	f844 6c08 	str.w	r6, [r4, #-8]
  40c514:	3d10      	subs	r5, #16
  40c516:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40c51a:	f844 6c04 	str.w	r6, [r4, #-4]
  40c51e:	2d0f      	cmp	r5, #15
  40c520:	f103 0310 	add.w	r3, r3, #16
  40c524:	f104 0410 	add.w	r4, r4, #16
  40c528:	d8e8      	bhi.n	40c4fc <memmove+0x38>
  40c52a:	f1a2 0310 	sub.w	r3, r2, #16
  40c52e:	f023 030f 	bic.w	r3, r3, #15
  40c532:	f002 0e0f 	and.w	lr, r2, #15
  40c536:	3310      	adds	r3, #16
  40c538:	f1be 0f03 	cmp.w	lr, #3
  40c53c:	4419      	add	r1, r3
  40c53e:	4403      	add	r3, r0
  40c540:	d921      	bls.n	40c586 <memmove+0xc2>
  40c542:	1f1e      	subs	r6, r3, #4
  40c544:	460d      	mov	r5, r1
  40c546:	4674      	mov	r4, lr
  40c548:	3c04      	subs	r4, #4
  40c54a:	f855 7b04 	ldr.w	r7, [r5], #4
  40c54e:	f846 7f04 	str.w	r7, [r6, #4]!
  40c552:	2c03      	cmp	r4, #3
  40c554:	d8f8      	bhi.n	40c548 <memmove+0x84>
  40c556:	f1ae 0404 	sub.w	r4, lr, #4
  40c55a:	f024 0403 	bic.w	r4, r4, #3
  40c55e:	3404      	adds	r4, #4
  40c560:	4423      	add	r3, r4
  40c562:	4421      	add	r1, r4
  40c564:	f002 0203 	and.w	r2, r2, #3
  40c568:	b162      	cbz	r2, 40c584 <memmove+0xc0>
  40c56a:	3b01      	subs	r3, #1
  40c56c:	440a      	add	r2, r1
  40c56e:	f811 4b01 	ldrb.w	r4, [r1], #1
  40c572:	f803 4f01 	strb.w	r4, [r3, #1]!
  40c576:	428a      	cmp	r2, r1
  40c578:	d1f9      	bne.n	40c56e <memmove+0xaa>
  40c57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c57c:	4603      	mov	r3, r0
  40c57e:	e7f3      	b.n	40c568 <memmove+0xa4>
  40c580:	4603      	mov	r3, r0
  40c582:	e7f2      	b.n	40c56a <memmove+0xa6>
  40c584:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c586:	4672      	mov	r2, lr
  40c588:	e7ee      	b.n	40c568 <memmove+0xa4>
  40c58a:	bf00      	nop

0040c58c <__malloc_lock>:
  40c58c:	4770      	bx	lr
  40c58e:	bf00      	nop

0040c590 <__malloc_unlock>:
  40c590:	4770      	bx	lr
  40c592:	bf00      	nop

0040c594 <_Balloc>:
  40c594:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c596:	b570      	push	{r4, r5, r6, lr}
  40c598:	4605      	mov	r5, r0
  40c59a:	460c      	mov	r4, r1
  40c59c:	b14b      	cbz	r3, 40c5b2 <_Balloc+0x1e>
  40c59e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40c5a2:	b180      	cbz	r0, 40c5c6 <_Balloc+0x32>
  40c5a4:	6802      	ldr	r2, [r0, #0]
  40c5a6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40c5aa:	2300      	movs	r3, #0
  40c5ac:	6103      	str	r3, [r0, #16]
  40c5ae:	60c3      	str	r3, [r0, #12]
  40c5b0:	bd70      	pop	{r4, r5, r6, pc}
  40c5b2:	2221      	movs	r2, #33	; 0x21
  40c5b4:	2104      	movs	r1, #4
  40c5b6:	f000 feb7 	bl	40d328 <_calloc_r>
  40c5ba:	64e8      	str	r0, [r5, #76]	; 0x4c
  40c5bc:	4603      	mov	r3, r0
  40c5be:	2800      	cmp	r0, #0
  40c5c0:	d1ed      	bne.n	40c59e <_Balloc+0xa>
  40c5c2:	2000      	movs	r0, #0
  40c5c4:	bd70      	pop	{r4, r5, r6, pc}
  40c5c6:	2101      	movs	r1, #1
  40c5c8:	fa01 f604 	lsl.w	r6, r1, r4
  40c5cc:	1d72      	adds	r2, r6, #5
  40c5ce:	4628      	mov	r0, r5
  40c5d0:	0092      	lsls	r2, r2, #2
  40c5d2:	f000 fea9 	bl	40d328 <_calloc_r>
  40c5d6:	2800      	cmp	r0, #0
  40c5d8:	d0f3      	beq.n	40c5c2 <_Balloc+0x2e>
  40c5da:	6044      	str	r4, [r0, #4]
  40c5dc:	6086      	str	r6, [r0, #8]
  40c5de:	e7e4      	b.n	40c5aa <_Balloc+0x16>

0040c5e0 <_Bfree>:
  40c5e0:	b131      	cbz	r1, 40c5f0 <_Bfree+0x10>
  40c5e2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c5e4:	684a      	ldr	r2, [r1, #4]
  40c5e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40c5ea:	6008      	str	r0, [r1, #0]
  40c5ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40c5f0:	4770      	bx	lr
  40c5f2:	bf00      	nop

0040c5f4 <__multadd>:
  40c5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c5f6:	690c      	ldr	r4, [r1, #16]
  40c5f8:	b083      	sub	sp, #12
  40c5fa:	460d      	mov	r5, r1
  40c5fc:	4606      	mov	r6, r0
  40c5fe:	f101 0e14 	add.w	lr, r1, #20
  40c602:	2700      	movs	r7, #0
  40c604:	f8de 0000 	ldr.w	r0, [lr]
  40c608:	b281      	uxth	r1, r0
  40c60a:	fb02 3101 	mla	r1, r2, r1, r3
  40c60e:	0c0b      	lsrs	r3, r1, #16
  40c610:	0c00      	lsrs	r0, r0, #16
  40c612:	fb02 3300 	mla	r3, r2, r0, r3
  40c616:	b289      	uxth	r1, r1
  40c618:	3701      	adds	r7, #1
  40c61a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  40c61e:	42bc      	cmp	r4, r7
  40c620:	f84e 1b04 	str.w	r1, [lr], #4
  40c624:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40c628:	dcec      	bgt.n	40c604 <__multadd+0x10>
  40c62a:	b13b      	cbz	r3, 40c63c <__multadd+0x48>
  40c62c:	68aa      	ldr	r2, [r5, #8]
  40c62e:	4294      	cmp	r4, r2
  40c630:	da07      	bge.n	40c642 <__multadd+0x4e>
  40c632:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40c636:	3401      	adds	r4, #1
  40c638:	6153      	str	r3, [r2, #20]
  40c63a:	612c      	str	r4, [r5, #16]
  40c63c:	4628      	mov	r0, r5
  40c63e:	b003      	add	sp, #12
  40c640:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c642:	6869      	ldr	r1, [r5, #4]
  40c644:	9301      	str	r3, [sp, #4]
  40c646:	3101      	adds	r1, #1
  40c648:	4630      	mov	r0, r6
  40c64a:	f7ff ffa3 	bl	40c594 <_Balloc>
  40c64e:	692a      	ldr	r2, [r5, #16]
  40c650:	3202      	adds	r2, #2
  40c652:	f105 010c 	add.w	r1, r5, #12
  40c656:	4607      	mov	r7, r0
  40c658:	0092      	lsls	r2, r2, #2
  40c65a:	300c      	adds	r0, #12
  40c65c:	f7ff fe98 	bl	40c390 <memcpy>
  40c660:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40c662:	6869      	ldr	r1, [r5, #4]
  40c664:	9b01      	ldr	r3, [sp, #4]
  40c666:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40c66a:	6028      	str	r0, [r5, #0]
  40c66c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40c670:	463d      	mov	r5, r7
  40c672:	e7de      	b.n	40c632 <__multadd+0x3e>

0040c674 <__hi0bits>:
  40c674:	0c03      	lsrs	r3, r0, #16
  40c676:	041b      	lsls	r3, r3, #16
  40c678:	b9b3      	cbnz	r3, 40c6a8 <__hi0bits+0x34>
  40c67a:	0400      	lsls	r0, r0, #16
  40c67c:	2310      	movs	r3, #16
  40c67e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40c682:	bf04      	itt	eq
  40c684:	0200      	lsleq	r0, r0, #8
  40c686:	3308      	addeq	r3, #8
  40c688:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40c68c:	bf04      	itt	eq
  40c68e:	0100      	lsleq	r0, r0, #4
  40c690:	3304      	addeq	r3, #4
  40c692:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40c696:	bf04      	itt	eq
  40c698:	0080      	lsleq	r0, r0, #2
  40c69a:	3302      	addeq	r3, #2
  40c69c:	2800      	cmp	r0, #0
  40c69e:	db07      	blt.n	40c6b0 <__hi0bits+0x3c>
  40c6a0:	0042      	lsls	r2, r0, #1
  40c6a2:	d403      	bmi.n	40c6ac <__hi0bits+0x38>
  40c6a4:	2020      	movs	r0, #32
  40c6a6:	4770      	bx	lr
  40c6a8:	2300      	movs	r3, #0
  40c6aa:	e7e8      	b.n	40c67e <__hi0bits+0xa>
  40c6ac:	1c58      	adds	r0, r3, #1
  40c6ae:	4770      	bx	lr
  40c6b0:	4618      	mov	r0, r3
  40c6b2:	4770      	bx	lr

0040c6b4 <__lo0bits>:
  40c6b4:	6803      	ldr	r3, [r0, #0]
  40c6b6:	f013 0207 	ands.w	r2, r3, #7
  40c6ba:	d007      	beq.n	40c6cc <__lo0bits+0x18>
  40c6bc:	07d9      	lsls	r1, r3, #31
  40c6be:	d420      	bmi.n	40c702 <__lo0bits+0x4e>
  40c6c0:	079a      	lsls	r2, r3, #30
  40c6c2:	d420      	bmi.n	40c706 <__lo0bits+0x52>
  40c6c4:	089b      	lsrs	r3, r3, #2
  40c6c6:	6003      	str	r3, [r0, #0]
  40c6c8:	2002      	movs	r0, #2
  40c6ca:	4770      	bx	lr
  40c6cc:	b299      	uxth	r1, r3
  40c6ce:	b909      	cbnz	r1, 40c6d4 <__lo0bits+0x20>
  40c6d0:	0c1b      	lsrs	r3, r3, #16
  40c6d2:	2210      	movs	r2, #16
  40c6d4:	f013 0fff 	tst.w	r3, #255	; 0xff
  40c6d8:	bf04      	itt	eq
  40c6da:	0a1b      	lsreq	r3, r3, #8
  40c6dc:	3208      	addeq	r2, #8
  40c6de:	0719      	lsls	r1, r3, #28
  40c6e0:	bf04      	itt	eq
  40c6e2:	091b      	lsreq	r3, r3, #4
  40c6e4:	3204      	addeq	r2, #4
  40c6e6:	0799      	lsls	r1, r3, #30
  40c6e8:	bf04      	itt	eq
  40c6ea:	089b      	lsreq	r3, r3, #2
  40c6ec:	3202      	addeq	r2, #2
  40c6ee:	07d9      	lsls	r1, r3, #31
  40c6f0:	d404      	bmi.n	40c6fc <__lo0bits+0x48>
  40c6f2:	085b      	lsrs	r3, r3, #1
  40c6f4:	d101      	bne.n	40c6fa <__lo0bits+0x46>
  40c6f6:	2020      	movs	r0, #32
  40c6f8:	4770      	bx	lr
  40c6fa:	3201      	adds	r2, #1
  40c6fc:	6003      	str	r3, [r0, #0]
  40c6fe:	4610      	mov	r0, r2
  40c700:	4770      	bx	lr
  40c702:	2000      	movs	r0, #0
  40c704:	4770      	bx	lr
  40c706:	085b      	lsrs	r3, r3, #1
  40c708:	6003      	str	r3, [r0, #0]
  40c70a:	2001      	movs	r0, #1
  40c70c:	4770      	bx	lr
  40c70e:	bf00      	nop

0040c710 <__i2b>:
  40c710:	b510      	push	{r4, lr}
  40c712:	460c      	mov	r4, r1
  40c714:	2101      	movs	r1, #1
  40c716:	f7ff ff3d 	bl	40c594 <_Balloc>
  40c71a:	2201      	movs	r2, #1
  40c71c:	6144      	str	r4, [r0, #20]
  40c71e:	6102      	str	r2, [r0, #16]
  40c720:	bd10      	pop	{r4, pc}
  40c722:	bf00      	nop

0040c724 <__multiply>:
  40c724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c728:	690d      	ldr	r5, [r1, #16]
  40c72a:	6917      	ldr	r7, [r2, #16]
  40c72c:	42bd      	cmp	r5, r7
  40c72e:	b083      	sub	sp, #12
  40c730:	460c      	mov	r4, r1
  40c732:	4616      	mov	r6, r2
  40c734:	da04      	bge.n	40c740 <__multiply+0x1c>
  40c736:	462a      	mov	r2, r5
  40c738:	4634      	mov	r4, r6
  40c73a:	463d      	mov	r5, r7
  40c73c:	460e      	mov	r6, r1
  40c73e:	4617      	mov	r7, r2
  40c740:	68a3      	ldr	r3, [r4, #8]
  40c742:	6861      	ldr	r1, [r4, #4]
  40c744:	eb05 0807 	add.w	r8, r5, r7
  40c748:	4598      	cmp	r8, r3
  40c74a:	bfc8      	it	gt
  40c74c:	3101      	addgt	r1, #1
  40c74e:	f7ff ff21 	bl	40c594 <_Balloc>
  40c752:	f100 0c14 	add.w	ip, r0, #20
  40c756:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  40c75a:	45cc      	cmp	ip, r9
  40c75c:	9000      	str	r0, [sp, #0]
  40c75e:	d205      	bcs.n	40c76c <__multiply+0x48>
  40c760:	4663      	mov	r3, ip
  40c762:	2100      	movs	r1, #0
  40c764:	f843 1b04 	str.w	r1, [r3], #4
  40c768:	4599      	cmp	r9, r3
  40c76a:	d8fb      	bhi.n	40c764 <__multiply+0x40>
  40c76c:	f106 0214 	add.w	r2, r6, #20
  40c770:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40c774:	f104 0314 	add.w	r3, r4, #20
  40c778:	4552      	cmp	r2, sl
  40c77a:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  40c77e:	d254      	bcs.n	40c82a <__multiply+0x106>
  40c780:	f8cd 9004 	str.w	r9, [sp, #4]
  40c784:	4699      	mov	r9, r3
  40c786:	f852 3b04 	ldr.w	r3, [r2], #4
  40c78a:	fa1f fb83 	uxth.w	fp, r3
  40c78e:	f1bb 0f00 	cmp.w	fp, #0
  40c792:	d020      	beq.n	40c7d6 <__multiply+0xb2>
  40c794:	2000      	movs	r0, #0
  40c796:	464f      	mov	r7, r9
  40c798:	4666      	mov	r6, ip
  40c79a:	4605      	mov	r5, r0
  40c79c:	e000      	b.n	40c7a0 <__multiply+0x7c>
  40c79e:	461e      	mov	r6, r3
  40c7a0:	f857 4b04 	ldr.w	r4, [r7], #4
  40c7a4:	6830      	ldr	r0, [r6, #0]
  40c7a6:	b2a1      	uxth	r1, r4
  40c7a8:	b283      	uxth	r3, r0
  40c7aa:	fb0b 3101 	mla	r1, fp, r1, r3
  40c7ae:	0c24      	lsrs	r4, r4, #16
  40c7b0:	0c00      	lsrs	r0, r0, #16
  40c7b2:	194b      	adds	r3, r1, r5
  40c7b4:	fb0b 0004 	mla	r0, fp, r4, r0
  40c7b8:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40c7bc:	b299      	uxth	r1, r3
  40c7be:	4633      	mov	r3, r6
  40c7c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40c7c4:	45be      	cmp	lr, r7
  40c7c6:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40c7ca:	f843 1b04 	str.w	r1, [r3], #4
  40c7ce:	d8e6      	bhi.n	40c79e <__multiply+0x7a>
  40c7d0:	6075      	str	r5, [r6, #4]
  40c7d2:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40c7d6:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40c7da:	d020      	beq.n	40c81e <__multiply+0xfa>
  40c7dc:	f8dc 3000 	ldr.w	r3, [ip]
  40c7e0:	4667      	mov	r7, ip
  40c7e2:	4618      	mov	r0, r3
  40c7e4:	464d      	mov	r5, r9
  40c7e6:	2100      	movs	r1, #0
  40c7e8:	e000      	b.n	40c7ec <__multiply+0xc8>
  40c7ea:	4637      	mov	r7, r6
  40c7ec:	882c      	ldrh	r4, [r5, #0]
  40c7ee:	0c00      	lsrs	r0, r0, #16
  40c7f0:	fb0b 0004 	mla	r0, fp, r4, r0
  40c7f4:	4401      	add	r1, r0
  40c7f6:	b29c      	uxth	r4, r3
  40c7f8:	463e      	mov	r6, r7
  40c7fa:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40c7fe:	f846 3b04 	str.w	r3, [r6], #4
  40c802:	6878      	ldr	r0, [r7, #4]
  40c804:	f855 4b04 	ldr.w	r4, [r5], #4
  40c808:	b283      	uxth	r3, r0
  40c80a:	0c24      	lsrs	r4, r4, #16
  40c80c:	fb0b 3404 	mla	r4, fp, r4, r3
  40c810:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  40c814:	45ae      	cmp	lr, r5
  40c816:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40c81a:	d8e6      	bhi.n	40c7ea <__multiply+0xc6>
  40c81c:	607b      	str	r3, [r7, #4]
  40c81e:	4592      	cmp	sl, r2
  40c820:	f10c 0c04 	add.w	ip, ip, #4
  40c824:	d8af      	bhi.n	40c786 <__multiply+0x62>
  40c826:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40c82a:	f1b8 0f00 	cmp.w	r8, #0
  40c82e:	dd0b      	ble.n	40c848 <__multiply+0x124>
  40c830:	f859 3c04 	ldr.w	r3, [r9, #-4]
  40c834:	f1a9 0904 	sub.w	r9, r9, #4
  40c838:	b11b      	cbz	r3, 40c842 <__multiply+0x11e>
  40c83a:	e005      	b.n	40c848 <__multiply+0x124>
  40c83c:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40c840:	b913      	cbnz	r3, 40c848 <__multiply+0x124>
  40c842:	f1b8 0801 	subs.w	r8, r8, #1
  40c846:	d1f9      	bne.n	40c83c <__multiply+0x118>
  40c848:	9800      	ldr	r0, [sp, #0]
  40c84a:	f8c0 8010 	str.w	r8, [r0, #16]
  40c84e:	b003      	add	sp, #12
  40c850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040c854 <__pow5mult>:
  40c854:	f012 0303 	ands.w	r3, r2, #3
  40c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c85c:	4614      	mov	r4, r2
  40c85e:	4607      	mov	r7, r0
  40c860:	d12e      	bne.n	40c8c0 <__pow5mult+0x6c>
  40c862:	460e      	mov	r6, r1
  40c864:	10a4      	asrs	r4, r4, #2
  40c866:	d01c      	beq.n	40c8a2 <__pow5mult+0x4e>
  40c868:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40c86a:	b395      	cbz	r5, 40c8d2 <__pow5mult+0x7e>
  40c86c:	07e3      	lsls	r3, r4, #31
  40c86e:	f04f 0800 	mov.w	r8, #0
  40c872:	d406      	bmi.n	40c882 <__pow5mult+0x2e>
  40c874:	1064      	asrs	r4, r4, #1
  40c876:	d014      	beq.n	40c8a2 <__pow5mult+0x4e>
  40c878:	6828      	ldr	r0, [r5, #0]
  40c87a:	b1a8      	cbz	r0, 40c8a8 <__pow5mult+0x54>
  40c87c:	4605      	mov	r5, r0
  40c87e:	07e3      	lsls	r3, r4, #31
  40c880:	d5f8      	bpl.n	40c874 <__pow5mult+0x20>
  40c882:	462a      	mov	r2, r5
  40c884:	4631      	mov	r1, r6
  40c886:	4638      	mov	r0, r7
  40c888:	f7ff ff4c 	bl	40c724 <__multiply>
  40c88c:	b1b6      	cbz	r6, 40c8bc <__pow5mult+0x68>
  40c88e:	6872      	ldr	r2, [r6, #4]
  40c890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40c892:	1064      	asrs	r4, r4, #1
  40c894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c898:	6031      	str	r1, [r6, #0]
  40c89a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40c89e:	4606      	mov	r6, r0
  40c8a0:	d1ea      	bne.n	40c878 <__pow5mult+0x24>
  40c8a2:	4630      	mov	r0, r6
  40c8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c8a8:	462a      	mov	r2, r5
  40c8aa:	4629      	mov	r1, r5
  40c8ac:	4638      	mov	r0, r7
  40c8ae:	f7ff ff39 	bl	40c724 <__multiply>
  40c8b2:	6028      	str	r0, [r5, #0]
  40c8b4:	f8c0 8000 	str.w	r8, [r0]
  40c8b8:	4605      	mov	r5, r0
  40c8ba:	e7e0      	b.n	40c87e <__pow5mult+0x2a>
  40c8bc:	4606      	mov	r6, r0
  40c8be:	e7d9      	b.n	40c874 <__pow5mult+0x20>
  40c8c0:	1e5a      	subs	r2, r3, #1
  40c8c2:	4d0b      	ldr	r5, [pc, #44]	; (40c8f0 <__pow5mult+0x9c>)
  40c8c4:	2300      	movs	r3, #0
  40c8c6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40c8ca:	f7ff fe93 	bl	40c5f4 <__multadd>
  40c8ce:	4606      	mov	r6, r0
  40c8d0:	e7c8      	b.n	40c864 <__pow5mult+0x10>
  40c8d2:	2101      	movs	r1, #1
  40c8d4:	4638      	mov	r0, r7
  40c8d6:	f7ff fe5d 	bl	40c594 <_Balloc>
  40c8da:	f240 2171 	movw	r1, #625	; 0x271
  40c8de:	2201      	movs	r2, #1
  40c8e0:	2300      	movs	r3, #0
  40c8e2:	6141      	str	r1, [r0, #20]
  40c8e4:	6102      	str	r2, [r0, #16]
  40c8e6:	4605      	mov	r5, r0
  40c8e8:	64b8      	str	r0, [r7, #72]	; 0x48
  40c8ea:	6003      	str	r3, [r0, #0]
  40c8ec:	e7be      	b.n	40c86c <__pow5mult+0x18>
  40c8ee:	bf00      	nop
  40c8f0:	0040f198 	.word	0x0040f198

0040c8f4 <__lshift>:
  40c8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c8f8:	4691      	mov	r9, r2
  40c8fa:	690a      	ldr	r2, [r1, #16]
  40c8fc:	688b      	ldr	r3, [r1, #8]
  40c8fe:	ea4f 1469 	mov.w	r4, r9, asr #5
  40c902:	eb04 0802 	add.w	r8, r4, r2
  40c906:	f108 0501 	add.w	r5, r8, #1
  40c90a:	429d      	cmp	r5, r3
  40c90c:	460e      	mov	r6, r1
  40c90e:	4682      	mov	sl, r0
  40c910:	6849      	ldr	r1, [r1, #4]
  40c912:	dd04      	ble.n	40c91e <__lshift+0x2a>
  40c914:	005b      	lsls	r3, r3, #1
  40c916:	429d      	cmp	r5, r3
  40c918:	f101 0101 	add.w	r1, r1, #1
  40c91c:	dcfa      	bgt.n	40c914 <__lshift+0x20>
  40c91e:	4650      	mov	r0, sl
  40c920:	f7ff fe38 	bl	40c594 <_Balloc>
  40c924:	2c00      	cmp	r4, #0
  40c926:	f100 0214 	add.w	r2, r0, #20
  40c92a:	dd38      	ble.n	40c99e <__lshift+0xaa>
  40c92c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  40c930:	2100      	movs	r1, #0
  40c932:	f842 1b04 	str.w	r1, [r2], #4
  40c936:	4293      	cmp	r3, r2
  40c938:	d1fb      	bne.n	40c932 <__lshift+0x3e>
  40c93a:	6934      	ldr	r4, [r6, #16]
  40c93c:	f106 0114 	add.w	r1, r6, #20
  40c940:	f019 091f 	ands.w	r9, r9, #31
  40c944:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40c948:	d021      	beq.n	40c98e <__lshift+0x9a>
  40c94a:	f1c9 0220 	rsb	r2, r9, #32
  40c94e:	2400      	movs	r4, #0
  40c950:	680f      	ldr	r7, [r1, #0]
  40c952:	fa07 fc09 	lsl.w	ip, r7, r9
  40c956:	ea4c 0404 	orr.w	r4, ip, r4
  40c95a:	469c      	mov	ip, r3
  40c95c:	f843 4b04 	str.w	r4, [r3], #4
  40c960:	f851 4b04 	ldr.w	r4, [r1], #4
  40c964:	458e      	cmp	lr, r1
  40c966:	fa24 f402 	lsr.w	r4, r4, r2
  40c96a:	d8f1      	bhi.n	40c950 <__lshift+0x5c>
  40c96c:	f8cc 4004 	str.w	r4, [ip, #4]
  40c970:	b10c      	cbz	r4, 40c976 <__lshift+0x82>
  40c972:	f108 0502 	add.w	r5, r8, #2
  40c976:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  40c97a:	6872      	ldr	r2, [r6, #4]
  40c97c:	3d01      	subs	r5, #1
  40c97e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c982:	6105      	str	r5, [r0, #16]
  40c984:	6031      	str	r1, [r6, #0]
  40c986:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40c98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c98e:	3b04      	subs	r3, #4
  40c990:	f851 2b04 	ldr.w	r2, [r1], #4
  40c994:	f843 2f04 	str.w	r2, [r3, #4]!
  40c998:	458e      	cmp	lr, r1
  40c99a:	d8f9      	bhi.n	40c990 <__lshift+0x9c>
  40c99c:	e7eb      	b.n	40c976 <__lshift+0x82>
  40c99e:	4613      	mov	r3, r2
  40c9a0:	e7cb      	b.n	40c93a <__lshift+0x46>
  40c9a2:	bf00      	nop

0040c9a4 <__mcmp>:
  40c9a4:	6902      	ldr	r2, [r0, #16]
  40c9a6:	690b      	ldr	r3, [r1, #16]
  40c9a8:	1ad2      	subs	r2, r2, r3
  40c9aa:	d112      	bne.n	40c9d2 <__mcmp+0x2e>
  40c9ac:	009b      	lsls	r3, r3, #2
  40c9ae:	3014      	adds	r0, #20
  40c9b0:	3114      	adds	r1, #20
  40c9b2:	4419      	add	r1, r3
  40c9b4:	b410      	push	{r4}
  40c9b6:	4403      	add	r3, r0
  40c9b8:	e001      	b.n	40c9be <__mcmp+0x1a>
  40c9ba:	4298      	cmp	r0, r3
  40c9bc:	d20b      	bcs.n	40c9d6 <__mcmp+0x32>
  40c9be:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40c9c2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40c9c6:	4294      	cmp	r4, r2
  40c9c8:	d0f7      	beq.n	40c9ba <__mcmp+0x16>
  40c9ca:	d307      	bcc.n	40c9dc <__mcmp+0x38>
  40c9cc:	2001      	movs	r0, #1
  40c9ce:	bc10      	pop	{r4}
  40c9d0:	4770      	bx	lr
  40c9d2:	4610      	mov	r0, r2
  40c9d4:	4770      	bx	lr
  40c9d6:	2000      	movs	r0, #0
  40c9d8:	bc10      	pop	{r4}
  40c9da:	4770      	bx	lr
  40c9dc:	f04f 30ff 	mov.w	r0, #4294967295
  40c9e0:	e7f5      	b.n	40c9ce <__mcmp+0x2a>
  40c9e2:	bf00      	nop

0040c9e4 <__mdiff>:
  40c9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c9e8:	690b      	ldr	r3, [r1, #16]
  40c9ea:	460f      	mov	r7, r1
  40c9ec:	6911      	ldr	r1, [r2, #16]
  40c9ee:	1a5b      	subs	r3, r3, r1
  40c9f0:	2b00      	cmp	r3, #0
  40c9f2:	4690      	mov	r8, r2
  40c9f4:	d117      	bne.n	40ca26 <__mdiff+0x42>
  40c9f6:	0089      	lsls	r1, r1, #2
  40c9f8:	f107 0214 	add.w	r2, r7, #20
  40c9fc:	f108 0514 	add.w	r5, r8, #20
  40ca00:	1853      	adds	r3, r2, r1
  40ca02:	4429      	add	r1, r5
  40ca04:	e001      	b.n	40ca0a <__mdiff+0x26>
  40ca06:	429a      	cmp	r2, r3
  40ca08:	d25e      	bcs.n	40cac8 <__mdiff+0xe4>
  40ca0a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  40ca0e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40ca12:	42a6      	cmp	r6, r4
  40ca14:	d0f7      	beq.n	40ca06 <__mdiff+0x22>
  40ca16:	d260      	bcs.n	40cada <__mdiff+0xf6>
  40ca18:	463b      	mov	r3, r7
  40ca1a:	4614      	mov	r4, r2
  40ca1c:	4647      	mov	r7, r8
  40ca1e:	f04f 0901 	mov.w	r9, #1
  40ca22:	4698      	mov	r8, r3
  40ca24:	e006      	b.n	40ca34 <__mdiff+0x50>
  40ca26:	db5d      	blt.n	40cae4 <__mdiff+0x100>
  40ca28:	f107 0514 	add.w	r5, r7, #20
  40ca2c:	f102 0414 	add.w	r4, r2, #20
  40ca30:	f04f 0900 	mov.w	r9, #0
  40ca34:	6879      	ldr	r1, [r7, #4]
  40ca36:	f7ff fdad 	bl	40c594 <_Balloc>
  40ca3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40ca3e:	693e      	ldr	r6, [r7, #16]
  40ca40:	f8c0 900c 	str.w	r9, [r0, #12]
  40ca44:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40ca48:	46a6      	mov	lr, r4
  40ca4a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40ca4e:	f100 0414 	add.w	r4, r0, #20
  40ca52:	2300      	movs	r3, #0
  40ca54:	f85e 1b04 	ldr.w	r1, [lr], #4
  40ca58:	f855 8b04 	ldr.w	r8, [r5], #4
  40ca5c:	b28a      	uxth	r2, r1
  40ca5e:	fa13 f388 	uxtah	r3, r3, r8
  40ca62:	0c09      	lsrs	r1, r1, #16
  40ca64:	1a9a      	subs	r2, r3, r2
  40ca66:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40ca6a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40ca6e:	b292      	uxth	r2, r2
  40ca70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40ca74:	45f4      	cmp	ip, lr
  40ca76:	f844 2b04 	str.w	r2, [r4], #4
  40ca7a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ca7e:	d8e9      	bhi.n	40ca54 <__mdiff+0x70>
  40ca80:	42af      	cmp	r7, r5
  40ca82:	d917      	bls.n	40cab4 <__mdiff+0xd0>
  40ca84:	46a4      	mov	ip, r4
  40ca86:	4629      	mov	r1, r5
  40ca88:	f851 eb04 	ldr.w	lr, [r1], #4
  40ca8c:	fa13 f28e 	uxtah	r2, r3, lr
  40ca90:	1413      	asrs	r3, r2, #16
  40ca92:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  40ca96:	b292      	uxth	r2, r2
  40ca98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40ca9c:	428f      	cmp	r7, r1
  40ca9e:	f84c 2b04 	str.w	r2, [ip], #4
  40caa2:	ea4f 4323 	mov.w	r3, r3, asr #16
  40caa6:	d8ef      	bhi.n	40ca88 <__mdiff+0xa4>
  40caa8:	43ed      	mvns	r5, r5
  40caaa:	443d      	add	r5, r7
  40caac:	f025 0503 	bic.w	r5, r5, #3
  40cab0:	3504      	adds	r5, #4
  40cab2:	442c      	add	r4, r5
  40cab4:	3c04      	subs	r4, #4
  40cab6:	b922      	cbnz	r2, 40cac2 <__mdiff+0xde>
  40cab8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40cabc:	3e01      	subs	r6, #1
  40cabe:	2b00      	cmp	r3, #0
  40cac0:	d0fa      	beq.n	40cab8 <__mdiff+0xd4>
  40cac2:	6106      	str	r6, [r0, #16]
  40cac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40cac8:	2100      	movs	r1, #0
  40caca:	f7ff fd63 	bl	40c594 <_Balloc>
  40cace:	2201      	movs	r2, #1
  40cad0:	2300      	movs	r3, #0
  40cad2:	6102      	str	r2, [r0, #16]
  40cad4:	6143      	str	r3, [r0, #20]
  40cad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40cada:	462c      	mov	r4, r5
  40cadc:	f04f 0900 	mov.w	r9, #0
  40cae0:	4615      	mov	r5, r2
  40cae2:	e7a7      	b.n	40ca34 <__mdiff+0x50>
  40cae4:	463b      	mov	r3, r7
  40cae6:	f107 0414 	add.w	r4, r7, #20
  40caea:	f108 0514 	add.w	r5, r8, #20
  40caee:	4647      	mov	r7, r8
  40caf0:	f04f 0901 	mov.w	r9, #1
  40caf4:	4698      	mov	r8, r3
  40caf6:	e79d      	b.n	40ca34 <__mdiff+0x50>

0040caf8 <__d2b>:
  40caf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cafc:	b082      	sub	sp, #8
  40cafe:	2101      	movs	r1, #1
  40cb00:	461c      	mov	r4, r3
  40cb02:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40cb06:	4615      	mov	r5, r2
  40cb08:	9e08      	ldr	r6, [sp, #32]
  40cb0a:	f7ff fd43 	bl	40c594 <_Balloc>
  40cb0e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40cb12:	4680      	mov	r8, r0
  40cb14:	b10f      	cbz	r7, 40cb1a <__d2b+0x22>
  40cb16:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40cb1a:	9401      	str	r4, [sp, #4]
  40cb1c:	b31d      	cbz	r5, 40cb66 <__d2b+0x6e>
  40cb1e:	a802      	add	r0, sp, #8
  40cb20:	f840 5d08 	str.w	r5, [r0, #-8]!
  40cb24:	f7ff fdc6 	bl	40c6b4 <__lo0bits>
  40cb28:	2800      	cmp	r0, #0
  40cb2a:	d134      	bne.n	40cb96 <__d2b+0x9e>
  40cb2c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40cb30:	f8c8 2014 	str.w	r2, [r8, #20]
  40cb34:	2b00      	cmp	r3, #0
  40cb36:	bf0c      	ite	eq
  40cb38:	2101      	moveq	r1, #1
  40cb3a:	2102      	movne	r1, #2
  40cb3c:	f8c8 3018 	str.w	r3, [r8, #24]
  40cb40:	f8c8 1010 	str.w	r1, [r8, #16]
  40cb44:	b9df      	cbnz	r7, 40cb7e <__d2b+0x86>
  40cb46:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40cb4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40cb4e:	6030      	str	r0, [r6, #0]
  40cb50:	6918      	ldr	r0, [r3, #16]
  40cb52:	f7ff fd8f 	bl	40c674 <__hi0bits>
  40cb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40cb58:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40cb5c:	6018      	str	r0, [r3, #0]
  40cb5e:	4640      	mov	r0, r8
  40cb60:	b002      	add	sp, #8
  40cb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cb66:	a801      	add	r0, sp, #4
  40cb68:	f7ff fda4 	bl	40c6b4 <__lo0bits>
  40cb6c:	9b01      	ldr	r3, [sp, #4]
  40cb6e:	f8c8 3014 	str.w	r3, [r8, #20]
  40cb72:	2101      	movs	r1, #1
  40cb74:	3020      	adds	r0, #32
  40cb76:	f8c8 1010 	str.w	r1, [r8, #16]
  40cb7a:	2f00      	cmp	r7, #0
  40cb7c:	d0e3      	beq.n	40cb46 <__d2b+0x4e>
  40cb7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40cb80:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40cb84:	4407      	add	r7, r0
  40cb86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40cb8a:	6037      	str	r7, [r6, #0]
  40cb8c:	6018      	str	r0, [r3, #0]
  40cb8e:	4640      	mov	r0, r8
  40cb90:	b002      	add	sp, #8
  40cb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cb96:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40cb9a:	f1c0 0120 	rsb	r1, r0, #32
  40cb9e:	fa03 f101 	lsl.w	r1, r3, r1
  40cba2:	430a      	orrs	r2, r1
  40cba4:	40c3      	lsrs	r3, r0
  40cba6:	9301      	str	r3, [sp, #4]
  40cba8:	f8c8 2014 	str.w	r2, [r8, #20]
  40cbac:	e7c2      	b.n	40cb34 <__d2b+0x3c>
  40cbae:	bf00      	nop

0040cbb0 <_realloc_r>:
  40cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cbb4:	4617      	mov	r7, r2
  40cbb6:	b083      	sub	sp, #12
  40cbb8:	2900      	cmp	r1, #0
  40cbba:	f000 80c1 	beq.w	40cd40 <_realloc_r+0x190>
  40cbbe:	460e      	mov	r6, r1
  40cbc0:	4681      	mov	r9, r0
  40cbc2:	f107 050b 	add.w	r5, r7, #11
  40cbc6:	f7ff fce1 	bl	40c58c <__malloc_lock>
  40cbca:	f856 ec04 	ldr.w	lr, [r6, #-4]
  40cbce:	2d16      	cmp	r5, #22
  40cbd0:	f02e 0403 	bic.w	r4, lr, #3
  40cbd4:	f1a6 0808 	sub.w	r8, r6, #8
  40cbd8:	d840      	bhi.n	40cc5c <_realloc_r+0xac>
  40cbda:	2210      	movs	r2, #16
  40cbdc:	4615      	mov	r5, r2
  40cbde:	42af      	cmp	r7, r5
  40cbe0:	d841      	bhi.n	40cc66 <_realloc_r+0xb6>
  40cbe2:	4294      	cmp	r4, r2
  40cbe4:	da75      	bge.n	40ccd2 <_realloc_r+0x122>
  40cbe6:	4bc9      	ldr	r3, [pc, #804]	; (40cf0c <_realloc_r+0x35c>)
  40cbe8:	6899      	ldr	r1, [r3, #8]
  40cbea:	eb08 0004 	add.w	r0, r8, r4
  40cbee:	4288      	cmp	r0, r1
  40cbf0:	6841      	ldr	r1, [r0, #4]
  40cbf2:	f000 80d9 	beq.w	40cda8 <_realloc_r+0x1f8>
  40cbf6:	f021 0301 	bic.w	r3, r1, #1
  40cbfa:	4403      	add	r3, r0
  40cbfc:	685b      	ldr	r3, [r3, #4]
  40cbfe:	07db      	lsls	r3, r3, #31
  40cc00:	d57d      	bpl.n	40ccfe <_realloc_r+0x14e>
  40cc02:	f01e 0f01 	tst.w	lr, #1
  40cc06:	d035      	beq.n	40cc74 <_realloc_r+0xc4>
  40cc08:	4639      	mov	r1, r7
  40cc0a:	4648      	mov	r0, r9
  40cc0c:	f7ff f8b8 	bl	40bd80 <_malloc_r>
  40cc10:	4607      	mov	r7, r0
  40cc12:	b1e0      	cbz	r0, 40cc4e <_realloc_r+0x9e>
  40cc14:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40cc18:	f023 0301 	bic.w	r3, r3, #1
  40cc1c:	4443      	add	r3, r8
  40cc1e:	f1a0 0208 	sub.w	r2, r0, #8
  40cc22:	429a      	cmp	r2, r3
  40cc24:	f000 8144 	beq.w	40ceb0 <_realloc_r+0x300>
  40cc28:	1f22      	subs	r2, r4, #4
  40cc2a:	2a24      	cmp	r2, #36	; 0x24
  40cc2c:	f200 8131 	bhi.w	40ce92 <_realloc_r+0x2e2>
  40cc30:	2a13      	cmp	r2, #19
  40cc32:	f200 8104 	bhi.w	40ce3e <_realloc_r+0x28e>
  40cc36:	4603      	mov	r3, r0
  40cc38:	4632      	mov	r2, r6
  40cc3a:	6811      	ldr	r1, [r2, #0]
  40cc3c:	6019      	str	r1, [r3, #0]
  40cc3e:	6851      	ldr	r1, [r2, #4]
  40cc40:	6059      	str	r1, [r3, #4]
  40cc42:	6892      	ldr	r2, [r2, #8]
  40cc44:	609a      	str	r2, [r3, #8]
  40cc46:	4631      	mov	r1, r6
  40cc48:	4648      	mov	r0, r9
  40cc4a:	f7fe fd7b 	bl	40b744 <_free_r>
  40cc4e:	4648      	mov	r0, r9
  40cc50:	f7ff fc9e 	bl	40c590 <__malloc_unlock>
  40cc54:	4638      	mov	r0, r7
  40cc56:	b003      	add	sp, #12
  40cc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cc5c:	f025 0507 	bic.w	r5, r5, #7
  40cc60:	2d00      	cmp	r5, #0
  40cc62:	462a      	mov	r2, r5
  40cc64:	dabb      	bge.n	40cbde <_realloc_r+0x2e>
  40cc66:	230c      	movs	r3, #12
  40cc68:	2000      	movs	r0, #0
  40cc6a:	f8c9 3000 	str.w	r3, [r9]
  40cc6e:	b003      	add	sp, #12
  40cc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cc74:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40cc78:	ebc3 0a08 	rsb	sl, r3, r8
  40cc7c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cc80:	f023 0c03 	bic.w	ip, r3, #3
  40cc84:	eb04 030c 	add.w	r3, r4, ip
  40cc88:	4293      	cmp	r3, r2
  40cc8a:	dbbd      	blt.n	40cc08 <_realloc_r+0x58>
  40cc8c:	4657      	mov	r7, sl
  40cc8e:	f8da 100c 	ldr.w	r1, [sl, #12]
  40cc92:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40cc96:	1f22      	subs	r2, r4, #4
  40cc98:	2a24      	cmp	r2, #36	; 0x24
  40cc9a:	60c1      	str	r1, [r0, #12]
  40cc9c:	6088      	str	r0, [r1, #8]
  40cc9e:	f200 8117 	bhi.w	40ced0 <_realloc_r+0x320>
  40cca2:	2a13      	cmp	r2, #19
  40cca4:	f240 8112 	bls.w	40cecc <_realloc_r+0x31c>
  40cca8:	6831      	ldr	r1, [r6, #0]
  40ccaa:	f8ca 1008 	str.w	r1, [sl, #8]
  40ccae:	6871      	ldr	r1, [r6, #4]
  40ccb0:	f8ca 100c 	str.w	r1, [sl, #12]
  40ccb4:	2a1b      	cmp	r2, #27
  40ccb6:	f200 812b 	bhi.w	40cf10 <_realloc_r+0x360>
  40ccba:	3608      	adds	r6, #8
  40ccbc:	f10a 0210 	add.w	r2, sl, #16
  40ccc0:	6831      	ldr	r1, [r6, #0]
  40ccc2:	6011      	str	r1, [r2, #0]
  40ccc4:	6871      	ldr	r1, [r6, #4]
  40ccc6:	6051      	str	r1, [r2, #4]
  40ccc8:	68b1      	ldr	r1, [r6, #8]
  40ccca:	6091      	str	r1, [r2, #8]
  40cccc:	463e      	mov	r6, r7
  40ccce:	461c      	mov	r4, r3
  40ccd0:	46d0      	mov	r8, sl
  40ccd2:	1b63      	subs	r3, r4, r5
  40ccd4:	2b0f      	cmp	r3, #15
  40ccd6:	d81d      	bhi.n	40cd14 <_realloc_r+0x164>
  40ccd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40ccdc:	f003 0301 	and.w	r3, r3, #1
  40cce0:	4323      	orrs	r3, r4
  40cce2:	4444      	add	r4, r8
  40cce4:	f8c8 3004 	str.w	r3, [r8, #4]
  40cce8:	6863      	ldr	r3, [r4, #4]
  40ccea:	f043 0301 	orr.w	r3, r3, #1
  40ccee:	6063      	str	r3, [r4, #4]
  40ccf0:	4648      	mov	r0, r9
  40ccf2:	f7ff fc4d 	bl	40c590 <__malloc_unlock>
  40ccf6:	4630      	mov	r0, r6
  40ccf8:	b003      	add	sp, #12
  40ccfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ccfe:	f021 0103 	bic.w	r1, r1, #3
  40cd02:	4421      	add	r1, r4
  40cd04:	4291      	cmp	r1, r2
  40cd06:	db21      	blt.n	40cd4c <_realloc_r+0x19c>
  40cd08:	68c3      	ldr	r3, [r0, #12]
  40cd0a:	6882      	ldr	r2, [r0, #8]
  40cd0c:	460c      	mov	r4, r1
  40cd0e:	60d3      	str	r3, [r2, #12]
  40cd10:	609a      	str	r2, [r3, #8]
  40cd12:	e7de      	b.n	40ccd2 <_realloc_r+0x122>
  40cd14:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40cd18:	eb08 0105 	add.w	r1, r8, r5
  40cd1c:	f002 0201 	and.w	r2, r2, #1
  40cd20:	4315      	orrs	r5, r2
  40cd22:	f043 0201 	orr.w	r2, r3, #1
  40cd26:	440b      	add	r3, r1
  40cd28:	f8c8 5004 	str.w	r5, [r8, #4]
  40cd2c:	604a      	str	r2, [r1, #4]
  40cd2e:	685a      	ldr	r2, [r3, #4]
  40cd30:	f042 0201 	orr.w	r2, r2, #1
  40cd34:	3108      	adds	r1, #8
  40cd36:	605a      	str	r2, [r3, #4]
  40cd38:	4648      	mov	r0, r9
  40cd3a:	f7fe fd03 	bl	40b744 <_free_r>
  40cd3e:	e7d7      	b.n	40ccf0 <_realloc_r+0x140>
  40cd40:	4611      	mov	r1, r2
  40cd42:	b003      	add	sp, #12
  40cd44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cd48:	f7ff b81a 	b.w	40bd80 <_malloc_r>
  40cd4c:	f01e 0f01 	tst.w	lr, #1
  40cd50:	f47f af5a 	bne.w	40cc08 <_realloc_r+0x58>
  40cd54:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40cd58:	ebc3 0a08 	rsb	sl, r3, r8
  40cd5c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cd60:	f023 0c03 	bic.w	ip, r3, #3
  40cd64:	eb01 0e0c 	add.w	lr, r1, ip
  40cd68:	4596      	cmp	lr, r2
  40cd6a:	db8b      	blt.n	40cc84 <_realloc_r+0xd4>
  40cd6c:	68c3      	ldr	r3, [r0, #12]
  40cd6e:	6882      	ldr	r2, [r0, #8]
  40cd70:	4657      	mov	r7, sl
  40cd72:	60d3      	str	r3, [r2, #12]
  40cd74:	609a      	str	r2, [r3, #8]
  40cd76:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40cd7a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40cd7e:	60cb      	str	r3, [r1, #12]
  40cd80:	1f22      	subs	r2, r4, #4
  40cd82:	2a24      	cmp	r2, #36	; 0x24
  40cd84:	6099      	str	r1, [r3, #8]
  40cd86:	f200 8099 	bhi.w	40cebc <_realloc_r+0x30c>
  40cd8a:	2a13      	cmp	r2, #19
  40cd8c:	d962      	bls.n	40ce54 <_realloc_r+0x2a4>
  40cd8e:	6833      	ldr	r3, [r6, #0]
  40cd90:	f8ca 3008 	str.w	r3, [sl, #8]
  40cd94:	6873      	ldr	r3, [r6, #4]
  40cd96:	f8ca 300c 	str.w	r3, [sl, #12]
  40cd9a:	2a1b      	cmp	r2, #27
  40cd9c:	f200 80a0 	bhi.w	40cee0 <_realloc_r+0x330>
  40cda0:	3608      	adds	r6, #8
  40cda2:	f10a 0310 	add.w	r3, sl, #16
  40cda6:	e056      	b.n	40ce56 <_realloc_r+0x2a6>
  40cda8:	f021 0b03 	bic.w	fp, r1, #3
  40cdac:	44a3      	add	fp, r4
  40cdae:	f105 0010 	add.w	r0, r5, #16
  40cdb2:	4583      	cmp	fp, r0
  40cdb4:	da59      	bge.n	40ce6a <_realloc_r+0x2ba>
  40cdb6:	f01e 0f01 	tst.w	lr, #1
  40cdba:	f47f af25 	bne.w	40cc08 <_realloc_r+0x58>
  40cdbe:	f856 1c08 	ldr.w	r1, [r6, #-8]
  40cdc2:	ebc1 0a08 	rsb	sl, r1, r8
  40cdc6:	f8da 1004 	ldr.w	r1, [sl, #4]
  40cdca:	f021 0c03 	bic.w	ip, r1, #3
  40cdce:	44e3      	add	fp, ip
  40cdd0:	4558      	cmp	r0, fp
  40cdd2:	f73f af57 	bgt.w	40cc84 <_realloc_r+0xd4>
  40cdd6:	4657      	mov	r7, sl
  40cdd8:	f8da 100c 	ldr.w	r1, [sl, #12]
  40cddc:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40cde0:	1f22      	subs	r2, r4, #4
  40cde2:	2a24      	cmp	r2, #36	; 0x24
  40cde4:	60c1      	str	r1, [r0, #12]
  40cde6:	6088      	str	r0, [r1, #8]
  40cde8:	f200 80b4 	bhi.w	40cf54 <_realloc_r+0x3a4>
  40cdec:	2a13      	cmp	r2, #19
  40cdee:	f240 80a5 	bls.w	40cf3c <_realloc_r+0x38c>
  40cdf2:	6831      	ldr	r1, [r6, #0]
  40cdf4:	f8ca 1008 	str.w	r1, [sl, #8]
  40cdf8:	6871      	ldr	r1, [r6, #4]
  40cdfa:	f8ca 100c 	str.w	r1, [sl, #12]
  40cdfe:	2a1b      	cmp	r2, #27
  40ce00:	f200 80af 	bhi.w	40cf62 <_realloc_r+0x3b2>
  40ce04:	3608      	adds	r6, #8
  40ce06:	f10a 0210 	add.w	r2, sl, #16
  40ce0a:	6831      	ldr	r1, [r6, #0]
  40ce0c:	6011      	str	r1, [r2, #0]
  40ce0e:	6871      	ldr	r1, [r6, #4]
  40ce10:	6051      	str	r1, [r2, #4]
  40ce12:	68b1      	ldr	r1, [r6, #8]
  40ce14:	6091      	str	r1, [r2, #8]
  40ce16:	eb0a 0105 	add.w	r1, sl, r5
  40ce1a:	ebc5 020b 	rsb	r2, r5, fp
  40ce1e:	f042 0201 	orr.w	r2, r2, #1
  40ce22:	6099      	str	r1, [r3, #8]
  40ce24:	604a      	str	r2, [r1, #4]
  40ce26:	f8da 3004 	ldr.w	r3, [sl, #4]
  40ce2a:	f003 0301 	and.w	r3, r3, #1
  40ce2e:	431d      	orrs	r5, r3
  40ce30:	4648      	mov	r0, r9
  40ce32:	f8ca 5004 	str.w	r5, [sl, #4]
  40ce36:	f7ff fbab 	bl	40c590 <__malloc_unlock>
  40ce3a:	4638      	mov	r0, r7
  40ce3c:	e75c      	b.n	40ccf8 <_realloc_r+0x148>
  40ce3e:	6833      	ldr	r3, [r6, #0]
  40ce40:	6003      	str	r3, [r0, #0]
  40ce42:	6873      	ldr	r3, [r6, #4]
  40ce44:	6043      	str	r3, [r0, #4]
  40ce46:	2a1b      	cmp	r2, #27
  40ce48:	d827      	bhi.n	40ce9a <_realloc_r+0x2ea>
  40ce4a:	f100 0308 	add.w	r3, r0, #8
  40ce4e:	f106 0208 	add.w	r2, r6, #8
  40ce52:	e6f2      	b.n	40cc3a <_realloc_r+0x8a>
  40ce54:	463b      	mov	r3, r7
  40ce56:	6832      	ldr	r2, [r6, #0]
  40ce58:	601a      	str	r2, [r3, #0]
  40ce5a:	6872      	ldr	r2, [r6, #4]
  40ce5c:	605a      	str	r2, [r3, #4]
  40ce5e:	68b2      	ldr	r2, [r6, #8]
  40ce60:	609a      	str	r2, [r3, #8]
  40ce62:	463e      	mov	r6, r7
  40ce64:	4674      	mov	r4, lr
  40ce66:	46d0      	mov	r8, sl
  40ce68:	e733      	b.n	40ccd2 <_realloc_r+0x122>
  40ce6a:	eb08 0105 	add.w	r1, r8, r5
  40ce6e:	ebc5 0b0b 	rsb	fp, r5, fp
  40ce72:	f04b 0201 	orr.w	r2, fp, #1
  40ce76:	6099      	str	r1, [r3, #8]
  40ce78:	604a      	str	r2, [r1, #4]
  40ce7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40ce7e:	f003 0301 	and.w	r3, r3, #1
  40ce82:	431d      	orrs	r5, r3
  40ce84:	4648      	mov	r0, r9
  40ce86:	f846 5c04 	str.w	r5, [r6, #-4]
  40ce8a:	f7ff fb81 	bl	40c590 <__malloc_unlock>
  40ce8e:	4630      	mov	r0, r6
  40ce90:	e732      	b.n	40ccf8 <_realloc_r+0x148>
  40ce92:	4631      	mov	r1, r6
  40ce94:	f7ff fb16 	bl	40c4c4 <memmove>
  40ce98:	e6d5      	b.n	40cc46 <_realloc_r+0x96>
  40ce9a:	68b3      	ldr	r3, [r6, #8]
  40ce9c:	6083      	str	r3, [r0, #8]
  40ce9e:	68f3      	ldr	r3, [r6, #12]
  40cea0:	60c3      	str	r3, [r0, #12]
  40cea2:	2a24      	cmp	r2, #36	; 0x24
  40cea4:	d028      	beq.n	40cef8 <_realloc_r+0x348>
  40cea6:	f100 0310 	add.w	r3, r0, #16
  40ceaa:	f106 0210 	add.w	r2, r6, #16
  40ceae:	e6c4      	b.n	40cc3a <_realloc_r+0x8a>
  40ceb0:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40ceb4:	f023 0303 	bic.w	r3, r3, #3
  40ceb8:	441c      	add	r4, r3
  40ceba:	e70a      	b.n	40ccd2 <_realloc_r+0x122>
  40cebc:	4631      	mov	r1, r6
  40cebe:	4638      	mov	r0, r7
  40cec0:	4674      	mov	r4, lr
  40cec2:	46d0      	mov	r8, sl
  40cec4:	f7ff fafe 	bl	40c4c4 <memmove>
  40cec8:	463e      	mov	r6, r7
  40ceca:	e702      	b.n	40ccd2 <_realloc_r+0x122>
  40cecc:	463a      	mov	r2, r7
  40cece:	e6f7      	b.n	40ccc0 <_realloc_r+0x110>
  40ced0:	4631      	mov	r1, r6
  40ced2:	4638      	mov	r0, r7
  40ced4:	461c      	mov	r4, r3
  40ced6:	46d0      	mov	r8, sl
  40ced8:	f7ff faf4 	bl	40c4c4 <memmove>
  40cedc:	463e      	mov	r6, r7
  40cede:	e6f8      	b.n	40ccd2 <_realloc_r+0x122>
  40cee0:	68b3      	ldr	r3, [r6, #8]
  40cee2:	f8ca 3010 	str.w	r3, [sl, #16]
  40cee6:	68f3      	ldr	r3, [r6, #12]
  40cee8:	f8ca 3014 	str.w	r3, [sl, #20]
  40ceec:	2a24      	cmp	r2, #36	; 0x24
  40ceee:	d01b      	beq.n	40cf28 <_realloc_r+0x378>
  40cef0:	3610      	adds	r6, #16
  40cef2:	f10a 0318 	add.w	r3, sl, #24
  40cef6:	e7ae      	b.n	40ce56 <_realloc_r+0x2a6>
  40cef8:	6933      	ldr	r3, [r6, #16]
  40cefa:	6103      	str	r3, [r0, #16]
  40cefc:	6973      	ldr	r3, [r6, #20]
  40cefe:	6143      	str	r3, [r0, #20]
  40cf00:	f106 0218 	add.w	r2, r6, #24
  40cf04:	f100 0318 	add.w	r3, r0, #24
  40cf08:	e697      	b.n	40cc3a <_realloc_r+0x8a>
  40cf0a:	bf00      	nop
  40cf0c:	204004a8 	.word	0x204004a8
  40cf10:	68b1      	ldr	r1, [r6, #8]
  40cf12:	f8ca 1010 	str.w	r1, [sl, #16]
  40cf16:	68f1      	ldr	r1, [r6, #12]
  40cf18:	f8ca 1014 	str.w	r1, [sl, #20]
  40cf1c:	2a24      	cmp	r2, #36	; 0x24
  40cf1e:	d00f      	beq.n	40cf40 <_realloc_r+0x390>
  40cf20:	3610      	adds	r6, #16
  40cf22:	f10a 0218 	add.w	r2, sl, #24
  40cf26:	e6cb      	b.n	40ccc0 <_realloc_r+0x110>
  40cf28:	6933      	ldr	r3, [r6, #16]
  40cf2a:	f8ca 3018 	str.w	r3, [sl, #24]
  40cf2e:	6973      	ldr	r3, [r6, #20]
  40cf30:	f8ca 301c 	str.w	r3, [sl, #28]
  40cf34:	3618      	adds	r6, #24
  40cf36:	f10a 0320 	add.w	r3, sl, #32
  40cf3a:	e78c      	b.n	40ce56 <_realloc_r+0x2a6>
  40cf3c:	463a      	mov	r2, r7
  40cf3e:	e764      	b.n	40ce0a <_realloc_r+0x25a>
  40cf40:	6932      	ldr	r2, [r6, #16]
  40cf42:	f8ca 2018 	str.w	r2, [sl, #24]
  40cf46:	6972      	ldr	r2, [r6, #20]
  40cf48:	f8ca 201c 	str.w	r2, [sl, #28]
  40cf4c:	3618      	adds	r6, #24
  40cf4e:	f10a 0220 	add.w	r2, sl, #32
  40cf52:	e6b5      	b.n	40ccc0 <_realloc_r+0x110>
  40cf54:	4631      	mov	r1, r6
  40cf56:	4638      	mov	r0, r7
  40cf58:	9301      	str	r3, [sp, #4]
  40cf5a:	f7ff fab3 	bl	40c4c4 <memmove>
  40cf5e:	9b01      	ldr	r3, [sp, #4]
  40cf60:	e759      	b.n	40ce16 <_realloc_r+0x266>
  40cf62:	68b1      	ldr	r1, [r6, #8]
  40cf64:	f8ca 1010 	str.w	r1, [sl, #16]
  40cf68:	68f1      	ldr	r1, [r6, #12]
  40cf6a:	f8ca 1014 	str.w	r1, [sl, #20]
  40cf6e:	2a24      	cmp	r2, #36	; 0x24
  40cf70:	d003      	beq.n	40cf7a <_realloc_r+0x3ca>
  40cf72:	3610      	adds	r6, #16
  40cf74:	f10a 0218 	add.w	r2, sl, #24
  40cf78:	e747      	b.n	40ce0a <_realloc_r+0x25a>
  40cf7a:	6932      	ldr	r2, [r6, #16]
  40cf7c:	f8ca 2018 	str.w	r2, [sl, #24]
  40cf80:	6972      	ldr	r2, [r6, #20]
  40cf82:	f8ca 201c 	str.w	r2, [sl, #28]
  40cf86:	3618      	adds	r6, #24
  40cf88:	f10a 0220 	add.w	r2, sl, #32
  40cf8c:	e73d      	b.n	40ce0a <_realloc_r+0x25a>
  40cf8e:	bf00      	nop

0040cf90 <_sbrk_r>:
  40cf90:	b538      	push	{r3, r4, r5, lr}
  40cf92:	4c07      	ldr	r4, [pc, #28]	; (40cfb0 <_sbrk_r+0x20>)
  40cf94:	2300      	movs	r3, #0
  40cf96:	4605      	mov	r5, r0
  40cf98:	4608      	mov	r0, r1
  40cf9a:	6023      	str	r3, [r4, #0]
  40cf9c:	f7f9 fb2a 	bl	4065f4 <_sbrk>
  40cfa0:	1c43      	adds	r3, r0, #1
  40cfa2:	d000      	beq.n	40cfa6 <_sbrk_r+0x16>
  40cfa4:	bd38      	pop	{r3, r4, r5, pc}
  40cfa6:	6823      	ldr	r3, [r4, #0]
  40cfa8:	2b00      	cmp	r3, #0
  40cfaa:	d0fb      	beq.n	40cfa4 <_sbrk_r+0x14>
  40cfac:	602b      	str	r3, [r5, #0]
  40cfae:	bd38      	pop	{r3, r4, r5, pc}
  40cfb0:	20401be0 	.word	0x20401be0

0040cfb4 <__sread>:
  40cfb4:	b510      	push	{r4, lr}
  40cfb6:	460c      	mov	r4, r1
  40cfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cfbc:	f000 fa74 	bl	40d4a8 <_read_r>
  40cfc0:	2800      	cmp	r0, #0
  40cfc2:	db03      	blt.n	40cfcc <__sread+0x18>
  40cfc4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40cfc6:	4403      	add	r3, r0
  40cfc8:	6523      	str	r3, [r4, #80]	; 0x50
  40cfca:	bd10      	pop	{r4, pc}
  40cfcc:	89a3      	ldrh	r3, [r4, #12]
  40cfce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40cfd2:	81a3      	strh	r3, [r4, #12]
  40cfd4:	bd10      	pop	{r4, pc}
  40cfd6:	bf00      	nop

0040cfd8 <__swrite>:
  40cfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cfdc:	4616      	mov	r6, r2
  40cfde:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40cfe2:	461f      	mov	r7, r3
  40cfe4:	05d3      	lsls	r3, r2, #23
  40cfe6:	460c      	mov	r4, r1
  40cfe8:	4605      	mov	r5, r0
  40cfea:	d507      	bpl.n	40cffc <__swrite+0x24>
  40cfec:	2200      	movs	r2, #0
  40cfee:	2302      	movs	r3, #2
  40cff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cff4:	f000 fa42 	bl	40d47c <_lseek_r>
  40cff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40cffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40d000:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40d004:	81a2      	strh	r2, [r4, #12]
  40d006:	463b      	mov	r3, r7
  40d008:	4632      	mov	r2, r6
  40d00a:	4628      	mov	r0, r5
  40d00c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40d010:	f000 b922 	b.w	40d258 <_write_r>

0040d014 <__sseek>:
  40d014:	b510      	push	{r4, lr}
  40d016:	460c      	mov	r4, r1
  40d018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d01c:	f000 fa2e 	bl	40d47c <_lseek_r>
  40d020:	89a3      	ldrh	r3, [r4, #12]
  40d022:	1c42      	adds	r2, r0, #1
  40d024:	bf0e      	itee	eq
  40d026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40d02a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40d02e:	6520      	strne	r0, [r4, #80]	; 0x50
  40d030:	81a3      	strh	r3, [r4, #12]
  40d032:	bd10      	pop	{r4, pc}

0040d034 <__sclose>:
  40d034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d038:	f000 b9a6 	b.w	40d388 <_close_r>

0040d03c <__ssprint_r>:
  40d03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d040:	6893      	ldr	r3, [r2, #8]
  40d042:	b083      	sub	sp, #12
  40d044:	4690      	mov	r8, r2
  40d046:	2b00      	cmp	r3, #0
  40d048:	d072      	beq.n	40d130 <__ssprint_r+0xf4>
  40d04a:	4683      	mov	fp, r0
  40d04c:	f04f 0900 	mov.w	r9, #0
  40d050:	6816      	ldr	r6, [r2, #0]
  40d052:	6808      	ldr	r0, [r1, #0]
  40d054:	688b      	ldr	r3, [r1, #8]
  40d056:	460d      	mov	r5, r1
  40d058:	464c      	mov	r4, r9
  40d05a:	2c00      	cmp	r4, #0
  40d05c:	d045      	beq.n	40d0ea <__ssprint_r+0xae>
  40d05e:	429c      	cmp	r4, r3
  40d060:	461f      	mov	r7, r3
  40d062:	469a      	mov	sl, r3
  40d064:	d346      	bcc.n	40d0f4 <__ssprint_r+0xb8>
  40d066:	89ab      	ldrh	r3, [r5, #12]
  40d068:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40d06c:	d02d      	beq.n	40d0ca <__ssprint_r+0x8e>
  40d06e:	696f      	ldr	r7, [r5, #20]
  40d070:	6929      	ldr	r1, [r5, #16]
  40d072:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40d076:	ebc1 0a00 	rsb	sl, r1, r0
  40d07a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40d07e:	1c60      	adds	r0, r4, #1
  40d080:	107f      	asrs	r7, r7, #1
  40d082:	4450      	add	r0, sl
  40d084:	42b8      	cmp	r0, r7
  40d086:	463a      	mov	r2, r7
  40d088:	bf84      	itt	hi
  40d08a:	4607      	movhi	r7, r0
  40d08c:	463a      	movhi	r2, r7
  40d08e:	055b      	lsls	r3, r3, #21
  40d090:	d533      	bpl.n	40d0fa <__ssprint_r+0xbe>
  40d092:	4611      	mov	r1, r2
  40d094:	4658      	mov	r0, fp
  40d096:	f7fe fe73 	bl	40bd80 <_malloc_r>
  40d09a:	2800      	cmp	r0, #0
  40d09c:	d037      	beq.n	40d10e <__ssprint_r+0xd2>
  40d09e:	4652      	mov	r2, sl
  40d0a0:	6929      	ldr	r1, [r5, #16]
  40d0a2:	9001      	str	r0, [sp, #4]
  40d0a4:	f7ff f974 	bl	40c390 <memcpy>
  40d0a8:	89aa      	ldrh	r2, [r5, #12]
  40d0aa:	9b01      	ldr	r3, [sp, #4]
  40d0ac:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40d0b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40d0b4:	81aa      	strh	r2, [r5, #12]
  40d0b6:	ebca 0207 	rsb	r2, sl, r7
  40d0ba:	eb03 000a 	add.w	r0, r3, sl
  40d0be:	616f      	str	r7, [r5, #20]
  40d0c0:	612b      	str	r3, [r5, #16]
  40d0c2:	6028      	str	r0, [r5, #0]
  40d0c4:	60aa      	str	r2, [r5, #8]
  40d0c6:	4627      	mov	r7, r4
  40d0c8:	46a2      	mov	sl, r4
  40d0ca:	4652      	mov	r2, sl
  40d0cc:	4649      	mov	r1, r9
  40d0ce:	f7ff f9f9 	bl	40c4c4 <memmove>
  40d0d2:	f8d8 2008 	ldr.w	r2, [r8, #8]
  40d0d6:	68ab      	ldr	r3, [r5, #8]
  40d0d8:	6828      	ldr	r0, [r5, #0]
  40d0da:	1bdb      	subs	r3, r3, r7
  40d0dc:	4450      	add	r0, sl
  40d0de:	1b14      	subs	r4, r2, r4
  40d0e0:	60ab      	str	r3, [r5, #8]
  40d0e2:	6028      	str	r0, [r5, #0]
  40d0e4:	f8c8 4008 	str.w	r4, [r8, #8]
  40d0e8:	b314      	cbz	r4, 40d130 <__ssprint_r+0xf4>
  40d0ea:	f8d6 9000 	ldr.w	r9, [r6]
  40d0ee:	6874      	ldr	r4, [r6, #4]
  40d0f0:	3608      	adds	r6, #8
  40d0f2:	e7b2      	b.n	40d05a <__ssprint_r+0x1e>
  40d0f4:	4627      	mov	r7, r4
  40d0f6:	46a2      	mov	sl, r4
  40d0f8:	e7e7      	b.n	40d0ca <__ssprint_r+0x8e>
  40d0fa:	4658      	mov	r0, fp
  40d0fc:	f7ff fd58 	bl	40cbb0 <_realloc_r>
  40d100:	4603      	mov	r3, r0
  40d102:	2800      	cmp	r0, #0
  40d104:	d1d7      	bne.n	40d0b6 <__ssprint_r+0x7a>
  40d106:	6929      	ldr	r1, [r5, #16]
  40d108:	4658      	mov	r0, fp
  40d10a:	f7fe fb1b 	bl	40b744 <_free_r>
  40d10e:	230c      	movs	r3, #12
  40d110:	f8cb 3000 	str.w	r3, [fp]
  40d114:	89ab      	ldrh	r3, [r5, #12]
  40d116:	2200      	movs	r2, #0
  40d118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d11c:	f04f 30ff 	mov.w	r0, #4294967295
  40d120:	81ab      	strh	r3, [r5, #12]
  40d122:	f8c8 2008 	str.w	r2, [r8, #8]
  40d126:	f8c8 2004 	str.w	r2, [r8, #4]
  40d12a:	b003      	add	sp, #12
  40d12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d130:	2000      	movs	r0, #0
  40d132:	f8c8 0004 	str.w	r0, [r8, #4]
  40d136:	b003      	add	sp, #12
  40d138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d13c <__swbuf_r>:
  40d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d13e:	460e      	mov	r6, r1
  40d140:	4614      	mov	r4, r2
  40d142:	4607      	mov	r7, r0
  40d144:	b110      	cbz	r0, 40d14c <__swbuf_r+0x10>
  40d146:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d148:	2b00      	cmp	r3, #0
  40d14a:	d04a      	beq.n	40d1e2 <__swbuf_r+0xa6>
  40d14c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d150:	69a3      	ldr	r3, [r4, #24]
  40d152:	60a3      	str	r3, [r4, #8]
  40d154:	b291      	uxth	r1, r2
  40d156:	0708      	lsls	r0, r1, #28
  40d158:	d538      	bpl.n	40d1cc <__swbuf_r+0x90>
  40d15a:	6923      	ldr	r3, [r4, #16]
  40d15c:	2b00      	cmp	r3, #0
  40d15e:	d035      	beq.n	40d1cc <__swbuf_r+0x90>
  40d160:	0489      	lsls	r1, r1, #18
  40d162:	b2f5      	uxtb	r5, r6
  40d164:	d515      	bpl.n	40d192 <__swbuf_r+0x56>
  40d166:	6822      	ldr	r2, [r4, #0]
  40d168:	6961      	ldr	r1, [r4, #20]
  40d16a:	1ad3      	subs	r3, r2, r3
  40d16c:	428b      	cmp	r3, r1
  40d16e:	da1c      	bge.n	40d1aa <__swbuf_r+0x6e>
  40d170:	3301      	adds	r3, #1
  40d172:	68a1      	ldr	r1, [r4, #8]
  40d174:	1c50      	adds	r0, r2, #1
  40d176:	3901      	subs	r1, #1
  40d178:	60a1      	str	r1, [r4, #8]
  40d17a:	6020      	str	r0, [r4, #0]
  40d17c:	7016      	strb	r6, [r2, #0]
  40d17e:	6962      	ldr	r2, [r4, #20]
  40d180:	429a      	cmp	r2, r3
  40d182:	d01a      	beq.n	40d1ba <__swbuf_r+0x7e>
  40d184:	89a3      	ldrh	r3, [r4, #12]
  40d186:	07db      	lsls	r3, r3, #31
  40d188:	d501      	bpl.n	40d18e <__swbuf_r+0x52>
  40d18a:	2d0a      	cmp	r5, #10
  40d18c:	d015      	beq.n	40d1ba <__swbuf_r+0x7e>
  40d18e:	4628      	mov	r0, r5
  40d190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d192:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40d194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40d198:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40d19c:	81a2      	strh	r2, [r4, #12]
  40d19e:	6822      	ldr	r2, [r4, #0]
  40d1a0:	6661      	str	r1, [r4, #100]	; 0x64
  40d1a2:	6961      	ldr	r1, [r4, #20]
  40d1a4:	1ad3      	subs	r3, r2, r3
  40d1a6:	428b      	cmp	r3, r1
  40d1a8:	dbe2      	blt.n	40d170 <__swbuf_r+0x34>
  40d1aa:	4621      	mov	r1, r4
  40d1ac:	4638      	mov	r0, r7
  40d1ae:	f7fe f96b 	bl	40b488 <_fflush_r>
  40d1b2:	b940      	cbnz	r0, 40d1c6 <__swbuf_r+0x8a>
  40d1b4:	6822      	ldr	r2, [r4, #0]
  40d1b6:	2301      	movs	r3, #1
  40d1b8:	e7db      	b.n	40d172 <__swbuf_r+0x36>
  40d1ba:	4621      	mov	r1, r4
  40d1bc:	4638      	mov	r0, r7
  40d1be:	f7fe f963 	bl	40b488 <_fflush_r>
  40d1c2:	2800      	cmp	r0, #0
  40d1c4:	d0e3      	beq.n	40d18e <__swbuf_r+0x52>
  40d1c6:	f04f 30ff 	mov.w	r0, #4294967295
  40d1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d1cc:	4621      	mov	r1, r4
  40d1ce:	4638      	mov	r0, r7
  40d1d0:	f7fd f882 	bl	40a2d8 <__swsetup_r>
  40d1d4:	2800      	cmp	r0, #0
  40d1d6:	d1f6      	bne.n	40d1c6 <__swbuf_r+0x8a>
  40d1d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d1dc:	6923      	ldr	r3, [r4, #16]
  40d1de:	b291      	uxth	r1, r2
  40d1e0:	e7be      	b.n	40d160 <__swbuf_r+0x24>
  40d1e2:	f7fe f9e5 	bl	40b5b0 <__sinit>
  40d1e6:	e7b1      	b.n	40d14c <__swbuf_r+0x10>

0040d1e8 <_wcrtomb_r>:
  40d1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d1ec:	4605      	mov	r5, r0
  40d1ee:	b086      	sub	sp, #24
  40d1f0:	461e      	mov	r6, r3
  40d1f2:	460c      	mov	r4, r1
  40d1f4:	b1a1      	cbz	r1, 40d220 <_wcrtomb_r+0x38>
  40d1f6:	4b10      	ldr	r3, [pc, #64]	; (40d238 <_wcrtomb_r+0x50>)
  40d1f8:	4617      	mov	r7, r2
  40d1fa:	f8d3 8000 	ldr.w	r8, [r3]
  40d1fe:	f7fe fd35 	bl	40bc6c <__locale_charset>
  40d202:	9600      	str	r6, [sp, #0]
  40d204:	4603      	mov	r3, r0
  40d206:	463a      	mov	r2, r7
  40d208:	4621      	mov	r1, r4
  40d20a:	4628      	mov	r0, r5
  40d20c:	47c0      	blx	r8
  40d20e:	1c43      	adds	r3, r0, #1
  40d210:	d103      	bne.n	40d21a <_wcrtomb_r+0x32>
  40d212:	2200      	movs	r2, #0
  40d214:	238a      	movs	r3, #138	; 0x8a
  40d216:	6032      	str	r2, [r6, #0]
  40d218:	602b      	str	r3, [r5, #0]
  40d21a:	b006      	add	sp, #24
  40d21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d220:	4b05      	ldr	r3, [pc, #20]	; (40d238 <_wcrtomb_r+0x50>)
  40d222:	681f      	ldr	r7, [r3, #0]
  40d224:	f7fe fd22 	bl	40bc6c <__locale_charset>
  40d228:	9600      	str	r6, [sp, #0]
  40d22a:	4603      	mov	r3, r0
  40d22c:	4622      	mov	r2, r4
  40d22e:	a903      	add	r1, sp, #12
  40d230:	4628      	mov	r0, r5
  40d232:	47b8      	blx	r7
  40d234:	e7eb      	b.n	40d20e <_wcrtomb_r+0x26>
  40d236:	bf00      	nop
  40d238:	204008b8 	.word	0x204008b8

0040d23c <__ascii_wctomb>:
  40d23c:	b121      	cbz	r1, 40d248 <__ascii_wctomb+0xc>
  40d23e:	2aff      	cmp	r2, #255	; 0xff
  40d240:	d804      	bhi.n	40d24c <__ascii_wctomb+0x10>
  40d242:	700a      	strb	r2, [r1, #0]
  40d244:	2001      	movs	r0, #1
  40d246:	4770      	bx	lr
  40d248:	4608      	mov	r0, r1
  40d24a:	4770      	bx	lr
  40d24c:	238a      	movs	r3, #138	; 0x8a
  40d24e:	6003      	str	r3, [r0, #0]
  40d250:	f04f 30ff 	mov.w	r0, #4294967295
  40d254:	4770      	bx	lr
  40d256:	bf00      	nop

0040d258 <_write_r>:
  40d258:	b570      	push	{r4, r5, r6, lr}
  40d25a:	460d      	mov	r5, r1
  40d25c:	4c08      	ldr	r4, [pc, #32]	; (40d280 <_write_r+0x28>)
  40d25e:	4611      	mov	r1, r2
  40d260:	4606      	mov	r6, r0
  40d262:	461a      	mov	r2, r3
  40d264:	4628      	mov	r0, r5
  40d266:	2300      	movs	r3, #0
  40d268:	6023      	str	r3, [r4, #0]
  40d26a:	f7f7 fb53 	bl	404914 <_write>
  40d26e:	1c43      	adds	r3, r0, #1
  40d270:	d000      	beq.n	40d274 <_write_r+0x1c>
  40d272:	bd70      	pop	{r4, r5, r6, pc}
  40d274:	6823      	ldr	r3, [r4, #0]
  40d276:	2b00      	cmp	r3, #0
  40d278:	d0fb      	beq.n	40d272 <_write_r+0x1a>
  40d27a:	6033      	str	r3, [r6, #0]
  40d27c:	bd70      	pop	{r4, r5, r6, pc}
  40d27e:	bf00      	nop
  40d280:	20401be0 	.word	0x20401be0

0040d284 <__register_exitproc>:
  40d284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40d288:	4c25      	ldr	r4, [pc, #148]	; (40d320 <__register_exitproc+0x9c>)
  40d28a:	6825      	ldr	r5, [r4, #0]
  40d28c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40d290:	4606      	mov	r6, r0
  40d292:	4688      	mov	r8, r1
  40d294:	4692      	mov	sl, r2
  40d296:	4699      	mov	r9, r3
  40d298:	b3c4      	cbz	r4, 40d30c <__register_exitproc+0x88>
  40d29a:	6860      	ldr	r0, [r4, #4]
  40d29c:	281f      	cmp	r0, #31
  40d29e:	dc17      	bgt.n	40d2d0 <__register_exitproc+0x4c>
  40d2a0:	1c43      	adds	r3, r0, #1
  40d2a2:	b176      	cbz	r6, 40d2c2 <__register_exitproc+0x3e>
  40d2a4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40d2a8:	2201      	movs	r2, #1
  40d2aa:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40d2ae:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40d2b2:	4082      	lsls	r2, r0
  40d2b4:	4311      	orrs	r1, r2
  40d2b6:	2e02      	cmp	r6, #2
  40d2b8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40d2bc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40d2c0:	d01e      	beq.n	40d300 <__register_exitproc+0x7c>
  40d2c2:	3002      	adds	r0, #2
  40d2c4:	6063      	str	r3, [r4, #4]
  40d2c6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40d2ca:	2000      	movs	r0, #0
  40d2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d2d0:	4b14      	ldr	r3, [pc, #80]	; (40d324 <__register_exitproc+0xa0>)
  40d2d2:	b303      	cbz	r3, 40d316 <__register_exitproc+0x92>
  40d2d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40d2d8:	f7fe fd4a 	bl	40bd70 <malloc>
  40d2dc:	4604      	mov	r4, r0
  40d2de:	b1d0      	cbz	r0, 40d316 <__register_exitproc+0x92>
  40d2e0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40d2e4:	2700      	movs	r7, #0
  40d2e6:	e880 0088 	stmia.w	r0, {r3, r7}
  40d2ea:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40d2ee:	4638      	mov	r0, r7
  40d2f0:	2301      	movs	r3, #1
  40d2f2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40d2f6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40d2fa:	2e00      	cmp	r6, #0
  40d2fc:	d0e1      	beq.n	40d2c2 <__register_exitproc+0x3e>
  40d2fe:	e7d1      	b.n	40d2a4 <__register_exitproc+0x20>
  40d300:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40d304:	430a      	orrs	r2, r1
  40d306:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40d30a:	e7da      	b.n	40d2c2 <__register_exitproc+0x3e>
  40d30c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40d310:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40d314:	e7c1      	b.n	40d29a <__register_exitproc+0x16>
  40d316:	f04f 30ff 	mov.w	r0, #4294967295
  40d31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d31e:	bf00      	nop
  40d320:	0040f004 	.word	0x0040f004
  40d324:	0040bd71 	.word	0x0040bd71

0040d328 <_calloc_r>:
  40d328:	b510      	push	{r4, lr}
  40d32a:	fb02 f101 	mul.w	r1, r2, r1
  40d32e:	f7fe fd27 	bl	40bd80 <_malloc_r>
  40d332:	4604      	mov	r4, r0
  40d334:	b1d8      	cbz	r0, 40d36e <_calloc_r+0x46>
  40d336:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40d33a:	f022 0203 	bic.w	r2, r2, #3
  40d33e:	3a04      	subs	r2, #4
  40d340:	2a24      	cmp	r2, #36	; 0x24
  40d342:	d818      	bhi.n	40d376 <_calloc_r+0x4e>
  40d344:	2a13      	cmp	r2, #19
  40d346:	d914      	bls.n	40d372 <_calloc_r+0x4a>
  40d348:	2300      	movs	r3, #0
  40d34a:	2a1b      	cmp	r2, #27
  40d34c:	6003      	str	r3, [r0, #0]
  40d34e:	6043      	str	r3, [r0, #4]
  40d350:	d916      	bls.n	40d380 <_calloc_r+0x58>
  40d352:	2a24      	cmp	r2, #36	; 0x24
  40d354:	6083      	str	r3, [r0, #8]
  40d356:	60c3      	str	r3, [r0, #12]
  40d358:	bf11      	iteee	ne
  40d35a:	f100 0210 	addne.w	r2, r0, #16
  40d35e:	6103      	streq	r3, [r0, #16]
  40d360:	6143      	streq	r3, [r0, #20]
  40d362:	f100 0218 	addeq.w	r2, r0, #24
  40d366:	2300      	movs	r3, #0
  40d368:	6013      	str	r3, [r2, #0]
  40d36a:	6053      	str	r3, [r2, #4]
  40d36c:	6093      	str	r3, [r2, #8]
  40d36e:	4620      	mov	r0, r4
  40d370:	bd10      	pop	{r4, pc}
  40d372:	4602      	mov	r2, r0
  40d374:	e7f7      	b.n	40d366 <_calloc_r+0x3e>
  40d376:	2100      	movs	r1, #0
  40d378:	f7fa fb48 	bl	407a0c <memset>
  40d37c:	4620      	mov	r0, r4
  40d37e:	bd10      	pop	{r4, pc}
  40d380:	f100 0208 	add.w	r2, r0, #8
  40d384:	e7ef      	b.n	40d366 <_calloc_r+0x3e>
  40d386:	bf00      	nop

0040d388 <_close_r>:
  40d388:	b538      	push	{r3, r4, r5, lr}
  40d38a:	4c07      	ldr	r4, [pc, #28]	; (40d3a8 <_close_r+0x20>)
  40d38c:	2300      	movs	r3, #0
  40d38e:	4605      	mov	r5, r0
  40d390:	4608      	mov	r0, r1
  40d392:	6023      	str	r3, [r4, #0]
  40d394:	f7f9 f95a 	bl	40664c <_close>
  40d398:	1c43      	adds	r3, r0, #1
  40d39a:	d000      	beq.n	40d39e <_close_r+0x16>
  40d39c:	bd38      	pop	{r3, r4, r5, pc}
  40d39e:	6823      	ldr	r3, [r4, #0]
  40d3a0:	2b00      	cmp	r3, #0
  40d3a2:	d0fb      	beq.n	40d39c <_close_r+0x14>
  40d3a4:	602b      	str	r3, [r5, #0]
  40d3a6:	bd38      	pop	{r3, r4, r5, pc}
  40d3a8:	20401be0 	.word	0x20401be0

0040d3ac <_fclose_r>:
  40d3ac:	2900      	cmp	r1, #0
  40d3ae:	d03d      	beq.n	40d42c <_fclose_r+0x80>
  40d3b0:	b570      	push	{r4, r5, r6, lr}
  40d3b2:	4605      	mov	r5, r0
  40d3b4:	460c      	mov	r4, r1
  40d3b6:	b108      	cbz	r0, 40d3bc <_fclose_r+0x10>
  40d3b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d3ba:	b37b      	cbz	r3, 40d41c <_fclose_r+0x70>
  40d3bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d3c0:	b90b      	cbnz	r3, 40d3c6 <_fclose_r+0x1a>
  40d3c2:	2000      	movs	r0, #0
  40d3c4:	bd70      	pop	{r4, r5, r6, pc}
  40d3c6:	4621      	mov	r1, r4
  40d3c8:	4628      	mov	r0, r5
  40d3ca:	f7fd ffb9 	bl	40b340 <__sflush_r>
  40d3ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40d3d0:	4606      	mov	r6, r0
  40d3d2:	b133      	cbz	r3, 40d3e2 <_fclose_r+0x36>
  40d3d4:	69e1      	ldr	r1, [r4, #28]
  40d3d6:	4628      	mov	r0, r5
  40d3d8:	4798      	blx	r3
  40d3da:	2800      	cmp	r0, #0
  40d3dc:	bfb8      	it	lt
  40d3de:	f04f 36ff 	movlt.w	r6, #4294967295
  40d3e2:	89a3      	ldrh	r3, [r4, #12]
  40d3e4:	061b      	lsls	r3, r3, #24
  40d3e6:	d41c      	bmi.n	40d422 <_fclose_r+0x76>
  40d3e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40d3ea:	b141      	cbz	r1, 40d3fe <_fclose_r+0x52>
  40d3ec:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40d3f0:	4299      	cmp	r1, r3
  40d3f2:	d002      	beq.n	40d3fa <_fclose_r+0x4e>
  40d3f4:	4628      	mov	r0, r5
  40d3f6:	f7fe f9a5 	bl	40b744 <_free_r>
  40d3fa:	2300      	movs	r3, #0
  40d3fc:	6323      	str	r3, [r4, #48]	; 0x30
  40d3fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40d400:	b121      	cbz	r1, 40d40c <_fclose_r+0x60>
  40d402:	4628      	mov	r0, r5
  40d404:	f7fe f99e 	bl	40b744 <_free_r>
  40d408:	2300      	movs	r3, #0
  40d40a:	6463      	str	r3, [r4, #68]	; 0x44
  40d40c:	f7fe f8d6 	bl	40b5bc <__sfp_lock_acquire>
  40d410:	2300      	movs	r3, #0
  40d412:	81a3      	strh	r3, [r4, #12]
  40d414:	f7fe f8d4 	bl	40b5c0 <__sfp_lock_release>
  40d418:	4630      	mov	r0, r6
  40d41a:	bd70      	pop	{r4, r5, r6, pc}
  40d41c:	f7fe f8c8 	bl	40b5b0 <__sinit>
  40d420:	e7cc      	b.n	40d3bc <_fclose_r+0x10>
  40d422:	6921      	ldr	r1, [r4, #16]
  40d424:	4628      	mov	r0, r5
  40d426:	f7fe f98d 	bl	40b744 <_free_r>
  40d42a:	e7dd      	b.n	40d3e8 <_fclose_r+0x3c>
  40d42c:	2000      	movs	r0, #0
  40d42e:	4770      	bx	lr

0040d430 <_fstat_r>:
  40d430:	b538      	push	{r3, r4, r5, lr}
  40d432:	460b      	mov	r3, r1
  40d434:	4c07      	ldr	r4, [pc, #28]	; (40d454 <_fstat_r+0x24>)
  40d436:	4605      	mov	r5, r0
  40d438:	4611      	mov	r1, r2
  40d43a:	4618      	mov	r0, r3
  40d43c:	2300      	movs	r3, #0
  40d43e:	6023      	str	r3, [r4, #0]
  40d440:	f7f9 f910 	bl	406664 <_fstat>
  40d444:	1c43      	adds	r3, r0, #1
  40d446:	d000      	beq.n	40d44a <_fstat_r+0x1a>
  40d448:	bd38      	pop	{r3, r4, r5, pc}
  40d44a:	6823      	ldr	r3, [r4, #0]
  40d44c:	2b00      	cmp	r3, #0
  40d44e:	d0fb      	beq.n	40d448 <_fstat_r+0x18>
  40d450:	602b      	str	r3, [r5, #0]
  40d452:	bd38      	pop	{r3, r4, r5, pc}
  40d454:	20401be0 	.word	0x20401be0

0040d458 <_isatty_r>:
  40d458:	b538      	push	{r3, r4, r5, lr}
  40d45a:	4c07      	ldr	r4, [pc, #28]	; (40d478 <_isatty_r+0x20>)
  40d45c:	2300      	movs	r3, #0
  40d45e:	4605      	mov	r5, r0
  40d460:	4608      	mov	r0, r1
  40d462:	6023      	str	r3, [r4, #0]
  40d464:	f7f9 f90e 	bl	406684 <_isatty>
  40d468:	1c43      	adds	r3, r0, #1
  40d46a:	d000      	beq.n	40d46e <_isatty_r+0x16>
  40d46c:	bd38      	pop	{r3, r4, r5, pc}
  40d46e:	6823      	ldr	r3, [r4, #0]
  40d470:	2b00      	cmp	r3, #0
  40d472:	d0fb      	beq.n	40d46c <_isatty_r+0x14>
  40d474:	602b      	str	r3, [r5, #0]
  40d476:	bd38      	pop	{r3, r4, r5, pc}
  40d478:	20401be0 	.word	0x20401be0

0040d47c <_lseek_r>:
  40d47c:	b570      	push	{r4, r5, r6, lr}
  40d47e:	460d      	mov	r5, r1
  40d480:	4c08      	ldr	r4, [pc, #32]	; (40d4a4 <_lseek_r+0x28>)
  40d482:	4611      	mov	r1, r2
  40d484:	4606      	mov	r6, r0
  40d486:	461a      	mov	r2, r3
  40d488:	4628      	mov	r0, r5
  40d48a:	2300      	movs	r3, #0
  40d48c:	6023      	str	r3, [r4, #0]
  40d48e:	f7f9 f905 	bl	40669c <_lseek>
  40d492:	1c43      	adds	r3, r0, #1
  40d494:	d000      	beq.n	40d498 <_lseek_r+0x1c>
  40d496:	bd70      	pop	{r4, r5, r6, pc}
  40d498:	6823      	ldr	r3, [r4, #0]
  40d49a:	2b00      	cmp	r3, #0
  40d49c:	d0fb      	beq.n	40d496 <_lseek_r+0x1a>
  40d49e:	6033      	str	r3, [r6, #0]
  40d4a0:	bd70      	pop	{r4, r5, r6, pc}
  40d4a2:	bf00      	nop
  40d4a4:	20401be0 	.word	0x20401be0

0040d4a8 <_read_r>:
  40d4a8:	b570      	push	{r4, r5, r6, lr}
  40d4aa:	460d      	mov	r5, r1
  40d4ac:	4c08      	ldr	r4, [pc, #32]	; (40d4d0 <_read_r+0x28>)
  40d4ae:	4611      	mov	r1, r2
  40d4b0:	4606      	mov	r6, r0
  40d4b2:	461a      	mov	r2, r3
  40d4b4:	4628      	mov	r0, r5
  40d4b6:	2300      	movs	r3, #0
  40d4b8:	6023      	str	r3, [r4, #0]
  40d4ba:	f7f7 fa01 	bl	4048c0 <_read>
  40d4be:	1c43      	adds	r3, r0, #1
  40d4c0:	d000      	beq.n	40d4c4 <_read_r+0x1c>
  40d4c2:	bd70      	pop	{r4, r5, r6, pc}
  40d4c4:	6823      	ldr	r3, [r4, #0]
  40d4c6:	2b00      	cmp	r3, #0
  40d4c8:	d0fb      	beq.n	40d4c2 <_read_r+0x1a>
  40d4ca:	6033      	str	r3, [r6, #0]
  40d4cc:	bd70      	pop	{r4, r5, r6, pc}
  40d4ce:	bf00      	nop
  40d4d0:	20401be0 	.word	0x20401be0

0040d4d4 <__aeabi_drsub>:
  40d4d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40d4d8:	e002      	b.n	40d4e0 <__adddf3>
  40d4da:	bf00      	nop

0040d4dc <__aeabi_dsub>:
  40d4dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040d4e0 <__adddf3>:
  40d4e0:	b530      	push	{r4, r5, lr}
  40d4e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40d4e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40d4ea:	ea94 0f05 	teq	r4, r5
  40d4ee:	bf08      	it	eq
  40d4f0:	ea90 0f02 	teqeq	r0, r2
  40d4f4:	bf1f      	itttt	ne
  40d4f6:	ea54 0c00 	orrsne.w	ip, r4, r0
  40d4fa:	ea55 0c02 	orrsne.w	ip, r5, r2
  40d4fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40d502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40d506:	f000 80e2 	beq.w	40d6ce <__adddf3+0x1ee>
  40d50a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40d50e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40d512:	bfb8      	it	lt
  40d514:	426d      	neglt	r5, r5
  40d516:	dd0c      	ble.n	40d532 <__adddf3+0x52>
  40d518:	442c      	add	r4, r5
  40d51a:	ea80 0202 	eor.w	r2, r0, r2
  40d51e:	ea81 0303 	eor.w	r3, r1, r3
  40d522:	ea82 0000 	eor.w	r0, r2, r0
  40d526:	ea83 0101 	eor.w	r1, r3, r1
  40d52a:	ea80 0202 	eor.w	r2, r0, r2
  40d52e:	ea81 0303 	eor.w	r3, r1, r3
  40d532:	2d36      	cmp	r5, #54	; 0x36
  40d534:	bf88      	it	hi
  40d536:	bd30      	pophi	{r4, r5, pc}
  40d538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40d53c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40d540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40d544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40d548:	d002      	beq.n	40d550 <__adddf3+0x70>
  40d54a:	4240      	negs	r0, r0
  40d54c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40d550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40d554:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40d558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40d55c:	d002      	beq.n	40d564 <__adddf3+0x84>
  40d55e:	4252      	negs	r2, r2
  40d560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40d564:	ea94 0f05 	teq	r4, r5
  40d568:	f000 80a7 	beq.w	40d6ba <__adddf3+0x1da>
  40d56c:	f1a4 0401 	sub.w	r4, r4, #1
  40d570:	f1d5 0e20 	rsbs	lr, r5, #32
  40d574:	db0d      	blt.n	40d592 <__adddf3+0xb2>
  40d576:	fa02 fc0e 	lsl.w	ip, r2, lr
  40d57a:	fa22 f205 	lsr.w	r2, r2, r5
  40d57e:	1880      	adds	r0, r0, r2
  40d580:	f141 0100 	adc.w	r1, r1, #0
  40d584:	fa03 f20e 	lsl.w	r2, r3, lr
  40d588:	1880      	adds	r0, r0, r2
  40d58a:	fa43 f305 	asr.w	r3, r3, r5
  40d58e:	4159      	adcs	r1, r3
  40d590:	e00e      	b.n	40d5b0 <__adddf3+0xd0>
  40d592:	f1a5 0520 	sub.w	r5, r5, #32
  40d596:	f10e 0e20 	add.w	lr, lr, #32
  40d59a:	2a01      	cmp	r2, #1
  40d59c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40d5a0:	bf28      	it	cs
  40d5a2:	f04c 0c02 	orrcs.w	ip, ip, #2
  40d5a6:	fa43 f305 	asr.w	r3, r3, r5
  40d5aa:	18c0      	adds	r0, r0, r3
  40d5ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40d5b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40d5b4:	d507      	bpl.n	40d5c6 <__adddf3+0xe6>
  40d5b6:	f04f 0e00 	mov.w	lr, #0
  40d5ba:	f1dc 0c00 	rsbs	ip, ip, #0
  40d5be:	eb7e 0000 	sbcs.w	r0, lr, r0
  40d5c2:	eb6e 0101 	sbc.w	r1, lr, r1
  40d5c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40d5ca:	d31b      	bcc.n	40d604 <__adddf3+0x124>
  40d5cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40d5d0:	d30c      	bcc.n	40d5ec <__adddf3+0x10c>
  40d5d2:	0849      	lsrs	r1, r1, #1
  40d5d4:	ea5f 0030 	movs.w	r0, r0, rrx
  40d5d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40d5dc:	f104 0401 	add.w	r4, r4, #1
  40d5e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40d5e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40d5e8:	f080 809a 	bcs.w	40d720 <__adddf3+0x240>
  40d5ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40d5f0:	bf08      	it	eq
  40d5f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40d5f6:	f150 0000 	adcs.w	r0, r0, #0
  40d5fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d5fe:	ea41 0105 	orr.w	r1, r1, r5
  40d602:	bd30      	pop	{r4, r5, pc}
  40d604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40d608:	4140      	adcs	r0, r0
  40d60a:	eb41 0101 	adc.w	r1, r1, r1
  40d60e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d612:	f1a4 0401 	sub.w	r4, r4, #1
  40d616:	d1e9      	bne.n	40d5ec <__adddf3+0x10c>
  40d618:	f091 0f00 	teq	r1, #0
  40d61c:	bf04      	itt	eq
  40d61e:	4601      	moveq	r1, r0
  40d620:	2000      	moveq	r0, #0
  40d622:	fab1 f381 	clz	r3, r1
  40d626:	bf08      	it	eq
  40d628:	3320      	addeq	r3, #32
  40d62a:	f1a3 030b 	sub.w	r3, r3, #11
  40d62e:	f1b3 0220 	subs.w	r2, r3, #32
  40d632:	da0c      	bge.n	40d64e <__adddf3+0x16e>
  40d634:	320c      	adds	r2, #12
  40d636:	dd08      	ble.n	40d64a <__adddf3+0x16a>
  40d638:	f102 0c14 	add.w	ip, r2, #20
  40d63c:	f1c2 020c 	rsb	r2, r2, #12
  40d640:	fa01 f00c 	lsl.w	r0, r1, ip
  40d644:	fa21 f102 	lsr.w	r1, r1, r2
  40d648:	e00c      	b.n	40d664 <__adddf3+0x184>
  40d64a:	f102 0214 	add.w	r2, r2, #20
  40d64e:	bfd8      	it	le
  40d650:	f1c2 0c20 	rsble	ip, r2, #32
  40d654:	fa01 f102 	lsl.w	r1, r1, r2
  40d658:	fa20 fc0c 	lsr.w	ip, r0, ip
  40d65c:	bfdc      	itt	le
  40d65e:	ea41 010c 	orrle.w	r1, r1, ip
  40d662:	4090      	lslle	r0, r2
  40d664:	1ae4      	subs	r4, r4, r3
  40d666:	bfa2      	ittt	ge
  40d668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40d66c:	4329      	orrge	r1, r5
  40d66e:	bd30      	popge	{r4, r5, pc}
  40d670:	ea6f 0404 	mvn.w	r4, r4
  40d674:	3c1f      	subs	r4, #31
  40d676:	da1c      	bge.n	40d6b2 <__adddf3+0x1d2>
  40d678:	340c      	adds	r4, #12
  40d67a:	dc0e      	bgt.n	40d69a <__adddf3+0x1ba>
  40d67c:	f104 0414 	add.w	r4, r4, #20
  40d680:	f1c4 0220 	rsb	r2, r4, #32
  40d684:	fa20 f004 	lsr.w	r0, r0, r4
  40d688:	fa01 f302 	lsl.w	r3, r1, r2
  40d68c:	ea40 0003 	orr.w	r0, r0, r3
  40d690:	fa21 f304 	lsr.w	r3, r1, r4
  40d694:	ea45 0103 	orr.w	r1, r5, r3
  40d698:	bd30      	pop	{r4, r5, pc}
  40d69a:	f1c4 040c 	rsb	r4, r4, #12
  40d69e:	f1c4 0220 	rsb	r2, r4, #32
  40d6a2:	fa20 f002 	lsr.w	r0, r0, r2
  40d6a6:	fa01 f304 	lsl.w	r3, r1, r4
  40d6aa:	ea40 0003 	orr.w	r0, r0, r3
  40d6ae:	4629      	mov	r1, r5
  40d6b0:	bd30      	pop	{r4, r5, pc}
  40d6b2:	fa21 f004 	lsr.w	r0, r1, r4
  40d6b6:	4629      	mov	r1, r5
  40d6b8:	bd30      	pop	{r4, r5, pc}
  40d6ba:	f094 0f00 	teq	r4, #0
  40d6be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40d6c2:	bf06      	itte	eq
  40d6c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40d6c8:	3401      	addeq	r4, #1
  40d6ca:	3d01      	subne	r5, #1
  40d6cc:	e74e      	b.n	40d56c <__adddf3+0x8c>
  40d6ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40d6d2:	bf18      	it	ne
  40d6d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40d6d8:	d029      	beq.n	40d72e <__adddf3+0x24e>
  40d6da:	ea94 0f05 	teq	r4, r5
  40d6de:	bf08      	it	eq
  40d6e0:	ea90 0f02 	teqeq	r0, r2
  40d6e4:	d005      	beq.n	40d6f2 <__adddf3+0x212>
  40d6e6:	ea54 0c00 	orrs.w	ip, r4, r0
  40d6ea:	bf04      	itt	eq
  40d6ec:	4619      	moveq	r1, r3
  40d6ee:	4610      	moveq	r0, r2
  40d6f0:	bd30      	pop	{r4, r5, pc}
  40d6f2:	ea91 0f03 	teq	r1, r3
  40d6f6:	bf1e      	ittt	ne
  40d6f8:	2100      	movne	r1, #0
  40d6fa:	2000      	movne	r0, #0
  40d6fc:	bd30      	popne	{r4, r5, pc}
  40d6fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40d702:	d105      	bne.n	40d710 <__adddf3+0x230>
  40d704:	0040      	lsls	r0, r0, #1
  40d706:	4149      	adcs	r1, r1
  40d708:	bf28      	it	cs
  40d70a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40d70e:	bd30      	pop	{r4, r5, pc}
  40d710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40d714:	bf3c      	itt	cc
  40d716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40d71a:	bd30      	popcc	{r4, r5, pc}
  40d71c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40d720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40d724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40d728:	f04f 0000 	mov.w	r0, #0
  40d72c:	bd30      	pop	{r4, r5, pc}
  40d72e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40d732:	bf1a      	itte	ne
  40d734:	4619      	movne	r1, r3
  40d736:	4610      	movne	r0, r2
  40d738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40d73c:	bf1c      	itt	ne
  40d73e:	460b      	movne	r3, r1
  40d740:	4602      	movne	r2, r0
  40d742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40d746:	bf06      	itte	eq
  40d748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40d74c:	ea91 0f03 	teqeq	r1, r3
  40d750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40d754:	bd30      	pop	{r4, r5, pc}
  40d756:	bf00      	nop

0040d758 <__aeabi_ui2d>:
  40d758:	f090 0f00 	teq	r0, #0
  40d75c:	bf04      	itt	eq
  40d75e:	2100      	moveq	r1, #0
  40d760:	4770      	bxeq	lr
  40d762:	b530      	push	{r4, r5, lr}
  40d764:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40d768:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40d76c:	f04f 0500 	mov.w	r5, #0
  40d770:	f04f 0100 	mov.w	r1, #0
  40d774:	e750      	b.n	40d618 <__adddf3+0x138>
  40d776:	bf00      	nop

0040d778 <__aeabi_i2d>:
  40d778:	f090 0f00 	teq	r0, #0
  40d77c:	bf04      	itt	eq
  40d77e:	2100      	moveq	r1, #0
  40d780:	4770      	bxeq	lr
  40d782:	b530      	push	{r4, r5, lr}
  40d784:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40d788:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40d78c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40d790:	bf48      	it	mi
  40d792:	4240      	negmi	r0, r0
  40d794:	f04f 0100 	mov.w	r1, #0
  40d798:	e73e      	b.n	40d618 <__adddf3+0x138>
  40d79a:	bf00      	nop

0040d79c <__aeabi_f2d>:
  40d79c:	0042      	lsls	r2, r0, #1
  40d79e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40d7a2:	ea4f 0131 	mov.w	r1, r1, rrx
  40d7a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40d7aa:	bf1f      	itttt	ne
  40d7ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40d7b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40d7b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40d7b8:	4770      	bxne	lr
  40d7ba:	f092 0f00 	teq	r2, #0
  40d7be:	bf14      	ite	ne
  40d7c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40d7c4:	4770      	bxeq	lr
  40d7c6:	b530      	push	{r4, r5, lr}
  40d7c8:	f44f 7460 	mov.w	r4, #896	; 0x380
  40d7cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40d7d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40d7d4:	e720      	b.n	40d618 <__adddf3+0x138>
  40d7d6:	bf00      	nop

0040d7d8 <__aeabi_ul2d>:
  40d7d8:	ea50 0201 	orrs.w	r2, r0, r1
  40d7dc:	bf08      	it	eq
  40d7de:	4770      	bxeq	lr
  40d7e0:	b530      	push	{r4, r5, lr}
  40d7e2:	f04f 0500 	mov.w	r5, #0
  40d7e6:	e00a      	b.n	40d7fe <__aeabi_l2d+0x16>

0040d7e8 <__aeabi_l2d>:
  40d7e8:	ea50 0201 	orrs.w	r2, r0, r1
  40d7ec:	bf08      	it	eq
  40d7ee:	4770      	bxeq	lr
  40d7f0:	b530      	push	{r4, r5, lr}
  40d7f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40d7f6:	d502      	bpl.n	40d7fe <__aeabi_l2d+0x16>
  40d7f8:	4240      	negs	r0, r0
  40d7fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40d7fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40d802:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40d806:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40d80a:	f43f aedc 	beq.w	40d5c6 <__adddf3+0xe6>
  40d80e:	f04f 0203 	mov.w	r2, #3
  40d812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40d816:	bf18      	it	ne
  40d818:	3203      	addne	r2, #3
  40d81a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40d81e:	bf18      	it	ne
  40d820:	3203      	addne	r2, #3
  40d822:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40d826:	f1c2 0320 	rsb	r3, r2, #32
  40d82a:	fa00 fc03 	lsl.w	ip, r0, r3
  40d82e:	fa20 f002 	lsr.w	r0, r0, r2
  40d832:	fa01 fe03 	lsl.w	lr, r1, r3
  40d836:	ea40 000e 	orr.w	r0, r0, lr
  40d83a:	fa21 f102 	lsr.w	r1, r1, r2
  40d83e:	4414      	add	r4, r2
  40d840:	e6c1      	b.n	40d5c6 <__adddf3+0xe6>
  40d842:	bf00      	nop

0040d844 <__aeabi_dmul>:
  40d844:	b570      	push	{r4, r5, r6, lr}
  40d846:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40d84a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40d84e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40d852:	bf1d      	ittte	ne
  40d854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40d858:	ea94 0f0c 	teqne	r4, ip
  40d85c:	ea95 0f0c 	teqne	r5, ip
  40d860:	f000 f8de 	bleq	40da20 <__aeabi_dmul+0x1dc>
  40d864:	442c      	add	r4, r5
  40d866:	ea81 0603 	eor.w	r6, r1, r3
  40d86a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40d86e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40d872:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40d876:	bf18      	it	ne
  40d878:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40d87c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40d884:	d038      	beq.n	40d8f8 <__aeabi_dmul+0xb4>
  40d886:	fba0 ce02 	umull	ip, lr, r0, r2
  40d88a:	f04f 0500 	mov.w	r5, #0
  40d88e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40d892:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40d896:	fbe0 e503 	umlal	lr, r5, r0, r3
  40d89a:	f04f 0600 	mov.w	r6, #0
  40d89e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40d8a2:	f09c 0f00 	teq	ip, #0
  40d8a6:	bf18      	it	ne
  40d8a8:	f04e 0e01 	orrne.w	lr, lr, #1
  40d8ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40d8b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40d8b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40d8b8:	d204      	bcs.n	40d8c4 <__aeabi_dmul+0x80>
  40d8ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40d8be:	416d      	adcs	r5, r5
  40d8c0:	eb46 0606 	adc.w	r6, r6, r6
  40d8c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40d8c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40d8cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40d8d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40d8d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40d8d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40d8dc:	bf88      	it	hi
  40d8de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40d8e2:	d81e      	bhi.n	40d922 <__aeabi_dmul+0xde>
  40d8e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40d8e8:	bf08      	it	eq
  40d8ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40d8ee:	f150 0000 	adcs.w	r0, r0, #0
  40d8f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d8f6:	bd70      	pop	{r4, r5, r6, pc}
  40d8f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40d8fc:	ea46 0101 	orr.w	r1, r6, r1
  40d900:	ea40 0002 	orr.w	r0, r0, r2
  40d904:	ea81 0103 	eor.w	r1, r1, r3
  40d908:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40d90c:	bfc2      	ittt	gt
  40d90e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40d912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40d916:	bd70      	popgt	{r4, r5, r6, pc}
  40d918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d91c:	f04f 0e00 	mov.w	lr, #0
  40d920:	3c01      	subs	r4, #1
  40d922:	f300 80ab 	bgt.w	40da7c <__aeabi_dmul+0x238>
  40d926:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40d92a:	bfde      	ittt	le
  40d92c:	2000      	movle	r0, #0
  40d92e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40d932:	bd70      	pople	{r4, r5, r6, pc}
  40d934:	f1c4 0400 	rsb	r4, r4, #0
  40d938:	3c20      	subs	r4, #32
  40d93a:	da35      	bge.n	40d9a8 <__aeabi_dmul+0x164>
  40d93c:	340c      	adds	r4, #12
  40d93e:	dc1b      	bgt.n	40d978 <__aeabi_dmul+0x134>
  40d940:	f104 0414 	add.w	r4, r4, #20
  40d944:	f1c4 0520 	rsb	r5, r4, #32
  40d948:	fa00 f305 	lsl.w	r3, r0, r5
  40d94c:	fa20 f004 	lsr.w	r0, r0, r4
  40d950:	fa01 f205 	lsl.w	r2, r1, r5
  40d954:	ea40 0002 	orr.w	r0, r0, r2
  40d958:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40d95c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40d960:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40d964:	fa21 f604 	lsr.w	r6, r1, r4
  40d968:	eb42 0106 	adc.w	r1, r2, r6
  40d96c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d970:	bf08      	it	eq
  40d972:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d976:	bd70      	pop	{r4, r5, r6, pc}
  40d978:	f1c4 040c 	rsb	r4, r4, #12
  40d97c:	f1c4 0520 	rsb	r5, r4, #32
  40d980:	fa00 f304 	lsl.w	r3, r0, r4
  40d984:	fa20 f005 	lsr.w	r0, r0, r5
  40d988:	fa01 f204 	lsl.w	r2, r1, r4
  40d98c:	ea40 0002 	orr.w	r0, r0, r2
  40d990:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d994:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40d998:	f141 0100 	adc.w	r1, r1, #0
  40d99c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d9a0:	bf08      	it	eq
  40d9a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d9a6:	bd70      	pop	{r4, r5, r6, pc}
  40d9a8:	f1c4 0520 	rsb	r5, r4, #32
  40d9ac:	fa00 f205 	lsl.w	r2, r0, r5
  40d9b0:	ea4e 0e02 	orr.w	lr, lr, r2
  40d9b4:	fa20 f304 	lsr.w	r3, r0, r4
  40d9b8:	fa01 f205 	lsl.w	r2, r1, r5
  40d9bc:	ea43 0302 	orr.w	r3, r3, r2
  40d9c0:	fa21 f004 	lsr.w	r0, r1, r4
  40d9c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d9c8:	fa21 f204 	lsr.w	r2, r1, r4
  40d9cc:	ea20 0002 	bic.w	r0, r0, r2
  40d9d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40d9d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d9d8:	bf08      	it	eq
  40d9da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d9de:	bd70      	pop	{r4, r5, r6, pc}
  40d9e0:	f094 0f00 	teq	r4, #0
  40d9e4:	d10f      	bne.n	40da06 <__aeabi_dmul+0x1c2>
  40d9e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40d9ea:	0040      	lsls	r0, r0, #1
  40d9ec:	eb41 0101 	adc.w	r1, r1, r1
  40d9f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d9f4:	bf08      	it	eq
  40d9f6:	3c01      	subeq	r4, #1
  40d9f8:	d0f7      	beq.n	40d9ea <__aeabi_dmul+0x1a6>
  40d9fa:	ea41 0106 	orr.w	r1, r1, r6
  40d9fe:	f095 0f00 	teq	r5, #0
  40da02:	bf18      	it	ne
  40da04:	4770      	bxne	lr
  40da06:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40da0a:	0052      	lsls	r2, r2, #1
  40da0c:	eb43 0303 	adc.w	r3, r3, r3
  40da10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40da14:	bf08      	it	eq
  40da16:	3d01      	subeq	r5, #1
  40da18:	d0f7      	beq.n	40da0a <__aeabi_dmul+0x1c6>
  40da1a:	ea43 0306 	orr.w	r3, r3, r6
  40da1e:	4770      	bx	lr
  40da20:	ea94 0f0c 	teq	r4, ip
  40da24:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40da28:	bf18      	it	ne
  40da2a:	ea95 0f0c 	teqne	r5, ip
  40da2e:	d00c      	beq.n	40da4a <__aeabi_dmul+0x206>
  40da30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40da34:	bf18      	it	ne
  40da36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40da3a:	d1d1      	bne.n	40d9e0 <__aeabi_dmul+0x19c>
  40da3c:	ea81 0103 	eor.w	r1, r1, r3
  40da40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40da44:	f04f 0000 	mov.w	r0, #0
  40da48:	bd70      	pop	{r4, r5, r6, pc}
  40da4a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40da4e:	bf06      	itte	eq
  40da50:	4610      	moveq	r0, r2
  40da52:	4619      	moveq	r1, r3
  40da54:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40da58:	d019      	beq.n	40da8e <__aeabi_dmul+0x24a>
  40da5a:	ea94 0f0c 	teq	r4, ip
  40da5e:	d102      	bne.n	40da66 <__aeabi_dmul+0x222>
  40da60:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40da64:	d113      	bne.n	40da8e <__aeabi_dmul+0x24a>
  40da66:	ea95 0f0c 	teq	r5, ip
  40da6a:	d105      	bne.n	40da78 <__aeabi_dmul+0x234>
  40da6c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40da70:	bf1c      	itt	ne
  40da72:	4610      	movne	r0, r2
  40da74:	4619      	movne	r1, r3
  40da76:	d10a      	bne.n	40da8e <__aeabi_dmul+0x24a>
  40da78:	ea81 0103 	eor.w	r1, r1, r3
  40da7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40da80:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40da84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40da88:	f04f 0000 	mov.w	r0, #0
  40da8c:	bd70      	pop	{r4, r5, r6, pc}
  40da8e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40da92:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40da96:	bd70      	pop	{r4, r5, r6, pc}

0040da98 <__aeabi_ddiv>:
  40da98:	b570      	push	{r4, r5, r6, lr}
  40da9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40da9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40daa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40daa6:	bf1d      	ittte	ne
  40daa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40daac:	ea94 0f0c 	teqne	r4, ip
  40dab0:	ea95 0f0c 	teqne	r5, ip
  40dab4:	f000 f8a7 	bleq	40dc06 <__aeabi_ddiv+0x16e>
  40dab8:	eba4 0405 	sub.w	r4, r4, r5
  40dabc:	ea81 0e03 	eor.w	lr, r1, r3
  40dac0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40dac4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40dac8:	f000 8088 	beq.w	40dbdc <__aeabi_ddiv+0x144>
  40dacc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40dad0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40dad4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40dad8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40dadc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40dae0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40dae4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40dae8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40daec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40daf0:	429d      	cmp	r5, r3
  40daf2:	bf08      	it	eq
  40daf4:	4296      	cmpeq	r6, r2
  40daf6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40dafa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40dafe:	d202      	bcs.n	40db06 <__aeabi_ddiv+0x6e>
  40db00:	085b      	lsrs	r3, r3, #1
  40db02:	ea4f 0232 	mov.w	r2, r2, rrx
  40db06:	1ab6      	subs	r6, r6, r2
  40db08:	eb65 0503 	sbc.w	r5, r5, r3
  40db0c:	085b      	lsrs	r3, r3, #1
  40db0e:	ea4f 0232 	mov.w	r2, r2, rrx
  40db12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40db16:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40db1a:	ebb6 0e02 	subs.w	lr, r6, r2
  40db1e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40db22:	bf22      	ittt	cs
  40db24:	1ab6      	subcs	r6, r6, r2
  40db26:	4675      	movcs	r5, lr
  40db28:	ea40 000c 	orrcs.w	r0, r0, ip
  40db2c:	085b      	lsrs	r3, r3, #1
  40db2e:	ea4f 0232 	mov.w	r2, r2, rrx
  40db32:	ebb6 0e02 	subs.w	lr, r6, r2
  40db36:	eb75 0e03 	sbcs.w	lr, r5, r3
  40db3a:	bf22      	ittt	cs
  40db3c:	1ab6      	subcs	r6, r6, r2
  40db3e:	4675      	movcs	r5, lr
  40db40:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40db44:	085b      	lsrs	r3, r3, #1
  40db46:	ea4f 0232 	mov.w	r2, r2, rrx
  40db4a:	ebb6 0e02 	subs.w	lr, r6, r2
  40db4e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40db52:	bf22      	ittt	cs
  40db54:	1ab6      	subcs	r6, r6, r2
  40db56:	4675      	movcs	r5, lr
  40db58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40db5c:	085b      	lsrs	r3, r3, #1
  40db5e:	ea4f 0232 	mov.w	r2, r2, rrx
  40db62:	ebb6 0e02 	subs.w	lr, r6, r2
  40db66:	eb75 0e03 	sbcs.w	lr, r5, r3
  40db6a:	bf22      	ittt	cs
  40db6c:	1ab6      	subcs	r6, r6, r2
  40db6e:	4675      	movcs	r5, lr
  40db70:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40db74:	ea55 0e06 	orrs.w	lr, r5, r6
  40db78:	d018      	beq.n	40dbac <__aeabi_ddiv+0x114>
  40db7a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40db7e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40db82:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40db86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40db8a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40db8e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40db92:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40db96:	d1c0      	bne.n	40db1a <__aeabi_ddiv+0x82>
  40db98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40db9c:	d10b      	bne.n	40dbb6 <__aeabi_ddiv+0x11e>
  40db9e:	ea41 0100 	orr.w	r1, r1, r0
  40dba2:	f04f 0000 	mov.w	r0, #0
  40dba6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40dbaa:	e7b6      	b.n	40db1a <__aeabi_ddiv+0x82>
  40dbac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40dbb0:	bf04      	itt	eq
  40dbb2:	4301      	orreq	r1, r0
  40dbb4:	2000      	moveq	r0, #0
  40dbb6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40dbba:	bf88      	it	hi
  40dbbc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40dbc0:	f63f aeaf 	bhi.w	40d922 <__aeabi_dmul+0xde>
  40dbc4:	ebb5 0c03 	subs.w	ip, r5, r3
  40dbc8:	bf04      	itt	eq
  40dbca:	ebb6 0c02 	subseq.w	ip, r6, r2
  40dbce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40dbd2:	f150 0000 	adcs.w	r0, r0, #0
  40dbd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40dbda:	bd70      	pop	{r4, r5, r6, pc}
  40dbdc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40dbe0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40dbe4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40dbe8:	bfc2      	ittt	gt
  40dbea:	ebd4 050c 	rsbsgt	r5, r4, ip
  40dbee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40dbf2:	bd70      	popgt	{r4, r5, r6, pc}
  40dbf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40dbf8:	f04f 0e00 	mov.w	lr, #0
  40dbfc:	3c01      	subs	r4, #1
  40dbfe:	e690      	b.n	40d922 <__aeabi_dmul+0xde>
  40dc00:	ea45 0e06 	orr.w	lr, r5, r6
  40dc04:	e68d      	b.n	40d922 <__aeabi_dmul+0xde>
  40dc06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40dc0a:	ea94 0f0c 	teq	r4, ip
  40dc0e:	bf08      	it	eq
  40dc10:	ea95 0f0c 	teqeq	r5, ip
  40dc14:	f43f af3b 	beq.w	40da8e <__aeabi_dmul+0x24a>
  40dc18:	ea94 0f0c 	teq	r4, ip
  40dc1c:	d10a      	bne.n	40dc34 <__aeabi_ddiv+0x19c>
  40dc1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40dc22:	f47f af34 	bne.w	40da8e <__aeabi_dmul+0x24a>
  40dc26:	ea95 0f0c 	teq	r5, ip
  40dc2a:	f47f af25 	bne.w	40da78 <__aeabi_dmul+0x234>
  40dc2e:	4610      	mov	r0, r2
  40dc30:	4619      	mov	r1, r3
  40dc32:	e72c      	b.n	40da8e <__aeabi_dmul+0x24a>
  40dc34:	ea95 0f0c 	teq	r5, ip
  40dc38:	d106      	bne.n	40dc48 <__aeabi_ddiv+0x1b0>
  40dc3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40dc3e:	f43f aefd 	beq.w	40da3c <__aeabi_dmul+0x1f8>
  40dc42:	4610      	mov	r0, r2
  40dc44:	4619      	mov	r1, r3
  40dc46:	e722      	b.n	40da8e <__aeabi_dmul+0x24a>
  40dc48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40dc4c:	bf18      	it	ne
  40dc4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40dc52:	f47f aec5 	bne.w	40d9e0 <__aeabi_dmul+0x19c>
  40dc56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40dc5a:	f47f af0d 	bne.w	40da78 <__aeabi_dmul+0x234>
  40dc5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40dc62:	f47f aeeb 	bne.w	40da3c <__aeabi_dmul+0x1f8>
  40dc66:	e712      	b.n	40da8e <__aeabi_dmul+0x24a>

0040dc68 <__gedf2>:
  40dc68:	f04f 3cff 	mov.w	ip, #4294967295
  40dc6c:	e006      	b.n	40dc7c <__cmpdf2+0x4>
  40dc6e:	bf00      	nop

0040dc70 <__ledf2>:
  40dc70:	f04f 0c01 	mov.w	ip, #1
  40dc74:	e002      	b.n	40dc7c <__cmpdf2+0x4>
  40dc76:	bf00      	nop

0040dc78 <__cmpdf2>:
  40dc78:	f04f 0c01 	mov.w	ip, #1
  40dc7c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40dc80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40dc84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40dc88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40dc8c:	bf18      	it	ne
  40dc8e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40dc92:	d01b      	beq.n	40dccc <__cmpdf2+0x54>
  40dc94:	b001      	add	sp, #4
  40dc96:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40dc9a:	bf0c      	ite	eq
  40dc9c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40dca0:	ea91 0f03 	teqne	r1, r3
  40dca4:	bf02      	ittt	eq
  40dca6:	ea90 0f02 	teqeq	r0, r2
  40dcaa:	2000      	moveq	r0, #0
  40dcac:	4770      	bxeq	lr
  40dcae:	f110 0f00 	cmn.w	r0, #0
  40dcb2:	ea91 0f03 	teq	r1, r3
  40dcb6:	bf58      	it	pl
  40dcb8:	4299      	cmppl	r1, r3
  40dcba:	bf08      	it	eq
  40dcbc:	4290      	cmpeq	r0, r2
  40dcbe:	bf2c      	ite	cs
  40dcc0:	17d8      	asrcs	r0, r3, #31
  40dcc2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40dcc6:	f040 0001 	orr.w	r0, r0, #1
  40dcca:	4770      	bx	lr
  40dccc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40dcd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40dcd4:	d102      	bne.n	40dcdc <__cmpdf2+0x64>
  40dcd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40dcda:	d107      	bne.n	40dcec <__cmpdf2+0x74>
  40dcdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40dce0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40dce4:	d1d6      	bne.n	40dc94 <__cmpdf2+0x1c>
  40dce6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40dcea:	d0d3      	beq.n	40dc94 <__cmpdf2+0x1c>
  40dcec:	f85d 0b04 	ldr.w	r0, [sp], #4
  40dcf0:	4770      	bx	lr
  40dcf2:	bf00      	nop

0040dcf4 <__aeabi_cdrcmple>:
  40dcf4:	4684      	mov	ip, r0
  40dcf6:	4610      	mov	r0, r2
  40dcf8:	4662      	mov	r2, ip
  40dcfa:	468c      	mov	ip, r1
  40dcfc:	4619      	mov	r1, r3
  40dcfe:	4663      	mov	r3, ip
  40dd00:	e000      	b.n	40dd04 <__aeabi_cdcmpeq>
  40dd02:	bf00      	nop

0040dd04 <__aeabi_cdcmpeq>:
  40dd04:	b501      	push	{r0, lr}
  40dd06:	f7ff ffb7 	bl	40dc78 <__cmpdf2>
  40dd0a:	2800      	cmp	r0, #0
  40dd0c:	bf48      	it	mi
  40dd0e:	f110 0f00 	cmnmi.w	r0, #0
  40dd12:	bd01      	pop	{r0, pc}

0040dd14 <__aeabi_dcmpeq>:
  40dd14:	f84d ed08 	str.w	lr, [sp, #-8]!
  40dd18:	f7ff fff4 	bl	40dd04 <__aeabi_cdcmpeq>
  40dd1c:	bf0c      	ite	eq
  40dd1e:	2001      	moveq	r0, #1
  40dd20:	2000      	movne	r0, #0
  40dd22:	f85d fb08 	ldr.w	pc, [sp], #8
  40dd26:	bf00      	nop

0040dd28 <__aeabi_dcmplt>:
  40dd28:	f84d ed08 	str.w	lr, [sp, #-8]!
  40dd2c:	f7ff ffea 	bl	40dd04 <__aeabi_cdcmpeq>
  40dd30:	bf34      	ite	cc
  40dd32:	2001      	movcc	r0, #1
  40dd34:	2000      	movcs	r0, #0
  40dd36:	f85d fb08 	ldr.w	pc, [sp], #8
  40dd3a:	bf00      	nop

0040dd3c <__aeabi_dcmple>:
  40dd3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40dd40:	f7ff ffe0 	bl	40dd04 <__aeabi_cdcmpeq>
  40dd44:	bf94      	ite	ls
  40dd46:	2001      	movls	r0, #1
  40dd48:	2000      	movhi	r0, #0
  40dd4a:	f85d fb08 	ldr.w	pc, [sp], #8
  40dd4e:	bf00      	nop

0040dd50 <__aeabi_dcmpge>:
  40dd50:	f84d ed08 	str.w	lr, [sp, #-8]!
  40dd54:	f7ff ffce 	bl	40dcf4 <__aeabi_cdrcmple>
  40dd58:	bf94      	ite	ls
  40dd5a:	2001      	movls	r0, #1
  40dd5c:	2000      	movhi	r0, #0
  40dd5e:	f85d fb08 	ldr.w	pc, [sp], #8
  40dd62:	bf00      	nop

0040dd64 <__aeabi_dcmpgt>:
  40dd64:	f84d ed08 	str.w	lr, [sp, #-8]!
  40dd68:	f7ff ffc4 	bl	40dcf4 <__aeabi_cdrcmple>
  40dd6c:	bf34      	ite	cc
  40dd6e:	2001      	movcc	r0, #1
  40dd70:	2000      	movcs	r0, #0
  40dd72:	f85d fb08 	ldr.w	pc, [sp], #8
  40dd76:	bf00      	nop

0040dd78 <__aeabi_dcmpun>:
  40dd78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40dd7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40dd80:	d102      	bne.n	40dd88 <__aeabi_dcmpun+0x10>
  40dd82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40dd86:	d10a      	bne.n	40dd9e <__aeabi_dcmpun+0x26>
  40dd88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40dd8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40dd90:	d102      	bne.n	40dd98 <__aeabi_dcmpun+0x20>
  40dd92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40dd96:	d102      	bne.n	40dd9e <__aeabi_dcmpun+0x26>
  40dd98:	f04f 0000 	mov.w	r0, #0
  40dd9c:	4770      	bx	lr
  40dd9e:	f04f 0001 	mov.w	r0, #1
  40dda2:	4770      	bx	lr

0040dda4 <__aeabi_d2iz>:
  40dda4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40dda8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40ddac:	d215      	bcs.n	40ddda <__aeabi_d2iz+0x36>
  40ddae:	d511      	bpl.n	40ddd4 <__aeabi_d2iz+0x30>
  40ddb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40ddb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40ddb8:	d912      	bls.n	40dde0 <__aeabi_d2iz+0x3c>
  40ddba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40ddbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40ddc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40ddc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40ddca:	fa23 f002 	lsr.w	r0, r3, r2
  40ddce:	bf18      	it	ne
  40ddd0:	4240      	negne	r0, r0
  40ddd2:	4770      	bx	lr
  40ddd4:	f04f 0000 	mov.w	r0, #0
  40ddd8:	4770      	bx	lr
  40ddda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40ddde:	d105      	bne.n	40ddec <__aeabi_d2iz+0x48>
  40dde0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40dde4:	bf08      	it	eq
  40dde6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40ddea:	4770      	bx	lr
  40ddec:	f04f 0000 	mov.w	r0, #0
  40ddf0:	4770      	bx	lr
  40ddf2:	bf00      	nop
  40ddf4:	50504128 	.word	0x50504128
  40ddf8:	52452829 	.word	0x52452829
  40ddfc:	255b2952 	.word	0x255b2952
  40de00:	255b5d73 	.word	0x255b5d73
  40de04:	00005d64 	.word	0x00005d64
  40de08:	61766e49 	.word	0x61766e49
  40de0c:	2064696c 	.word	0x2064696c
  40de10:	54434f49 	.word	0x54434f49
  40de14:	6f63204c 	.word	0x6f63204c
  40de18:	6e616d6d 	.word	0x6e616d6d
  40de1c:	000a2164 	.word	0x000a2164
  40de20:	0000000d 	.word	0x0000000d

0040de24 <__FUNCTION__.9672>:
  40de24:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  40de34:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40de44:	00005d64 46494828 69614629 6f74206c     d]..(HIF)Fail to
  40de54:	6b617720 74207075 63206568 0a706968      wakup the chip.
  40de64:	00000000 0000000d 66696828 49572029     ........(hif) WI
  40de74:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
  40de84:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
  40de94:	66696828 64612029 73657264 75622073     (hif) address bu
  40dea4:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
  40deb4:	70757272 20646574 6b636170 53207465     rrupted packet S
  40dec4:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
  40ded4:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
  40dee4:	3e583230 0000000a 66696828 6e692029     02X>....(hif) in
  40def4:	696c6176 72672064 2070756f 000a4449     valid group ID..
  40df04:	66696828 6f682029 61207473 64207070     (hif) host app d
  40df14:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
  40df24:	00000a65 66696828 72572029 20676e6f     e...(hif) Wrong 
  40df34:	657a6953 0000000a 66696828 61462029     Size....(hif) Fa
  40df44:	2065736c 65746e69 70757272 6c252074     lse interrupt %l
  40df54:	00000078 66696828 61462029 74206c69     x...(hif) Fail t
  40df64:	6552206f 69206461 7265746e 74707572     o Read interrupt
  40df74:	67657220 0000000a 66696828 41462029      reg....(hif) FA
  40df84:	74204c49 6177206f 7075656b 65687420     IL to wakeup the
  40df94:	69686320 00000a70 46494828 61462029      chip...(HIF) Fa
  40dfa4:	74206c69 6168206f 656c646e 746e6920     il to handle int
  40dfb4:	75727265 25207470 72742064 67412079     errupt %d try Ag
  40dfc4:	2e6e6961 00000a2e 66696820 6365725f     ain..... hif_rec
  40dfd4:	65766965 6e49203a 696c6176 72612064     eive: Invalid ar
  40dfe4:	656d7567 000a746e 20505041 75716552     gument..APP Requ
  40dff4:	65747365 69532064 6920657a 616c2073     ested Size is la
  40e004:	72656772 61687420 6874206e 65722065     rger than the re
  40e014:	65766963 75622064 72656666 7a697320     cived buffer siz
  40e024:	253c2065 253c3e64 000a3e64 20505041     e <%d><%d>..APP 
  40e034:	75716552 65747365 64412064 73657264     Requested Addres
  40e044:	65622073 646e6f79 65687420 63657220     s beyond the rec
  40e054:	64657669 66756220 20726566 72646461     ived buffer addr
  40e064:	20737365 20646e61 676e656c 000a6874     ess and length..
  40e074:	20705247 6425203f 0000000a              GRp ? %d....

0040e080 <__FUNCTION__.8774>:
  40e080:	5f666968 646e6573 00000000              hif_send....

0040e08c <__FUNCTION__.8784>:
  40e08c:	5f666968 00727369                       hif_isr.

0040e094 <__FUNCTION__.8790>:
  40e094:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0040e0a4 <__FUNCTION__.8805>:
  40e0a4:	5f666968 65636572 00657669              hif_receive.

0040e0b0 <__FUNCTION__.8820>:
  40e0b0:	5f666968 69676572 72657473 0062635f     hif_register_cb.
  40e0c0:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
  40e0d0:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
  40e0e0:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
  40e0f0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40e100:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
  40e110:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
  40e120:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
  40e130:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
  40e140:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
  40e150:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
  40e160:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
  40e170:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
  40e180:	455a4953 0000000a 41564e49 2044494c     SIZE....INVALID 
  40e190:	20504557 0a59454b 00000000 41564e49     WEP KEY.....INVA
  40e1a0:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
  40e1b0:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
  40e1c0:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
  40e1d0:	73746f6c 00000a21 41564e49 2044494c     lots!...INVALID 
  40e1e0:	6e616373 6f6c7320 69742074 0a21656d     scan slot time!.
  40e1f0:	00000000 41564e49 2044494c 6f206f4e     ....INVALID No o
  40e200:	72702066 2065626f 75716572 73747365     f probe requests
  40e210:	72657020 61637320 6c73206e 000a746f      per scan slot..
  40e220:	41564e49 2044494c 49535352 72687420     INVALID RSSI thr
  40e230:	6f687365 2520646c 000a2064 6d726946     eshold %d ..Firm
  40e240:	65726177 72657620 3a202020 2e752520     ware ver   : %u.
  40e250:	252e7525 00000a75 206e694d 76697264     %u.%u...Min driv
  40e260:	76207265 3a207265 2e752520 252e7525     er ver : %u.%u.%
  40e270:	00000a75 72727543 69726420 20726576     u...Curr driver 
  40e280:	3a726576 2e752520 252e7525 00000a75     ver: %u.%u.%u...
  40e290:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
  40e2a0:	65562065 6f697372 00000a6e 2079654b     e Version...Key 
  40e2b0:	6e207369 7620746f 64696c61 0000000a     is not valid....
  40e2c0:	61766e49 2064696c 0a79654b 00000000     Invalid Key.....
  40e2d0:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
  40e2e0:	0000000a 49204843 4c41564e 000a4449     ....CH INVALID..
  40e2f0:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
  40e300:	65646e69 64252078 0000000a 61766e49     index %d....Inva
  40e310:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
  40e320:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
  40e330:	53502074 656b204b 656c2079 6874676e     t PSK key length
  40e340:	0000000a 65646e75 656e6966 65732064     ....undefined se
  40e350:	79742063 000a6570 5f53505f 56524553     c type.._PS_SERV
  40e360:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
  40e370:	000a6465 7473694c 63206e65 6e6e6168     ed..Listen chann
  40e380:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
  40e390:	2c312065 6f203620 31312072 0000000a     e 1, 6 or 11....
  40e3a0:	45574f50 41532052 25204556 00000a64     POWER SAVE %d...
  40e3b0:	41564e49 2044494c 414d4f44 4e204e49     INVALID DOMAIN N
  40e3c0:	0a454d41 00000000 474e5250 66754220     AME.....PRNG Buf
  40e3d0:	20726566 65637865 64656465 78616d20     fer exceeded max
  40e3e0:	6d756d69 7a697320 64252065 20726f20     imum size %d or 
  40e3f0:	4c4c554e 66754220 0a726566 00000000     NULL Buffer.....

0040e400 <__FUNCTION__.8747>:
  40e400:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0040e40c <__FUNCTION__.8771>:
  40e40c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0040e41c <__FUNCTION__.8799>:
  40e41c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  40e42c:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
  40e43c:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
  40e44c:	31282072 57202e29 20656b61 66207075     r (1). Wake up f
  40e45c:	656c6961 00000a64 0000000d 20737542     ailed.......Bus 
  40e46c:	6f727265 32282072 57202e29 20656b61     error (2). Wake 
  40e47c:	66207075 656c6961 00000a64 636f6c63     up failed...cloc
  40e48c:	7320736b 6c6c6974 46464f20 6157202e     ks still OFF. Wa
  40e49c:	7520656b 61662070 64656c69 0000000a     ke up failed....
  40e4ac:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40e4bc:	6572206c 72206461 30206765 31313178     l read reg 0x111
  40e4cc:	2e2e2038 00000a2e 3a676572 2f207825     8 ......reg:%x /
  40e4dc:	20782520 0000000a 6c696166 74206465      %x ....failed t
  40e4ec:	6564206f 696e692d 6c616974 0a657a69     o de-initialize.
  40e4fc:	00000000 6f727245 68772072 20656c69     ....Error while 
  40e50c:	74697277 20676e69 0a676572 00000000     writing reg.....
  40e51c:	6f727245 68772072 20656c69 64616572     Error while read
  40e52c:	20676e69 0a676572 00000000 6c75705b     ing reg.....[pul
  40e53c:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
  40e54c:	6f742064 61657220 00000a64 6c75705b     d to read...[pul
  40e55c:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
  40e56c:	6f742064 69727720 000a6574              d to write..

0040e578 <__FUNCTION__.8584>:
  40e578:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0040e588 <__FUNCTION__.8678>:
  40e588:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
  40e598:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
  40e5a8:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40e5b8:	6e69206c 62207469 000a7375 0000000d     l init bus......
  40e5c8:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
  40e5d8:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
  40e5e8:	74206465 6e65206f 656c6261 746e6920     ed to enable int
  40e5f8:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
  40e608:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
  40e618:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
  40e628:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
  40e638:	69642068 6c626173 61662065 000a6c69     h disable fail..
  40e648:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
  40e658:	696e6920 75622074 00000a73               init bus...

0040e664 <__FUNCTION__.8665>:
  40e664:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040e670 <__FUNCTION__.8672>:
  40e670:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0040e680 <crc7_syndrome_table>:
  40e680:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  40e690:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  40e6a0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  40e6b0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  40e6c0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  40e6d0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  40e6e0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  40e6f0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  40e700:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  40e710:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  40e720:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  40e730:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  40e740:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  40e750:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  40e760:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  40e770:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
  40e780:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40e790:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
  40e7a0:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
  40e7b0:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40e7c0:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40e7d0:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
  40e7e0:	72206573 2c646165 73756220 72726520     se read, bus err
  40e7f0:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
  40e800:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
  40e810:	6f707365 2065736e 64616572 7562202c     esponse read, bu
  40e820:	72652073 2e726f72 000a2e2e 696d6e5b     s error.....[nmi
  40e830:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40e840:	72206174 6f707365 2065736e 64616572     ta response read
  40e850:	282e2e2e 78323025 00000a29 696d6e5b     ...(%02x)...[nmi
  40e860:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40e870:	62206174 6b636f6c 61657220 62202c64     ta block read, b
  40e880:	65207375 726f7272 0a2e2e2e 00000000     us error........
  40e890:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e8a0:	61642064 62206174 6b636f6c 63726320     d data block crc
  40e8b0:	61657220 62202c64 65207375 726f7272      read, bus error
  40e8c0:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  40e8d0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40e8e0:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
  40e8f0:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40e900:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e910:	61642064 62206174 6b636f6c 69727720     d data block wri
  40e920:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
  40e930:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40e940:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40e950:	63726320 69727720 202c6574 20737562      crc write, bus 
  40e960:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40e970:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40e980:	77202c64 65746972 67657220 30252820     d, write reg (%0
  40e990:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
  40e9a0:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
  40e9b0:	6e6f7073 202c6573 74697277 65722065     sponse, write re
  40e9c0:	25282067 29783830 0a2e2e2e 00000000     g (%08x)........
  40e9d0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e9e0:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
  40e9f0:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
  40ea00:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
  40ea10:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
  40ea20:	69727720 62206574 6b636f6c 30252820      write block (%0
  40ea30:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
  40ea40:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40ea50:	61746164 69727720 2e2e6574 00000a2e     data write......
  40ea60:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40ea70:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  40ea80:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  40ea90:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40eaa0:	65722064 6e6f7073 202c6573 64616572     d response, read
  40eab0:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  40eac0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40ead0:	61642064 72206174 2e646165 000a2e2e     d data read.....
  40eae0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40eaf0:	6d632064 72202c64 20646165 636f6c62     d cmd, read bloc
  40eb00:	2528206b 29783830 0a2e2e2e 00000000     k (%08x)........
  40eb10:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40eb20:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
  40eb30:	64616572 6f6c6220 28206b63 78383025     read block (%08x
  40eb40:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
  40eb50:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40eb60:	61746164 61657220 2e2e2e64 0000000a     data read.......
  40eb70:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40eb80:	6e692064 6e726574 72206c61 20646165     d internal read 
  40eb90:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  40eba0:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  40ebb0:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  40ebc0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40ebd0:	6e692064 6e726574 72206c61 20646165     d internal read 
  40ebe0:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  40ebf0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40ec00:	6e692064 6e726574 77206c61 65746972     d internal write
  40ec10:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  40ec20:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40ec30:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  40ec40:	64692070 0a2e2e2e 00000000              p id........

0040ec4c <__FUNCTION__.8049>:
  40ec4c:	5f697073 00646d63                       spi_cmd.

0040ec54 <__FUNCTION__.8057>:
  40ec54:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040ec60 <__FUNCTION__.8073>:
  40ec60:	5f697073 61746164 6165725f 00000064     spi_data_read...

0040ec70 <__FUNCTION__.8088>:
  40ec70:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040ec80 <__FUNCTION__.8098>:
  40ec80:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040ec90 <__FUNCTION__.8106>:
  40ec90:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0040eca0 <__FUNCTION__.8115>:
  40eca0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0040ecb0 <__FUNCTION__.8123>:
  40ecb0:	735f6d6e 725f6970 00646165              nm_spi_read.

0040ecbc <__FUNCTION__.8140>:
  40ecbc:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
  40eccc:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
  40ecdc:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
  40ecec:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40ecfc:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
  40ed0c:	2078614d 676e654c 000a6874 6e6b6e55     Max Length..Unkn
  40ed1c:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
  40ed2c:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
  40ed3c:	204c5353 6b636f53 000a7465 0001c200     SSL Socket......
  40ed4c:	000000c0 00000800 00000000 54544820     ............ HTT
  40ed5c:	2e312f50 200a0d31 65636341 203a7470     P/1.1.. Accept: 
  40ed6c:	0d2a2f2a 000a0d0a 20544547 64656c2f     */*.....GET /led
  40ed7c:	6174735f 00737574 73257325 00000000     _status.%s%s....
  40ed8c:	6e6f7250 70206f74 20617261 69766e65     Pronto para envi
  40ed9c:	203a7261 0a206425 00000000 202c696f     ar: %d .....oi, 
  40edac:	20756f73 6168206f 656c646e 000a2072     sou o handler ..
  40edbc:	00000030 20544547 6e74622f 696c635f     0...GET /btn_cli
  40edcc:	64656b63 3d74623f 00000000 73257325     cked?bt=....%s%s
  40eddc:	00007325 5f6e7472 3a727265 20642520     %s..rtn_err: %d 
  40edec:	0000000a 00000031 00000032 00000033     ....1...2...3...
  40edfc:	202c696f 20756f73 6e69206f 0a207469     oi, sou o init .
  40ee0c:	00000000 6b636f73 635f7465 63203a62     ....socket_cb: c
  40ee1c:	656e6e6f 65207463 726f7272 000a0d21     onnect error!...
  40ee2c:	00007325 6b636f73 635f7465 72203a62     %s..socket_cb: r
  40ee3c:	20766365 6f727265 0a0d2172 00000000     ecv error!......
  40ee4c:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
  40ee5c:	45525f49 435f5053 535f4e4f 45544154     I_RESP_CON_STATE
  40ee6c:	4148435f 4445474e 4f43203a 43454e4e     _CHANGED: CONNEC
  40ee7c:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
  40ee8c:	4d324d20 4649575f 45525f49 435f5053      M2M_WIFI_RESP_C
  40ee9c:	535f4e4f 45544154 4148435f 4445474e     ON_STATE_CHANGED
  40eeac:	4944203a 4e4f4353 5443454e 0a0d4445     : DISCONNECTED..
  40eebc:	00000000 34333231 38373635 00000000     ....12345678....
  40eecc:	4e45504f 00000000 69666977 3a62635f     OPEN....wifi_cb:
  40eedc:	4d324d20 4649575f 45525f49 48445f51      M2M_WIFI_REQ_DH
  40eeec:	435f5043 3a464e4f 20504920 25207369     CP_CONF: IP is %
  40eefc:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
  40ef0c:	57202d2d 31434e49 20303035 20504354     -- WINC1500 TCP 
  40ef1c:	76726573 65207265 706d6178 2d20656c     server example -
  40ef2c:	2d0a0d2d 4153202d 3037454d 4c50582d     -..-- SAME70-XPL
  40ef3c:	2d2d2044 2d2d0a0d 6d6f4320 656c6970     D --..-- Compile
  40ef4c:	4d203a64 32207961 30322034 31203731     d: May 24 2017 1
  40ef5c:	38343a37 2030303a 0a0d2d2d 00000000     7:48:00 --......
  40ef6c:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
  40ef7c:	2074696e 6c6c6163 72726520 2821726f     nit call error!(
  40ef8c:	0d296425 0000000a 6e69616d 6166203a     %d).....main: fa
  40ef9c:	64656c69 206f7420 61657263 54206574     iled to create T
  40efac:	63205043 6e65696c 6f732074 74656b63     CP client socket
  40efbc:	72726520 0d21726f 0000000a 6e69616d      error!.....main
  40efcc:	6166203a 64656c69 206f7420 6e6e6f63     : failed to conn
  40efdc:	20746365 6b636f73 65207465 726f7272     ect socket error
  40efec:	000a0d21 656e6f43 64617463 2021206f     !...Conectado ! 
  40effc:	0000000a 00000043                       ....C...

0040f004 <_global_impure_ptr>:
  40f004:	20400020                                 .@ 

0040f008 <zeroes.7035>:
  40f008:	30303030 30303030 30303030 30303030     0000000000000000
  40f018:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40f028:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40f038:	00000000 33323130 37363534 62613938     ....0123456789ab
  40f048:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  40f058:	00000030                                0...

0040f05c <blanks.7034>:
  40f05c:	20202020 20202020 20202020 20202020                     

0040f06c <zeroes.6993>:
  40f06c:	30303030 30303030 30303030 30303030     0000000000000000

0040f07c <blanks.6992>:
  40f07c:	20202020 20202020 20202020 20202020                     
  40f08c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40f09c:	49534f50 00000058 0000002e              POSIX.......

0040f0a8 <__mprec_tens>:
  40f0a8:	00000000 3ff00000 00000000 40240000     .......?......$@
  40f0b8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40f0c8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40f0d8:	00000000 412e8480 00000000 416312d0     .......A......cA
  40f0e8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40f0f8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40f108:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40f118:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40f128:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40f138:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40f148:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40f158:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40f168:	79d99db4 44ea7843                       ...yCx.D

0040f170 <__mprec_bigtens>:
  40f170:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40f180:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40f190:	7f73bf3c 75154fdd                       <.s..O.u

0040f198 <p05.5373>:
  40f198:	00000005 00000019 0000007d              ........}...

0040f1a4 <_init>:
  40f1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f1a6:	bf00      	nop
  40f1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f1aa:	bc08      	pop	{r3}
  40f1ac:	469e      	mov	lr, r3
  40f1ae:	4770      	bx	lr

0040f1b0 <__init_array_start>:
  40f1b0:	0040a3a1 	.word	0x0040a3a1

0040f1b4 <__frame_dummy_init_array_entry>:
  40f1b4:	00400165                                e.@.

0040f1b8 <_fini>:
  40f1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f1ba:	bf00      	nop
  40f1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f1be:	bc08      	pop	{r3}
  40f1c0:	469e      	mov	lr, r3
  40f1c2:	4770      	bx	lr

0040f1c4 <__fini_array_start>:
  40f1c4:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <egstrNmBusCapabilities>:
2040000c:	1000 0000                                   ....

20400010 <clk_status_reg_adr>:
20400010:	000f 0000                                   ....

20400014 <g_interrupt_enabled>:
20400014:	0001 0000                                   ....

20400018 <SystemCoreClock>:
20400018:	0900 003d                                   ..=.

2040001c <tcp_client_socket>:
2040001c:	00ff 0000                                   ....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
20400054:	f000 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <_impure_ptr>:
20400448:	0020 2040                                    .@ 

2040044c <lconv>:
2040044c:	f0a4 0040 f038 0040 f038 0040 f038 0040     ..@.8.@.8.@.8.@.
2040045c:	f038 0040 f038 0040 f038 0040 f038 0040     8.@.8.@.8.@.8.@.
2040046c:	f038 0040 f038 0040 ffff ffff ffff ffff     8.@.8.@.........
2040047c:	ffff ffff ffff 0000                         ........

20400484 <lc_ctype_charset>:
20400484:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

204004a4 <__mb_cur_max>:
204004a4:	0001 0000                                   ....

204004a8 <__malloc_av_>:
	...
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 

204008b0 <__malloc_trim_threshold>:
204008b0:	0000 0002                                   ....

204008b4 <__malloc_sbrk_base>:
204008b4:	ffff ffff                                   ....

204008b8 <__wctomb>:
204008b8:	d23d 0040                                   =.@.
